[[{"title":"Angularの環境別変数の管理について","body":"Angular7で、環境別(本番、ステージング、テスト、開発など)で変数を変えたいことはありませんか？\n例えば、API Server(ex.GraphQL)のURLが環境ごとに異なることは普通にありますよね？\nそんな時の、設定方法を説明します。\n\n# 前提\n\n* Angular7を使います。\n* 環境は、本番、ステージング、テスト、開発の4つを準備します。\n* API ServerにGraphQLを使い、本番、ステージング、テスト、開発でURLが違います。\n\n# API Serverをenvironmentファイルに定義\nAngular7でプロジェクトを作成すると、ルート配下に「environments」と言うフォルダが作成されます。\n標準では、以下の2つのファイルが存在します。\n\n* environment.ts　･･･ 開発用\n* environment.prod.ts ･･･ 本番用\n\nこの2つに、API ServerのUrlを定義しましょう。\n\n```typescript:environment.ts\n// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:3000/graphql'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n```\n\n```typescript:environment.prod.ts\nexport const environment = {\n  production: true,\n  apiUrl: 'http://production:3000/graphql'\n};\n```\n\n# ステージングとテストのenvironmentファイルの準備\n本番用のenvironment.prod.tsをコピーして、以下の2つのファイルを作成します。\n\n* environment.stg.ts ･･･ ステージング用\n* environment.tst.ts ･･･ テスト用\n\n次に、それぞれの環境にあったapiUrlを設定していきます。\n\n```typescript:environment.stg.ts\nexport const environment = {\n  production: true,\n  apiUrl: 'http://staging:3000/graphql'\n};\n```\n\n```typescript:environment.tst.ts\nexport const environment = {\n  production: true,\n  apiUrl: 'http://test:3000/graphql'\n};\n```\n\n# 環境ごとに使用するenvironmentファイルの定義\nangular.jsonの、projects、architect、configurationsで、環境ごとにどのenvironmentファイルを使うのかを定義します。\nステージング、テストの2種類を追加します。productionをコピーして、stagingとtestを作って、environmentファイル定義のところを変更してください。\n\n```json:angular.json\n\"staging\": {\n  \"fileReplacements\": [\n    {\n      \"replace\": \"src/environments/environment.ts\",\n      \"with\": \"src/environments/environment.stg.ts\"\n    }\n  ],\n  \"optimization\": true,\n  \"outputHashing\": \"all\",\n  \"sourceMap\": false,\n  \"extractCss\": true,\n  \"namedChunks\": false,\n  \"aot\": true,\n  \"extractLicenses\": true,\n  \"vendorChunk\": false,\n  \"buildOptimizer\": true,\n  \"budgets\": [\n    {\n      \"type\": \"initial\",\n      \"maximumWarning\": \"2mb\",\n      \"maximumError\": \"5mb\"\n    }\n  ]\n},\n\"test\": {\n  \"fileReplacements\": [\n    {\n      \"replace\": \"src/environments/environment.ts\",\n      \"with\": \"src/environments/environment.tst.ts\"\n    }\n  ],\n  \"optimization\": true,\n  \"outputHashing\": \"all\",\n  \"sourceMap\": false,\n  \"extractCss\": true,\n  \"namedChunks\": false,\n  \"aot\": true,\n  \"extractLicenses\": true,\n  \"vendorChunk\": false,\n  \"buildOptimizer\": true,\n  \"budgets\": [\n    {\n      \"type\": \"initial\",\n      \"maximumWarning\": \"2mb\",\n      \"maximumError\": \"5mb\"\n    }\n  ]\n}\n```\n\n# ビルドの定義\n次にangular.jsonで、ビルドの定義をします。\nserveのところに、ステージングとテストの定義を追加します。\n\n```json:angular.json\n\"serve\": {\n  \"builder\": \"@angular-devkit/build-angular:dev-server\",\n  \"options\": {\n    \"browserTarget\": \"rarareserve-ui:build\"\n  },\n  \"configurations\": {\n    \"production\": {\n      \"browserTarget\": \"rarareserve-ui:build:production\"\n    },\n    \"staging\": {\n      \"browserTarget\": \"rarareserve-ui:build:staging\"\n    },\n    \"test\": {\n      \"browserTarget\": \"rarareserve-ui:build:test\"\n    }\n  }\n},\n```\n\nこれで、以下のようにビルドすると環境に応じたenvironmentファイルが読み込まれます。\n\n* ng build ･･･ 開発用\n* ng build -c test ･･･ テスト環境用\n* ng build -c staging ･･･ ステージング環境用\n* ng build --prod ･･･ 本番環境用\n\n# e2e環境の定義\nもし、e2eテストも実施していると言うことであれば、その定義も追加します。\n\n```json:angular.json\n\"rarareserve-ui-e2e\": {\n  \"root\": \"e2e/\",\n  \"projectType\": \"application\",\n  \"prefix\": \"\",\n  \"architect\": {\n    \"e2e\": {\n      \"builder\": \"@angular-devkit/build-angular:protractor\",\n      \"options\": {\n        \"protractorConfig\": \"e2e/protractor.conf.js\",\n        \"devServerTarget\": \"rarareserve-ui:serve\"\n      },\n      \"configurations\": {\n        \"production\": {\n          \"devServerTarget\": \"rarareserve-ui:serve:production\"\n        },\n        \"staging\": {\n          \"devServerTarget\": \"rarareserve-ui:serve:staging\"\n        },\n        \"test\": {\n          \"devServerTarget\": \"rarareserve-ui:serve:test\"\n        }\n      }\n    },\n    \"lint\": {\n      \"builder\": \"@angular-devkit/build-angular:tslint\",\n      \"options\": {\n        \"tsConfig\": \"e2e/tsconfig.e2e.json\",\n        \"exclude\": [\n          \"**/node_modules/**\"\n        ]\n      }\n    }\n  }\n}\n```\n\n# environment定義の使い方\nenvironmentファイルに定義したものを使うには、以下のようにします。\n\n```html:html\n{{apiUrl}}\n```\n\n```typescript:source\nimport { environment } from './../environments/environment';\n\nenvironment.apiUrl;\n```\n","created_at":"2019-04-14T15:24:17+09:00","id":"afe9d3c0772a68e59fc1","tags":[{"name":"Angular7","versions":[]}],"url":"https://qiita.com/kmatae/items/afe9d3c0772a68e59fc1"},{"title":"Formula 1 Stream reddit","body":"Formula 1 Stream\n\n","created_at":"2019-04-14T15:23:28+09:00","id":"97c6033b878379a814be","tags":[{"name":"1","versions":[]},{"name":"Stream","versions":[]},{"name":"formula","versions":[]},{"name":"reddit","versions":[]}],"url":"https://qiita.com/shadhinrejadf/items/97c6033b878379a814be"},{"title":"HomebrewをAWSCloud9に導入する手順","body":"# HomebrewをAWSCloud9に導入する手順\n\nネット上で記事を探していると、下記のような記事がおそらく一番に見つかると思う。\n※2019年4月14日時点※\n\nしかしながら、現時点ではこの方法はすんなりいかない。\nコマンドに打ち込むと、最新のものを導入する手順をターミナルで教えてはくれるが、\n備忘録のため、そしてこれからプログラミングを始める人のためにこの記事を残す。\n\n## 簡単に言えばこのURLを参照してください\n\nタイトルにもある通り、簡単に言えば、下記のようなURLに行けば良い。\nが、いちいちURLにまた飛ぶのはめんどうなので、この記事にも記載する。\n\n\n\n","created_at":"2019-04-14T15:18:59+09:00","id":"974e4775eb1d21aa7889","tags":[{"name":"AWS","versions":[]},{"name":"homebrew","versions":[]},{"name":"環境構築","versions":[]},{"name":"cloud9","versions":[]}],"url":"https://qiita.com/yamori/items/974e4775eb1d21aa7889"},{"title":"MSYS2からAnacondaのcondaコマンドを使用できるようにする(バージョン4.5.12)","body":"<font color=\"red\">condaのバージョンが4.6.11以降だとうまくいきません！</font>\n\n投稿動機は問題解決のためにいったんアウトプットしようと思ったためです。[^1]\n\n早速本題。まず`.bash_profile`に以下を記述してAnacondaのPATHを通し、`conda activate`コマンドを使用してみます。\n(`(Anacondaまでのパス)`は各自のパスに置き換えて考えてください。)\n\n```bash:.bash_profile\nif [ -d \"(Anacondaまでのパス)/Scripts\" ] ; then\n  PATH=\"${PATH}:(Anacondaまでのパス)/Scripts\"\nfi\n```\n\n```bash:bash\n$ conda activate\n```\n\nするとバージョンによって違いはあるのかもしれませんが、以下に示す親切なエラー文が出てきます。\n\n```:バージョンが4.5.12の場合\nCommandNotFoundError: Your shell has not been properly configured to use 'conda activate'.\nIf your shell is Bash or a Bourne variant, enable conda for the current user with\n\n    $ echo \". (Anacondaまでのパス)/etc/profile.d/conda.sh\" >> ~/.bashrc\n\nor, for all users, enable conda with\n\n    $ sudo ln -s (Anacondaまでのパス)/etc/profile.d/conda.sh /etc/profile.d/conda.sh\n\nThe options above will permanently enable the 'conda' command, but they do NOT\nput conda's base (root) environment on PATH.  To do so, run\n\n    $ conda activate\n\nin your terminal, or to put the base environment on PATH permanently, run\n\n    $ echo \"conda activate\" >> ~/.bashrc\n\nPrevious to conda 4.4, the recommended way to activate conda was to modify PATH in\nyour ~/.bashrc file.  You should manually remove the line that looks like\n\n    export PATH=\"(Anacondaまでのパス)/bin:$PATH\"\n\n^^^ The above line should NO LONGER be in your ~/.bashrc file! ^^^\n```\n\nこのエラー文から以下のことがわかります。\n\n- `. (Anacondaまでのパス)/etc/profile.d/conda.sh`を実行すると現在のユーザーで`conda`コマンドが使えるようになります\n- `conda activate`で`base`環境を立ち上げましょう\n- バージョンが`4.4`以前ではパスを通すようにしていましたが現在は非推奨です\n\n早速`.bash_profile`を書き換えパスを通すのをやめて`conda.sh`が実行されるように書き換えましょう。\n\n```bash:.bash_profile\n# 以下消す\n# if [ -d \"(Anacondaまでのパス)/Scripts\" ] ; then\n#   PATH=\"${PATH}:(Anacondaまでのパス)/Scripts\"\n# fi\n# ここまで消す\n\n. (Anacondaまでのパス)/etc/profile.d/conda.sh\nconda activate base\n```\n\nシェルを立ち上げなおします。\n\n```bash\n(base)\n$\n```\n\nこんな感じになれば`base`環境を立ち上げることに成功しています。これで`python`コマンドも使用することができるようになりました。\n\n# `4.6.11`以降で起きている問題\n\n`4.6.11`以降、MSYS2では\n\n```bash\n$ conda activate\nCommandNotFoundError: No command 'conda conda'.\n```\n\nというエラーが発生しコマンドが使用できないです。\n\nAnaconda Promptは使えますがとても不便です...\n\n[リリースノート](https://www.anaconda.com/anaconda-2019-03-release/)によるとPowershellで使用できるようにしたそうなので確実にそれが問題な気がしますけどね...ちなみに`$ powersell conda activate`とか打っても同様のエラーが出ます。\n\n何かわかり次第追記していこうと思っています。\n\n[^1]: [teratailで質問してみた](https://teratail.com/questions/183330)のですがまだ解決できてないです...うーん\n","created_at":"2019-04-14T15:16:18+09:00","id":"e00ca1101439b1f27188","tags":[{"name":"Python3","versions":[]},{"name":"Anaconda","versions":[]}],"url":"https://qiita.com/namn1125/items/e00ca1101439b1f27188"},{"title":"Angular入門 未経験から1ヶ月でサービス作れるようにする その12. Firebaseを使ったAPI通信3","body":"## 記事\nAngularのHTTP通信のやり方を解説していきます。\nFirebaseのAPIを使ってデータの更新、削除をやってみましょう。\n\n## 前回の振り返り\n[前回](https://qiita.com/seteen/items/6c09a3e342201c6354af)は、AngularでFirebaseを用いてデータを差k末井する方法を学びました。\n本記事は、Firebase周りの記事の 3記事目となりますので、過去記事の内容を頭に入れておいてください。\nわからなくなったら、その1から再度やり直してみましょう。\n\n## この記事のソースコード\n[https://github.com/seteen/AngularGuides/tree/入門その12](https://github.com/yazumoto/AngularGuides/tree/%E5%85%A5%E9%96%80%E3%81%9D%E3%81%AE12)\n\n\n## Firebaseを使うようにしたことによっておかしくなっている変更部分を修正する\n\n### 画面表示の修正\n\nFirebaseを利用する前は、コード上に記載した `Product` のデータを利用して画面表示を行っていました。\nその際には ID を 1から振っていましたが、 Firebase を利用することで、それが文字列の key に変更されました。\nまずはその部分に対応します。\n\n```src/app/product/product-list/product-list.component.html\n... 略\n        <div class=\"product-line header\">\n          <div class=\"product-id\">KEY</div> // <= KEY に変更\n          <div class=\"product-name\">名前</div>\n          <div class=\"product-price\">価格</div>\n        </div>\n        <div class=\"product-line\" *ngFor=\"let product of products\" (mouseenter)=\"hovered(product)\" (mouseleave)=\"unhovered(product)\">\n          <div class=\"product-id\">{{ product.key }} </div> // <= product.key に変更 \n          <div class=\"product-name\">{{ product.name }}</div>\n          <div class=\"product-price\">\n            <span *ngIf=\"!product.hovered; else Unhovered\">{{ product.price }}</span>\n            <ng-template #Unhovered><span class=\"button white\" [routerLink]=\"[product.key]\">詳細</span></ng-template> // <= routerLink を product.key に変更\n          </div>\n        </div>\n... 略\n```\n\n上記に伴って、少しCSSを変更しました。\n\n![001.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/67424/cf5d1df8-ebce-9357-3eae-2d913ea89d8e.png)\n\n上記は商品一覧画面ですが、商品詳細画面、商品編集画面も同じように修正しています。\n\n#### ここまでのコミット\n\nhttps://github.com/yazumoto/AngularGuides/commit/16bc8396bc2c4adf8eacaa31cf341f2c1d9241a4\n\n### データ取得部分の修正\n\n現状では、商品詳細画面、商品編集画面では ID を基にコード上に定義したデータを検索するようにしているため、Firebaseを利用するように修正します。\n\n\n```src/app/shared/services/product.service.ts\n... 略\n  get(key: string): Observable<Product> { // <= get(id: number) を修正\n    return this.http.get(`${this.BASE_URL}/users/${this.UID}/products/${key}.json`, { params: { auth: this.TOKEN } }).pipe(\n      map((response: any) => {\n        return new Product(key, response.name, response.price, response.description);\n      })\n    );\n  }\n... 略\n```\n\nこれにより、商品詳細、商品編集画面のデータがちゃんと表示されるようになりました。\n\n### その他の小さな修正\n\n前回商品作成画面にてデータを作成するようにしたのですが、作成後に特に画面遷移を行うようにしていなかったため、商品一覧画面に遷移するようにします。\n\n```src/app/product/product-new/product-new.component.ts\n... 略\n  saveProduct(): void {\n    if (this.productForm.valid) {\n      const { name, price, description } = this.productForm.getRawValue();\n      this.productService.create(new Product(null, name, price, description)).subscribe(() => {\n        this.router.navigate(['/products']); // <= ここを追加\n      });\n    }\n  }\n... 略\n```\n\n#### ここまでのコミット\n\n商品作成後の遷移↓\nhttps://github.com/yazumoto/AngularGuides/commit/5e4e38ea981845a0e9f50b2abaf3bb0e0272792a\n\nデータ取得部分の修正↓\nhttps://github.com/yazumoto/AngularGuides/commit/173c863bc60da891540186ad506bfd7712444716\n\n### Firebaseを使ったデータの更新\n\n次に、データの更新部分をFirebaseに対応させます。\n\nまずは、 `ProductService` を更新します。\n\n```src/app/shared/services/product.service.ts\n... 略\n  update(product: Product): Observable<void> {\n    return this.http.patch(`${this.BASE_URL}/users/${this.UID}/products/${product.key}.json`, {\n      name: product.name,\n      price: product.price,\n      description: product.description\n    }, { params: { auth: this.TOKEN } }).pipe(\n      map(() => {})\n    );\n  }\n... 略\n```\n\n `http` の `PATCH` メソッドを使うことで、データの更新ができるようになりました。\n FirebaseのAPIはわかりやすくて良いですね。\n\n\n呼び出し元も修正しましょう。\n\n```src/app/product/product-edit/product-edit.component.ts\n... 略\n  saveProduct(): void {\n    if (this.productForm.valid) {\n      const { key, name, price, description } = this.productForm.getRawValue();\n      this.productService.update(new Product(key, name, price, description)).subscribe(() => {\n        this.router.navigate(['/products', this.productForm.controls.key.value]);\n      });\n    }\n  }\n... 略\n```\n\nこれで編集画面がちゃんと動作します。\n\n#### ここまでのコミット\n\nhttps://github.com/yazumoto/AngularGuides/commit/a3a5ef1252ef8e82f4b86a4567231809214ca68c\n\n### Firebaseを使ったデータの削除\n\n最後に、商品の削除を実装していきます。\n\n削除も他のAPIとほとんどやることは同じです。\n`http` の `DELETE` メソッドを利用します。\n\n#### ProductService への削除メソッドの実装\n\n``` src/app/shared/services/product.service.ts\n... 略\n  delete(key: string): Observable<void> {  // <= メソッドを追加\n    return this.http.delete(`${this.BASE_URL}/users/${this.UID}/products/${key}.json`, { params: { auth: this.TOKEN }}).pipe(\n      map(() => {})\n    );\n  }\n... 略\n```\n\nほとんど更新のときと同じです。\n\n \n#### 削除ボタンの実装\n \n現状では削除ボタンがありませんので、削除ボタンを実装していきます。\n \n```src/styles.scss\n.button {\n  ... 略\n\n  &.red {\n    background-color: #F44336;\n  }\n}\n```\n\n削除風のボタンがなかったため、グローバルなCSSに赤いボタンを追加しておきます。\n\n次に、編集画面に削除ボタンを追加します。\n\n```src/app/product/product-edit/product-edit.component.html\n... 略\n    <div class=\"footer\">\n      <span class=\"button white\" [routerLink]=\"['/products', productForm.controls.key.value]\">キャンセル</span>\n      <button class=\"button black\" [class.disabled]=\"productForm.invalid\">保存</button>\n      <span class=\"button red\" (click)=\"deleteProduct()\">削除</span> // <= 追加\n    </div>\n... 略\n```\n\n`button` にすると 押したときに `submit` イベントが発生してしまうので、キャンセルボタンと同じように `span` で作りました。\n\n最後に、上記HTMLで呼ばれている `deleteProduct()` メソッドを追加します。\n\n```src/app/product/product-edit/product-edit.component.ts\n... 略\n  deleteProduct(): void { // <= メソッドを追加\n    if (window.confirm('本当に削除しますか？')) {\n      this.productService.delete(this.productForm.controls.key.value).subscribe(() => {\n        this.router.navigate(['/products']);\n      });\n    }\n  }\n... 略\n```\n\n削除なので、 `本当に削除しますか？` という確認を行ってから削除するようにしました。\n\n\n#### 動作確認\n\nデータの更新、削除の動作を確認してみます。\n\n![002.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/67424/0b17ad57-899e-b78c-812f-f8ab6e67976e.gif)\n\n#### ここまでのコミット\n\nhttps://github.com/yazumoto/AngularGuides/commit/a1cb959faca89464a5d8838791ee4f4be1ef30dc\n\n## まとめ\n\n今回は、AngularでのFirebaseを利用するまとめとして、更新、削除を学びました。\n今回で、Firebaseを使った商品の一覧、詳細、作成、編集、削除という要素が全て完成し、サービスを作れる自信がついてきたのではないでしょうか。\n\n次回は、PIPEの使い方を見ていきます。\n\n## 入門記事一覧\n\n「Angular入門 未経験から1ヶ月でサービス作れるようにする」は、記事数が多いため、まとめ記事 を作っています。\nhttps://qiita.com/seteen/items/43908e33e08a39612a07\n","created_at":"2019-04-14T15:08:48+09:00","id":"7d7028ac4ab8bb754662","tags":[{"name":"Angular","versions":[]},{"name":"Angular入門","versions":[]}],"url":"https://qiita.com/seteen/items/7d7028ac4ab8bb754662"},{"title":"Factory Bot との上手な付き合い方","body":"## まえがき\n`FactoryBot` は非常に便利でrspecのコードを簡単にDRYにしてくれる素晴らしいgemですが、使い方を間違えるとテストを変更するのも追加するのも非常に大変になってしまいます。\nですので `FactoryBot` を使うことに気をつけるべきことを紹介したいと思います。\n\n## Rspec の設定\nまずこれは `FactoryBot` だけでなくテスト全般におけることにはなりますが、rspecで設定しておいたほうが良い項目を2つだけ紹介します。\n\n### order\nrspecの設定の一つに `order` というものがあります。これはテストケースの実行順を制御する設定なのですがおすすめの設定は\n\n```ruby\nconfig.order = :random\n``` \n\nにするのがいいです。これはテストケースの実行順をランダムにする設定です。ほとんどのテストケースは他のテストケースに依存するべきではありません。\nしかし普通にテストを書いていても知らないうちに前のテストケースに依存してしまうことがまれにあります。\nなので実行順をランダムにしてそういったテストをあぶり出しましょう。\n\n### profile_examples\nこの設定はrspecでのテストケースが遅いものから順に特定の件数、何秒かかっているかを表示してくれるものです。\n設定方法は以下のようにします\n\n```ruby\nconfig.profile_examples = 10\n```\n\nこうすることによって各example、及び各グループで遅いものから順に10件テストにかかった秒数を表示してくれます。\nテストにかかる時間というものは開発効率におおきな影響を及ぼします。ですのでこれを設定して、実行に時間がかかっているテストを特定して、テストを高速化しましょう。\n\n---\nここからアンチパターン形式でFactoryBotにおけるアンチパターンと解決策を紹介していきます。\n\n## テスト結果がFactoryBotに依存している\n\n#### 問題のコード\n\n```ruby\nFactoryBot.define do\n  factory :user do\n    email { 'user01@example.com' }\n  end\nend\n\nRSpec.describe User do\n  describe '#find_by_email' do\n    before { create(:user) }\n\n    it 'メールアドレスが一致するときユーザーを返す' do\n      expect(User.find_by_email('user01@example.com')).to be_truthy\n    end\n  end\nend\n```\n\nこれは見ての通り `user01@example.com` を持つユーザーがいるときに `#find_by_email` がユーザーを返すことを検証しているテストケースです。\n（本来ならば `be_truthy` ではなく `eq user` などとするべきなのですが今回はそういった細かいところは面倒なので説明できる最低限のコードしか書いていません）\n\nこれの何がだめなのかというとテストがFactoryBotにおけるuserの定義に依存してしまっています。\nつまりFactoryBotのuserのメールアドレスを変更するとこのテストはコケてしまいます。\nこの説明においてはコケるテストがこれ１件なので大した問題ではないですが、この定義を100のテストケースが使用していた場合、すべてのテストにコケる可能性があるということです。\nですのでテストの結果の検証に関わるところはFactoryBotの定義に依存するべきではありません。\n\n#### 解決策\n\n```ruby\nFactoryBot.define do\n  factory :user do\n    email { 'user01@example.com' }\n  end\nend\n\nRSpec.describe User do\n  describe '#find_by_email' do\n    before { create(:user, email: 'user01@example.com') }\n\n    it 'メールアドレスが一致するときユーザーを返す' do\n      expect(User.find_by_email('user01@example.com')).to be_truthy\n    end\n  end\nend\n```\n\n変わったところは `before { create(:user) }` が `before { create(:user, email: 'user01@example.com') }` に変更しています。\nFactoryBotに限りませんが多くの似たライブラリはこのように元の定義を作成時に上書きする機能を備えています。\nこれを使用することによってテストケースがFactoryBotに依存することを防げています。実際これはuserの定義を変更してもテストはコケません。さらに言えばemailの値が実際のspecファイルだけで確認できるので可読性も向上していると言えるでしょう。\n\n## 複数回レコードを作成するとエラーを吐く\n\n#### 問題のコード\n```ruby\nFactoryBot.define do\n  factory :user do\n    email { 'user01@example.com' }\n  end\nend\n\nRSpec.describe User do\n  describe '#find_by_email' do\n    let!(:user) { create(:user, email: 'test01@example.com') }\n\n    before do\n      create_list(:user, 3)\n    end\n\n    it 'メールアドレスが一致するときユーザーを返す' do\n      expect(User.find_by_email('test01@example.com')).to eq user\n    end\n  end\nend\n```\n\n先程のテストコードを少し修正して今度は複数ユーザーがいた場合に正しいユーザーが返されているかを検証するテストです。ぱっとみ問題ないように思えますがこのテストケースはほとんどの場合エラーで失敗に終わるでしょう。\n\nユーザーのemailというのはほとんどのアプリケーションでユニーク制約がかけられているはずです。なのでこのテストは `create_list(:user, 3)` の部分でバリデーションエラー、もしくはDBによるエラーで `before` の段階でコケることが予想できます。\n\nなので一旦以下のように修正してみましょう\n\n```ruby\nbefore do\n  3.times do |i|\n    create(:user, email: \"user#{i}@example.com\")\n  end\nend\n```\n\nこれでこのテストは通るでしょう。しかし今後も複数のユーザーが必要になったときに毎回ループを書くのでしょうか？\n複数レコードを用いたテストは数がほしいだけでそれの属性自体にはあまり興味がないことも多いです。しかしemailを指定していることによってこのテストコードは変更があった場合にそこまで本質でない部分まで考慮しなければならないでしょう。\n\nそれは可読性、保守性の観点どちらから見てもあまり好ましくありません。なのでFactoryBotが用意してくれている便利な機能を用いて回避しましょう。\n\n#### 解決策\n```ruby\nFactoryBot.define do\n  factory :user do\n    sequence(:email) { |i| \"user#{i}@example.com\" }\n  end\nend\n\nRSpec.describe User do\n  describe '#find_by_email' do\n    let!(:user) { create(:user, email: 'test01@example.com') }\n\n    before do\n      create_list(:user, 3)\n    end\n\n    it 'メールアドレスが一致するときユーザーを返す' do\n      expect(User.find_by_email('test01@example.com')).to eq user\n    end\n  end\nend\n```\n\nここでの変更点は以下の部分です\n\n```ruby\nfactory :user do\n  sequence(:email) { |i| \"user#{i}@example.com\" }\nend\n```\n\nこう書くことによって複数回userレコードを作成したときに自動的に`i`にシーケンシャルな値をいれてくれて、emailが重複することを防げます。つまり `create(:user)` を何回か呼び出してもエラーになることはありません。\n\n## 疲れたので一旦ここまで\nまだ関連が絡んだ場合の定義の仕方などとかもありますので、気が向いたらこの記事を編集するか新しく記事を書きたいと思います。\n","created_at":"2019-04-14T15:08:09+09:00","id":"ac3cb74e6d4bfc498a87","tags":[{"name":"Ruby","versions":[]},{"name":"Rails","versions":[]},{"name":"RSpec","versions":[]},{"name":"FactoryBot","versions":[]}],"url":"https://qiita.com/ippachi/items/ac3cb74e6d4bfc498a87"},{"title":"Travis CIのビルド結果をサーバにPOST通信で送信する方法","body":"# 概要\nGitHubのリポジトリに**Push**もしくは**Pull Request**をした時に自動でテストを走らせる為のツールに、Travis CIがあります。\n\nTravis CIでのテスト結果をSlackなどに通知させる方法はインターネット上にたくさん記事が挙げられていますが([こちら](https://qiita.com/vmmhypervisor/items/b6cd3f8db7b434fbb933)や[こちら](https://qiita.com/matsuda/items/01707c74c2423958a273)など)、`Webhook`を用いてサーバにテスト結果をPOSTする方法に関しては、Slackほど情報が手に入らず、且つハマりどころが多かった為、ここにメモを残します。\n# やりたかったこと\nTravis CIのテスト結果を、AWSのAPI GatewayにPOSTして、その情報を基にLambdaでゴニョゴニョしたかったです。\n![Screen Shot 2019-04-14 at 14.45.06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/283226/abddf054-94fa-715a-3a27-0f2ae3dcc849.png)\n\n# 失敗例\n`Webhooks`を用いてPOST通信を行おうとしました。その時の`.travis.yml`が以下です。\n\n```yaml:.travis.yml\nlanguage: go\nos: osx\nosx_image: xcode10.2\ngo:\n- 1.11\ninstall:\n- export GO111MODULE=off\n- go get -u github.com/golang/lint/golint\nscript:\n- golint ./...\n- go test game.go\nnotifications:\n  webhooks: $API_GATEWAY\nenv:\n  global:\n    secure: NexCzvXM0+zYrXfKRzUL6/xpg ~省略~\n```\n上では、環境変数`API_GATEWAY`に送信先のurlを保持させ、暗号化させています(暗号化の方法は、[こちら](https://qiita.com/arukoh@github/items/0315e6b2c1ac046ab34f)や[こちら](https://qiita.com/gonzaemon111/items/0e3cb3d7ccf5e45135a2)に載っています)。\n\nそして、この環境変数を用いて、Webhookで通知を送ろうとしました。以下の部分です。\n\n```yaml\nnotifications:\n  webhooks: $API_GATEWAY\n```\n\nしかし、この方法ではテスト終了時にリクエストが送信されることはありませんでした。\n\n[こちら](https://github.com/travis-ci/travis-ci/issues/7486)に書いてあるように、`notifications`の設定はビルド前に行われるのに対し、環境変数の設定はビルド中に行われる為、`notifications`内の項目には環境変数の設定が反映されない為です。\n# 解決法\n環境変数を用いずに、urlを`.travis.yml`に直に書き込んだらうまくいくようになるのですが、それをGitHubに挙げてしまうのはなんかいい気分がしません。そこで、以下の方法で迂回しました。\n## curlで送信\n`notifications`ではなく、'after_success'と`after_failure`の中で`curl`コマンドを叩いて、リクエストを送信するようにしました。\n\nまず、以下のようなbashファイルを用意します。\n\n```bash:message.sh\n#! /bin/bash\n\ncurl -X POST -H \"Content-Type: application/json\" $API_GATEWAY\n```\nこのファイルをビルド完了後に実行することで、正常に通知が送られるようになります。\n\n```yaml:.travis.yml\nlanguage: go\nos: osx\nosx_image: xcode10.2\ngo:\n- 1.11\ninstall:\n- export GO111MODULE=off\n- go get -u github.com/golang/lint/golint\nscript:\n- golint ./...\n- go test game.go\nafter_success:\n- ./message.sh\nafter_failure:\n- ./message.sh\nenv:\n  global:\n    secure: NexCzvXM0+zYrXfKRzUL6/xpg ~省略~\n```\n\n## 環境変数の取得\n上に示したbashファイルでは、リクエストボディ部が空のリクエストが送られてしまいます。リクエスト内容にTravis CIのビルドのurlやコミットメッセージ内容などを組み入れたいときは、Travis CIのデフォルトの環境変数を利用します。\n\n[こちらのドキュメント](https://docs.travis-ci.com/user/environment-variables/)にデフォルトの環境変数の一覧が載っていますが、これらを基にbashファイルを書き換えます。\n\n```bash:message.sh\n#! /bin/bash\n\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"status\":0,\"url\":\"'\"$TRAVIS_JOB_WEB_URL\"'\",\"message\":\"'\"$TRAVIS_COMMIT_MESSAGE\"'\"}' $API_GATEWAY\n```\n\n上の例では、コミットメッセージとビルドのurlを送信しています。\n","created_at":"2019-04-14T15:07:51+09:00","id":"80559cca5187481681f1","tags":[{"name":"Bash","versions":[]},{"name":"GitHub","versions":[]},{"name":"AWS","versions":[]},{"name":"TravisCI","versions":[]},{"name":"新人プログラマ応援","versions":[]}],"url":"https://qiita.com/KMim/items/80559cca5187481681f1"},{"title":"macOSでEC2にファイル転送する方法 *AWS","body":"#localじゃなくてみんながアクセスできるようにしたいな~\n今すぐサーバー環境を整えてやりましょう。\n\n今回はAWSのEC2インスタンスを生成してsshコマンドで接続し、FileZillaというソフトウェアを使いEC2内にファイルを転送してみたいと思います。\n\nAWSのサインアップなどは細かく記事には書こうと思っていないので、詰まった方はその都度お調べください\n\n#作業環境\nmacOS Mojave ver10.14.2\n\n#AWSサービスに登録\nまずはここからです。[AWS](https://aws.amazon.com/jp/)このページからAWSに関して色々な情報を見ることができます。\n[サインアップ](https://portal.aws.amazon.com/billing/signup#/start)ページも貼り付けておきます。\n\n#EC2インスタンスの作成\n会員登録ができたら、早速インスタンスを作成していきます。\n<img width=\"1238\" alt=\"スクリーンショット 2019-04-14 14.03.12.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/376889/a93c4c80-6289-09e1-b7bb-6952bb1dce96.png\">\nログインしたらトップでこのようなページが表示されると思うのですが、仮想マシンを起動する。という欄が私のページでは左下に表示されていますので、ここからEC2インスタンス設定に飛びます。\nもしかしたら人によっては違うところに表示があるかもしれないので、とにかくEC2インスタンスの設定ページまで飛んでください。\n<img width=\"1253\" alt=\"スクリーンショット 2019-04-14 14.09.12.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/376889/ee96c7dd-473c-a865-44b8-054c0fa5e5ce.png\">\nそうしましたら、上記のページに遷移するので、今回はOSをUbuntuに指定していきます。\nちょうど黒の枠に囲っているものを指定します。(無料枠なので料金は発生しません。)\n\n青い選択ボタンを押すと次に進みます。条件を確認して、よかったら青い確認と作成ボタンを押しましょう。すると、もうはや起動できるページに進みますので、青い起動ボタンを押しましょう。\n<img width=\"1259\" alt=\"スクリーンショット 2019-04-14 14.18.05.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/376889/8babb4c7-9272-6966-97f1-680c47964f4d.png\">\n起動ボタンを押すと、秘密鍵がどうやこうやのポップアップが出てくるので、秘密鍵を作成しましょう。新しいキーペアの作成とし、任意でキーペアの名前を設定しましょう。\n\n今回は鍵をデスクトップにフォルダを作成し、その中に入れておくようにしておきました。\n\n#ssh接続\n上記までの作業でインスタンスが生成され、起動もしてある状態と思いますので、ターミナルを開いてインスタンスの中に入っていきましょう(少しエロいですね)\n\nまずはぺぺっとcdコマンドで秘密鍵が入っているディレクトリまで移動しときま賞。\n\nそして、\n\n```\nssh -i \"秘密鍵の名前\" ubuntu@ec2-18-219-190-23.us-east-2.compute.amazonaws.com\n```\nsshコマンドを実行し、接続します。\n\n#FileZillaの設定\n[FileZilla](https://filezilla-project.org)からクライアントの方をダウンロードしましょう。\nインストールまでできたら、FileZillaを開きましょう。\nそして開いたらアプリケーションを閉じるバツボタンの下あたりにルーターみたいなものが3つ並んだアイコンがあるので、それをクリックし、サイトマネージャーを開きましょう。\n<img width=\"851\" alt=\"スクリーンショット 2019-04-14 14.37.34.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/376889/8afae64d-2736-b9cf-550d-098b518e9a49.png\">\nエントリの選択のところに新規作成で接続先を登録しておきます。いちいちIPやらなんやらを打つのは手間ですので!!\n上記の画像では自分のサイトの下に何か出てますが、初めて起動させた方は出てないのが正解です。\n<img width=\"735\" alt=\"スクリーンショット 2019-04-14 14.42.44.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/376889/4ad49d75-f09a-db66-d777-216803591763.png\">\n新しいサイトを押すと、新規サイトを登録できるようになるので、任意のサイト名を指定し、あとはインスタンスの情報を右の欄に埋めていきます。プロトコルをSFTPにし、ホストはインスタンスのv4のIPを指定してあげてくダサ男。\nログオンのタイプは鍵ファイルとし、ユーザーはubuntuとしておきます。\nパスワードは秘密鍵がしまってあるディレクトリを選択。\n\n#リモート内にプロジェクトをコピー\nここまでできたら青い接続ボタンを押しましょう。\n<img width=\"1195\" alt=\"スクリーンショット 2019-04-14 14.51.57.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/376889/9cc7df41-264b-2689-0035-52fcefd188b7.png\">\n接続に完了しますと、左側にローカル、右側に接続先の情報が見れるようになります。\n\nここでは簡単にフォルダ等作成できるので非常に便利です。\n\nリモートの方に入れたいプロジェクトのディレクトリを作成します。\nubuntuを右クリックし、ディレクトリの作成です。\n\nディレクトリが作成できたらzip化したプロジェクトをドラッグ&ドロップで入れてあげます。\n\nあとはターミナルからsshで接続し、unzipコマンドで解凍するだけですね。\n\n#終わり\nこの記事はこれで終わりです。\nすごく簡単に転送できますよねびっくり\nなんか面倒なコマンドを打たないといけないとかがなくFileZillaを使えば直感的にちょちょいと転送できちゃいます。\n","created_at":"2019-04-14T15:07:42+09:00","id":"0d77a718c1871c06a986","tags":[{"name":"AWS","versions":[]},{"name":"EC2","versions":[]},{"name":"Filezilla","versions":[]}],"url":"https://qiita.com/UserKazun/items/0d77a718c1871c06a986"},{"title":"mrubyでの３０日開発日記（イントロダクション！）","body":"#どうしてこんなことをしようとしたのか\n\n今日友人と食事をしているときに、友人が３０日でどれだけウェブサイトが作れるのかということを自分のブログで記事にしていることを聞いた。\n僕も少し前にmrubyでopenglを使えるようにするライブラリを作っていたので、それなら「３０日でどれだけのことができるかを記事にしたらおもしろいのではないのか！？ニコ動のやってみた動画のように！」と思いたち、行動することにした。\nまあ、ブログのように書くかもしれないが気軽に楽しんでくれ。\n\n#githubのリポジトリとtwitterアカウント\n\ngithub:https://github.com/yuukis234/mruby_games.git\ntwitterid: @yuukis2342\n\ntwitterで随時更新しておくのでみてください！\n","created_at":"2019-04-14T15:06:45+09:00","id":"06951a4e8df2b7101464","tags":[{"name":"mruby","versions":[]},{"name":"ゲーム","versions":[]}],"url":"https://qiita.com/yuugo_fire/items/06951a4e8df2b7101464"},{"title":"Java SE8 Silver は業務に役立つかどうか！？","body":"# Java SE8 Silver は業務に役立つかどうか！？\n\n少し前にJava SE8 Silverに合格したので、勉強方法そして業務の役に立ったかどうかを書き記そうと思います。\n\nJava開発経験：4年\n勉強期間：2週間(平日約1時間、休日約2時間)\n取得点数：82%(合格ライン65%)\n\n# 想定読者\n- Java SE8 Silverの受験を考えている方\n- Java SE8 Silverを勉強している方\n- プログラミングの資格が業務に役立つかどうか気になる方\n\n# Java SE8 Silverとは\n正式名称は「Oracle Certified Java Programmer, Silver SE 8 認定資格」である。\n\n##### 資格の評価目的レベルは以下(Oracle公式引用)\nJavaアプリケーション開発に必要とされる基本的なプログラミング知識を有し、上級者の指導のもとで開発作業を行うことができる開発初心者向け資格です。日常的なプログラミング・スキルだけでなく、さまざまなプロジェクトで発生する状況への対応能力も評価することを目的としています。\n\n\n# Java SE8 Silver は業務に役立つか？\nいきなり結論にいこうと思います。私個人的にはすごく役に立っていると思います。\n一番はIDE(統合開発環境)のエラーメッセージに頼らなくて済む場面が多くなり、開発効率があがりました。\nまた、レビュワーとしてレビュー指摘した際にはっきりとした技術観点を持てました。\n今までわかったようでわかってなかった部分が鮮明になり自身の知識の幅が広がったと思います。\n\nex)例外処理について、ふわっと「例外」で一括りの理解で、3種類あるとは知らなかった\n　⇛例外処理のレベルを必要に応じて切り分けるコーディングができるようになった。\n\n# なぜ取得しようと思ったか\nふと自身のスキルを棚卸しをしているときに、自分は今まで開発で使ってきたJavaのスキルに対してはっきりと「Javaができる！」と言えるのかどうか不安になりました。なので、第三者からみても一定のスキルを有していると評価いただけるように上述のJava SE8 Silverを受けようと考えました。\n\n# 勉強に使用した本\n通称黒本と呼ばれているものです。いろんな方の合格体験記を見てもこれが一番良いとの口コミだったので使用しました。確かにこれ一冊を徹底的に理解していれば必ず合格できると思います。\n各章を2～3回すべて理解するまで繰り返し問題を解きました。\n\n[徹底攻略 Java SE 8 Silver 問題集1Z0-808対応](https://www.amazon.co.jp/gp/product/4844339931/ref=oh_aui_detailpage_o01_s00?ie=UTF8&psc=1)\n\n# 主な出題内容・観点\n主な出題観点を記載しておきます。ご参考までに\nJavaのデータ型、クラスの作成からメソッドの定義方法まで、演算子やループなどの構文を理解する必要があります。\n\n### Javaの基本\n- クラスの宣言\n- パッケージインポートの記述方法(staticインポート)\n- Java実行コマンド\n\n### javaの型操作\n\n- データ型(プリミティブ型)\n- クラスとインスタンスの関係\n\nちなみに軽くデータ型をまとめた表を以前Qiitaに投稿したので参考までに\nhttps://qiita.com/yutaka_oshiro/items/fa8fb01118584b9101db\n\n### 演算子と判定構造\n- インクリメント演算子とデクリメント演算子\n- 論理演算子、優先順位\n- if文\n- Switch文\n- 三項演算子\n\n### 配列\n- 配列の初期化、宣言、生成\n- 多次元配列\n\n### ループ構造\n- while,dowhile\n- for文、拡張for文\n- 二重ループ\n- 無限ループ\n- break,continue\n\n### カプセル化\n- メソッドの定義\n- staticメソッド\n- オーバーロード\n- コンストラクタ\n- アクセス修飾子\n- カプセル化とデータ隠蔽\n- 値渡しと参照渡し\n\n### 継承、実装\n- クラスの継承\n- インターフェース\n- 抽象クラス、具象クラス\n- オーバーライド\n- ポリモーフィズム\n- アップキャスト、ダウンキャスト(型変換)\n- this,super()\n\n### 例外処理\n- try-catch文、try-catch-finally文\n- 検査例外と非検査例外、エラー\n- 例外クラス\n\n### Java8での新機能API\n- ラムダ式\n- LocalDate,LocalTime\n\n# 試験について、感想\n\n##### 受験手順\n\n受験手順はすごく面倒くさいです。以下参考サイト様\nhttps://qiita.com/yskuma6684/items/b8604d6e5572490a13a8\n\nすぐに合格がわかるようにCertViewには登録しておいた方が良いと思います。\n\n##### 受験の感想\n\n黒本を解説をすべて理解出来ていれば合格できると断言できます。\n模擬問題の問題ほぼほぼそのままで、変数名やクラス名だけが変わっており選択肢の位置すらも全く一緒という問題が多数ありました。\nあと、受験時間は2時間半で77問と長丁場になる可能性もあるので、しっかり睡眠しておいたほうが良いと思いました。\n受験が終了してから会場のビルを降りたところで合否がでたメールが届きました。早いですね！\n\nJavaについて学びたい方、自身のスキルを試してみたい方はぜひ受験してみてください！\n\n","created_at":"2019-04-14T15:05:11+09:00","id":"5d319392e7c5af680420","tags":[{"name":"Java","versions":[]},{"name":"oracle","versions":[]},{"name":"java8","versions":[]},{"name":"資格","versions":[]},{"name":"Java入門","versions":[]}],"url":"https://qiita.com/yutaka_oshiro/items/5d319392e7c5af680420"},{"title":"DFTを使ったconvolutionをnumpyで再現する","body":"## Motivation\nFCNN: Fourier Convolutional Neural Networks(http://ecmlpkdd2017.ijs.si/papers/paperID11.pdf )を読んでconvolutionをフーリエドメインで行うことに興味が湧いたのでnumpyで実際に挙動を確認してみました. 時間がないのでとりあえず雛形だけ書いてあとで加筆します.\n\n空間ドメインでconvolutionをnaiveに実装すると4重ループが出てきてこの計算は結構しんどいのですが, この演算をフーリエドメインで行うとただの要素積になります(スカラーなら通常の積, 行列はアダマール積). よって入力画像とconvolutional kernelを共にフーリエ変換して要素積をとり, その後フーリエ逆変換をすると計算が高速化することがあってうれしい(入力が大きいほど顕著に効果が出る). 論文中ではどのくらい高速化するかなども書いてありますが, 今回は実装そのものが目的なので書きません.\n\n## Preliminary\n二次元の離散フーリエ変換(DFT)に関してはwikipedia(https://ja.wikipedia.org/wiki/%E9%9B%A2%E6%95%A3%E3%83%95%E3%83%BC%E3%83%AA%E3%82%A8%E5%A4%89%E6%8F%9B )がかなり詳しいです.\n\nフーリエ変換とconvolutionに関しては以下の関係が成り立つことが知られています.\n$$\\mathcal{F}(f*g) = \\mathcal{F}(f) \\circ \\mathcal{F}(g)$$\n\n今回の実装では**reflective padding**と**zero padding**の2種類を使います. reflective paddingは入力に周期性を仮定して, convolutionが入力のエッジに到達したら逆サイドのピクセルを畳み込みます. zero paddingは入力の外側のピクセル値を全て0だと思って畳み込みます. chainerなど深層学習ライブラリでは基本的にzero paddingが使われている気がします. そもそも入力に周期性はないですし. reflective paddingはその意味で\"フーリエっぽい\"です. フーリエ変換を使う解析ではこちらの方が使われたり使われなかったりします.\n\n## Experiment\nとりあえず2種類のpaddingを実装します. \n\n```\nimport cmath\nimport numpy as np\n\ndef zero_padding(M, pad=1):\n    canvas = np.zeros((M.shape[0] + 2*pad, M.shape[1] + 2*pad))\n    canvas[pad:-pad, pad:-pad] = M\n    return canvas\n\ndef reflective_padding(M, pad=1):\n    num_tile = 2 * ((pad - 1) // M.shape[0] + 1) + 1\n    M_tile = np.tile(M, (num_tile, num_tile))\n    crop_index = int((M_tile.shape[0] - (M.shape[0] + 2*pad))/2)\n    return M_tile[crop_index:-crop_index, crop_index:-crop_index]\n```\nそれぞれの挙動はこんな感じ.\n### reflective padding\n```\nf = np.arange(25).reshape(5, 5)\n\nreflective_padding(f)\n```\n```\n# 戻り値\narray([[24, 20, 21, 22, 23, 24, 20],\n       [ 4,  0,  1,  2,  3,  4,  0],\n       [ 9,  5,  6,  7,  8,  9,  5],\n       [14, 10, 11, 12, 13, 14, 10],\n       [19, 15, 16, 17, 18, 19, 15],\n       [24, 20, 21, 22, 23, 24, 20],\n       [ 4,  0,  1,  2,  3,  4,  0]])\n```\n### zero padding\n```\nzero_padding(f)\n```\n```\n# 戻り値\narray([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  1.,  2.,  3.,  4.,  0.],\n       [ 0.,  5.,  6.,  7.,  8.,  9.,  0.],\n       [ 0., 10., 11., 12., 13., 14.,  0.],\n       [ 0., 15., 16., 17., 18., 19.,  0.],\n       [ 0., 20., 21., 22., 23., 24.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]])\n```\n\n### convolution, DFTの実装\n```\ndef convolution(M, kernel):\n    out_h = M.shape[0] - kernel.shape[0] + 1\n    out_w = M.shape[1] - kernel.shape[1] + 1\n    out = np.zeros((out_h, out_w))\n    for i in range(out_h):\n        for j in range(out_w):\n            out[i, j] = np.sum(M[i:kernel.shape[0]+i, j:kernel.shape[1]+j] * kernel)\n    return out\n\ndef dft_matrix(n):\n    a = np.arange(n)\n    t = a.reshape(1, -1)\n    x = a.reshape(-1, 1)\n    M = cmath.e**(-1j * 2 * cmath.pi * t * x  / n)\n    return M\n\nclass DFT:\n    def __init__(self, M):\n        self.M = M\n        self.ctM = np.conjugate(M.T)\n        \n    def dft(self, f):\n        return self.M @ f.T @ self.M\n    \n    def idft(self, F):\n        return (self.ctM @ F @ self.ctM).T.real / np.prod(F.shape)\n    \n    def conv(self, f, kernel):\n        FT_f = self.dft(f)\n        FT_kernel = np.conjugate(self.dft(kernel))\n        out = FT_f * FT_kernel\n        return self.idft(out)\n```\n\n### フーリエ変換を介したconvolution\n#### reflective padding\n```\nkernel = np.arange(9).reshape(3, 3)\n\n# 入力fとサイズが揃うようにkernelをzero paddingする\nkernel_expand = np.zeros((5, 5))\nh_k, w_k = kernel.shape\nkernel_expand[:h_k, :w_k] = kernel\nkernel_expand\n```\n```\n# 結果\narray([[0., 1., 2., 0., 0.],\n       [3., 4., 5., 0., 0.],\n       [6., 7., 8., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])\n```\n```\n# DFTによるconvolution\nM = dft_matrix(5)\n\ntransform = DFT(M)\nout = transform.conv(f, kernel_expand).astype('int32')\nnp.roll(out, 1, [0, 1]) # ズレた周期を補正\n```\n```\n# 戻り値\narray([[216, 207, 243, 279, 240],\n       [321, 312, 348, 384, 345],\n       [501, 492, 528, 564, 525],\n       [681, 672, 708, 744, 705],\n       [336, 326, 363, 399, 360]], dtype=int32)\n```\n```\n# 結果の確認\nconvolution(reflective_padding(f), kernel)\n```\n```\n# DFTの結果と一致\narray([[216., 207., 243., 279., 240.],\n       [321., 312., 348., 384., 345.],\n       [501., 492., 528., 564., 525.],\n       [681., 672., 708., 744., 705.],\n       [336., 327., 363., 399., 360.]])\n```\n周期がずれたことをのぞいて結果が一致しました.\n\n#### zero padding\n\n```\n# 入力fとサイズが揃うようにkernelをzero paddingする\n# zero paddingの場合補完した部分を含めた入力が1周期に相当するので, 入力サイズは(7, 7)\n\nkernel_expand = np.zeros((7, 7))\nh_k, w_k = kernel.shape\nkernel_expand[:h_k, :w_k] = kernel\nkernel_expand\n```\n```\n# 結果\narray([[0., 1., 2., 0., 0., 0., 0.],\n       [3., 4., 5., 0., 0., 0., 0.],\n       [6., 7., 8., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 0.]])\n```\n```\n# DFTによるconvolution\nM = dft_matrix(7)\ntransform = DFT(M)\nout = transform.conv(zero_padding(f), kernel_expand).astype('int32')\nout[:5, :5] # zero paddingによって増えた次元を削る\n```\n```\n# 戻り値\narray([[ 88, 141, 174, 208, 135],\n       [209, 311, 347, 383, 239],\n       [344, 491, 527, 563, 344],\n       [480, 671, 707, 743, 449],\n       [232, 303, 319, 333, 184]], dtype=int32)\n```\n```\n# 結果の確認\nconvolution(zero_padding(f), kernel)\n```\n```\narray([[ 88., 142., 175., 208., 136.],\n       [210., 312., 348., 384., 240.],\n       [345., 492., 528., 564., 345.],\n       [480., 672., 708., 744., 450.],\n       [232., 304., 319., 334., 184.]])\n```\nだいたい一致しました. 微妙にズレがあるのはDFTによる変換→逆変換の数値誤差かpaddingで増えた周波数を落としたからだと思われます.\n\n\n### 蛇足\n今回実装で困った点が2点ありました.\n- **入力とkernelのサイズが違う時はどうすればいいか(アダマール積をとるので同じサイズである必要があるが一般にkernelは入力よりずっと小さい)**\n- **なんか結果が合わない**\n\nそれぞれ, \n- **入力と同じサイズになるようkernelをzero paddingする**\n- **フーリエドメインで掛け合わせる時, kernelの方の複素共役をとる**\nすることで解決しました. 前者はkernel1つが入力画像1枚のキャンバスに対応するのでそれはそうかなという感じがします(ちなみにzero paddingする場所はどこでも結果はほぼ変わりません. 周期がずれるだけです). 後者はシンプルに自分の勉強不足なのでわかったら加筆します.\n","created_at":"2019-04-14T14:57:10+09:00","id":"e2129aba8dc68af0f881","tags":[{"name":"numpy","versions":[]},{"name":"ConvolutionalNeuralNetworks","versions":[]},{"name":"convolution","versions":[]},{"name":"DFT","versions":[]},{"name":"FourierTransform","versions":[]}],"url":"https://qiita.com/Simossyi/items/e2129aba8dc68af0f881"},{"title":"Qiitaの使い方についてつらつらと","body":"#　Qiitaの使い方についてつらつらと\n　今の時代、検索すればコマンドやら、Rubyやら、様々な情報がQiita上にアップされていて、\n　それらの情報で自分の問題を解決できるのに、なぜ次々と同じような記事がアップされるの\n　だろうかと疑問に思っていた。\n\n　しかし、自分も本格的にプログラミングをするようになって、なぜなのかが分かった。\n\n##  結局は自分のため\n　プログラミングをしていると日々様々な課題にぶつかる。\n　そうなったときに、ストックしておいた記事を探すのはあまりに手間がかかるし、\n　そもそも実は自分の環境では役に立たなかったような記事がいくつも見つかってしまう。\n　その間に膨大な情報の海に漂流したまんま時間が過ぎ去ってしまう。\n\n　そうすると、結局は、自分の環境に適した自分の、自分による、自分のための記事が\n　結局は一番役に立つということになる。\n\n　それが、結局は日々Qiitaの情報が増え続ける理由ではなかろうか。\n　実際、自分で自分のための記事を書かんとだめだなと実感している。\n","created_at":"2019-04-14T14:55:40+09:00","id":"8435b2be8e4987f16aa4","tags":[{"name":"Qiita","versions":[]},{"name":"初心者","versions":[]}],"url":"https://qiita.com/yamori/items/8435b2be8e4987f16aa4"},{"title":"Macでfishを使って良い感じなシェル環境をお手軽に作る","body":"はじめに\n------\n\nこの間カンファレンスに行った時に発表者が使ってたシェルがカッコ良かったのでfishに変えてみ他のでその備忘録。\n元々、zshを使ってたけどそこまでカスタマイズしてたわけではないので移行はすんなりでした。\n\nfishに関して詳しくは[こちら](https://www.google.com/search?ei=jryyXJroKo_5-wTbpI2YBA&q=Fish+%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88+shell&oq=Fish+%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88+shell)に詳しく載ってるので割愛。\n簡単に書くとカスタマイズしなくてもデフォルトで結構行けてるzshみたいなものです。\n\n本体の導入\n-------\n\nまずは本体の導入。と言ってもbrewするだけです。\n\n```bash\n$ brew update && brew install fish\n```\n\n続いてデフォルトシェルを変更\n\n```bash\n$ echo /usr/local/bin/fish | sudo tee -a /etc/shells\n$ chsh -s /usr/local/bin/fish\n```\n\nこれでTerminalを再起動するればシェルがfishに変わります。\n\n続いてパッケージマネージャをインストールします。なお、ここからはfish上での作業なのでbashやzshでは動かないので先に上記の作業で本体を入れてシェルを切り替えてください。\n\n```bash\n$ curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish\n```\n\nこれで最低限必要なもの導入は完了です。\n\nプロンプトを変更する\n--------\n\n続いてプロプントを変更します。デフォルトでも良い感じの見た目のものはあったのですが、gitのstatusとかに対応したものがなかったのでfisherで新しいテーマを入れます。\n\n```bash\n$ fisher add oh-my-fish/theme-bobthefish\n```\n\nただ、これ単体だと文字化けするのでPowerline系のフォントを追加してTearminalのフォントを変えます。\n\n```bash\n$ git clone https://github.com/powerline/fonts.git                                                \n$ cd fonts/                                                                                       \n$ ./install.sh \n```\n\nこれでPowerline系のフォントがインストールされました。私は`Robot Mono`にしています。\n\n履歴検索を追加\n-------------\n\nfishは履歴からのコマンドが補完でき非常に重宝しますが一方でbashやzshで良く使う履歴検索自体はデフォルトで無いようです。\nなので、pecoを入れてそちらでコマンド検索できるようにします。\n\n```bash\n$ brew install peco                                                                               \n$ fisher add oh-my-fish/plugin-peco                                                               \n$ vim ~/.config/fish/config.fish                                                                  \n```\n\n中身はこちら。\n\n```~/.config/fish/config.fish\nfunction fish_user_key_bindings\n  bind \\cr 'peco_select_history (commandline -b)'\nend\n```\n\nこれでシェルを再起動すれば`C-r`で履歴が検索できます。\n\nディレクトリの履歴移動\n-------------\n\nzshだとcdにpushがデフォルトで付くのでpopdを使ってディレクトリを移動してたかと思います。\nfishにその補完は無いのですがより便利な拡張が入っています。popdに相当する機能はprevdとnextdです。\n\n```bash\n$ mkdir -p dir1/dir2　\n$ cd dir1\n$ cd dir2\n$ pwd\n/tmp/dir1/dir2\n$ prevd　# 戻る\n$ pwd\n/tmp/dir1/\n$ prevd　# 戻る\n/tmp/\n$ nextd　# 進む\n/tmp/dir1\n```\n\npopdと同じことができますね。dirhで一気に移動するとこともできます。\n\n```bash\n$ dirh\n 3) /tmp\n 2) /tmp/dir1\n 1) /tmp/dir1/dir2\n    /tmp/dir1/dir2/dir3\n$ prevd 3\n$ pwd\n/tmp\n```\n\nBashとの互換\n----\n\n### 非互換一覧\n\nfishはBashやzshのようにPOSIX互換ではありません。なので色々仕様が違うようなのですが例えば以下のような差分があるようです。\n\n- 標準エラー出力のリダイレクトは`^`を使う\n- 変数は`NAME=hoge`ではなく`set NAME hoge`を使う\n- 終了ステータスは`$?`ではなく`$status`を使う\n- コマンド置換は``command``や`$(command)`ではなく`(command)`を使う\n\n### Bashラッパー\n\n自分で書くときは覚えようの世界かもですが、チュートリアルとかで他人の手順を参考にする時に不便です。\nなので、`bass`というプラグインを入れます。\n\n```bash\n$ fisher add edc/bass\n```\n\nこれでbashでの操作ができるようになります。\n\n```bash\n$ echo $(date)\nfish: $(...) is not supported. In fish, please use '(date)'.\necho $(date)\n     ^\n$ bass 'echo $(date)'\nSat Apr 13 22:45:05 PDT 2019\n```\n\nまとめ\n------\n\nとりあえずzshに疲れたら非互換がちょっと面倒ですがfishでやるのも良いかと思います。あまりカスタマイズせずにカッコいいのは良いこと。\nそれではHappy Hacking!\n\n参考\n------\n\n- [Fish Official Site](https://fishshell.com/)\n- [fish shell を使いたい人生だった](https://dev.classmethod.jp/etc/fish-shell-life/)\n- [fish shellが結構良かった話](https://qiita.com/hennin/items/33758226a0de8c963ddf)\n","created_at":"2019-04-14T14:51:00+09:00","id":"e1c806d83c034916039f","tags":[{"name":"Mac","versions":[]},{"name":"fish","versions":[]},{"name":"memo","versions":[]},{"name":"shell","versions":[]},{"name":"備忘録","versions":[]}],"url":"https://qiita.com/koduki/items/e1c806d83c034916039f"},{"title":"RedshiftでVarChar型の桁数を増やす","body":"\n2019年3月20日のアップデートにおいて\nALTER TABLE でVARCHAR型の桁数が増加可能になった\n…はずでした。\n\nちょうどVARCHAR型の桁数を増加する必要があり、\n下記コマンドを試したのですが、「サポートしてない」と怒られる。\n\n```sql\nALTER TABLE tablename ALTER COLUMN columnname TYPE VARCHAR(100);\n```\n\n#【結論】現在、機能停止中\n以下、AWSさんの回答です\n\n- 現在、同機能に問題が発見されたため機能を無効化中\n    ※2019年4月14日時点\n- 修正完了次第、再度利用可能になる\n- ただし、いつ修正完了するかは不明\n\nAWSさんの対応を待ちましょう。\n\n\n#参考\n↓の記事で、VARCHAR型の変更方法を知りました\n[Amazon Redshift：ALTER TABLE文でVARCHAR型の桁数を増やせるようになりました]\n(https://dev.classmethod.jp/cloud/aws/amazon-redshift-alter-table-can-increase-varchar-type-column-size/)\n[Announcement: Amazon Redshift Maintenance (February 20th - March 14th 2019)](https://forums.aws.amazon.com/ann.jspa?annID=6593)\n","created_at":"2019-04-14T14:47:31+09:00","id":"e5e6e63b75ad389958b7","tags":[{"name":"AWS","versions":[]},{"name":"redshift","versions":[]}],"url":"https://qiita.com/kusanoiskuzuno/items/e5e6e63b75ad389958b7"},{"title":"Nuxt.js v2.4.0以上でnuxt-sass-resources-loaderを使ってはいけない","body":"vueコンポーネントにグローバルなscssファイルを読み込ませる時にハマったのでメモ。\nここら辺のライブライが名前がどれも似かよっていてどれを使えないいかわからない方も多いと思います。\n# 結論\nstyle-resources-moduleを使いましょう。\nhttps://github.com/nuxt-community/style-resources-module\n\n手順は以前とほぼ変わりません。\n\n```terminal\nyarn add -D @nuxtjs/style-resources\n```\n\n```nuxt.config.js\n  /*\n  ** Nuxt.js modules\n  */\n  modules: [\n    '@nuxtjs/style-resources', //　追記します\n  ],\n\n  styleResources: {\n    sass: [\n      '~/assets/scss/variable.scss' // 読みませたいscssファイルを指定します。\n    ]\n  },\n```\n\n#ちなみに\nissueを見ると、\nNuxt.js v2.4.0にバージョンアップされた際に、nuxt-sass-resources-loaderはサポート終了になったとのこと。\nv2.4.0になったのは今年の1月29日なので、それ以前の記事は参考にしないほうがよさそう。\n\nhttps://github.com/anteriovieira/nuxt-sass-resources-loader/issues/25\n> ⚠️ We are closing the support for this package and transferred to the official community package. So we strongly suggest that you use the official community package @nuxtjs/style-resources.\n\n","created_at":"2019-04-14T14:45:41+09:00","id":"e3565d889ebe7b078748","tags":[{"name":"Node.js","versions":[]},{"name":"Sass","versions":[]},{"name":"nuxt.js","versions":[]}],"url":"https://qiita.com/ng-yt/items/e3565d889ebe7b078748"},{"title":"薄い広告が消せないか？と思った","body":"\n# 背景\n\n以前、フロントにハマって一時期勉強していた。\n\n- HTML\n- CSS\n- Javascript\n- Bootstrap\n\nとか。\nたまたまネットサーフィングをしていると薄い広告が舞い降りてきた。\nいつもならポチって消すが、後ろの記事が薄く見えていたので\n\n>\nこれもしかしたらinspectして消せるんじゃね\n\nと思ってやってみたらできたからやり方を残す\nもしかしたら何か応用できるかもしれない\n\n\n# 対象のサイト\n\n- [Building a Simple CLI Tool with Golang - Rapid7 Blog](https://blog.rapid7.com/2016/08/04/build-a-simple-cli-tool-with-golang/)\n\nおそらく上のサイトにいくと次のような画面になる\n\n\n<img width=\"900\" alt=\"Screen Shot 2019-04-14 at 14.31.16.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/256412/10ef7e7f-bd7a-bef8-4e22-ce3e6b0fb54e.png\">\n\n\nほれ、後ろが透けて見えてる、つまり透明度をゼロにすれば見れるんじゃねということで\n\n## STEP1  ページのソースを見る\n\n俺はmacなので右クリックinspectでソース確認\nで、\n\n<img width=\"900\" alt=\"Screen Shot 2019-04-14 at 14.33.10.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/256412/8ca337d3-cfa8-1dba-7bce-537bca7fda68.png\">\n\n画像の通りどうやら\n\n<img width=\"800\" alt=\"Screen Shot 2019-04-14 at 14.34.10.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/256412/dc03395e-3cda-c99e-149b-bb4aca65e9d5.png\">\n\nここをいじれば良さそう、\n初めは `gdpr-modal` をいじればいいだろうと思ったが無理だった。hide elementなどもしてみたが無理だった。\n\nそこでその一行上を眺めてみると\n\n```html\n<div id=\"gdprAlert\" class=\"overlay\" style>\n```\n\nとあるじゃないか、オーバーレイだと？これわまさか、と思い\n\n<img width=\"800\" alt=\"Screen Shot 2019-04-14 at 14.38.46.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/256412/40135e6f-1f0f-6be5-8f04-eb306a079280.png\">\n\nこのrgbaの第4引数を0にすると\n\n<img width=\"800\" alt=\"Screen Shot 2019-04-14 at 14.39.48.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/256412/ca23ca9b-5030-7e0d-da5a-991ae832a162.png\">\n\nおおお、消えやがった。あとはこの表示を消すだけ、先ほどのように\n`hide element`をすればOK\n\nちなみに後から気づいたが`gdprAlert`を直接hideすればすんだ。\n\n\n<img width=\"800\" alt=\"Screen Shot 2019-04-14 at 14.42.42.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/256412/279c5928-296a-2d89-d225-09d2341d9719.png\">\n\n\n# 参考とひとこと\n\n- [How TO - Overlay](https://www.w3schools.com/howto/howto_css_overlay.asp)\n\n\ngolang始めた\n","created_at":"2019-04-14T14:43:50+09:00","id":"685b525504db5a300bc0","tags":[{"name":"HTML","versions":[]}],"url":"https://qiita.com/kiwamizamurai/items/685b525504db5a300bc0"},{"title":"交通流シミュレータ SUMO で日本国内のOpenStreetMap地図を読み込む際の設定と注意点","body":"#概要\n交通流シミュレータSUMOで，付属の地図変換スクリプトNETCONVERTを用いてOpenStreetMapのリアルワールド準拠の地図を読み込んでシミュレートする際に，日本国内の地図を利用する場合の設定と注意点をまとめます．\n\nNETCONVERTはOpenStreetMapの地図形式（.osm）をSUMOの地図形式（.net.xml）に変換するスクリプトです．\nNETCONVERTの基本的な使い方はシミュレーション手順は既に[こちらの記事](https://qiita.com/nattof/items/d198557126b7d3636f10)にまとめられているので参照ください．\n\n#環境\n- Windows10 64bit\n- SUMO version 1.1.0\n \nSUMOのインストール方法は下記を参照してください．\n[Quiita: 交通流シミュレータ SUMO をWindowsに導入する](https://qiita.com/jagimo/items/a137b5c7d4e3e70e0919)\n\n#制限速度の設定\n制限速度がOpenStreetMapで設定されている場合は，NETCONVETで地図を変換する場合にもOSMの制限速度が反映されるので問題ありません．\n制限速度がOpenStreetMapで設定されていない場合は，OpenStreetMapの道路クラスごとにデフォルトの値が設定されてしまいます．\n\n|OSMクラス|日本での適用例|NETCONVERTデフォルト制限速度|\n|:---|:---|:---|\n|highway=motorway|高速道路または自動車専用道|44.44 m/s (160km/h)|\n|highway=trunk|国道|27.78 m/s (100km/h)|\n|highway=primary|主要地方道|27.78 m/s (100km/h)|\n|highway=secondary|一般都道府県道|27.78 m/s (100km/h)|\n|highway=tertiary|市町村道|22.22 m/s (80km/h)|\n|highway=unclassified|市町村道（1車線）|13.89 m/s (50km/h)|\n|highway=residential|居住地域内道路|13.89 m/s (50km/h)|\n\nこれらの制限速度は日本国内では速すぎますので，現実的にシミュレートする場合は設定の変更が必要です．下記のxmlファイルを書き換えます．\n\n```インストールフォルダ\\eclipse\\Sumo\\data\\typemap\\osmNetconvert.typ.xml\n<省略>\n//高速道路の場合．speedを書き換える．\n<type id=\"highway.motorway\" numLanes=\"2\" speed=\"44.44\" priority=\"13\" oneway=\"true\"  disallow=\"pedestrian bicycle moped rail rail_urban rail_electric tram ship\"/>\n<省略>\n```\n\n#信号・交差点の設定\n信号・交差点の設定を含むあらゆるNETCONVETの設定は[公式ページ（英語）](https://sumo.dlr.de/wiki/NETCONVERT)に詳細が掲載されています．\nその中でも信号・交差点の設定については，OpenStreetMapから地図を読み込む場合に必ず設定すべき項目があります．\n\n###OSMから地図を読み込む場合に絶対に設定すべき項目\n|オプション|デフォルト値|説明|\n|:---|:---|:---|\n|--junctions.join \\<BOOL>|false|近接している交差点を結合する|\n|--tls.guess-signals \\<BOOL>|false|近接している信号機を一体の構成とみなす|\n\n\n上記オプションがない場合，例えば中央分離帯が広い道路や間に川を挟んでいる道路が一方通行の別々の道路扱いをされてしまい，実際は1つの交差点でも複数の交差点扱いをされてします．このような交差点ではシミュレーション上で信号の制御がうまくいかず，異常に車両が滞留してしまう原因となります．\n\n![junction.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/366359/4b8fbbad-5478-9cda-e371-9297b3cf1c7d.png)\n\n左: 交差点が結合されていない状態．南側から右折する場合は1台ずつになってしまう状態．\n右: 交差点が結合されている状態．対向車がいなければ右折できる．\n\n###信号の生成される交差点について\nOpenStreetMapから地図を読み込む場合，OSM側に信号の存在を明記してあればNETCONVETでも信号が出力されます．ただ，OSMは有志で追記・編集する運用（Wikipediaのような形態）のため，必ずしも現実世界の信号がOSMにも反映されているとは限りません（田舎の地図では特に顕著）．\n\n信号があまりにも少ない場合，制限速度が一定の速度以上の道路同士が交差する交差点に信号を設置することもできます．その場合は下記3つのコマンドを追加してください．\n\n|オプション|デフォルト値|説明|\n|:---|:---|:---|\n|--speed-in-kmh \\<BOOL>|false|km/hで設定を行う|\n|--tls.guess \\<BOOL>|false|OSM上に存在しない交差点もルールベースで追加する|\n|--tls.guess.threshold \\<FLOAT>|69.4444[km/h]|交差点を設置する道路の制限速度の最小値|\n\n#その他設定するとよいオプション\n|オプション|デフォルト値|説明|\n|:---|:---|:---|\n|--lefthand \\<BOOL>|false|左側通行の設定|\n|--sidewalks.guess.from-permissions \\<BOOL>|false|歩道を追加する|\n|--crossings.guess \\<BOOL>|false|横断歩道を追加する|\n\n特に日本国内の地図の場合，両側通行の道路（細街路）と一方通行の道路の組み合わせで表現されている道路（幹線道路）の矛盾が起きますので，--lefthand は設定すべきでしょう．\n\n歩道と横断歩道は歩行者のシミュレーションをする場合には適宜追加してください．\n\n最終的なNETCONVERT実行コマンドは以下のようになります（39km/h以上の道路に交差点を追加する場合）．\n\n```\nnetconvert --osm-files map.osm -o hoge.net.xml --speed-in-kmh --junctions.join --tls.guess --tls.guess.threshold 39.0 --tls.guess-signals --sidewalks.guess.from-permissions --crossings.guess\n```\n\n#生成したnet.xmlファイルを微修正したい場合\nNETEDITを使ってGUIでマニュアル編集しましょう．\nインストールフォルダ\\eclipse\\Sumo\\bin\\netedit.exe を起動．\n\n#参考ページ\n- NETCONVERT公式ドキュメント（英語）: https://sumo.dlr.de/wiki/NETCONVERT\n- OpenStreetMap Wiki 道路の項 : https://wiki.openstreetmap.org/wiki/Key:highway#Roads\n","created_at":"2019-04-14T14:42:51+09:00","id":"5581ac3cc02356911c85","tags":[{"name":"OpenStreetMap","versions":[]},{"name":"シミュレーション","versions":[]},{"name":"地図","versions":[]},{"name":"SUMO","versions":[]}],"url":"https://qiita.com/jagimo/items/5581ac3cc02356911c85"},{"title":"온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마","body":"온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마 온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마 온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마 온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마\n\n온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마\n\n온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마온라인경마 ꊻ CTK6,C0M ꊻ 검빛경마\n![bandicam 2019-03-20 23-05-08-808.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/398467/3dd44521-0225-7d00-f296-91a7330fc278.jpeg)\n","created_at":"2019-04-14T14:39:15+09:00","id":"b9669e43751414fd9b82","tags":[{"name":"온라인경마","versions":[]}],"url":"https://qiita.com/kkuyykuegr/items/b9669e43751414fd9b82"},{"title":"Dataset集","body":"[model net](http://modelnet.cs.princeton.edu/)\n","created_at":"2019-04-14T14:33:02+09:00","id":"1959d041d529e5013727","tags":[{"name":"Dataset","versions":[]}],"url":"https://qiita.com/uyuutosa/items/1959d041d529e5013727"},{"title":"[Cinema 4D] 時間トラックにキーをステップ状に作成するXPressoノード","body":"今回のCinema 4D Pythonエクササイズは「XPressoを使って時間トラックをXPressoから追加してキーを記録する」です．\n\n時間トラックを追加するというノードは提供されていなかったので必要パラメータはXPressoのユーザデータから取り出して，Pythonノードで作成してみました．\n\n処理内容をもう少し具体的に書くと，\n任意のオブジェクトに指定したフレームから指定したフレーム間で時間トラックを作成し，\n等間隔にステップ上にキーを記録するスプリプトです．\n\n最低限必要なパラメータはユーザデータとしてXPressoタグに追加しておきます．\n\nAdd Time Track: 時間トラックを追加する\nObject: 指定したオブジェクトに対して時間トラックを作成する\nFPS: ドキュメントのFPSでも良いです\nStart Frame: 最初のキーフレームの時間\nEnd Frame: 最後のキーフレームの時間\nKey Step: 指定した値ごとにキーを作成する\nValue Step: キー毎に加算する時間トラックのパーセント\n\n![20190414-3.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/195698/10de4224-920d-57f9-5e52-3fe0b08f96f8.jpeg)\n\n\nテストしたスクリプトは以下です．\n今回のテストコードでは既存の時間トラックがある場合は，一旦削除してから新しく追加しなおしています．時間トラックは複数追加できるのですが，テスト用のため簡易的なものにしています．\n\n```\nimport c4d\nfrom c4d import gui\n\ndef AddTimeTrack(obj, doc):\n\n    findTrack = obj.FindCTrack(c4d.DescID(c4d.DescLevel(c4d.CTtime)))\n    if not findTrack:\n        print \"not find time trackx\"\n        tTrack   = c4d.CTrack(obj, c4d.DescID(c4d.DescLevel(c4d.CTtime)))\n        obj.InsertTrackSorted(tTrack)\n        newTrack = tTrack\n    else:\n        print \"already exist time track\"\n        findTrack.Remove()\n        c4d.EventAdd()\n        tTrack   = c4d.CTrack(obj, c4d.DescID(c4d.DescLevel(c4d.CTtime)))\n        obj.InsertTrackSorted(tTrack)\n        newTrack = tTrack\n\n    c4d.EventAdd()\n    return newTrack\n\ndef main():\n    print \"AddTimeTrack Test\"\n\n    doc     = c4d.documents.GetActiveDocument()\n    obj     = object_in\n    fps     = fps_in\n    frame   = start_in\n    fend    = end_in\n    fstep   = fstep_in\n    stepVar = value_in\n    setVar  = 0\n\n    doc.StartUndo()\n\n    tTrack = AddTimeTrack(obj, doc)\n    curve  = tTrack.GetCurve()\n\n    while frame < fend:\n\n        fKey = c4d.CKey()\n        tTrack.FillKey        ( doc  , obj, fKey )\n        fKey.SetTime          ( curve, c4d.BaseTime(frame, fps) )\n        fKey.SetInterpolation ( curve, c4d.CINTERPOLATION_STEP )\n        fKey.SetValue         ( curve, setVar )\n        curve.InsertKey       ( fKey )\n        frame  += fstep\n        setVar += stepVar\n\n    doc.AddUndo(c4d.UNDOTYPE_NEW, tTrack)\n    doc.EndUndo()\n    obj.Message(c4d.MSG_UPDATE)\n    c4d.EventAdd()\n\n    return\n```\n\nスイッチでノードをオンオフを切り替える時は必要に応じて〈フレーム依存〉と〈フレーム0でリセット〉の二つのオンオフ設定に気を付けた方が良いと思います．また，このXPressoタグの次に動作する二つ目のXPressoタグで一つ前のスイッチをオフにします．\n\n![20190414-1.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/195698/6e7d257b-a906-fba2-0465-6904aa388054.jpeg)\n\n###結果:\n\n立方体の45フレームでX方向に移動する元アニメーションに追加した時間トラックを適用したところです．\n![20190414-4.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/195698/418498f1-d07b-b883-8fee-c814ad3b6228.gif)\n\n\n\n###課題：\n\nAdd Time Trackをオンにした後，カーソルをタイムラインの上にもっていかないと更新が反映されないので，MessageとEventAddの用法に解決の糸口があるかもしれません．\n\nAddUndo()が機能しない．XPressoのPythonノードから立方体を追加するというテストコードでもAddUndo()ができませんでした．スクリプトマネージャから単独のコードで実行するとUndo()できるのでXPressoで使う場合はできないか，別の処理が必要かもしれません．\n\n\n\n\n\n\n","created_at":"2019-04-14T14:31:38+09:00","id":"9b0a5b94c26f291f6bbc","tags":[{"name":"Python","versions":[]},{"name":"Cinema4D","versions":[]}],"url":"https://qiita.com/Makoto-T/items/9b0a5b94c26f291f6bbc"},{"title":"SIerに入って８年ぐらい経ったのでいろいろ棚卸しをしてみる。【vol.003 MyBatis】","body":"## 出会い\n[vol.002](https://qiita.com/TsJazz27Sumin/items/44d5e09fe4cf4ee98bfb)に書いた通り、自分にとっては初のコーディングPJで出会った。\n自分が出会った当時は、iBATISと呼ばれていて後に後継としてMyBatisになっている。\n\n## MyBatisとは\n>MyBatis(マイバティス)とは、iBATIS(アイバティス)の後継プロジェクトで、マッピングファイルにSQL文を直接記述し「オブジェクトとSQL実行結果との間」でマッピングを行うという特徴を持つ、Javaおよび.NET Frameworkを対象とするORマッピングライブラリです。[オープンソースのフレームワーク／MyBatisとは](https://www.ossnews.jp/oss_info/MyBatis)\n\n- JDBCだとSQLをJavaのクラスに書くことになるため、その点、密結合な状態だった。\n- また、ResultSetから取得結果を取り出して、クラスにマッピングする分、手間があった。\n- MyBatisだとSQLを外部xmlファイルに記述することで、クラスとSQLを疎結合な状態にできる。\n- また、クラスへのマッピングはルールに基づいて記述すれば、自動マッピングしてくれる。\n- つまり、JDBCに比べるとMyBatisはちょっと気の利くやつである。\n\n## 振り返ってみて\n２０１２年頃の経験に基づくが、SQLを外部xmlファイルに記述しているメリットもあったが、デメリットもあったように思う。\n\n【メリット】\n使用するSQLが特定のxmlにまとまっているため、SQLのみを一括修正したりするときに楽だった。\n当時の現場では、機能単位ごとにxmlを分割していたので、調査・修正の際にSQLにたどり着くのは早かった気がする。\n\n【デメリット】\n動的にSQLを生成しないので検索パターンごとにSelectのクエリーを用意することになっていた。\n検索条件のパターンが多いものほど不毛さを感じた。※[現在、MyBatisでは動的SQLをサポートしている。](http://www.mybatis.org/mybatis-3/ja/dynamic-sql.html)\n当時のPJの先輩が「設計書から自動でSQLの外部ファイル生成」するExcelマクロを用意していたのを思い出した。\n\n静的にSQLをxmlに定義しておいて、それを利用するのがMyBatisの良い使い方だと思う。\n「動的にSQLを生成する」ことと「静的にSQLを定義しておく」ことを天秤にかけて、機能要件次第で採用判断になるのかなと思う。\n\n経験上、Webアプリの検索機能でよっぽどシンプルな検索条件でもない限り、多数の検索クエリーに対応することになる。パターンごとにSQLを静的に用意しておくと、SQLが爆裂するのでどうしても動的にSQLを生成することを検討せざるをえない。\n\n個人的には、SQLが外部ファイル化されているメリットってそんなに感じないので、動的SQLに対応していたとしてもMyBatisは使わない気がする。ただ、よっぽど大きなPJで「SQLだけ書くDB寄りのチーム」と「Javaでコーディングするチーム」で分けた方が生産性が高くなるなら採用するのかもしれない。\n\n## サンプルで実装してみる。\n以下をを参考にさせていただきました。\n\n - [公式ドキュメント](http://www.mybatis.org/mybatis-3/ja/getting-started.html)\n - [MyBatis 使い方メモ](https://qiita.com/opengl-8080/items/a9b5d4038f19d4813ee6)\n - [絶対分かるMyBatis！MyBatisで覚えるべきチェックルール25（前半）](https://qiita.com/5zm/items/e1faac61a1d00998fb1f)\n\n```java\npackage sample.mybatis.java.dao;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport sample.mybatis.java.dao.mapper.WorkerMapper;\nimport sample.mybatis.java.model.Worker;\n\npublic class SampleDao {\n\n\tpublic static SampleDao instance = new SampleDao();\n\n\tprivate SampleDao () {\n\n\t}\n\n\tpublic List<Worker> select() throws SQLException, IOException {\n\n\t\tList<Worker> workerList = null;\n\n\t\ttry (var in = Resources.getResourceAsStream(\"mybatis-config.xml\")) {\n            var factory = new SqlSessionFactoryBuilder().build(in);\n\n            try (var session = factory.openSession()) {\n            \tvar mapper = session.getMapper(WorkerMapper.class);\n                workerList = mapper.selectAll();\n            }\n        }\n\n        return workerList;\n\t}\n\n\tpublic void insert() throws SQLException, IOException {\n\n\t\ttry (var in = Resources.getResourceAsStream(\"mybatis-config.xml\")) {\n            var factory = new SqlSessionFactoryBuilder().build(in);\n\n            try (var session = factory.openSession()) {\n            \tvar mapper = session.getMapper(WorkerMapper.class);\n            \tvar worker = new Worker(\"0001\", \"k.jarrett\", 73, \"music\");\n            \tmapper.insert(worker);\n            \tsession.commit();\n            }\n        }\n\t}\n\n\tpublic void update() throws SQLException, IOException {\n\n\t\ttry (var in = Resources.getResourceAsStream(\"mybatis-config.xml\")) {\n            var factory = new SqlSessionFactoryBuilder().build(in);\n\n            try (var session = factory.openSession()) {\n            \tvar mapper = session.getMapper(WorkerMapper.class);\n            \tvar worker = new Worker(\"0001\", \"k.jarrett\", 74, \"music\");\n            \tmapper.update(worker);\n            \tsession.commit();\n            }\n        }\n\t}\n\n\tpublic void delete() throws SQLException, IOException {\n\n\t\ttry (var in = Resources.getResourceAsStream(\"mybatis-config.xml\")) {\n            var factory = new SqlSessionFactoryBuilder().build(in);\n\n            try (var session = factory.openSession()) {\n            \tvar mapper = session.getMapper(WorkerMapper.class);\n            \tvar worker = new Worker(\"0001\", \"k.jarrett\", 74, \"music\");\n            \tmapper.delete(worker);\n            \tsession.commit();\n            }\n        }\n\t}\n}\n\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE mapper PUBLIC\n  \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"sample.mybatis.java.dao.mapper.WorkerMapper\">\n  <resultMap id=\"workerResultMap\" type=\"sample.mybatis.java.model.Worker\">\n  \t<result property=\"id\" column=\"id\" />\n  \t<result property=\"name\" column=\"name\" />\n \t<result property=\"age\" column=\"age\" />\n \t<result property=\"department\" column=\"department\" />\n  </resultMap>\n  <select id=\"selectAll\" resultMap=\"workerResultMap\">\n    select * from worker\n  </select>\n  <insert id=\"insert\" parameterType=\"sample.mybatis.java.model.Worker\">\n    insert into worker\n    values (\n      #{id},\n      #{name},\n      #{age},\n      #{department}\n    )\n  </insert>\n  <update id=\"update\" parameterType=\"sample.mybatis.java.model.Worker\">\n    update worker\n    set name = #{name},\n        age = #{age},\n        department = #{department}\n    where id =  #{id}\n  </update>\n  <delete id=\"delete\" parameterType=\"sample.mybatis.java.model.Worker\">\n    delete from worker\n    where id = #{id}\n  </delete>\n</mapper>\n```\n\n```java\npackage sample.mybatis.java.dao.mapper;\n\nimport java.util.List;\n\nimport sample.mybatis.java.model.Worker;\n\npublic interface WorkerMapper {\n\n\tList<Worker> selectAll();\n\tvoid insert(Worker worker);\n\tvoid update(Worker worker);\n\tvoid delete(Worker worker);\n}\n```\n\nサンプルプロジェクトごとGitHubにプッシュしています。\nhttps://github.com/TsJazz27Sumin/mybatisSample/tree/master/src\n\n## サンプルで実装してみて感想。\n\n - Javaのクラスとxmlを行ったり来たりするのがめんどくさい。\n - 一度、設定すれば変更の手間はそんなにかからないのだろうけど、やっぱり設定多い。\n - だいぶアノテーションを使って楽にできるように進化しているみたいだけど、これならJPAで良い気がする。（※[MyBatis Mapper アノテーションの使い方](https://qiita.com/d-yosh/items/a2bec9718bccfe15a6ae)）\n - リフレクションのエラー：`java.lang.reflect.InaccessibleObjectException: Unable to make ~`にハマッた。\n  - `module-info.java`に`exports xxx;`を追加すればいいだけだけど、すぐ分からなかった。。\n","created_at":"2019-04-14T14:31:13+09:00","id":"199c15ea928f3d891000","tags":[{"name":"MyBatis","versions":[]},{"name":"SIer","versions":[]}],"url":"https://qiita.com/TsJazz27Sumin/items/199c15ea928f3d891000"},{"title":"今年の言語はRust その１２","body":"\n# 今年の言語はRust その１２\n\nRustを学びます\n\n\nRustの日本語ドキュメント 2nd Edition\nhttps://doc.rust-jp.rs/book/second-edition/\n\nオリジナル(英語)\nhttps://doc.rust-lang.org/book/\n\n\n\n## 7. モジュール\n\n### 7.1 modをファイルシステム\n\n```sh\n$ cargo new communicator --lib\n```\n\n最初の以下のモジュールを考える\n\nlib.rs\n\n```rust\n\nmod client {\n    fn connect(){\n        \n    }\n}\n\nmod network {\n    fn connect(){\n        \n    }\n    \n    mod server {\n        fn connect(){\n            \n        }\n    }\n}\n\n```\n\n\nさて、networkとclientモジュールを整理しよう\n\nファイル構成はまずいかのようになり\n\n```rust\n.\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   ├── client.rs\n│   └── network.rs\n\n```\n\n\n\nsrc/client.rs\n\n```rust\n\nfn connect(){\n    \n}\n```\n\n\nsrc/network.rs\n\n```rust\n\nfn connect(){\n}\n\nmod server {\n    fn connect(){\n        \n    }\n}\n```\n\n## モジュール用ディレクトリを作る\n\nnetworkディレクトリを作りその下に\nmod.rsというファイルを作る\n\n```rust\n.\n├── client.rs\n└── network\n    ├── mod.rs\n    └── server.rc\n```\n\n- client\n- network\n- network::server\n\nの三つのモジュールを定義できた\n\n\n\n\nおそらくほぼ理解した！\n以降の例題で体で覚える！\n深く考えてもしかたない\n\n\n次回！\n\n\nイエス！\n\n\n\n\n\n\n","created_at":"2019-04-14T14:29:52+09:00","id":"df65394af454a9005b43","tags":[{"name":"Rust","versions":[]}],"url":"https://qiita.com/peace098beat/items/df65394af454a9005b43"},{"title":"Elixir ~演算子の基本~","body":"#ここまでのあらまし\n\n[こちら](https://dev.to/gumi/elixir-03--33im) のページを参照しながらElixirの基本について備忘録的にドキュメントをしたためています。今回は演算子を扱います\n\n\n#本題\n\n四則演算については前回暑かったので割愛します。\n\n文字列をつなぐ演算子は<>\n\n```elixir\niex > name =\"kento\"\n\"kento\"\niex > \"my name is \"<> name\n\"my name is kento\"\n```\n\nアトムを加える場合は#{}で囲んで。\n\n```elixir\niex> \"hello #{:world}\"\n\"hello world\"\n```\n\n論理和演算子||と論理積演算子&&について。\n\n```elixir\niex> -1 || true\n-1\niex> false || 2\n2 \niex > nil && 3\nnil\niex > true && 4\n4\n```\n\n左オペランドを評価し、||はtrueなら左オペランドを、falseなら右オペランドを返す。\n&&はその逆。\n\n比較演算子について、だいたい覚えてるからいいかな...と思いましたが異なる型のデータでも大小比較ができるようです。\n\nデータの大小について、\n\n```\nnumber < atom < reference < function < port < pid < tuple < map < list < bitstring\n```\n\nという決まりがあるようです。\n\n＃編集後記\n\n突っ走って本日3本目のドキュメント更新です。\n基本的には自分のために書いていますがどなたかのご理解の一助のきっかけになったら幸いです。\nうまずたゆまず、頑張ります。\nKento Mizuno\n\n\n\n","created_at":"2019-04-14T14:29:21+09:00","id":"e6f8ae7981479478b029","tags":[{"name":"Elixir","versions":[]},{"name":"fukuoka.ex","versions":[]}],"url":"https://qiita.com/kmizuno0211/items/e6f8ae7981479478b029"},{"title":"ブラウザバックでページ表示された時にだけ処理を実行する方法","body":"みんな大嫌いブラウザバックに関連した処理のお話し。\n\n# 実現したいこと\nブラウザバックにより表示された場合にだけ、通常のページ表示とは違う処理を実行したい。\nたとえば、ページ表示直後に何らかの演出が表示されるが、当該ページから離脱後にブラウザバックで戻ってきた時には（冗長なので）その演出を見せたくない場合があったりする。\n\n## やりたいのは以下ではない\n- 当該ページでブラウザバックされたのを検出する（popstate）\n- 通常のページ表示では実行される処理が、ブラウザバック時に実行されない事態を回避する（ = 通常表示時もブラウザバック表示時も同じにしたい）\n\n# 実現方法\nページ離脱時に、history.stateに任意の値を指定して履歴を書き換えておく。\nそして、ページ表示時にhistory.stateを確認して、ブラウザバックか否かを確認する。\n\n```Javascript\nwindow.onunload = function () {\n  if (history && history.replaceState){\n    // ページ離脱時に、Stateオブジェクトに任意の文字列を指定して履歴を書き換える\n    history.replaceState('unloaded',null, null);\n  }\n}\n\nwindow.onpageshow = function () {\n  if(history && history.state === 'unloaded'){\n    // ブラウザバック時にのみ実行する処理を記述する\n  }\n}\n```\n\n### 注意\nonpageshowイベントのpersistedは使えない。\nキャッシュからページ表示された場合にtrueになるのだが、表示環境が十分に早いなどしてブラウザがキャッシュを使わない場合には、falseになる。ゆえに、ブラウザバックか否かを判定する場合には使えない。\n","created_at":"2019-04-14T14:23:17+09:00","id":"e591452811add8f4fb56","tags":[{"name":"JavaScript","versions":[]}],"url":"https://qiita.com/HieroglypH/items/e591452811add8f4fb56"},{"title":"プログラム初心者のためのC#入門 #5 ループ処理","body":"# #5 ループ処理\nループ処理は同じような処理を繰り返して実行する際に用いられます．\n\n## for文\n    for(初期化式; 条件式; 更新式)\n    {\n        ※ 繰り返したい処理\n    }\n初期化式のところには初めに一度だけ実行する式で，大抵は繰り返し変数という変数を定義・初期化するために用いられます．条件式は※の処理を実行する前に毎回判定され，条件式がtrueの間※の処理が繰り返されます．更新式は※の処理の後に毎回実行される処理です．\n次に具体例を見てみましょう．\n\n```LoopSample.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace LoopSample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            for(int i = 0; i < 5; i++)\n            {\n                Console.WriteLine(i + \". Hello, world!\");\n            }\n        }\n    }\n}\n\n```\n```:出力結果\n0. Hello, world!\n1. Hello, world!\n2. Hello, world!\n3. Hello, world!\n4. Hello, world!\n```\n##while文\n    while(条件式)\n    {\n        ※ 繰り返したい処理\n    }\nwhile文は条件式がtrueの間※の処理を繰り返すものです．for文とは違い，初期化式をwhile文の前に，更新式をwhile文の中に書く必要があります．\n\n```LoopSample.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace LoopSample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int i = 0;\n            while(i < 5)\n            {\n                Console.WriteLine(i + \". Hello, world!\");\n                i++;\n            }\n        }\n    }\n}\n\n```\n```:出力結果\n0. Hello, world!\n1. Hello, world!\n2. Hello, world!\n3. Hello, world!\n4. Hello, world!\n```\n##do-while文\n    do\n    {\n        ※ 繰り返したい処理\n    } while(条件式);\nfor文，while文は初めから条件式が`false`なら1度も※の処理を実行しませんが，do-while文は初めから条件式が`false`でも1度は※の処理を実行してくれるというものです．\n\n```LoopSample.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace LoopSample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int i = 5;\n            do\n            {\n                Console.WriteLine(i + \". Hello, world!\");\n                i++;\n            } while(i < 5);\n        }\n    }\n}\n\n```\n```:出力結果\n5. Hello, world!\n```\n##break文\nbreak文は一番内側のループ処理を強制的に抜ける文です．\n\n```csharp\nfor(int i = 0; true; i++)\n{\n    if (i == 5) break;\n    Console.WriteLine(i + \". Hello, world!\");\n}\n```\n```:出力結果\n0. Hello, world!\n1. Hello, world!\n2. Hello, world!\n3. Hello, world!\n4. Hello, world!\n```\nこのfor文は条件式に`true`が入っているので，ずっと`Hello, world!`と出力し続ける無限ループのコードになってしまいます．しかし，if文によってもし`i`が`5`のときはbreak文を実行するようになっているので，6回目の`Hello, world!`は出力されずに処理が終わります．\n##continue文\ncontinue文はループ処理のcontinue文以降の処理をスキップするものです．\n\n```csharp\nfor(int i = 0; i < 5; i++)\n{\n    if (i == 2) continue;\n    Console.WriteLine(i + \". Hello, world!\");\n}\n```\n```:出力結果\n0. Hello, world!\n1. Hello, world!\n3. Hello, world!\n4. Hello, world!\n```\nこのfor文は5回だけ`Hello, world!`と出力されるものになります．しかし，またしてもif文によってもし`i`が`2`のときはcontinue文を実行するようになっているので，3回目の`Hello, world!`は出力されずに処理が中断されますが，4回目の処理から再開されます．\n\n次回は配列について説明します．\n\n##練習問題\nwhile文の条件式が`true`の100から1までカウントダウンして画面に出力するコードを書いてください．ただし，6の倍数はカウントせずに飛ばしてください．\n","created_at":"2019-04-14T14:23:07+09:00","id":"506c065e6fc16345604b","tags":[{"name":"C#","versions":[]},{"name":"入門","versions":[]}],"url":"https://qiita.com/17t7037t/items/506c065e6fc16345604b"},{"title":"英国留学挂科怎么办，挂科还能拿到学位吗 ","body":"英国留学挂科怎么办，挂科还能拿到学位吗 +Q：575121832\n英国伦敦是座很迷人的城市，在这里可以感受到国际大都市的繁华与热闹，也可以感受到一座历史文化城市的艺术积淀。来了英国留学才知道中国的有钱人真的很多，厉害的留学生也很多，想要在有限的留学期里拓宽自己的交友圈，就必须参加很多的社交活动，除此之外学习也不能落下，所以社交和赶作业几乎组成了留学生在这边生活的全部。而留学注定是一个艰难的过程。最艰（ku）难（bi）的是，你在努力适应新环境，也许你可能还听不懂课的时候，就已经要面临强大的学业压力——各种小测验、论文和考试扑面而来。面对各种学业压力，因此挂科就成了留学生常见的问题。那英国留学生挂科了怎么办?该如何补救?\n1、Undergraduate 本科阶段\n不同院校要求不同，有的完全不予以补考或重修的机会，有些可以参加补考的课程数量有限。通常重修补考的要求会相应提高，如果补考重修后仍然没有通过，此时学生会受到学校的劝退信。\n作为学生党，学习与考试自然是常伴左右，如果因为一次学习的松懈或失误，导致自己的本科课程没有考好，成绩不理想，那简直是场噩梦！有些幸运点的学生或许会有机会通过补考或者重修就可以，但不幸的同学或许会面临被留校观察、开除、劝退等处罚/咨询Q：（575121832/米工程提供挂科修改/提高加权平均分/修改论文挂科/消除开除劝退等服务）\n2、Graduate 研究生\n英国硕士一般只有一年，所以不存在劝退的说法。留学生会在毕业时拿到自己的成绩。有些专业要求所有科目中不能同时挂科两门，一般挂科一两门有机会申请重考，最后获得的学分决定了最后的证书。\n\n一般英国获得180学分即授予Master Degree;120学分授予Postgraduate Diploma;60分则授予Postgraduate Certificate。\n\n如果硕士挂科了，第一个硕士课程没有获得学位，可以再申请第二个，但是第一个课程失败也会影响第二次的申请。咨询Q：（575121832）米工程/提供挂科修改\n\n出国留学最好要对自己有个大概的规划，在国外读大学，事情还是挺多的。时间规划听起来简单，其实还真没那么容易。不管是努力学习、参加课外活动、搞搞社交或者校外打工，所有的时间安排都要自己来决定。一个不小心很容易无法平衡好学习和其他活动。尤其是期末的时候，考试和一大堆论文都挤在一起，规划好时间就更重要了。在海外留学，一定要对自己负责！\n","created_at":"2019-04-14T14:21:16+09:00","id":"fb14af7ee6c67438b9c5","tags":[{"name":"英国留学挂科怎么办，挂科还能拿到学位吗","versions":[]}],"url":"https://qiita.com/xixili/items/fb14af7ee6c67438b9c5"},{"title":"ディープラーニングを実装から学ぶ～ （まとめ5）MNIST NNのみで99.5%(データ拡張)","body":"前回は、CNNを用いてMNISTのテストデータの正解率を99%まで向上させることができました。\n今回は、CNNを使わずに通常のニューラルネットワークのみで99%を目指します。\n(最終的に、99.5%までテストデータの正解率を向上させることができました。)\n\n# プログラム見直し\n「ディープラーニングを実装から学ぶ～ (まとめ１）実装は、実は簡単」のプログラムを利用しますが、「ディープラーニングを実装から学ぶ～ （まとめ４）MNISTで99%も簡単！」での変更の対応を事前に行います。\n変更点は以下です。\n\n* 学習データのエポックごとの正解率を学習時の結果を利用します。\n* エポックごとの正解率表示を関数とします。また、テストデータの予測をバッチサイズごとに行います。\n* 学習時にデータをソートするかどうかをフラグにします。\n\nプログラムは、最後のプログラム全体に記載しますので、そちらを参考にしてください。\n\nまず、MNISTのデータを読み込みます。MNISTのデータファイルは、あらかじめdataフォルダに格納しておくこととします。\n\n```python\n# MNISTデータ読み込み\nx_train, t_train, x_test, t_test = load_mnist('data/')\n\n# 入力データの正規化(0～1)\nnx_train = x_train/255\nnx_test  = x_test/255\n```\n\n# データ拡張\nMNISTは、手書き数字です。大きく書く人や小さく書く人、傾けて書く人など癖があります。データのバリエーションを増やしてみましょう。\n\n## 平行移動\n上下、左右に平行移動した図形を考えます。$(x,y)$を横方向に、$ d_x $、縦方向に、$ d_y $移動した場合、以下の式で表せます。\n\n```math\nx_{shift} = x + d_x\\\\\ny_{shift} = y + d_y\n```\n\n移動するプログラムを考えます。平行移動のみであれば簡単ですが、今後の拡大・縮小や回転にも対応できる方法とします。\n\nMNISTは、28$\\times$28の画像です。以下のように、画像の中心を原点として考えます。\n![5_rei.png](https://qiita-image-store.s3.amazonaws.com/0/212365/45ce2704-3c7e-4313-52e9-c73608a4bd4c.png)\n\nそれぞれのピクセルの中央の座標がどこに移動するかを考えます。\nここでは、横方向に1($ d_x = 1 $)、縦方向に1($ d_y = 1 $)平行移動する場合を考えます。\n中央の座標が以下のようになります。\n(0.5, 0.5) → (0.5+1, 0.5+1) = (1.5, 1.5)\nよって、以下のように移動します。\n(0, 0) → (1, 1)\n![shift.png](https://qiita-image-store.s3.amazonaws.com/0/212365/f6db5358-9ca1-edfb-296a-95b5ca6269cb.png)\n\n平行移動するプログラムを考えます。\n画像のサイズをw,hとすると中心を以下のように計算します。\n\n```python\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n```\n\n各ピクセルの中心がどこに入るかを計算します。\n画像の中心からの位置を計算するためmw,mhを引いて、各ピクセルの中心を求めるため0.5を足します。それに、移動量x_shift_range、y_shift_rangeを加えます。最後に、位置を戻すため、mw,mhを加えます。\n\n```python\n            x_gen = int(np.floor((x - mw + 0.5) + x_shift_range + mw))\n            y_gen = int(np.floor((y - mh + 0.5) + y_shift_range + mh))\n```\n\n移動先の位置に元データのピクセル値を代入します。\n気を付けるべきは、移動後にもとの画像サイズをはみ出す場合があることです。そのため、はみ出した部分は無視します。\n\n```python\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n```\n\nMNISTのデータを1次元のデータとして読み込んでいました。画像として処理するため2次元にreshapeします。reshapeするための型をパラメータで渡します。\nプログラム全体です。\n\n```python\ndef shift(img, shape=None, x_shift_range=0, y_shift_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 平行移動\n            x_gen = int(np.floor((x - mw + 0.5) + x_shift_range + mw))\n            y_gen = int(np.floor((y - mh + 0.5) + y_shift_range + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n上下、左右に１ピクセル移動します。\n\n```python\n# 上下、左右に１ピクセル移動\nnx_train_u1 = shift(nx_train, shape=(28,28), x_shift_range= 0, y_shift_range=-1) # 上\nnx_train_d1 = shift(nx_train, shape=(28,28), x_shift_range= 0, y_shift_range= 1) # 下\nnx_train_l1 = shift(nx_train, shape=(28,28), x_shift_range=-1, y_shift_range= 0) # 左\nnx_train_r1 = shift(nx_train, shape=(28,28), x_shift_range= 1, y_shift_range= 0) # 右\n```\n\n１番目のデータを表示してみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 6))\nplt.subplot(1, 5, 1)\nplt.imshow(nx_train[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 2)\nplt.imshow(nx_train_u1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 3)\nplt.imshow(nx_train_d1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 4)\nplt.imshow(nx_train_l1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 5)\nplt.imshow(nx_train_r1[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n左から、元データ、上、下、左、右に１ピクセル移動したデータです。\n![shift_5_1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/3fea4b69-2926-33d0-e616-eadec76fa3eb.png)\n\n元の画像と生成した画像を結合し学習してみます。\n\n```python\n# 上下、左右に１ピクセル移動データを結合\nnx_train_s = np.concatenate([nx_train,\n                             nx_train_u1, nx_train_d1, nx_train_l1, nx_train_r1])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\nパラメータは、基本的に、「ディープラーニングを実装から学ぶ～ (まとめ１）実装は、実は簡単」と同じですが、以下の２点を変更しています。\n\n* 学習率を0.25に変更\n* エポックごとにデータをソート\n\n```python\n# ノード数設定\nd0 = nx_train_s.shape[1]\nd1 = 100 # 1層目のノード数\nd2 = 50  # 2層目のノード数\nd3 = 10\n# 重みの初期化(-0.1～0.1の乱数)\nnp.random.seed(8)\nW1 = np.random.rand(d0, d1) * 0.2 - 0.1\nW2 = np.random.rand(d1, d2) * 0.2 - 0.1\nW3 = np.random.rand(d2, d3) * 0.2 - 0.1\n# バイアスの初期化(0)\nb1 = np.zeros(d1)\nb2 = np.zeros(d2)\nb3 = np.zeros(d3)\n\n# 学習率\nlr = 0.25\n# バッチサイズ\nbatch_size = 100\n# 学習回数\nepoch = 50\n# シャッフルフラグ\nshuffle = True\n\n# 誤差、正解率表示\nprint_metrics(0, nx_train_s, t_train_s, None, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n\nfor i in range(epoch):\n    # データシャッフル\n    idx = np.arange(nx_train_s.shape[0])\n    if shuffle:\n        np.random.shuffle(idx)\n    \n    # 学習\n    y_train_s = np.zeros_like(t_train_s)\n    for j in range(0, nx_train_s.shape[0], batch_size):\n         y_train_s[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3 = learn(nx_train_s[idx[j:j+batch_size]], t_train_s[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3, lr)\n\n    # 誤差、正解率表示\n    print_metrics(i+1, nx_train_s, t_train_s, y_train_s, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n```\n\n```\n  0 train_rate= 12.43% test_rate= 12.18% train_err= 2.30582 test_err= 2.30601\n  1 train_rate= 93.50% test_rate= 97.73% train_err= 0.20986 test_err= 0.07357\n  2 train_rate= 97.61% test_rate= 97.94% train_err= 0.07629 test_err= 0.06255\n  3 train_rate= 98.21% test_rate= 98.36% train_err= 0.05618 test_err= 0.04926\n  4 train_rate= 98.55% test_rate= 98.38% train_err= 0.04516 test_err= 0.04923\n  5 train_rate= 98.78% test_rate= 98.42% train_err= 0.03767 test_err= 0.04756\n  6 train_rate= 98.92% test_rate= 98.38% train_err= 0.03251 test_err= 0.05573\n  7 train_rate= 99.08% test_rate= 98.44% train_err= 0.02855 test_err= 0.04835\n  8 train_rate= 99.18% test_rate= 98.65% train_err= 0.02500 test_err= 0.04671\n  9 train_rate= 99.24% test_rate= 98.74% train_err= 0.02253 test_err= 0.04717\n 10 train_rate= 99.33% test_rate= 98.60% train_err= 0.01991 test_err= 0.05191\n 11 train_rate= 99.41% test_rate= 98.55% train_err= 0.01792 test_err= 0.05125\n 12 train_rate= 99.46% test_rate= 98.49% train_err= 0.01618 test_err= 0.05278\n 13 train_rate= 99.50% test_rate= 98.55% train_err= 0.01480 test_err= 0.05487\n 14 train_rate= 99.56% test_rate= 98.71% train_err= 0.01353 test_err= 0.05082\n 15 train_rate= 99.56% test_rate= 98.36% train_err= 0.01292 test_err= 0.06426\n 16 train_rate= 99.57% test_rate= 98.52% train_err= 0.01242 test_err= 0.06116\n 17 train_rate= 99.61% test_rate= 98.64% train_err= 0.01126 test_err= 0.05805\n 18 train_rate= 99.66% test_rate= 98.46% train_err= 0.01006 test_err= 0.06139\n 19 train_rate= 99.70% test_rate= 98.54% train_err= 0.00899 test_err= 0.06503\n 20 train_rate= 99.70% test_rate= 98.51% train_err= 0.00862 test_err= 0.06596\n 21 train_rate= 99.75% test_rate= 98.61% train_err= 0.00729 test_err= 0.06831\n 22 train_rate= 99.73% test_rate= 98.47% train_err= 0.00786 test_err= 0.07145\n 23 train_rate= 99.74% test_rate= 98.55% train_err= 0.00779 test_err= 0.07440\n 24 train_rate= 99.69% test_rate= 98.42% train_err= 0.00895 test_err= 0.07046\n 25 train_rate= 99.77% test_rate= 98.51% train_err= 0.00657 test_err= 0.07177\n 26 train_rate= 99.80% test_rate= 98.57% train_err= 0.00575 test_err= 0.07639\n 27 train_rate= 99.80% test_rate= 98.39% train_err= 0.00568 test_err= 0.08375\n 28 train_rate= 99.76% test_rate= 98.70% train_err= 0.00671 test_err= 0.06803\n 29 train_rate= 99.81% test_rate= 98.59% train_err= 0.00543 test_err= 0.07394\n 30 train_rate= 99.84% test_rate= 98.47% train_err= 0.00455 test_err= 0.07835\n 31 train_rate= 99.82% test_rate= 98.53% train_err= 0.00540 test_err= 0.07455\n 32 train_rate= 99.85% test_rate= 98.42% train_err= 0.00443 test_err= 0.07507\n 33 train_rate= 99.72% test_rate= 98.55% train_err= 0.00794 test_err= 0.07823\n 34 train_rate= 99.82% test_rate= 98.25% train_err= 0.00493 test_err= 0.09489\n 35 train_rate= 99.77% test_rate= 98.47% train_err= 0.00720 test_err= 0.08478\n 36 train_rate= 99.81% test_rate= 98.43% train_err= 0.00564 test_err= 0.09077\n 37 train_rate= 99.86% test_rate= 98.56% train_err= 0.00418 test_err= 0.07885\n 38 train_rate= 99.90% test_rate= 98.71% train_err= 0.00289 test_err= 0.07677\n 39 train_rate= 99.93% test_rate= 98.59% train_err= 0.00222 test_err= 0.08077\n 40 train_rate= 99.98% test_rate= 98.71% train_err= 0.00076 test_err= 0.07616\n 41 train_rate= 99.99% test_rate= 98.73% train_err= 0.00037 test_err= 0.07609\n 42 train_rate=100.00% test_rate= 98.79% train_err= 0.00016 test_err= 0.07562\n 43 train_rate=100.00% test_rate= 98.79% train_err= 0.00011 test_err= 0.07662\n 44 train_rate=100.00% test_rate= 98.80% train_err= 0.00009 test_err= 0.07654\n 45 train_rate=100.00% test_rate= 98.77% train_err= 0.00008 test_err= 0.07676\n 46 train_rate=100.00% test_rate= 98.79% train_err= 0.00008 test_err= 0.07738\n 47 train_rate=100.00% test_rate= 98.79% train_err= 0.00007 test_err= 0.07778\n 48 train_rate=100.00% test_rate= 98.80% train_err= 0.00007 test_err= 0.07768\n 49 train_rate=100.00% test_rate= 98.81% train_err= 0.00006 test_err= 0.07820\n 50 train_rate=100.00% test_rate= 98.79% train_err= 0.00006 test_err= 0.07786\n```\n\n50エポック後のテストデータの正解率は、98.79%となりました。最高では、98.8%を超えました。元は、98.2%程度でしたので、大幅な精度向上です。びっくりです。\n\n今度は、斜め方向に１ピクセル移動します。\n\n```python\n# 斜め方向に１ピクセル移動\nnx_train_ul1 = shift(nx_train, shape=(28,28), x_shift_range=-1, y_shift_range=-1)\nnx_train_dl1 = shift(nx_train, shape=(28,28), x_shift_range=-1, y_shift_range= 1)\nnx_train_ur1 = shift(nx_train, shape=(28,28), x_shift_range= 1, y_shift_range=-1)\nnx_train_dr1 = shift(nx_train, shape=(28,28), x_shift_range= 1, y_shift_range= 1)\n```\n\n左から、元データ、左上、左下、右上、右下に１ピクセル移動したデータです。\n![shift_5_2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/9f2e50a6-372a-488b-ba74-af7fe80fc67a.png)\n\n元データと結合します。\n\n```python\n# 斜め方向に１ピクセル移動\nnx_train_s = np.concatenate([nx_train,\n                             nx_train_ul1, nx_train_dl1, nx_train_ur1, nx_train_dr1])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\n学習してみます。学習プログラムは同じです。\n結果の一部です。\n\n```\n  0 train_rate= 12.96% test_rate= 12.18% train_err= 2.30540 test_err= 2.30601\n  1 train_rate= 92.78% test_rate= 97.61% train_err= 0.23281 test_err= 0.07629\n  2 train_rate= 97.36% test_rate= 98.22% train_err= 0.08645 test_err= 0.05615\n  3 train_rate= 97.95% test_rate= 98.43% train_err= 0.06618 test_err= 0.05400\n・・・\n 38 train_rate= 99.75% test_rate= 98.68% train_err= 0.00726 test_err= 0.08336\n・・・\n 50 train_rate= 99.77% test_rate= 98.57% train_err= 0.00695 test_err= 0.09346\n```\n\n先ほどより精度が悪いですが、それでも元と比べるとかなり良くなっています。\n\n## 拡大・縮小\n次に、拡大縮小を試してみます\n$(x,y)$を横方向に$ f_x $倍、縦方向に$ f_y $倍した場合、以下の式で表せます。\n\n```math\nx_{scaling} = x \\times f_x\\\\\ny_{scaling} = y \\times f_y\n```\n\n拡大・縮小時ピクセルの中央の座標がどこに移動するかを考えます。\nまずは拡大の場合です。横方向、縦方向とも1.5倍($f_x=1.5$,$f_y=1.5$)します。中央の座標は以下のようになります。\n(1.5, 1.5) → (1.5*1.5, 1.5*1.5) = (2.25, 2.25)\nよって、以下のように移動します。\n(1, 1) → (2, 2)\n次に縮小の場合です。横方向、縦方向とも0.5倍($f_x=0.5$,$f_y=0.5$)します。中央の座標は以下のようになります。\n(1.5, 1.5) → (1.5*0.5, 1.5*0.5) = (0.75, 0.75)\nよって、以下のように移動します。\n(1, 1) → (0, 0)\n![scaling.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/a37e9881-4458-e2a7-d49a-1692ebc7ee0d.png)\n\n拡大・縮小するプログラムを考えます。\nデータを生成する部分を拡大・縮小に変更します。\n\n```python\n            x_gen = int(np.floor((x - mw + 0.5) * x_scaling_range + mw))\n            y_gen = int(np.floor((y - mh + 0.5) * y_scaling_range + mh))\n```\n\n拡大・縮小関数全体です。\n\n```python\ndef scaling(img, shape=None, x_scaling_range=0, y_scaling_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 拡大・縮小\n            x_gen = int(np.floor((x - mw + 0.5) * x_scaling_range + mw))\n            y_gen = int(np.floor((y - mh + 0.5) * y_scaling_range + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n1.1倍に拡大、0.9倍に縮小、1.2倍に拡大、0.8倍に縮小します。\n\n```python\n# 拡大・縮小\nnx_train_su1  = scaling(nx_train, shape=(28,28), x_scaling_range=1.1, y_scaling_range=1.1)\nnx_train_sd1  = scaling(nx_train, shape=(28,28), x_scaling_range=0.9, y_scaling_range=0.9)\nnx_train_su2  = scaling(nx_train, shape=(28,28), x_scaling_range=1.2, y_scaling_range=1.2)\nnx_train_sd2  = scaling(nx_train, shape=(28,28), x_scaling_range=0.8, y_scaling_range=0.8)\n```\n\n学習データの0番目のデータを表示してみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 6))\nplt.subplot(1, 5, 1)\nplt.imshow(nx_train[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 2)\nplt.imshow(nx_train_su1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 3)\nplt.imshow(nx_train_sd1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 4)\nplt.imshow(nx_train_su2[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 5)\nplt.imshow(nx_train_sd2[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n左から、元データ、1.1倍、0.9倍、1.2倍、0.8倍の画像です。\n![scaling_5.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/8dbd6e87-1703-4f7f-52c0-b6c36f822794.png)\n\n拡大した場合、途中に抜けがあります。正確に拡大・縮小を行う場合はもっと対処が必要ですが、ここではこれでよしとします。\n\n画像を結合し学習を実行します。\n\n```python\n# 拡大・縮小\nnx_train_s = np.concatenate([nx_train,\n                             nx_train_su1, nx_train_sd1, nx_train_su2, nx_train_sd2])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\n結果です。\n\n\n```\n  0 train_rate= 11.21% test_rate= 12.18% train_err= 2.30609 test_err= 2.30601\n  1 train_rate= 93.06% test_rate= 97.46% train_err= 0.22408 test_err= 0.08599\n  2 train_rate= 97.36% test_rate= 97.46% train_err= 0.08397 test_err= 0.08080\n  3 train_rate= 98.09% test_rate= 97.92% train_err= 0.06037 test_err= 0.06721\n・・・\n 45 train_rate=100.00% test_rate= 98.58% train_err= 0.00006 test_err= 0.11247\n・・・\n 50 train_rate=100.00% test_rate= 98.55% train_err= 0.00005 test_err= 0.11379\n```\n\nやはり、精度が向上しました。\n\n## 回転\n次に回転を行います。\n$(x,y)$を$ \\theta $回転した場合、以下の式で表せます。\n\n```math\nx_{rotation} = x \\cos\\theta - y \\sin\\theta\\\\\ny_{rotation} = x \\sin\\theta + y \\cos\\theta\n```\n\n回転時ピクセルの中央の座標がどこに移動するかを考えます。\n30度左回転します。中央の座標は以下のようになります。\n(1.5, 1.5) → ($1.5 \\times \\cos30$ - $1.5 \\times \\sin30$, $1.5 \\times \\sin30$ + $1.5 \\times \\cos30$) = (2.05, 0.55)\nよって、以下のように移動します。\n(1, 1) → (2, 0)\n![rotation.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/45fa3170-7ff6-23ae-0253-c95849c9422a.png)\n\n回転するプログラムを考えます。\n\nパラメータは、度で渡しましたが、sin,cosの計算はラジアンで行うため事前に変換します。\n\n```python\n    # 度→ラジアン\n    rd_rotation_range = np.radians(rotation_range)\n```\n\n回転部分を変更します。\n\n```python\n            x_gen = int(np.floor((x - mw + 0.5) * np.cos(rd_rotation_range) - (y - mh + 0.5) * np.sin(rd_rotation_range) + mw))\n            y_gen = int(np.floor((x - mh + 0.5) * np.sin(rd_rotation_range) + (y - mh + 0.5) * np.cos(rd_rotation_range) + mh))\n```\n\n回転関数全体です。\n\n```python\ndef rotation(img, shape=None, rotation_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n    # 度→ラジアン\n    rd_rotation_range = np.radians(rotation_range)\n\n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 回転\n            x_gen = int(np.floor((x - mw + 0.5) * np.cos(rd_rotation_range) - (y - mh + 0.5) * np.sin(rd_rotation_range) + mw))\n            y_gen = int(np.floor((x - mh + 0.5) * np.sin(rd_rotation_range) + (y - mh + 0.5) * np.cos(rd_rotation_range) + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n右に10度、左に10度、右に20度、左に20度回転します。\n\n```python\n# 回転\nnx_train_rr10 = rotation(nx_train, shape=(28,28), rotation_range= 10)\nnx_train_rl10 = rotation(nx_train, shape=(28,28), rotation_range=-10)\nnx_train_rr20 = rotation(nx_train, shape=(28,28), rotation_range= 20)\nnx_train_rl20 = rotation(nx_train, shape=(28,28), rotation_range=-20)\n```\n\n学習データの0番目のデータを表示してみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 6))\nplt.subplot(1, 5, 1)\nplt.imshow(nx_train[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 2)\nplt.imshow(nx_train_rr10[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 3)\nplt.imshow(nx_train_rl10[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 4)\nplt.imshow(nx_train_rr20[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 5)\nplt.imshow(nx_train_rl20[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n左から、元データ、右10度、左10度、右20度、左20度回転の画像です。\n![rotation_5.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/2e6633ae-32f9-adbd-6776-7b3d9a3cffe8.png)\n\n画像を結合し学習を実行します。\n\n```python\n# 拡大・縮小\nnx_train_s = np.concatenate([nx_train,\n                             nx_train_rr10, nx_train_rl10, nx_train_rr20, nx_train_rl20])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\n結果です。\n\n```\n  0 train_rate= 12.57% test_rate= 12.18% train_err= 2.30448 test_err= 2.30601\n  1 train_rate= 92.76% test_rate= 97.42% train_err= 0.23071 test_err= 0.08477\n  2 train_rate= 97.20% test_rate= 97.55% train_err= 0.08909 test_err= 0.08142\n  3 train_rate= 97.91% test_rate= 97.98% train_err= 0.06625 test_err= 0.06674\n・・・\n 47 train_rate=100.00% test_rate= 98.58% train_err= 0.00007 test_err= 0.09674\n・・・\n 50 train_rate=100.00% test_rate= 98.57% train_err= 0.00006 test_err= 0.09705\n```\n\n回転でも精度が向上しました。\n\n## 参考\n他にも反転が考えられますが、数字のため反転には対応できません。\n元データを５つ分結合した場合の結果も確認してみます。\n\n```python\nnx_train_s = np.concatenate([nx_train,\n                             nx_train, nx_train, nx_train, nx_train])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\n学習結果です。\n\n```\n  0 train_rate= 11.67% test_rate= 12.18% train_err= 2.30623 test_err= 2.30601\n  1 train_rate= 94.99% test_rate= 97.33% train_err= 0.16258 test_err= 0.09243\n  2 train_rate= 98.79% test_rate= 97.78% train_err= 0.03947 test_err= 0.08247\n  3 train_rate= 99.49% test_rate= 97.95% train_err= 0.01714 test_err= 0.07971\n・・・\n 32 train_rate=100.00% test_rate= 98.04% train_err= 0.00005 test_err= 0.11965\n・・・\n 50 train_rate=100.00% test_rate= 98.02% train_err= 0.00003 test_err= 0.12452\n```\n\n単にデータを結合するだけでは、精度は改善しませんでした。\n\nこれまでの結果を表にします。50エポック実行後のテストデータの正解率と最大の正解率です。\n\n|データ拡張方法|テスト正解率|テスト最大|\n|:---------------------------|------:|------:|\n|上下左右に１ピクセル移動      | 98.79 | 98.81 |\n|斜め方向に１ピクセル移動      | 98.57 | 98.68 |\n|1.1,0.9,1.2,0.8倍に拡大・縮小| 98.55 | 98.58 |\n|10度、20度、右左回転         | 98.57 | 98.58 |\n|参考(データ5倍)              | 98.02 |98.04 |\n\n# データ生成\n## 乱数によるデータ生成\n今までのようにデータを増やしもよいのですが、学習に必要なリソースが増えること、時間がかかるため別の方法を考えます。\n乱数によりデータを変換することを考えます。\n今まで、平行移動、拡大・縮小、回転を別々に行いました。合わせて行うことを考えます。\nデータの変換は、以下の式で表せます。\n\n```math\nx_{gen} = (x\\cos\\theta - y\\sin\\theta) * f_x + d_x\\\\\ny_{gen} = (x\\sin\\theta + y\\cos\\theta) * f_y + d_y\n```\n\n$d_x$ : 横方向の移動\n$d_y$ : 縦方向の移動\n$f_x$ : 横方向の拡大・縮小\n$f_y$ : 縦方向の拡大・縮小\n$\\theta$ : 回転角度\n\n乱数で指定した範囲内で移動、拡大・縮小、回転を決めます。\n例えば、移動距離に1を指定した場合、-1～1の範囲で乱数で決定します。同様に、拡大・縮小率を0.1とした場合、0.9～1.1倍の範囲、回転角度を10度とした場合、-10～10度の間で決めます。\n\n```python\n    # 乱数\n    x_shift = np.random.rand() * x_shift_range*2 - x_shift_range           # 左右の移動距離\n    y_shift = np.random.rand() * y_shift_range*2 - y_shift_range           # 上下の移動距離\n    x_scaling = 1 + np.random.rand() * x_scaling_range*2 - x_scaling_range # 左右の拡大縮小率\n    y_scaling = 1 + np.random.rand() * y_scaling_range*2 - y_scaling_range # 上下の拡大縮小率\n    rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n```\n\nデータの変換部分です。\n\n```python\n            x_gen = int(np.floor(((x - mw + 0.5) * np.cos(rd_rotation) - (y - mh + 0.5) * np.sin(rd_rotation)) * x_scaling + x_shift + mw))\n            y_gen = int(np.floor(((x - mh + 0.5) * np.sin(rd_rotation) + (y - mh + 0.5) * np.cos(rd_rotation)) * y_scaling + y_shift + mh))\n```\n\n関数全体です。\n\n```python\ndef generator(img, shape=None, x_shift_range=0, y_shift_range=0, x_scaling_range=0, y_scaling_range=0, rotation_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # 乱数\n    x_shift = np.random.rand() * x_shift_range*2 - x_shift_range           # 左右の移動距離\n    y_shift = np.random.rand() * y_shift_range*2 - y_shift_range           # 上下の移動距離\n    x_scaling = 1 + np.random.rand() * x_scaling_range*2 - x_scaling_range # 左右の拡大縮小率\n    y_scaling = 1 + np.random.rand() * y_scaling_range*2 - y_scaling_range # 上下の拡大縮小率\n    rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    # 度→ラジアン\n    rd_rotation = np.radians(rotation)\n   \n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 位置計算\n            x_gen = int(np.floor(((x - mw + 0.5) * np.cos(rd_rotation) - (y - mh + 0.5) * np.sin(rd_rotation)) * x_scaling + x_shift + mw))\n            y_gen = int(np.floor(((x - mh + 0.5) * np.sin(rd_rotation) + (y - mh + 0.5) * np.cos(rd_rotation)) * y_scaling + y_shift + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n先頭のデータを10個生成し表示してみます。\n移動距離を1、倍率を0.1、回転を10度とします。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,6))\nnp.random.seed(8)\n\nfor i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(generator(nx_train[0:1], shape=(28,28), \n                         x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10\n                        )[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n![generator_5_11.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/97e87dbf-9ec1-9e13-4de6-ac99b20182ab.png)\nどうですか？なかなかバリエーションのあるデータが生成できました。\n\n次に、移動距離を2、倍率を0.2、回転を20度としてみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,6))\nnp.random.seed(8)\n\nfor i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(generator(nx_train[0:1], shape=(28,28), \n                         x_shift_range=2, y_shift_range=2, x_scaling_range=0.2, y_scaling_range=0.2, rotation_range=20\n                        )[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n![generator_5_12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/34880825-c6b2-d7c5-844a-00378c241b00.png)\n\nこれは、これでよいのですが、もう少し工夫してみます。\n回転の部分を別々に乱数で生成します。\n\n```math\nx_{gen} = (x\\cos\\theta_{xx} - y\\sin\\theta_{yx}) * f_x + d_x\\\\\ny_{gen} = (x\\sin\\theta_{xy} + y\\cos\\theta_{yy}) * f_y + d_y\n```\n\n注意点があります。回転角度を大きくするとまともな画像となりません。MINISTは数字のため大きく回転しないことを前提としています。\n\n変更した関数です。\n\n```python\ndef generator(img, shape=None, x_shift_range=0, y_shift_range=0, x_scaling_range=0, y_scaling_range=0, rotation_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # 乱数\n    x_shift = np.random.rand() * x_shift_range*2 - x_shift_range           # 左右の移動距離\n    y_shift = np.random.rand() * y_shift_range*2 - y_shift_range           # 上下の移動距離\n    x_scaling = 1 + np.random.rand() * x_scaling_range*2 - x_scaling_range # 左右の拡大縮小率\n    y_scaling = 1 + np.random.rand() * y_scaling_range*2 - y_scaling_range # 上下の拡大縮小率\n    xx_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    yx_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    xy_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    yy_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    # 度→ラジアン\n    rd_xx_rotation = np.radians(xx_rotation)\n    rd_yx_rotation = np.radians(yx_rotation)\n    rd_xy_rotation = np.radians(xy_rotation)\n    rd_yy_rotation = np.radians(yy_rotation)\n   \n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 位置計算\n            x_gen = int(np.floor(((x - mw + 0.5) * np.cos(rd_xx_rotation) - (y - mh + 0.5) * np.sin(rd_yx_rotation)) * x_scaling + x_shift + mw))\n            y_gen = int(np.floor(((x - mh + 0.5) * np.sin(rd_xy_rotation) + (y - mh + 0.5) * np.cos(rd_yy_rotation)) * y_scaling + y_shift + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n先頭のデータを10個生成し表示してみます。\n移動距離を1、倍率を0.1、回転を10度とします。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,6))\nnp.random.seed(8)\n\nfor i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(generator(nx_train[0:1], shape=(28,28), \n                         x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10\n                        )[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n![generator_5_21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/46a6df06-40ca-ffca-f70a-ca3089a9e89e.png)\n\n次に、移動距離を2、倍率を0.2、回転を20度としてみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,6))\nnp.random.seed(8)\n\nfor i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(generator(nx_train[0:1], shape=(28,28), \n                         x_shift_range=2, y_shift_range=2, x_scaling_range=0.2, y_scaling_range=0.2, rotation_range=20\n                        )[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n![generator_5_22.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/212b0052-8691-4d4f-d878-50e6271a67d4.png)\n先ほどの画像より、バリエーション豊かになりました。\n\n## 学習の実行\n乱数により生成した画像を利用し学習します。\n生成は、ミニバッチごとに行います。\nプログラムの変更部分です。generatorでデータを生成し、learnに渡し学習します。\n\n```python\n        # データ生成\n        nx_train_g = generator(nx_train[idx[j:j+batch_size]], shape=(28,28), \n                               x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10)\n        y_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3 = learn(nx_train_g, t_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3, lr)\n```\n\n移動距離を1、倍率を0.1、回転を10度とし、学習します。学習がゆっくり進むため100エポック実行しました。また、あとで、学習状況をグラフ化するため、エポックごとの正解率、誤差を保存しておくように変更しました。\n\n```python\n# ノード数設定\nd0 = nx_train.shape[1]\nd1 = 100 # 1層目のノード数\nd2 = 50  # 2層目のノード数\nd3 = 10\n# 重みの初期化(-0.1～0.1の乱数)\nnp.random.seed(8)\nW1 = np.random.rand(d0, d1) * 0.2 - 0.1\nW2 = np.random.rand(d1, d2) * 0.2 - 0.1\nW3 = np.random.rand(d2, d3) * 0.2 - 0.1\n# バイアスの初期化(0)\nb1 = np.zeros(d1)\nb2 = np.zeros(d2)\nb3 = np.zeros(d3)\n\n# 学習率\nlr = 0.25\n# バッチサイズ\nbatch_size = 100\n# 学習回数\nepoch = 100\n# シャッフルフラグ\nshuffle = True\n\n# エポックごとの誤差、正解率格納エリア\ntrain_rate, test_rate, train_err, test_err = np.zeros(epoch+1), np.zeros(epoch+1), np.zeros(epoch+1), np.zeros(epoch+1)\n\n# 誤差、正解率表示\ntrain_rate[0], test_rate[0], train_err[0], test_err[0] = print_metrics(0, nx_train, t_train, None, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n\nfor i in range(epoch):\n    # データシャッフル\n    idx = np.arange(nx_train.shape[0])\n    if shuffle:\n        np.random.shuffle(idx)\n    \n    # 学習\n    y_train = np.zeros_like(t_train)\n    for j in range(0, nx_train.shape[0], batch_size):\n        # データ生成\n        nx_train_g = generator(nx_train[idx[j:j+batch_size]], shape=(28,28), \n                               x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10)\n        y_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3 = learn(nx_train_g, t_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3, lr)\n\n    # 誤差、正解率表示\n    train_rate[i+1], test_rate[i+1], train_err[i+1], test_err[i+1] = print_metrics(i+1, nx_train, t_train, y_train, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n```\n\n```\n  0 train_rate= 11.67% test_rate= 12.18% train_err= 2.30623 test_err= 2.30601\n  1 train_rate= 79.13% test_rate= 94.99% train_err= 0.65019 test_err= 0.15849\n  2 train_rate= 92.45% test_rate= 96.97% train_err= 0.24373 test_err= 0.09587\n  3 train_rate= 94.31% test_rate= 97.21% train_err= 0.18487 test_err= 0.08591\n  4 train_rate= 95.09% test_rate= 97.08% train_err= 0.15908 test_err= 0.09091\n  5 train_rate= 95.61% test_rate= 97.73% train_err= 0.14125 test_err= 0.06821\n  6 train_rate= 95.86% test_rate= 98.07% train_err= 0.13036 test_err= 0.05904\n  7 train_rate= 96.20% test_rate= 97.93% train_err= 0.11967 test_err= 0.06332\n  8 train_rate= 96.35% test_rate= 98.32% train_err= 0.11669 test_err= 0.05715\n  9 train_rate= 96.52% test_rate= 98.21% train_err= 0.11030 test_err= 0.05385\n 10 train_rate= 96.73% test_rate= 98.32% train_err= 0.10482 test_err= 0.04903\n 11 train_rate= 96.86% test_rate= 98.40% train_err= 0.10024 test_err= 0.04888\n 12 train_rate= 97.03% test_rate= 98.32% train_err= 0.09619 test_err= 0.05135\n 13 train_rate= 97.04% test_rate= 98.55% train_err= 0.09392 test_err= 0.04338\n 14 train_rate= 97.15% test_rate= 98.63% train_err= 0.08904 test_err= 0.04456\n 15 train_rate= 97.23% test_rate= 98.62% train_err= 0.09057 test_err= 0.04170\n 16 train_rate= 97.23% test_rate= 98.27% train_err= 0.08701 test_err= 0.04814\n 17 train_rate= 97.27% test_rate= 98.50% train_err= 0.08554 test_err= 0.04303\n 18 train_rate= 97.42% test_rate= 98.65% train_err= 0.08260 test_err= 0.04230\n 19 train_rate= 97.42% test_rate= 98.64% train_err= 0.08210 test_err= 0.04139\n 20 train_rate= 97.46% test_rate= 98.67% train_err= 0.07877 test_err= 0.04056\n 21 train_rate= 97.55% test_rate= 98.61% train_err= 0.07706 test_err= 0.03883\n 22 train_rate= 97.62% test_rate= 98.54% train_err= 0.07435 test_err= 0.04402\n 23 train_rate= 97.62% test_rate= 98.68% train_err= 0.07470 test_err= 0.03836\n 24 train_rate= 97.62% test_rate= 98.64% train_err= 0.07463 test_err= 0.03885\n 25 train_rate= 97.61% test_rate= 98.66% train_err= 0.07349 test_err= 0.03983\n 26 train_rate= 97.62% test_rate= 98.88% train_err= 0.07332 test_err= 0.03545\n 27 train_rate= 97.74% test_rate= 98.63% train_err= 0.07052 test_err= 0.03997\n 28 train_rate= 97.89% test_rate= 98.83% train_err= 0.06760 test_err= 0.03548\n 29 train_rate= 97.84% test_rate= 98.69% train_err= 0.06700 test_err= 0.04063\n 30 train_rate= 97.80% test_rate= 98.80% train_err= 0.06816 test_err= 0.03841\n 31 train_rate= 97.81% test_rate= 98.82% train_err= 0.06609 test_err= 0.03569\n 32 train_rate= 97.88% test_rate= 98.82% train_err= 0.06584 test_err= 0.03456\n 33 train_rate= 97.91% test_rate= 98.74% train_err= 0.06455 test_err= 0.03728\n 34 train_rate= 97.97% test_rate= 98.69% train_err= 0.06152 test_err= 0.03758\n 35 train_rate= 97.92% test_rate= 98.74% train_err= 0.06313 test_err= 0.04017\n 36 train_rate= 97.95% test_rate= 98.82% train_err= 0.06388 test_err= 0.03284\n 37 train_rate= 98.09% test_rate= 98.85% train_err= 0.06058 test_err= 0.03359\n 38 train_rate= 97.97% test_rate= 98.84% train_err= 0.06248 test_err= 0.03492\n 39 train_rate= 98.05% test_rate= 98.78% train_err= 0.06179 test_err= 0.03609\n 40 train_rate= 98.22% test_rate= 98.78% train_err= 0.05814 test_err= 0.03644\n 41 train_rate= 98.12% test_rate= 98.75% train_err= 0.05877 test_err= 0.03562\n 42 train_rate= 98.02% test_rate= 98.72% train_err= 0.06121 test_err= 0.03767\n 43 train_rate= 98.19% test_rate= 98.93% train_err= 0.05625 test_err= 0.03221\n 44 train_rate= 98.05% test_rate= 98.87% train_err= 0.06061 test_err= 0.03491\n 45 train_rate= 98.07% test_rate= 98.97% train_err= 0.05905 test_err= 0.03221\n 46 train_rate= 98.23% test_rate= 98.76% train_err= 0.05659 test_err= 0.03652\n 47 train_rate= 98.04% test_rate= 98.81% train_err= 0.06010 test_err= 0.03354\n 48 train_rate= 98.16% test_rate= 98.97% train_err= 0.05656 test_err= 0.03342\n 49 train_rate= 98.18% test_rate= 99.02% train_err= 0.05648 test_err= 0.03204\n 50 train_rate= 98.25% test_rate= 98.88% train_err= 0.05377 test_err= 0.03622\n 51 train_rate= 98.21% test_rate= 98.91% train_err= 0.05343 test_err= 0.03233\n 52 train_rate= 98.28% test_rate= 99.00% train_err= 0.05306 test_err= 0.03106\n 53 train_rate= 98.18% test_rate= 98.93% train_err= 0.05518 test_err= 0.03298\n 54 train_rate= 98.23% test_rate= 98.97% train_err= 0.05546 test_err= 0.03106\n 55 train_rate= 98.33% test_rate= 98.94% train_err= 0.05412 test_err= 0.03291\n 56 train_rate= 98.25% test_rate= 98.88% train_err= 0.05351 test_err= 0.03427\n 57 train_rate= 98.29% test_rate= 99.01% train_err= 0.05356 test_err= 0.03286\n 58 train_rate= 98.21% test_rate= 98.90% train_err= 0.05334 test_err= 0.03514\n 59 train_rate= 98.28% test_rate= 99.04% train_err= 0.05227 test_err= 0.03087\n 60 train_rate= 98.39% test_rate= 98.93% train_err= 0.04971 test_err= 0.03371\n 61 train_rate= 98.30% test_rate= 99.03% train_err= 0.05447 test_err= 0.02983\n 62 train_rate= 98.38% test_rate= 98.95% train_err= 0.05134 test_err= 0.03340\n 63 train_rate= 98.38% test_rate= 99.01% train_err= 0.04958 test_err= 0.03134\n 64 train_rate= 98.40% test_rate= 98.88% train_err= 0.04865 test_err= 0.03243\n 65 train_rate= 98.29% test_rate= 98.94% train_err= 0.05254 test_err= 0.03251\n 66 train_rate= 98.34% test_rate= 99.03% train_err= 0.05115 test_err= 0.03043\n 67 train_rate= 98.28% test_rate= 98.94% train_err= 0.05372 test_err= 0.03187\n 68 train_rate= 98.37% test_rate= 99.05% train_err= 0.05070 test_err= 0.02888\n 69 train_rate= 98.33% test_rate= 98.97% train_err= 0.04955 test_err= 0.03076\n 70 train_rate= 98.37% test_rate= 98.96% train_err= 0.04920 test_err= 0.03240\n 71 train_rate= 98.45% test_rate= 98.99% train_err= 0.04855 test_err= 0.03185\n 72 train_rate= 98.46% test_rate= 99.01% train_err= 0.04952 test_err= 0.03194\n 73 train_rate= 98.41% test_rate= 99.06% train_err= 0.04954 test_err= 0.03022\n 74 train_rate= 98.43% test_rate= 98.99% train_err= 0.04806 test_err= 0.03400\n 75 train_rate= 98.38% test_rate= 98.98% train_err= 0.05002 test_err= 0.03233\n 76 train_rate= 98.36% test_rate= 98.96% train_err= 0.04998 test_err= 0.03140\n 77 train_rate= 98.42% test_rate= 99.00% train_err= 0.04942 test_err= 0.02916\n 78 train_rate= 98.37% test_rate= 98.88% train_err= 0.05003 test_err= 0.03231\n 79 train_rate= 98.49% test_rate= 98.99% train_err= 0.04612 test_err= 0.02966\n 80 train_rate= 98.39% test_rate= 99.06% train_err= 0.04789 test_err= 0.02866\n 81 train_rate= 98.48% test_rate= 98.96% train_err= 0.04811 test_err= 0.03142\n 82 train_rate= 98.52% test_rate= 98.99% train_err= 0.04682 test_err= 0.03299\n 83 train_rate= 98.51% test_rate= 99.03% train_err= 0.04593 test_err= 0.02829\n 84 train_rate= 98.43% test_rate= 98.96% train_err= 0.04755 test_err= 0.03072\n 85 train_rate= 98.57% test_rate= 99.04% train_err= 0.04492 test_err= 0.03182\n 86 train_rate= 98.66% test_rate= 98.95% train_err= 0.04286 test_err= 0.03492\n 87 train_rate= 98.47% test_rate= 98.98% train_err= 0.04568 test_err= 0.03389\n 88 train_rate= 98.45% test_rate= 98.95% train_err= 0.04651 test_err= 0.03171\n 89 train_rate= 98.56% test_rate= 99.17% train_err= 0.04383 test_err= 0.02712\n 90 train_rate= 98.46% test_rate= 98.72% train_err= 0.04630 test_err= 0.03920\n 91 train_rate= 98.57% test_rate= 98.90% train_err= 0.04532 test_err= 0.03080\n 92 train_rate= 98.50% test_rate= 98.92% train_err= 0.04543 test_err= 0.03459\n 93 train_rate= 98.54% test_rate= 98.93% train_err= 0.04574 test_err= 0.03267\n 94 train_rate= 98.55% test_rate= 99.13% train_err= 0.04535 test_err= 0.03075\n 95 train_rate= 98.53% test_rate= 99.08% train_err= 0.04549 test_err= 0.02960\n 96 train_rate= 98.53% test_rate= 98.87% train_err= 0.04578 test_err= 0.03491\n 97 train_rate= 98.59% test_rate= 99.03% train_err= 0.04344 test_err= 0.02963\n 98 train_rate= 98.61% test_rate= 98.85% train_err= 0.04338 test_err= 0.03283\n 99 train_rate= 98.60% test_rate= 99.01% train_err= 0.04426 test_err= 0.02978\n100 train_rate= 98.51% test_rate= 99.02% train_err= 0.04425 test_err= 0.03243\n```\n\nなんと、テストデータの正解率が、99%を超えました。49エポック目で99.02%、最大は、99.17%です。すごいですね。\n\n正解率の変化をグラフ化します。破線が学習データに対する正解率、実線がテストデータです。\n\n```python\nimport matplotlib.pyplot as plt\n\ntimes = np.arange(0, epoch+1)\nplt.figure(figsize=(10,5))\nplt.plot(times, test_rate, label=\"Test Data\", color=\"blue\")\nplt.plot(times, train_rate, label=\"Train Data\", color=\"blue\", linestyle=\"dashed\")\nplt.title(\"Accuracy rate\")\nplt.xlabel(\"epoch\")\nplt.ylabel(\"rate\")\nplt.ylim(0.942,0.998)\nplt.legend()\nplt.grid()\nplt.show()\n```\n\n![generator_graph1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/41bf03fd-58df-5b31-6a5c-ee99c5779816.png)\n\n\n次に、移動距離を2、倍率を0.2、回転を20度として学習してみます。\nデータの生成部分です。\n\n```python\n        # データ生成\n        nx_train_g = generator(nx_train[idx[j:j+batch_size]], shape=(28,28), \n                               x_shift_range=2, y_shift_range=2, x_scaling_range=0.2, y_scaling_range=0.2, rotation_range=20)\n```\n\n学習結果です。\n\n```\n  0 train_rate= 11.67% test_rate= 12.18% train_err= 2.30623 test_err= 2.30601\n  1 train_rate= 63.55% test_rate= 93.91% train_err= 1.08837 test_err= 0.19900\n  2 train_rate= 85.21% test_rate= 95.31% train_err= 0.46272 test_err= 0.14554\n  3 train_rate= 89.46% test_rate= 96.62% train_err= 0.33836 test_err= 0.11102\n・・・\n 93 train_rate= 96.89% test_rate= 98.90% train_err= 0.09795 test_err= 0.03482\n・・・\n100 train_rate= 96.94% test_rate= 98.82% train_err= 0.09778 test_err= 0.03610\n```\n\n## ノード数の変更\nテストデータの正解率が99%を超えました。\nせっかくなので、中間層のノード数を増やして試してみます。\n100エポック後の結果です。\n\n* 移動距離-1、倍率-0.1、回転-10度\n\n```python\nx_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10\n```\n\n|１層ノード数|２層ノード数|学習正解率|テスト正解率|テスト最高|\n|----------:|----------:|--------:|----------:|--------:|\n|  100      |   50      |  98.51  |  99.02    |  99.17  |\n|  200      |  100      |  99.08  |  99.12    |  99.25  |\n|  500      |  250      |  99.38  |  99.19    |  99.31  |\n| 1000      |  500      |  99.47  |  99.21    |  99.28  |\n\n* 移動距離-2、倍率-0.2、回転-20度\n\n```python\nx_shift_range=2, y_shift_range=2, x_scaling_range=0.2, y_scaling_range=0.2, rotation_range=20\n```\n\n|１層ノード数|２層ノード数|学習正解率|テスト正解率|テスト最高|\n|----------:|----------:|--------:|----------:|--------:|\n|  100      |   50      |  96.94  |  98.82    |  98.90  |\n|  200      |  100      |  97.86  |  99.15    |  99.29  |\n|  500      |  250      |  98.36  |  99.35    |  99.36  |\n| 1000      |  500      |  98.56  |  99.34    |  99.47  |\n\nノード数を1000-500まで増やすと最高99.47%になりました。\n折角なので200エポックまで実行してみます。\n\n```\n  0 train_rate=  9.17% test_rate=  9.27% train_err= 2.57723 test_err= 2.57840\n  1 train_rate= 76.72% test_rate= 96.07% train_err= 0.72965 test_err= 0.13537\n  2 train_rate= 89.81% test_rate= 97.06% train_err= 0.32831 test_err= 0.08837\n  3 train_rate= 92.27% test_rate= 97.66% train_err= 0.24845 test_err= 0.07026\n・・・\n 98 train_rate= 98.43% test_rate= 99.47% train_err= 0.04820 test_err= 0.01825\n 99 train_rate= 98.52% test_rate= 99.38% train_err= 0.04612 test_err= 0.02042\n100 train_rate= 98.56% test_rate= 99.34% train_err= 0.04318 test_err= 0.02212\n101 train_rate= 98.58% test_rate= 99.46% train_err= 0.04478 test_err= 0.01981\n・・・\n111 train_rate= 98.58% test_rate= 99.52% train_err= 0.04438 test_err= 0.01741\n・・・\n198 train_rate= 98.93% test_rate= 99.47% train_err= 0.03181 test_err= 0.01622\n199 train_rate= 98.88% test_rate= 99.44% train_err= 0.03284 test_err= 0.01885\n200 train_rate= 98.88% test_rate= 99.45% train_err= 0.03405 test_err= 0.01855\n```\n\nなんと、111エポック目で99.5%を超えました。\n\nMNISTでCNNを使わず、ニューラルネットワークのみでテストデータの正解率が99.5%を超えました。データ拡張は、強力ですね。\n\n# プログラム全体\n\n```python\nimport numpy as np\n# affine変換\ndef affine(z, W, b):\n    return np.dot(z, W) + b\n# affine変換勾配\ndef affine_back(du, z, W, b):\n    dz = np.dot(du, W.T)\n    dW = np.dot(z.T, du)\n    db = np.dot(np.ones(z.shape[0]).T, du)\n    return dz, dW, db\n# 活性化関数(ReLU)\ndef relu(u):\n    return np.maximum(0, u)\n# 活性化関数(ReLU)勾配\ndef relu_back(dz, u):\n    return dz * np.where(u > 0, 1, 0)\n# 活性化関数(softmax)\ndef softmax(u):\n    max_u = np.max(u, axis=1, keepdims=True)\n    exp_u = np.exp(u-max_u)\n    return exp_u/np.sum(exp_u, axis=1, keepdims=True)\n# 誤差(交差エントロピー）\ndef cross_entropy_error(y, t):\n    return -np.sum(t * np.log(np.maximum(y,1e-7)))/y.shape[0]\n# 誤差(交差エントロピー）＋活性化関数(softmax)勾配\ndef softmax_cross_entropy_error_back(y, t):\n    return (y - t)/y.shape[0]\n```\n\n```python\ndef learn(x, t, W1, b1, W2, b2, W3, b3, lr):\n    # 順伝播\n    u1 = affine(x, W1, b1)\n    z1 = relu(u1)\n    u2 = affine(z1, W2, b2)\n    z2 = relu(u2)\n    u3 = affine(z2, W3, b3)\n    y  = softmax(u3)\n    # 逆伝播\n    dy = softmax_cross_entropy_error_back(y, t)\n    dz2, dW3, db3 = affine_back(dy, z2, W3, b3)\n    du2 = relu_back(dz2, u2)\n    dz1, dW2, db2 = affine_back(du2, z1, W2, b2)\n    du1 = relu_back(dz1, u1)\n    dx, dW1, db1 = affine_back(du1, x, W1, b1)\n    # 重み、バイアスの更新\n    W1 = W1 - lr * dW1\n    b1 = b1 - lr * db1\n    W2 = W2 - lr * dW2\n    b2 = b2 - lr * db2\n    W3 = W3 - lr * dW3\n    b3 = b3 - lr * db3\n\n    return y, W1, b1, W2, b2, W3, b3\n```\n\n```python\ndef predict(x, W1, b1, W2, b2, W3, b3):\n    # 順伝播\n    u1 = affine(x, W1, b1)\n    z1 = relu(u1)\n    u2 = affine(z1, W2, b2)\n    z2 = relu(u2)\n    u3 = affine(z2, W3, b3)\n    y  = softmax(u3)\n    return y\n```\n\n```python\nimport gzip\nimport numpy as np\n# MNIST読み込み\ndef load_mnist( mnist_path ) :\n    return _load_image(mnist_path + 'train-images-idx3-ubyte.gz'), \\\n           _load_label(mnist_path + 'train-labels-idx1-ubyte.gz'), \\\n           _load_image(mnist_path + 't10k-images-idx3-ubyte.gz'), \\\n           _load_label(mnist_path + 't10k-labels-idx1-ubyte.gz')\ndef _load_image( image_path ) :\n    # 画像データの読み込み\n    with gzip.open(image_path, 'rb') as f:\n        buffer = f.read()\n    size = np.frombuffer(buffer, np.dtype('>i4'), 1, offset=4)\n    rows = np.frombuffer(buffer, np.dtype('>i4'), 1, offset=8)\n    columns = np.frombuffer(buffer, np.dtype('>i4'), 1, offset=12)\n    data = np.frombuffer(buffer, np.uint8, offset=16)\n    image = np.reshape(data, (size[0], rows[0]*columns[0]))\n    image = image.astype(np.float32)\n    return image\ndef _load_label( label_path ) :\n    # 正解データ読み込み\n    with gzip.open(label_path, 'rb') as f:\n        buffer = f.read()\n    size = np.frombuffer(buffer, np.dtype('>i4'), 1, offset=4)\n    data = np.frombuffer(buffer, np.uint8, offset=8)\n    label = np.zeros((size[0], 10))\n    for i in range(size[0]):\n        label[i, data[i]] = 1\n    return label\n\n# 正解率\ndef accuracy_rate(y, t):\n    max_y = np.argmax(y, axis=1)\n    max_t = np.argmax(t, axis=1)\n    return np.sum(max_y == max_t)/y.shape[0]\n```\n\n```python\ndef print_metrics(epoche, x_train, t_train, y_train, x_test, t_test, y_test, W1, b1, W2, b2, W3, b3):\n    # 予測（学習データ）\n    if y_train is None:\n        y_train = np.zeros_like(t_train)\n        for j in range(0, x_train.shape[0], batch_size):\n            y_train[j:j+batch_size] = predict(x_train[j:j+batch_size], W1, b1, W2, b2, W3, b3)\n    # 予測（テストデータ）\n    if y_test is None:\n        y_test = np.zeros_like(t_test)\n        for j in range(0, x_test.shape[0], batch_size):\n            y_test[j:j+batch_size] = predict(x_test[j:j+batch_size], W1, b1, W2, b2, W3, b3)\n    # 正解率、誤差表示\n    train_rate, train_err = accuracy_rate(y_train, t_train), cross_entropy_error(y_train, t_train)\n    test_rate, test_err = accuracy_rate(y_test, t_test), cross_entropy_error(y_test, t_test)\n    print(\"{0:3d} train_rate={1:6.2f}% test_rate={2:6.2f}% train_err={3:8.5f} test_err={4:8.5f}\".format(epoche, train_rate*100, test_rate*100, train_err, test_err))\n    \n    return train_rate, test_rate, train_err, test_err\n```\n\n```python\ndef generator(img, shape=None, x_shift_range=0, y_shift_range=0, x_scaling_range=0, y_scaling_range=0, rotation_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # 乱数\n    x_shift = np.random.rand() * x_shift_range*2 - x_shift_range           # 左右の移動距離\n    y_shift = np.random.rand() * y_shift_range*2 - y_shift_range           # 上下の移動距離\n    x_scaling = 1 + np.random.rand() * x_scaling_range*2 - x_scaling_range # 左右の拡大縮小率\n    y_scaling = 1 + np.random.rand() * y_scaling_range*2 - y_scaling_range # 上下の拡大縮小率\n    xx_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    yx_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    xy_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    yy_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    # 度→ラジアン\n    rd_xx_rotation = np.radians(xx_rotation)\n    rd_yx_rotation = np.radians(yx_rotation)\n    rd_xy_rotation = np.radians(xy_rotation)\n    rd_yy_rotation = np.radians(yy_rotation)\n   \n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            x_gen = int(np.floor(((x - mw + 0.5) * np.cos(rd_xx_rotation) - (y - mh + 0.5) * np.sin(rd_yx_rotation)) * x_scaling + x_shift + mw))\n            y_gen = int(np.floor(((x - mh + 0.5) * np.sin(rd_xy_rotation) + (y - mh + 0.5) * np.cos(rd_yy_rotation)) * y_scaling + y_shift + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n```python\n# MNISTデータ読み込み\nx_train, t_train, x_test, t_test = load_mnist('data/')\n\n# 入力データの正規化(0～1)\nnx_train = x_train/255\nnx_test  = x_test/255\n```\n\n```python\n# ノード数設定\nd0 = nx_train.shape[1]\nd1 = 100 # 1層目のノード数\nd2 = 50  # 2層目のノード数\nd3 = 10\n# 重みの初期化(-0.1～0.1の乱数)\nnp.random.seed(8)\nW1 = np.random.rand(d0, d1) * 0.2 - 0.1\nW2 = np.random.rand(d1, d2) * 0.2 - 0.1\nW3 = np.random.rand(d2, d3) * 0.2 - 0.1\n# バイアスの初期化(0)\nb1 = np.zeros(d1)\nb2 = np.zeros(d2)\nb3 = np.zeros(d3)\n\n# 学習率\nlr = 0.25\n# バッチサイズ\nbatch_size = 100\n# 学習回数\nepoch = 100\n# シャッフルフラグ\nshuffle = True\n\n# エポックごとの誤差、正解率格納エリア\ntrain_rate, test_rate, train_err, test_err = np.zeros(epoch+1), np.zeros(epoch+1), np.zeros(epoch+1), np.zeros(epoch+1)\n\n# 誤差、正解率表示\ntrain_rate[0], test_rate[0], train_err[0], test_err[0] = print_metrics(0, nx_train, t_train, None, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n\nfor i in range(epoch):\n    # データシャッフル\n    idx = np.arange(nx_train.shape[0])\n    if shuffle:\n        np.random.shuffle(idx)\n    \n    # 学習\n    y_train = np.zeros_like(t_train)\n    for j in range(0, nx_train.shape[0], batch_size):\n        # データ生成\n        nx_train_g = generator(nx_train[idx[j:j+batch_size]], shape=(28,28), \n                               x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10)\n        y_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3 = learn(nx_train_g, t_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3, lr)\n\n    # 誤差、正解率表示\n    train_rate[i+1], test_rate[i+1], train_err[i+1], test_err[i+1] = print_metrics(i+1, nx_train, t_train, y_train, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n```\n","created_at":"2019-04-14T14:20:26+09:00","id":"21ba5e6c43aea4eb8ad7","tags":[{"name":"機械学習","versions":[]},{"name":"DeepLearning","versions":[]},{"name":"ディープラーニング","versions":[]},{"name":"ニューラルネットワーク","versions":[]},{"name":"深層学習","versions":[]}],"url":"https://qiita.com/Nezura/items/21ba5e6c43aea4eb8ad7"},{"title":"[golang]改行コードを維持して、1行単位にファイルを読み書きする","body":"# はじめに\n数GB単位の様々なテキストファイルをちょっとだけ置換したファイルを作る必要があり、最近勉強をはじめたGo言語で実装しようと思ったところ、色々混乱してしまったので、備忘録がてらここに記載します。\n\n# ソース\n```go:main\npackage main\n\nimport (\n\t\"bufio\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\t// 入力ファイルの指定\n\tsrcFile, err := os.Open(\"./file1.txt\")\n\tif err != nil { log.Fatal(err) }\n\tdefer srcFile.Close()\n\n\t// 出力ファイルの指定\n\tdstFile, err := os.Create(\".file2.txt\")\n\tif err != nil { log.Fatal(err) }\n\tdefer dstFile.Close()\n\n\tr := bufio.NewReader(srcFile)\n\tw := bufio.NewWriter(dstFile)\n\n\tfor {\n\t\trow, err := r.ReadString('\\n') // LF(\\n)まで読み込み。結果、CRLF(\\r\\n)でも問題なし\n\t\tif err != nil && err != io.EOF { log.Fatal(err) }\n\t\tif err == io.EOF && len(row) == 0 { break } // 最終行に改行が無い場合を考慮し、len(row) == 0を入れる\n\n\t\t// ここに加工処理を書く\n    \t// row = strings.Replace(row, \"hogehoge1\", \"hogehoge2\", -1) など\n\n\t\t// 出力ファイルに書き込み\n\t\t_, err = w.WriteString(row)\n\t\tif err != nil { log.Fatal(err) }\n\t}\n\terr = w.Flush()\n\tif err != nil { log.Fatal(err) }\n}\n```\n\n# 解説\nGo言語におけるファイルや標準入出力にはbufioパッケージが良いとのこと。\nbufioには、bufio.readline()や、bufio.Scan()など、一行単位に読み込みするためのメソッドがあるのですが、これらは改行コードがトリムされるので私の目的には合致せず。\nbufio.ReadString('\\n')を使うとLF('\\n')が登場するまで読み込みを行うため、CRLF('\\r\\n')でもLF('\\n')でも想定通りの挙動をします。CR('\\r')だけのファイルを扱うことはないので無視・・。\n\n# 最後に\n普段はPython書いてます。Go言語は始めたばかりで分からないことばかりですが、不備や改善点などあればご指摘ください。\n\n# 参考\n[Go でファイルを1行ずつ読み込む（csv ファイルも）](https://qiita.com/ikawaha/items/28186d965780fab5533d)\n","created_at":"2019-04-14T14:12:47+09:00","id":"eaaa03569cfda8aaeb61","tags":[{"name":"Go","versions":[]},{"name":"入門","versions":[]}],"url":"https://qiita.com/y-moriyama/items/eaaa03569cfda8aaeb61"},{"title":"kafka-nodeのテスト","body":"##### はじめに\nマイクロサービスにおけるサービス間連携でnodejs × kafkaの利用シーンは増えています。\nというわけでnodejs × kafkaの概念実証（PoC）メモ。\nあくまでPoCなんで超簡易的です。\n\n##### ディレクトリ構成\nkafka/\n　├ docker-compose.yml\n　├ node_modules\n　├ mackage.json\n　└ test\n　│　└ kafka-test.js\n\n#### セッティング\n- docker-compose.yml\n\n```\nversion: \"2\"\n\nservices:\n  zookeeper:\n    image: wurstmeister/zookeeper\n    ports:\n      - \"2181:2181\"\n  kafka:\n    image: wurstmeister/kafka\n    ports:\n      - \"9092:9092\"\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    links:\n      - zookeeper\n```\n\n- kafkaトピック作成\n\n```\n$ docker-compose exec kafka /opt/kafka/bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic test\n$ docker-compose exec kafka /opt/kafka/bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic test1\n$ docker-compose exec kafka /opt/kafka/bin/kafka-topics.sh --list --zookeeper zookeeper:2181\n```\n\n- package.json\n\n```\n{\n  \"name\": \"kafka\",\n  \"version\": \"1.0.0\",\n  \"description\": \"kafka-node\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"ava\": \"^1.4.1\",\n    \"chai\": \"^4.2.0\",\n    \"kafka-node\": \"^4.1.0\"\n  },\n  \"devDependencies\": {},\n  \"scripts\": {\n    \"test\": \"ava -v -u\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n- test/kafka-test.js\n\n```\nimport test from \"ava\";\nimport chai from \"chai\";\nimport kafka from \"kafka-node\";\n\n// producerテスト\ntest.serial.cb(\"producer test\", t => {\n    const Producer = kafka.Producer;\n    const client = new kafka.KafkaClient({\n        kafkaHost: \"127.0.0.1:9092\"\n    });\n    const producer = new Producer(client, {\n        partitionerType: 1\n    });\n\n    producer.on(\"ready\", () => {\n        const payloads = [\n            {\n                topic: \"test1\",\n                messages: JSON.stringify({name: \"神崎・H・アリア\", age: 16})\n            }\n            ,{\n                topic: \"test\",\n                messages: [\n                    JSON.stringify({name: \"間宮あかり\", age: 15}),\n                   JSON.stringify({name: \"佐々木志乃\", age: 15})\n               ]\n            }\n        ];\n\n        producer.send(payloads, (err, data) => {\n            t.end();\n        });\n    });\n});\n\n// consumerテスト\ntest.serial.cb(\"consumer test\", t => {\n    const Consumer = kafka.Consumer;\n    const client = new kafka.KafkaClient({\n        kafkaHost: \"127.0.0.1:9092\"\n    });\n    const consumer = new Consumer(\n        client,\n        [{topic: \"test1\", partision:0}],\n        {\n            groupId: \"simple-consumer1\",\n            autoCommit: true,\n            fromOffset: true\n        }\n    );\n\n    consumer.on(\"message\", (message, err) => {\n        const json = JSON.stringify(message.value);\n            chai.assert.isString(json.name);\n            chai.assert.isNumber(json.age);\n            if (json.age === 16) {\n               chai.assert.propertyVal(json.attr,'name','神崎・H・アリア');\n            }\n    });\n    t.end();\n});\n\n```\n\n#### kafka-nodeテスト\n\n```\n$ npm test\n\n> kafka@1.0.0 test /home/vagrant/kafka\n> ava -v -u\n\n\n  ✔ producer test (291ms)\n  ✔ consumer test\n\n  2 tests passed\n```\n\n#### 参考\n[apache kafka quickstart(kafkaの基本的な使い方）](https://kafka.apache.org/quickstart)\n[kafka-node](https://www.npmjs.com/package/kafka-node#producer)\n\n","created_at":"2019-04-14T14:12:29+09:00","id":"f571db36a19806aee491","tags":[{"name":"Node.js","versions":[]},{"name":"docker","versions":[]},{"name":"Kafka","versions":[]}],"url":"https://qiita.com/minarai/items/f571db36a19806aee491"},{"title":"ActiveDirectoryにPowerShellでユーザを一括登録","body":"ユーザアカウント情報を記載したCSVファイルを準備し、これを**Active Directory**に一括登録するスクリプトを作成する。\n**dsadd**コマンドによるものが有名だが、ここでは**Power Shell**で作成してみよう。\n\n# 仕様\n\n- １行目をヘッダーとした次のようなCSVファイルを入力可能で、任意に列を追加できるものとする。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/236222/62b668e1-71ea-05b9-2e14-2bc669ace6cc.png)\n- 姓・名・表示名は、CSVファイルのスタッフコード、スタッフ名から設定する。\n- 所属するグループを `:`区切りで複数指定できる。\n- ユーザごとに個別の初期パスワードを指定できる。\n- ログオン可能時間を指定した場合、そのまま`net user /times`に渡される。\n- アカウントの有効期限を`yyyy/MM/dd`形式で指定できる。\n\n# スクリプト\n\nCSVファイル名を`users.csv`とし、スクリプトと同じフォルダに置く。\n\n```powershell:一括登録スクリプト\nipcsv users.csv -Encoding Default | %{\n  $staffCode = $_.'スタッフコード'\n  # ユーザ定義用の連想配列を作成\n  $users = @{\n    SamAccountName = $staffCode  # ログオン名\n    Name = $_.'スタッフ名'\n    Surname = $staffCode  # 姓\n    GivenName = $_.'スタッフ名'  # 名\n    DisplayName = $staffCode + ' ' + $_.'スタッフ名'  # 表示名\n    Path = 'OU=XXXXX,OU=Users,OU=XXX,DC=xxx,DC=ne,DC=jp'  # OUは固定\n    Description = $_.'AD説明'  # 説明欄\n    UserPrincipalName = $staffCode + '@xxx.xxx.ne.jp'  # ユーザプリンシパル名\n    AccountPassword = (ConvertTo-SecureString -AsPlainText $_.'AD初期パスワード' -force)  # 暗号化したパスワード\n    ChangePasswordAtLogon = $True  # 次回ログオン時にパスワード変更が必要\n    AccountExpirationDate = $_.'AD有効期限'  # アカウントの有効期限\n    Enabled = $True  # ユーザを有効にする\n  }\n  New-ADUser @users  # アカウント追加\n\n  # ログオン可能時間帯\n  if($_.'ADログオン可能時間' -ne '') {\n    $cmdstr = '/c net user ' + $staffCode + ' /DOMAIN /TIMES:' + $_.'ADログオン可能時間'\n    cmd $cmdstr\n  }\n\n  # 所属させるグループ\n  $groups = $_.'AD所属グループ' -split ':'\n  foreach($group in $groups) {\n    Add-ADGroupMember -Identity $group -Members $staffCode\n  }\n}\n```\n\n# 実行結果\nスクリプト内に定義した**OU**の下を確認する。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/236222/0af36cde-715f-5470-4d43-de16a843ee59.png)\n\n# 補足\n\nアカウント有効期限を、例えば作成日の90日後とするなら、次のように修正すると良いだろう。\n\n```powershell\nAccountExpirationDate = (Get-Date).AddDays(90).ToString(\"yyyy/MM/dd\")\n```\n\nログオン可能時間は属性名`logonHours`でも指定できるが、PowerShellだけで行うにはbyte型の配列（1時間1ビット、24x7=168ビット=21byte）を与えなければならず、お勧めできない。\n`net user /times`なら、例えば平日9時〜22時までログインを認める場合に`M-F,09:00-22:00`のように書ける。（カンマが含まれるのでダブルクォーテーションで囲むこと）\n\n繁忙期に派遣社員やバイトを大量に雇用する会社では有用だろう。\n","created_at":"2019-04-14T14:06:30+09:00","id":"6c4324604bec234f050c","tags":[{"name":"PowerShell","versions":[]},{"name":"ActiveDirectory","versions":[]},{"name":"社内SE","versions":[]}],"url":"https://qiita.com/mindwood/items/6c4324604bec234f050c"},{"title":"Elixir ~基本概要つづき~","body":"#ここまでのあらまし\n\n[こちらのサイト](https://dev.to/gumi/elixir-02--30n1) を参照しながらひさびさにQiitaドキュメントをしたためました。\n\n続きをいってみようと思います。\n\n#本題\n無名関数から。\n\n```elixir\niex > sum = fn(a, b) -> a + b end\n#Function<12.128620087/2 in :erl_eval.expr/5>\n```\n\n呼び出し\n\n```elixir\niex > sum.(1, 2) \n3\n```\n\n変数に関数が収められているかを調べるのがis_function/1、アリティの数を調べるのがis_function/2\n\n```elixir\niex > is_function(sum)\ntrue\niex > is_function(sum,2)\ntrue\n```\n\n以前わたしのドキュメントで扱った&記法。\n\n```elixir\niex > sum = &(&1 + &2)\n&:erlang.+/2\niex > sum.(3,4)\n7\n```\n\nここからはリストについて。\n\n```elixir\niex > list = [3.14, :pie, true, \"Apple\"]\n[3.14, :pie, true, \"Apple\"]\niex > length(list)\n4\n```\n\n++や--といった演算子でリストに要素を加えたり差し引いたりすることもできる模様です。\n\n```elixir\niex > list ++[\"Kento\"]\n[3.14, :pie, true, \"Apple\", \"Kento\"]\niex > [\"Π\"]++\n... > [\"Π\"]++ list\n[\"Π\", \"Π\", 3.14, :pie, true, \"Apple\"]\niex > list --[\"Π\",\"Kento\"]\n[3.14, :pie, true, \"Apple\"]\n```\n\nこの際注意しなければならないのはリスト演算子がリストの中身を書き換えるのではないということで、返ってくるのは新しいリストだということです。\nこれがイミュータブル(immutable、公式ドキュメントでしばしば出てくる単語で)ということ、データの書き換えではなくデータの変換が行われている。\nこれは地味なようで非常に重要なポイントだと思われます。\n\nシングルクオーテーションとダブルクオーテーションで囲ったものの違い。\n\n```elixir\niex > i(\"hello\")\nTerm\n  \"hello\"\nData type\n  BitString\nByte size\n  5\nDescription\n  This is a string: a UTF-8 encoded binary. It's printed surrounded by\n  \"double quotes\" because all UTF-8 encoded codepoints in it are printable.\nRaw representation\n  <<104, 101, 108, 108, 111>>\nReference modules\n  String, :binary\nImplemented protocols\n  Collectable, IEx.Info, Inspect, List.Chars, String.Chars\n```\n\n```elixir\niex > i('Hello')\nTerm\n  'Hello'\nData type\n  List\nDescription\n  This is a list of integers that is printed as a sequence of characters\n  delimited by single quotes because all the integers in it represent valid\n  ASCII characters. Conventionally, such lists of integers are referred to\n  as \"charlists\" (more precisely, a charlist is a list of Unicode codepoints,\n  and ASCII is a subset of Unicode).\nRaw representation\n  [72, 101, 108, 108, 111]\nReference modules\n  List\nImplemented protocols\n  Collectable, Enumerable, IEx.Info, Inspect, List.Chars, String.Chars\n```\n\n詳しいことを出てきたinfoの英文で追いかけるのは今回は割愛しますが、ふたつは違う。興味深いです。\n\nタプルへと行きます。\n要素を中括弧で囲い、カンマ区切りにしたもの。\n要素の数を測るには、tuple_size/1。\n\n```elixir\niex > tuple = {3.14, :pie, true, \"Apple\"}\n{3.14, :pie, true, \"Apple\"}\niex > tuple_size(tuple)\n4\n```\n\nelem/2関数で指定した要素の取り出し、put_elem/3で、指定した要素の置き換え。\n\n```elixir\niex > elem(tuple,3)           \n\"Apple\"\niex > put_elem(tuple,3,\"Orange\")\n{3.14, :pie, true, \"Orange\"}\n```\n\n#編集後記\n\nElixirの型の基本について、２回に渡ってさらってゆくことができました。\n参照させていただいているページがElixirの基礎について参考書のような構造になっているので、引き続き備忘録をしたためながらやってゆこうと思います。\n\nうまずたゆまず、頑張ります。\nKento Mizuno\n\n\n\n\n\n\n\n","created_at":"2019-04-14T14:04:13+09:00","id":"a0b57f5290f52583b002","tags":[{"name":"Elixir","versions":[]},{"name":"fukuoka.ex","versions":[]}],"url":"https://qiita.com/kmizuno0211/items/a0b57f5290f52583b002"},{"title":"TypeScriptで \"Object is possibly null\" と怒られたときにすること","body":"メモ書きです。TypeScriptに慣れるためのベアプログラミング的な意味を込めて記事にします。\n[ベアプログラミングについて(引用)](!https://qiita.com/sta/items/6661cfcb57cfefa9a36a)\n\nhttps://github.com/Microsoft/TypeScript/issues/14889\n参考にしたIssue\n\n例えば、画像をアップするところをやっていて、次のようなコンポーネントを扱っているとします。\n(適当にそれっぽい雰囲気にしています)\n\n```jsx\nimport * as React from 'react'\nimport { compose, pure } from 'recompose'\nimport Icon, { IconType } from '../../atoms/Icon/Icon'\nimport * as styles from './ImageUploader.css'\n\ninterface ImageUploaderProps {\n  onChangeImage: (data: any) => void\n}\n\nconst ImageUploader: React.FunctionComponent<ImageUploaderProps> = ({ onChangeImage }) => {\n  return (\n    <div className={styles.container}>\n      <label className={styles.buttonLabel}>\n        <span>\n          <Icon iconType={IconType.IMAGE_UPLOAD_ICON} />\n          アップロード\n        </span>\n        <input\n          hidden\n          id={'file_image'}\n          type=\"file\"\n          accept=\"image/png,image/jpg,image/bmp\"\n          onChange={e =>\n            onChangeImage(targetImage: e.target.files[0])\n          }\n        />\n      </label>\n    </div>\n  )\n}\n\nexport default compose<ImageUploaderProps, ImageUploaderProps>(pure)(ImageUploader)\n```\n\ninputに画像をアップする際、そこからFileオブジェクトを抜き出すときは `files` に配列で格納されているのでこれをindex指定で取り出す必要があります。\n\nしかし、上のコードはこのままだとエラーが出ます。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/109201/4c38b347-cbf0-4894-9152-edfda84c81c0.png)\n\nnullかもしれないオブジェクトに対する操作は認められない、という感じですね。では、nullじゃないことを保証すればよいわけです。ここでは2つ変更します。\n\n## interface変更\nまずinterfaceが雑に `any` を使ってしまっているのでこれを直しましょう。\n\n### 変更前\n```typescript\ninterface ImageUploaderProps {\n  onChangeImage: (data: any) => void\n}\n```\n\n### 変更後\n```typescript\ninterface ImageUploaderProps {\n  onChangeImage: (object: { targetImage: File | null }) => void\n}\n```\n\n## onChange内で、nullの場合に関する切り分けをする\n配列にアクセスする際に、nullでないことを保証します。\n\n### 変更前\n```jsx\n\n<input\n  hidden\n  id={'file_image'}\n  type=\"file\"\n  accept=\"image/png,image/jpg,image/bmp\"\n  onChange={e =>\n    onChangeImage(targetImage: e.target.files[0])\n  }\n/>\n```\n\n### 変更後\n```jsx\n<input\n  hidden\n  id={'file_image'}\n  type=\"file\"\n  accept=\"image/png,image/jpg,image/bmp\"\n  onChange={e =>\n    onChangeImage(targetImage: e.target.files !== null ? e.target.files[0] : null)\n  }\n/>\n```\n\n参考にしたIssueでは、guard文で早めに抜けていました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/109201/533e0059-7118-385c-7178-9fa694847adf.png)\nhttps://github.com/Microsoft/TypeScript/issues/14889#issuecomment-289613908\n\nしかし、onChangeの関数内で同様に抜けようとするよりも、三項演算子でnullを回避するほうが見やすいかと思ってこのように書いています。\nnullが裏のsagaなどに行ってしまうので、そこでの制御はどちらにせよ必要ですね...\n\n## まとめ\n最終的には以下のようになります。\n\n```jsx\n\nimport * as React from 'react'\nimport { compose, pure } from 'recompose'\nimport Icon, { IconType } from '../../atoms/Icon/Icon'\nimport * as styles from './ImageUploader.css'\n\ninterface ImageUploaderProps {\n  onChangeImage: (object: { targetImage: File | null }) => void\n}\n\nconst ImageUploader: React.FunctionComponent<ImageUploaderProps> = ({ onChangeImage }) => {\n  return (\n    <div className={styles.container}>\n      <label className={styles.buttonLabel}>\n        <span>\n          <Icon iconType={IconType.IMAGE_UPLOAD_ICON} />\n          アップロード\n        </span>\n        <input\n          hidden\n          id={'file_image'}\n          type=\"file\"\n          accept=\"image/png,image/jpg,image/bmp\"\n          onChange={e =>\n            onChangeImage(targetImage: e.target.files !== null ? e.target.files[0] : null )\n          }\n        />\n      </label>\n    </div>\n  )\n}\n\nexport default compose<ImageUploaderProps, ImageUploaderProps>(pure)(ImageUploader)\n```\n","created_at":"2019-04-14T14:01:54+09:00","id":"5d4a2f2272b8f1a4a16f","tags":[{"name":"メモ","versions":[]},{"name":"TypeScript","versions":[]},{"name":"React","versions":[]}],"url":"https://qiita.com/fufufukakaka/items/5d4a2f2272b8f1a4a16f"},{"title":"なぜActive Recordからデータを取得するときにorderをつける必要があるのか","body":"勉強会に参加していたとき、orderは必ずつけたほうが良いという話をよく聞いていました。\nつけなくても良いケースもあるのではないか？と個人的に思っていたのですが、プロジェクトが育ってきた時に不具合の元になるかもしれないので、たしかにつけたほうが良さそうだと感じるケースを見つけましたので記事に残そうと思います。\n\n# ケース1（default_scopeにorderがある場合）\n\n例えば、下記のようにdefault_scopeにorderがある場合、`Article.last`の結果が変わってしまいます。\n\n```ruby\ndefault_scope { order(id: :desc) }\n```\n\n# ケース2（has_manyにorderがある場合）\n\n例えば、下記のようにhas_manyにorderがある場合、`Article.find(1).comments.last`の結果が変わってしまいます。\n\n```ruby\nhas_many :comments, -> { order(id: :desc) }\n```\n\n# まとめ\n\n`Article.last`のようにシンプルな取得だから、orderつけなくてもいいや〜って思っていると、何処かのタイミングで思わぬバグが発生する可能性があるなと思うので、できる限りつけていきたいと感じました。\n","created_at":"2019-04-14T13:56:30+09:00","id":"ed2bfe28e12193f891b6","tags":[{"name":"Ruby","versions":[]},{"name":"Rails","versions":[]},{"name":"ActiveRecord","versions":[]}],"url":"https://qiita.com/ruby_kumagoro/items/ed2bfe28e12193f891b6"},{"title":"人の気持を考えてPythonコードを書こう","body":">PythonからSwiftに移行した人の9割は死ぬ\n\nこんなお告げを聞いたことがあります。\nなぜなら、動的な言語ばかり書いているとだんだん<b>人の気持ちが考えられなくなってくる</b>からです。\nそれだけではありません。機械の気持ちすらも考えられなくなります。だから動的言語は罠なのです。\n\nしかし、Pythonerのみなさん。そしてPythonistのみなさん。Pythonにも人と機械の気持ちを考えられる機能があります。\nそれが`Type Annotation`です。\n\n# Type Annotationとは\n\n`Type Annotation`とは、和訳すると「型注釈」です。\n要は変数の型をカッチリ決めておこうということです。\n\n例えば、なんの変哲もないPythonコードがあったとしましょう。\n\n```Python\na = [1, 2, 3]\n```\n\nこいつの型は？と聞かれて、みなさんは右辺の`[1, 2, 3]`という形を見てようやく`list`型だ〜！と理解できます。\n次に、またまた何の変哲もないコード\n\n```Python\na: list = [1, 2, 3]\n```\n\nここでSwift勢が全員歓喜します。そう、`Type Annotation`です。これなら、変数の中身を見なくても`a`が`list`型だとひと目でわかります。\n\nPythonで大規模開発をしたいと考えている人、<b>可読性</b>のためにも今すぐ`Type Annotation`を使いましょう。\n`Type Annotation`を肌で感じたいという人はSwiftを触ってみればいいと思います。\n\nPythonでの詳しい使い方は[こちら](https://docs.python.org/ja/3/library/typing.html)。実は`Generics`型なんかも使えるんですね。すごい。\n\n\n# 型と値の違い\n\n俺が`Type Annotation`を推すのにはもう一つ理由があります。\nそれは、<b>思考の整理のため</b>です。\n\nたとえば、以下の関数があります。\n\n```Python\nimport numpy as np\n\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```\n\nはい。Python使いならお馴染みの何の変哲もないシグモイド関数$\\sigma$です。\n\nこれだけを見て、xが`list`型なのか`np.ndarray`型なのか、はたまた`int`型なのかすぐに見分けがつきませんよね。\nではこれならどうでしょう。\n\n```Python\nimport numpy as np\n\n\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    return 1 / (1 + np.exp(-x))\n```\n\nここで再びSwift勢が歓喜。\n\nこうして、引数と返り値の型をアノテートしてやることで自らの思考の整理になります。\n\n特に初心者が躓きがちなのは**型がごちゃごちゃになる**という問題です。\nこのように、慎重に一つ一つの変数やメソッドの型に気をつける癖を付けることがプログラマへの第一歩と言えるでしょう。<br>\n\n\n\n# 変数の乱用はやめましょう\n\nさあ、これでようやくみんなも`Type Annotation`の重要性がわかってきたと思います。\n\nそれでいざ`Type Annotation`を使ってみると、だんだんこういうのが気持ち悪くなってきませんか？\n\n```Python\na = 1\na = \"hello\"\n```\n\nSwift勢なら大激怒ですね。\n\n変数への異なる型の再代入はまじでキモいので止めたほうが良いことに気づきます。\nいくら動的といえど、型を変えられると再代入を機械に任せることになります。\n\nまた、テスト時に参照を追えなくなるのでつらいです。\nそれなら新しい変数を宣言するほうが100億倍マシです。動的言語に頼るのは止めましょう。\n\n# 機械にも人間にもやさしいプログラマになろう\n\n`Type Annotation`は宣言したところでランタイム時にチェックされないので、もし型をミスっててもエラーを出してはくれません。(出すようにすることもできますが)\n\nしかし、`Type Annotation`を使うことでコードを書く自分も、読む他人も、反映する機械も幸せになれるのです。\nそして、プログラミングのまだ見ぬ可能性に気づくことができるでしょう。これからは積極的に`Type Annotation`を使っていきましょう。\n","created_at":"2019-04-14T13:50:07+09:00","id":"9dd8f040c606df769142","tags":[{"name":"Python","versions":[]},{"name":"型","versions":[]},{"name":"変数","versions":[]},{"name":"可読性","versions":[]}],"url":"https://qiita.com/MasatoTsutsumi/items/9dd8f040c606df769142"},{"title":"AnacondaのPythonをUpdateするときのコンフリクトエラー対策","body":"AnacondaのPythonを3.5系→3.7系にUpdateしようとしたら、\nコンフリクトエラーが起きてインストールできなかったので、\nその時の手順メモ\n\n#経緯\nAnacondaプロンプトで、conda install python=3.7と入力。\nこれで完了かと思いきや、エラーが発生\n\n```console\n>　conda install python=3.7\nFetching package metadata .............\nSolving package specifications: .\n\nUnsatisfiableError: The following specifications were found to be in conflict:\n  - conda-manager -> python 3.5*\n  - python 3.7*\nUse \"conda info <package>\" to see the dependencies for each package.\n```\n\n#解決策\n仮想環境を作成したらインストールできた\nコマンドは以下\nconda create -n 仮想環境名 インストールするパッケージ␣[パッケージ␣...]\n\n途中でProceed ([y]/n)? \nと聞かれるので、yを入力\n\n```console\n> conda create -n py37 python=3.7 anaconda\n.....（略）\n    widgetsnbextension:                 3.4.2-py37_0\n    win_inet_pton:                      1.1.0-py37_0\n    win_unicode_console:                0.5-py37_0\n.....（略）\n\nProceed ([y]/n)? y\n\n.....（略）\nmenuinst-1.4.1 100% |###############################| Time: 0:00:00   4.22 MB/s\nblas-1.0-mkl.t 100% |###############################| Time: 0:00:00   1.24 MB/s\n.....（略）\n\n#\n# To activate this environment, use:\n# > activate py37\n#\n# To deactivate an active environment, use:\n# > deactivate\n#\n# * for power-users using bash, you must source\n#\n```\n最後に表示されるコメント文で、次のように表示された\n\nこの環境をアクティベートするには、以下のように使う：\n\\> activate py37\nアクティベートした環境をデアクティベートするには、\n\\> deactivate\n\n####アクティベートを試す\n現在は3.5系。これを確認してからアクティベートし\nPythonのバージョンがどう変化するかを確認\n\n```console\n[Anaconda3] C:\\Users\\User>python --version\nPython 3.5.4 :: Anaconda 4.0.0 (64-bit)\n\n[Anaconda3] C:\\Users\\User>activate py37\n\n(py37) [Anaconda3] C:\\Users\\User>python --version\nPython 3.7.3\n```\n仮想環境py37では、Pythonのバージョンが3.5系→3.7系になった。\n続いてデアクティベート\n\n####デアクティベート\n\n```console\n(py37) [Anaconda3] C:\\Users\\User>deactivate\n\n[Anaconda3] C:\\Users\\User>\n[Anaconda3] C:\\Users\\User>python --version\nPython 3.5.4 :: Anaconda 4.0.0 (64-bit)\n```\n仮想環境を脱出したら、3.7系→3.5系に戻った\n\n#参考\ncondaのドキュメント\nhttps://docs.conda.io/projects/conda/en/latest/commands/create.html?highlight=create\nhttps://teratail.com/questions/115370\n","created_at":"2019-04-14T13:44:10+09:00","id":"f05a18b94898189113bd","tags":[{"name":"Python","versions":[]},{"name":"Anaconda","versions":[]}],"url":"https://qiita.com/kusanoiskuzuno/items/f05a18b94898189113bd"},{"title":"【STATA】asdocで綺麗な相関係数の表を作成（Wordに出力）","body":"## 目的\n統計ソフトSTATAを用いて、論文に載っているくらいの綺麗な相関係数の表を作りたい。\n\n## 環境\nSTATA13.0\n\n## 手順\n``asdoc``をインストール（すでにインストールされている場合、この手順をスキップ）\n\n```stata\nssc install asdoc \n```\n\n使うファイルを指定。（今回はサンプルデータを利用するため``sysuse...```としてある点に注意。）\n\n```stata\nsysuse auto, clear\n```\n\n``myreg.doc``ファイルに表を出力。\n※``.xls``形式ではうまく出力できなかった。\n\n```stata\nasdoc cor, save(myreg.doc)\n```\n\n下記画像のような結果を得られたら、画像下部の青い``myreg.doc``をクリック。\n![20190414b.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/363036/781b3c27-4287-73a5-b201-bed4de124d56.png)\n\n\n## 結果\n``myreg.doc``ファイルをWordで見ると下記画像のような感じ。\n![20190414a.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/363036/5d54f671-dec6-cd16-59bc-7057496c48ae.png)\n\n## 追記\n変数名の代わりにラベル名を表示したい場合\n\n```stata\nasdoc cor, label\n```\n\n1行目（上記画像の``Variables``の行）にも変数名を表示たい場合\n\n```stata\nasdoc pwcor, nonum\n```\n\n## 参考\n・http://fintechprofessor.com/2018/03/05/export-high-quality-table-correlations-stata-ms-word/\n","created_at":"2019-04-14T13:42:44+09:00","id":"dfc5b000648a72f23043","tags":[{"name":"Word","versions":[]},{"name":"stata","versions":[]},{"name":"asdoc","versions":[]}],"url":"https://qiita.com/c6tower/items/dfc5b000648a72f23043"},{"title":"初学者でもVue/Vuexを[確実に]動かせる記事~はじめてのHelloWorld~","body":"# はじめに\n## 導入\nここ数年のwebの主流(?)となりつつあるSPA(Single Page Application)に興味を持っている方は多いのではないでしょうか?[SPA(Single Page Application)の基本](https://qiita.com/takanorip/items/82f0c70ebc81e9246c7a)\n\n\nこの記事の目標は、「この今風のフロントエンドを実際に動かしてみたい!」と思う初学者の方向けに、VUE.jsを採用してSPAを動かすところまで持って行くことです(筆者も普段はバックエンドをメインに開発していますので大丈夫です。)。\n\nSPAの学習で何が壁かというと、単純なHelloWorld、およびその改良ができるようになるのに、数多くのことを学んでいかなくてはいけません。それに加えてVUEXやVue-Routerなどを初めから同時に学ぼうとすると挫折しやすいです。\nこの記事では初学者目線で、**はじめから丁寧に!**を心がけ、**[確実に]**動かせるように書いていきたいと思います。随時他の記事へのリンクもはりますので、必要があると感じたら目を通して見てください。\n\n## 一連の連載で[確実に]理解すること一覧\n\n- Vue.jsを使ってHelloWorldを出力し、プロジェクト内のファイルの役割や仕組みを理解する **[本記事]**\n\n- コンポーネントとは何かを理解し、HelloWorldを改良してページのQRコードを表示してみる。**[本記事]**\n\n- コンポーネント間の値の受け渡しの基礎を導入し、Vuexの意義を理解した上で導入する\n\n- WebAPIを導入してフロントエンドとバックエンドでデータをやり取りし、実践的なサイトを作り上げる\n\n## 対象\n- プログラミングの経験が(少しでも)ある\n \n- Webプログラミングについて初学者である\n\n- どうせなら動くものを作りたい！\n\n# マシンの環境構築\nこの記事ではVirtualBox/Vagrantを用いた仮想環境をベースに進めていきます。プログラミングについてはやはりLinuxベースの方が進めやすいし、情報量も多いと感じています。WindowsでもVirtualBox/Vagrantは動きますので可能な方はこの際、仮想環境での開発を始めましょう。Virtual Box や Vagrantについての記事は多数あります。\n\n[Vagrant を用いた開発環境での作業\n](https://qiita.com/rerere0101/items/c8846453362fb5393c34)\n\n[Windows10にVirtualBoxとUbuntuをインストール\n](https://qiita.com/pyon_kiti_jp/items/0be8ac17439abf418e48)\n\nこの記事ではOSはUbuntu16.04で進めます。Ubuntu16.04が立ち上がり、コマンドラインが打てる状態になったら次に進みます。\n\n\n# VUE.js でHelloWorldを実行\n## vueの導入\nVueの導入に入ります。まず必須のツールとしてNode.jsとnpm(node package manager)をインストールする必要があります。\n<インストール コマンド>\n\n```インストール\nsudo apt-get update\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n\n<バージョンを安定板に>\n\n\n```バージョンを安定板に\nsudo npm cache clean\nsudo npm install -g n\nsudo n stable\n```\n\n[とりあえず Ubuntu で新しい Node.js, npm をインストール\n](https://qiita.com/kerupani129/items/60ee8c8becc2fe9f0d28)\n\n\nnode.js はPythonやRubyと同様にサーバサイド(webブラウザから見て\"サーバ\"サイド)でJavascriptを用いることのできる実行環境です。文法がJavascriptと同じ新しいプログラミング言語という認識で良いです。npmはパッケージをマネージするものです。Pythonユーザにとってはpipみたいなものとお考えください。\n\n\nパッケージマネージャーが手に入ったので、Vue.jsをインストールします。\n```\nnpm install -g vue-cli\nvue --version\n- 2.9.6\n```\nここまででvueのバージョンが表示できるようになっているはずです。また**npmの他にyarnも導入しましょう。**\n\n`npm install -g yarn`\n\nyarnもパッケージマネージャーですが、より高速に動作します。他にも違いはあるのですが、今回の記事ではyarnを中心に進めます。\n\n## Hello World\n`vue init webpack [フォルダ名]`\nでプロジェクトを作成します。いくつか質問されます。あえて指摘するとすれば\n\n- webpackについては後述\n \n- Vue-routerについてはN\n\n- NpmかYarnについて聞かれるので、知識がある場合はyarnを推奨\n\nです。Vue-RouterについてはSPA環境でのページ遷移を管理するプラグインです。ページ遷移とはつまりアクセスURLについての振り分けや、ページ内のリンクの挿入などを制御している部分です。\n\n後から導入ができるので、必要だと感じた際に導入すればいいです。(Ruby on Railsを学んでいた方はRouter制御の経験があると思います。)\n\n\n\n```\nvagrant@vagrant:~/source_code$ vue init webpack hello\n\n? Project name hello\n? Project description A Vue.js project\n? Author\n? Vue build standalone\n? Install vue-router? No\n? Use ESLint to lint your code? Yes\n? Pick an ESLint preset Standard\n? Set up unit tests Yes\n? Pick a test runner jest\n? Setup e2e tests with Nightwatch? Yes\n? Should we run `npm install` for you after the project has been created? (recommended) yarn\n\n   vue-cli · Generated \"hello\".\n\n\n# Installing project dependencies ...\n# ========================\n\nyarn install v1.15.2\ninfo No lockfile found.\n[1/5] Validating package.json...\n[2/5] Resolving packages...\nwarning autoprefixer > browserslist@2.11.3: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\nwarning css-loader > cssnano > autoprefixer > browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\nwarning css-loader > cssnano > postcss-merge-rules > browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\nwarning css-loader > cssnano > postcss-merge-rules > caniuse-api > browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\nwarning eslint > file-entry-cache > flat-cache > circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor.\nwarning nightwatch > proxy-agent > socks-proxy-agent > socks@1.1.10: If using 2.x branch, please upgrade to at least 2.1.6 to avoid a serious bug with socket data flow and an import issue introduced in 2.1.0\nwarning webpack-bundle-analyzer > bfj-node4@5.3.1: Switch to the `bfj` package for fixes and new features!\n[3/5] Fetching packages...\ninfo fsevents@1.2.7: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.7\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[4/5] Linking dependencies...\n[5/5] Building fresh packages...\nsuccess Saved lockfile.\nDone in 20.92s.\n\n\nRunning eslint --fix to comply with chosen preset rules...\n# ========================\n\nyarn run v1.15.2\n$ eslint --ext .js,.vue src test/unit test/e2e/specs --fix\nDone in 0.94s.\n\n# Project initialization finished!\n# ========================\n\nTo get started:\n\n  cd hello\n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack\n```\n\nTo get started の通り、\n`cd hello`\n`yarn run dev`\n\nを実行して見てください。compile successfully!の文字がでたら成功です。webサーバが起動します。\nなお、vagrantで環境を構築した場合、IPアドレスを指定していることがあります。その際には\n`ifconfig`\nコマンドをコマンドラインにうって表示されたipでwebサーバを起動します。\n例えば\n`yarn run dev --hot --host [IPアドレス]`\nと打ってみてください。ブラウザでアクセスして、以下のような画面が表示されたら成功です。\n<img width=\"1362\" alt=\"スクリーンショット 2019-04-14 11.14.53.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/134021/927c057b-b71c-e486-58a0-55b1a48b490f.png\">\n\n## Hello Worldが出力された仕組み\n変更を加えて行くためにプロジェクト内のファイルがどうなっているのかを見て行くことにします。\n### index.htmlとwebpackについて\nはじめにプロジェクトディレクトリのホームに置いてあるindex.htmlについて\n\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title>hello</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n```\nここで重要なのは<body>内の二行\n\n```\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n```\nです。Javascriptを用いた動的webページでは、このタグ(ここではタグにid='app'がついている)に対して操作をし、描写します。\n*「htmlのコードはたったこれだけなのになんでHelloworldのページはあんな感じになったの?」*　と思った方、このid='app'の部分にjavascriptでweb描写のためのコードを流し込んでいるからです。\n\nまた、javascriptやjQueryを使っていた方は\n*「Javascriptのコードを読み込む記述がどこにもない」*　と思われたかもしれません。ここで思い出してもらいたいのが**webpack**についてです。\n**webpackはCSSやJavascriptファイル、画像ファイル、フォントなど(アセットファイルなんて言い方もします)を一つの実行ファイル、例えばbundle.jsという一つのファイルで吐き出す**ためのプラグインです。C言語などのコンパイル型言語を扱っていた方はイメージがしやすいと思います。例えば、と言ったのには理由があって、このwebpackについての設定は*webpack.config.js*といったファイルに記述することでカスタマイズできます。これ以上の説明については、他のわかりやすい記事に譲ることにします。\n\n[フロントエンドエンジニア必見！JavaScript開発現場で人気の「Webpack」とは？\n](https://ferret-plus.com/6337)\n\n[webpack.config.jsがわからない\n](https://qiita.com/one-kelvin/items/b810aafb6b5ef90789a3)\n\nこの吐き出したファイル(bundle.js)を読み込むための一文がindex.htmlにインサートされます。\nそれが\n`<!-- built files will be auto injected -->`\nの箇所です。まとめると、ブラウザとして読み込んでいるのはindex.htmlで、bundle.jsファイルを読み込んでおり、そのbundle.jsの実態は複数のCSS/JSといったファイルであるということです。\n\n### package.jsonについて\nそれぞれのプロジェクト毎に必要な外部プラグインは異なります。「自分が作成しているwebアプリはこのようなプラグインを使っています」というのを表示しているのがpackage.jsonです。\bnpmやyarnで新しいプラグインをinstall(yarnならadd)するたびにpackage.jsonに追記されていきます。\n`yarn add [ターゲット]`\nで外部からプラグインを読み込む際に**-Dオプション**をつけるとpackage.json内の**\"devDependencies\"**に記述されます。githubなどで配布する際に、package.jsonも一緒に配布することで関連するプラグインで何が必要なのかがわかるようになります。**\"devDependencies\"については開発環境のみで必要で実行環境では必要なし**ということを表します。\n\n\n### srcディレクトリの中身(大事)\nホームにあるsrcディレクトリの中身について、プロジェクトの作成の際に**routerをN**にした方は階層は以下のようになっているはずです。\n\n```\nvagrant@vagrant:~/source_code/hello/src$ tree .\n.\n├── App.vue <-- 単一コンポーネント\n├── assets\n│   └── logo.png\n├── components\n│   └── HelloWorld.vue  <--単一コンポーネント\n└── main.js <--単一コンポーネント達の登録\n\n2 directories, 4 files\n```\n\nまず、App.vueやcomponents/HelloWorld.vueについて、これらはVueの世界で**単一コンポーネント**と呼ばれるものです。\n\n[単一コンポーネントについて](https://qiita.com/tkhr/items/ac22019c891fe8fa5f91)\n\n何が嬉しいかというと*「パーツを構成するために必要な HTML・CSS・JSをひとまとめ に」*できるところです。VueやReactなどは**アプリケーションは部品やパーツの組み合わせでできているという考え方**に基づいています。\nこれらの単一コンポーネントを表す.vueファイルはそのファイル単独でwebページ中の何かの部品を表していると考えればいいです。また文法の大半は従来のHTML/CSS/Javascriptに基づいています。\n\nvueファイルの構成は以下のようになっています。\n\n```\n<template>\n<!-- 構成を記述。HTMLに相当。　-->\n</template>\n\n<script>\n<!-- 操作を記述。Javascriptに相当 -->\n</script>\n\n<style>\n<!-- コンポーネントのスタイリングを記述。CSSに相当 -->\n</style>\n\n```\n\n\n試しにHelloWorld.vueを見ると、構成はtemplate内に書かれていることがわかります。\n\n\n```HelloWorld.vue\n<template>\n  <div class=\"hello\">　<!-- scriptから操作される. コンポーネント内ではdivは一つのみ\n    <h1>{{ msg }}</h1>  <!-- scriptからデータを受け取り表示している箇所\n    <h2>Essential Links</h2>\n    <ul>\n      <li>~省略~</li>\n      <li>~省略~<li/>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld', // コンポーネントには大文字の単語二つ程度の組み合わせで名前付け \n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App' // コンポーネントの保持するデータ\n    }\n  }\n}\n</script>\n```\n\n例えばdata()内部を好きな文字列に変更してみてください。ブラウザを再読み込みすることで、msgの部分で表示される文字列が変わったことがわかると思います。コンポーネントはこのようにして記述していきます。コンポーネントの利点の一つに、一度作ってしまったら使い回しが自由自在ということがあります。今回作ったHelloWorld.vueを使い回しているのがApp.vueです。**App.vueはページ全体をさす単一コンポーネントであり、絵を書く場面で言うとキャンバスのようなもの**とお考えください。\n\n[Vue.js いろいろまとめ\n](https://qiita.com/SatoTakumi/items/36204b04e5743d666a26)\n\n```App.vue\n<template>\n  <div id=\"app\">\n    <img src=\"./assets/logo.png\">\n    <HelloWorld/> <!-- ここで読み込んだコンポーネントを配置\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld' // この部分でコンポーネントファイルを読み込んでいる。\n\nexport default {\n  name: 'App', // このファイル自身もコンポーネントなので名前をつける。\n  components: { // 他のコンポーネントを読み込みますよ、と宣言。\n    HelloWorld\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n```\n\nこれらのコンポーネントの登録および、コンポーネントのnewを扱うのがsrc内のmain.jsです。main.jsのみスコープ的にはグローバルになることに注意しましょう。\n\n```src/main.js\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  components: { App },\n  template: '<App/>'\n})\n```\n\n# Hello Worldを改良してみよう\n今回はHelloWorldにコンポーネントを追加してみましょう。QRコードを生成するコンポーネントとしてqriouslyというものが提供されています。このコンポーネントを外部から読み込んでみましょう!この場合にもyarnを使います。\n\n`yarn add vue-qriously`\n\nまた導入したコンポーネントを配置します。HelloWorld.vueを導入する時には見慣れなかった一文として、src/App.vue内に書いた**Vue.use**があります。外部のvue.js用プラグインを導入する際には記述をします。なおtemplateにも配置をさすための一文が加わっていることに注意してください。\n\n[Vue.use( )を書く場合と書かない場合\n](https://qiita.com/fuqda/items/90073e3cd0987c82553d)\n\n\n```src/App.vue\n<template>\n  <div id=\"app\">\n    <qriously value=\"Hello World!\" :size=\"200\" /> <!-- ここに コンポーネントを配置 -->\n    <HelloWorld/>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport HelloWorld from './components/HelloWorld'\nimport VueQriously from 'vue-qriously' // 外部コンポーネントを読み込み\n\nVue.use(VueQriously) // Vue.use を使って外部のvue.js用コンポーネントを使いますと宣言!\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n    VueQriously //VueQriouslyをコンポーネント\n  }\n}\n</script>\n```\n\n\nこれでページを更新してみます。QRコードが表示されたら成功です。\n<img width=\"837\" alt=\"スクリーンショット 2019-04-14 13.22.35.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/134021/43c0c203-a61d-4220-586e-987403174423.png\">\n\n\n\n# おわりに\n今回の記事ではVUE.jsを使い始める環境の構築、VUE.jsの実行について触れました。また改良を加えるために最低限しておくべき内容をまとめました。細かな部分については本記事だけでカバーしきれないため、他の記事を参照していただきたく思います。次の記事ではコンポーネント間の値の受け渡しについての基礎、Vuexの導入、そしてWEBAPIを導入してフロントエンドとバックエンドの接続について触れたいと思います。\n","created_at":"2019-04-14T13:38:00+09:00","id":"f799a60c4e505ff0e3d3","tags":[{"name":"JavaScript","versions":[]},{"name":"AngularJS","versions":[]},{"name":"vue.js","versions":[]},{"name":"React","versions":[]},{"name":"Vuex","versions":[]}],"url":"https://qiita.com/rerere0101/items/f799a60c4e505ff0e3d3"},{"title":"【Java】axis2のSOAP StubにWS-SecurityのUsername Tokenを設定する実装方法メモ","body":"いろいろ探したけど具体的な実装方法に関するhintがStackOverFlow(しかも英語…)にしかなかったので備忘のためにメモ。\n\nStackOverFlowの出展は以下\nStackOverFlow:https://stackoverflow.com/questions/7910776/adding-user-password-to-soapheader-for-webservice-client-call-with-axis2\n著者:https://stackoverflow.com/users/957076/shiv-gopal\n（この人、自力で解決したらしい（I resolve the issue myself)、、、すげーなー）\n\nほとんどこの人の回答通りだがそのままやるとエラーになったので下記コメント部分の通りの追加修正を施している。\n\n```java\n\nOMFactory omFactory = OMAbstractFactory.getOMFactory();\nOMElement omSecurityElement = omFactory.createOMElement(new QName( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\", \"Security\", \"wsse\"), null);\n\nOMElement omusertoken = omFactory.createOMElement(new QName(\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\", \"UsernameToken\", \"wsu\"), null);\n// createOMElementの引数QNameの第一引数にWS-SecurityのURIを指定\nOMElement omuserName = omFactory.createOMElement(new QName(\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\", \"Username\", \"wsse\"), null);\nomuserName.setText(\"myusername\");\n// createOMElementの引数QNameの第一引数にWS-SecurityのURIを指定\nOMElement omPassword = omFactory.createOMElement(new QName(\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\", \"Password\", \"wsse\"), null);\nomPassword.addAttribute(\"Type\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\",null );\nomPassword.setText(\"mypassword\");\n\nomusertoken.addChild(omuserName);\nomusertoken.addChild(omPassword);\nomSecurityElement.addChild(omusertoken);\nstub._getServiceClient().addHeader(omSecurityElement);\n```\n\n追記修正点として、StackOverFlowの回答では、QNameオブジェクトつくるときに第一引数に空文字を指定しているが、これだと実行時に「java.lang.IllegalArgumentException: Cannot create a prefixed element with an empty namespace」が発生する。\nなので明示的にWS-SecurityのURIを指定させている。\nだからたぶんコレ回答の誤記じゃないかと思うのだが…なんかやり方あるのかな。\n\nまた、omuserName.setText(\"myusername\");とomPassword.setText(\"mypassword\");に自身のユーザーとパスワードを設定する。\n\nWS-Securityの「仕様」や「概念」に関しては、検索すればそこそこ出てくるのだが、具体的な実装方法があまり見つからず、仮に見つかってもaixsのバージョンが違うみたいで気軽にsetHeaderとかできなかったりして、結構困った。\n<A HREF=\"http://axis.apache.org/axis2/java/core/apidocs/org/apache/axis2/client/Stub.html\" target=\"_blank\">aixs2のStub</A>はServiceClient取り出す以外は全てprotectedになっていて、外からはほとんど何もできなく、<A HREF=\"http://axis.apache.org/axis/java/apiDocs/org/apache/axis/client/Stub.html\" target=\"_blank\">axis1のStub</A>に比べて自由度が非常に制限されている印象である。\n今回のように、headerの設定方法にはなかなか苦労させられた。\n\n","created_at":"2019-04-14T13:33:33+09:00","id":"5f94af070de3012a4a1b","tags":[{"name":"Java","versions":[]},{"name":"SOAP","versions":[]},{"name":"axis","versions":[]}],"url":"https://qiita.com/rmrmrmarmrmrm/items/5f94af070de3012a4a1b"},{"title":"ffmpeg nvenc における GPU ベンチマーク","body":"# 目的\n新しいアーキテクチャってハードウェアエンコする時に有効なの？\nって思ったので\nまとめも兼ねて\n\n# 環境\n |HW List\n:-:|---\nCPU | i7-920 @2.66GHz  \nM/B | P6T Delux v2\nMEM | DDR3-1066 12GB\nSSD | WD 128GB\n\n  |SW List\n:-:|---\nOS  | Ubuntu 18.04\nnvidia driver | 390.116\nffmpeg version | n4.1\n\n# GPU\n何個か持ってるけど nvenc 走れたのは以下\n\n | GTX670 | GTX980\n:-: | :-:| :-:\nArchitecture | Kepler | Maxwell\nTechnology | 28nm | 28nm\nShaders | 1344 | 2048 \nGPU Clock | 915MHz | 1126MHz\nMemory | GDDR5 2GB | GDDR5 4GB\n\n# コマンド\n```\ntime ffmpeg -i ypt.mov -b:v 20M -c:v h264_nvenc ypt.mp4\n```\nh264で入力動画（130秒）を 20Mbps で mov -> mp4 変換する\nなお CPU エンコでは -c:v h264 を代わりに使用する\n\n# リザルト\n結果は3回試行の中央値\n\n使用プロセッサ | エンコード時間 | CPU比\n:-: | :-:| :-:\ni7-920 | 416秒 | x1.0\nGTX670 | 98秒 | x4.2\nGTX980 | 69秒 | x6.0\nGTX980 + GTX670 | 70秒 | x5.9\nGTX670 + GTX980 | 70秒 | x5.9\n\n#結論\n・新しいやつは強い\n","created_at":"2019-04-14T13:31:54+09:00","id":"4549924b56517d452516","tags":[{"name":"ffmpeg","versions":[]},{"name":"NVENC","versions":[]}],"url":"https://qiita.com/Soleiyu/items/4549924b56517d452516"},{"title":"Automotive SPICE 3.0 実践ガイドブック　入門編　読み進め　１章","body":"[Automotive SPICE 3.0 実践ガイドブック入門編](https://www.amazon.co.jp/dp/4822200566/)の読み進めです。\n自分向けのノートとして記録します。\n#1 概要\n##1-1 誕生の経緯と動向\n開発体制の多様化\n⇒✖技術者同士の阿吽の呼吸\n　〇共通言語での根拠の共有\n\nISO26262　システムの故障、誤作動での危険を回避するための要求をまとめている。\n\n\n##1-2 改善活動の基本的考え方\n###改善活動のマネジメントのためのPDCAサイクル\n- PDCAサイクル\n\n改善活動が事業目標と紐づくことが前提⇒でないと経営層と管理層の理解を得られない。\n改善活動のPDCAには⇒運営の責任者による「目標の周知」、「リソース提供」といったインフラの確率が必要。\n\n- 改善活動PDCA\n   - 改善目標設定（定量的）\n      - 現状把握\n      - 分析した弱みに対する改善策（全ての弱みに対処しなくてもよい）\n\n改善策をパイロット実施し、効果を確かめる。\nOKなら組織標準プロセスを定義する。\n\n- 作業タスク\n- 手順\n- 適用技術・ツール\n- 必要スキル・役割\n\n以上を整理する。測定の尺度も定義すること。\n改善策を試行したら、測定データから有効性を検証する。\n\n\n###段階的な目標設定の考え方\n関係者の慣れ・学習を想定して\nグループ ⇒ プロジェクト ⇒ 小組織 ⇒ 大組織　と段階的な目標を設定する。\nまた逆方向で、\n組織の目標を想定して ⇒ 中間目標を立て ⇒ プロジェクトレベルの活動を始める。\n\n###プロジェクトレベルの改善\n目標とリソースのギャップ⇒設計方法の見直し、テストの効率化\n\n###組織レベルの改善\n各プロジェクトの改善内容を展開する。\n【注意】メンバーに改善活動の経験がないと、展開された標準プロセスの意味が理解できない。\nプロセス実績を蓄積する。\n\n###事業レベルの改善\n実績データの分析から。\n\n\n## 車載システム開発における改善活動\n失敗事例を参考として、改善活動の勘所を説明。\n\n### 失敗事例とその要因\n- プロジェクトはSPICEの目標レベルを達成したが、メンバーが意味を感じていない。\n- メンバーがプロセス改善の横展開の必要性を感じていない。\n- 何のための、誰のための改善かの理解がされていない。\n\n### 失敗の共通要因\n■改善目的と手段の入れ替わり「SPICEの能力レベルを達成する！」\n　能力レベルを達成する！ではなく、あくまで「日程遅延を少なくする」、「コストを低減する」といった具体的な目標で改善活動を実施しないとメンバーに達成感がわかない。\n\n■改善活動の範囲がパイロット（改善対象として初めに実施される）プロジェクトに限定されている。\n　プロジェクト限定で言われたことだけをやればいい。⇒横展開ができない。\n\n### 改善に対する期待\n- プロジェクトメンバー層の改善活動への期待\n   - 技術者自身が成長する？\n   - 上手くいった達成感が得られるか？\n   - 納得する評価が得られるか？\n- 管理者層の改善活動への期待\n   - 部門がかかえる課題を意識している？\n   - 個人のノウハウを集合知として共有できている？\n   - 複数のプロジェクトの状況を一元的に管理できている？\n- 経営層の改善活動への期待\n   - 顧客満足度はあがるのか？\n   - 部門間が協調して相乗効果が出るのか？\n   - 経営判断のスピード、競争力が向上するのか？\n\n### 著者が推奨するアプローチ\n切っ掛けの大半は取引先からの要求。⇒組織力強化の機会ととらえる。\n\n■中長期の段階的な目標設定（管理者層の責任）\n\n- ステージ１：開発の基礎力強化\n  - プロセスモデルに基づいた標準プロセスの構築と展開\n  - プロセス改善活動を通して、改善基盤を構築\n     - 「成果」：初めて構築した標準プロセス、改善活動の経験蓄積\n     - 納期の問題もあって、後継プロジェクトには適用しやすいが、横展開にはリスクがある。\n- ステージ２：組織力＆組織運営力強化（事業部）：本書対象外\n  - モノづくりの土台を構築し、組織力を強化\n  - マネジメントサイクルを構築し、継続的製品価値を生み出す組織力を強化\n  - 指標、データ収集、分析の仕組み\n     - 開発対象の製品に必要な人材リソース、アーキテクチャ、手法を体系化する。\n     - 「成果」：ノウハウが自然とたまる、活用できる標準プロセスができる。\n- ステージ３：企業競争力強化（全社）：本書対象外\n  - カイゼンの定着から、企業文化の形成と企業成長を継続させる。\n  - 必要に応じてカイゼンの革新\n\n\n\n　\n\n","created_at":"2019-04-14T13:28:26+09:00","id":"ad80d693e8de74eddc4d","tags":[{"name":"Automotive_SPICE","versions":[]}],"url":"https://qiita.com/kcha4tsubuyaki/items/ad80d693e8de74eddc4d"},{"title":"(Stein版) OpenStack heat内部構造を探ってみる[heat-api編]","body":"NFVオーケストレーションを実現する手段として、一般的に、OpenStack heatが活用されることが多いと思います。\nそこで、今回、heat-api内部構造を調査することにより、その動作メカニズムを理解していきたいと思います。\n\n# ◼️ そもそも、OpenStack heatって、どんなもの？\nQiita記事「[Mitaka版 OpenStack Heat環境をセットアップしてみた](https://qiita.com/ttsubo/items/7439116ab0e0484ef654)」が参考になると思います。\n\n# ◼️ OpenStack heatでの、大まかな処理の流れ\nOpenStack heatは、リクエストに応じて、適切なクラウドオペレーション（novaインスタンス作成など）を行います。\n\n- heat-apiが、ユーザからのリクエストを受け付ける。\n- heat-api内部で、必要なコンテキスト処理（token情報の入手等）を実施する。\n- heat-api内部で、OpenStack固有の権限設定`policy.json` の記述に従って、実行可否を判定する。\n- RabbitMQ等のメッセージング機構を介して、heat-engine側で適切なオーケストレーション処理を実施します。\n\nなお、メッセージング処理機構は、Qiita記事「[OpenStackメッセージング機構を探ってみる]\n(https://qiita.com/ttsubo/items/1f2884d41c3fe3129c5e)」を参照ください。\n\n![Heat Architecture.002.png](https://qiita-image-store.s3.amazonaws.com/0/103595/1c1dda05-93ca-9ed5-4a78-34007c78077d.png)\n## (1) heat-api起動の流れは、どうなっているのか？\nこちらのスライド\"[OpenStack API's and WSGI](http://www.slideshare.net/lhrc_mikeyp/openstack-apis-and-wsgi)\"からの引用です。\n![名称未設定.001.png](https://qiita-image-store.s3.amazonaws.com/0/103595/534f386c-2294-87b3-b144-f7adeef82ffb.png)\n今回、heat-api動作の流れを調査する上で、これらのキーワードを意識しておくことが大切になりそうです。\n\n## (2) heat向けのリクエストを、どうやって処理しているのか？\nheat-api内部にて、受け付けたリクエストメッセージを適切に処理する場合、WSGI アプリケーションの機構が関与しているようです。そこで、まずは、WSGI アプリケーションの仕組みを理解する必要があります。\n過去のQiita記事「[OpenStackを活用して、WSGI アプリケーションの仕組みを理解する](https://qiita.com/ttsubo/items/0a1abecce272559edc94)を参照ください。\n\n# ◼️ OpenStack heat環境として、`/etc/heat/api_paste.ini`ファイルを事前確認しておく\n`/etc/heat/api_paste.ini` が配備されているので、事前に内容を確認しておく\n\n```python:api_paste.ini\n# heat-api pipeline\n[pipeline:heat-api]\npipeline = cors request_id faultwrap http_proxy_to_wsgi versionnegotiation authurl authtoken context osprofiler apiv1app\n\n... (snip)\n\n[app:apiv1app]\npaste.app_factory = heat.common.wsgi:app_factory\nheat.app_factory = heat.api.openstack.v1:API\n\n... (snip)\n\n[filter:versionnegotiation]\npaste.filter_factory = heat.common.wsgi:filter_factory\nheat.filter_factory = heat.api.openstack:version_negotiation_filter\n\n[filter:cors]\npaste.filter_factory = oslo_middleware.cors:filter_factory\noslo_config_project = heat\n\n[filter:faultwrap]\npaste.filter_factory = heat.common.wsgi:filter_factory\nheat.filter_factory = heat.api.openstack:faultwrap_filter\n\n... (snip)\n\n[filter:context]\npaste.filter_factory = heat.common.context:ContextMiddleware_filter_factory\n\n... (snip)\n\n[filter:http_proxy_to_wsgi]\npaste.filter_factory = oslo_middleware:HTTPProxyToWSGI.factory\n\n# Middleware to set auth_url header appropriately\n[filter:authurl]\npaste.filter_factory = heat.common.auth_url:filter_factory\n\n# Auth middleware that validates token against keystone\n[filter:authtoken]\npaste.filter_factory = keystonemiddleware.auth_token:filter_factory\n\n... (snip)\n\n# Middleware to set x-openstack-request-id in http response header\n[filter:request_id]\npaste.filter_factory = oslo_middleware.request_id:RequestId.factory\n\n[filter:osprofiler]\npaste.filter_factory = osprofiler.web:WsgiMiddleware.factory\n```\n\n# ◼️ heat-api起動処理の動作メカニズムを調査してみる\nまず、[\"heat/cmd/api.py\"](https://github.com/openstack/heat/blob/stable/stein/heat/cmd/api.py)のPythonスクリプト動作の流れを、確認していきます。\n\n## (1) [load_paste_app](https://github.com/openstack/heat/blob/stable/stein/heat/cmd/api.py#L52)メソッドが起動される\n\n`load_paste_app`メソッドは、こんな感じ...\n\n```python:heat/common/config.py\ndef load_paste_app(app_name=None):\n    \"\"\"Builds and returns a WSGI app from a paste config file.\n\n    We assume the last config file specified in the supplied ConfigOpts\n    object is the paste config file.\n\n    :param app_name: name of the application to load\n\n    :raises RuntimeError: when config file cannot be located or application\n            cannot be loaded from config file\n    \"\"\"\n    if app_name is None:\n        app_name = cfg.CONF.prog\n\n    # append the deployment flavor to the application name,\n    # in order to identify the appropriate paste pipeline\n    app_name += _get_deployment_flavor()\n\n    conf_file = _get_deployment_config_file()\n    if conf_file is None:\n        raise RuntimeError(_(\"Unable to locate config file [%s]\") %\n                           cfg.CONF.paste_deploy['api_paste_config'])\n\n    try:\n        app = wsgi.paste_deploy_app(conf_file, app_name, cfg.CONF)\n\n        # Log the options used when starting if we're in debug mode...\n        if cfg.CONF.debug:\n            cfg.CONF.log_opt_values(logging.getLogger(app_name),\n                                    logging.DEBUG)\n\n        return app\n    except (LookupError, ImportError) as e:\n        raise RuntimeError(_(\"Unable to load %(app_name)s from \"\n                             \"configuration file %(conf_file)s.\"\n                             \"\\nGot: %(e)r\") % {'app_name': app_name,\n                                                'conf_file': conf_file,\n                                                'e': e})\n``` \n\nそして、`app_name`には、初期値として[\"heat-api\"](https://github.com/openstack/heat/blob/stable/stein/heat/cmd/api.py#L45)が設定される\n\n### (1-1) _get_deployment_flavorメソッドが起動される\n`/etc/heat/heat.conf`ファイルに、flavorパラメータを設定することが可能だが、[\"Heat Configuration Sample\"](https://docs.openstack.org/heat/stein/configuration/sample_config.html)によると、デフォルトでは、設定されていないので、特に、何もしない。\n\n```\n[paste_deploy]\n\n#\n# From heat.common.config\n#\n\n# The flavor to use. (string value)\n#flavor = <None>\n\n# The API paste config file to use. (string value)\n#api_paste_config = api-paste.ini\n```\n### (1-2) _get_deployment_config_fileメソッドが起動される\n`conf_file`には、[\"/etc/heat/api-paste.ini\"](https://github.com/openstack/heat/blob/stable/stein/etc/heat/api-paste.ini)ファイルの保管先としてパス情報が設定される。\n\n\n## (2) [paste_deploy_app](https://github.com/openstack/heat/blob/stable/stein/heat/common/config.py#L498)メソッドが起動される\n\n`paste_deploy_app`メソッドは、こんな感じ...\n\n```python:heat/common/wsgi.py\ndef paste_deploy_app(paste_config_file, app_name, conf):\n    \"\"\"Load a WSGI app from a PasteDeploy configuration.\n\n    Use deploy.loadapp() to load the app from the PasteDeploy configuration,\n    ensuring that the supplied ConfigOpts object is passed to the app and\n    filter constructors.\n\n    :param paste_config_file: a PasteDeploy config file\n    :param app_name: the name of the app/pipeline to load from the file\n    :param conf: a ConfigOpts object to supply to the app and its filters\n    :returns: the WSGI app\n    \"\"\"\n    setup_paste_factories(conf)\n    try:\n        return loadwsgi.loadapp(\"config:%s\" % paste_config_file, name=app_name)\n    finally:\n        teardown_paste_factories()\n```\n\n### (2-1) [setup_paste_factoriesメソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1135)が起動される\n\n`setup_paste_factories`メソッドは、こんな感じ...\n\n```python:heat/common/wsgi.py\ndef setup_paste_factories(conf):\n    \"\"\"Set up the generic paste app and filter factories.\n\n    Set things up so that:\n\n      paste.app_factory = heat.common.wsgi:app_factory\n\n    and\n\n      paste.filter_factory = heat.common.wsgi:filter_factory\n\n    work correctly while loading PasteDeploy configuration.\n\n    The app factories are constructed at runtime to allow us to pass a\n    ConfigOpts object to the WSGI classes.\n\n    :param conf: a ConfigOpts object\n    \"\"\"\n    global app_factory, filter_factory\n    app_factory = AppFactory(conf)\n    filter_factory = FilterFactory(conf)\n```\n\nここでは、`AppFactory`, `FilterFactory`クラスのアクティベート処理が行われる\n\n\n#### (2-1-1) [AppFactoryクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1112)が呼び出される\n\n`AppFactory`クラスは、こんな感じ...\n\n```python:heat/common/wsgi.py\nclass AppFactory(BasePasteFactory):\n    \"\"\"A Generic paste.deploy app factory.\n\n    This requires heat.app_factory to be set to a callable which returns a\n    WSGI app when invoked. The format of the name is <module>:<callable> e.g.\n\n      [app:apiv1app]\n      paste.app_factory = heat.common.wsgi:app_factory\n      heat.app_factory = heat.api.cfn.v1:API\n\n    The WSGI app constructor must accept a ConfigOpts object and a local config\n    dict as its two arguments.\n    \"\"\"\n\n    KEY = 'heat.app_factory'\n\n    def __call__(self, global_conf, **local_conf):\n        \"\"\"The actual paste.app_factory protocol method.\"\"\"\n        factory = self._import_factory(local_conf)\n        return factory(self.conf, **local_conf)\n```\n\nグローバル変数`app_factory`に保存される。\nこの段階で、`[app:apiv1app]`セッションでの、`paste.app_factory = heat.common.wsgi:app_factory`に基づく、`app_factory`メソッドの起動準備が完了することになる。\n\n```/etc/heat/api_paste.ini\n\n... (snip)\n\n[app:apiv1app]\npaste.app_factory = heat.common.wsgi:app_factory\nheat.app_factory = heat.api.openstack.v1:API\n```\nこの後の`deploy.loadapp`処理の開始に伴い、`AppFactory`インスタンスの`__call__`メソッドが起動された場合には、_import_factoryメソッドが呼ばれる\n\nなお、`local_conf`には、`{'heat.app_factory': 'heat.api.openstack.v1:API'}`という情報が設定されている\n\n#### (2-1-2) [FilterFactoryクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1113)が呼び出される\n\n`FilterFactory`クラスは、こんな感じ...\n\n```python:heat/common/wsgi.py\nclass FilterFactory(AppFactory):\n    \"\"\"A Generic paste.deploy filter factory.\n\n    This requires heat.filter_factory to be set to a callable which returns a\n    WSGI filter when invoked. The format is <module>:<callable> e.g.\n\n      [filter:cache]\n      paste.filter_factory = heat.common.wsgi:filter_factory\n      heat.filter_factory = heat.api.middleware.cache:CacheFilter\n\n    The WSGI filter constructor must accept a WSGI app, a ConfigOpts object and\n    a local config dict as its three arguments.\n    \"\"\"\n\n    KEY = 'heat.filter_factory'\n\n    def __call__(self, global_conf, **local_conf):\n        \"\"\"The actual paste.filter_factory protocol method.\"\"\"\n        factory = self._import_factory(local_conf)\n\n        def filter(app):\n            return factory(app, self.conf, **local_conf)\n\n        return filter\n```\n\nグローバル変数`filter_factory`に保存される。\nこの段階で、`[filter:versionnegotiation]`セッション, `[filter:faultwrap]`セッションでの、`paste.filter_factory = heat.common.wsgi:filter_factory`に基づく、`filter_factory`メソッドの起動準備が完了することになる。\n\n```/etc/heat/api_paste.ini\n\n# heat-api pipeline\n[pipeline:heat-api]\npipeline = cors request_id faultwrap http_proxy_to_wsgi versionnegotiation authurl authtoken context osprofiler apiv1app\n\n... (snip)\n\n[filter:versionnegotiation]\npaste.filter_factory = heat.common.wsgi:filter_factory\nheat.filter_factory = heat.api.openstack:version_negotiation_filter\n\n[filter:cors]\npaste.filter_factory = oslo_middleware.cors:filter_factory\noslo_config_project = heat\n\n[filter:faultwrap]\npaste.filter_factory = heat.common.wsgi:filter_factory\nheat.filter_factory = heat.api.openstack:faultwrap_filter\n\n... (snip)\n\n[filter:context]\npaste.filter_factory = heat.common.context:ContextMiddleware_filter_factory\n\n... (snip)\n\n[filter:http_proxy_to_wsgi]\npaste.filter_factory = oslo_middleware:HTTPProxyToWSGI.factory\n\n# Middleware to set auth_url header appropriately\n[filter:authurl]\npaste.filter_factory = heat.common.auth_url:filter_factory\n\n# Auth middleware that validates token against keystone\n[filter:authtoken]\npaste.filter_factory = keystonemiddleware.auth_token:filter_factory\n\n... (snip)\n\n# Middleware to set x-openstack-request-id in http response header\n[filter:request_id]\npaste.filter_factory = oslo_middleware.request_id:RequestId.factory\n\n[filter:osprofiler]\npaste.filter_factory = osprofiler.web:WsgiMiddleware.factory\n```\n\nこの後の`deploy.loadapp`処理の開始に伴い、`FilterFactory`インスタンスの`__call__`メソッドが起動された場合には、_import_factoryメソッドが呼ばれる\n\n- __version_negotiation_filter__の場合、`local_conf`には、`{'heat.filter_factory': 'heat.api.openstack:version_negotiation_filter'}`という情報が設定されている\n- __faultwrap_filter__の場合、`local_conf`には、`{'heat.filter_factory': 'heat.api.openstack:faultwrap_filter'}`という情報が設定されている\n\n### (2-2) [loadappメソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1137)が起動される\ndeplory.loadappメソッド起動により、`api_paste.ini`ファイルの`[pipeline:heat-api]`セッションに記述された内容に従い、PasteDeployment処理が開始される。\n\n```/etc/heat/api_paste.ini\n# heat-api pipeline\n[pipeline:heat-api]\npipeline = cors request_id faultwrap http_proxy_to_wsgi versionnegotiation authurl authtoken context osprofiler apiv1app\n\n... (snip)\n```\nすなわち、 `apiv1app`  -> `osprofiler` -> `context` -> `authtoken` -> `authurl` ->  `versionnegotiation` -> `http_proxy_to_wsgi` -> `faultwrap` -> `request_id` -> `cors`という順番で、PasteDeployment処理が実施されることになる。\n\n\n#### (2-2-1) `[app:apiv1app]`セクションの`heat.common.wsgi:app_factory`メソッドが起動される\n`heat.common.wsgi:app_factory`メソッド起動により、[AppFactoryクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1045-L1064)の`__call__`メソッドが起動された場合には ...\n\n- `_import_factory`メソッドが呼ばれる\n- `local_conf`には、`{'heat.app_factory': 'heat.api.openstack.v1:API'}`という情報が設定されている\n- [heat.api.openstack.v1.APIクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/v1/__init__.py)が、インスタンス化されて、ルーティングのマッピング情報が設定される\n- 上位クラスの[Router](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L698-L748)のコンストラクタが起動されて、`self.map`には、ルーティングのマッピング情報が設定される\n- [heat.api.openstack.v1.APIクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/v1/__init__.py)の`__call__`メソッド起動準備が完了したことになる\n\n```python:heat/api/openstack/v1/__init__.py\nclass API(wsgi.Router):\n\n    \"\"\"WSGI router for Heat v1 REST API requests.\"\"\"\n\n    def __init__(self, conf, **local_conf):\n        self.conf = conf\n        mapper = routes.Mapper()\n        default_resource = wsgi.Resource(wsgi.DefaultMethodController(),\n                                         wsgi.JSONRequestDeserializer())\n\n        def connect(controller, path_prefix, routes):\n            \"\"\"Connects list of routes to given controller with path_prefix.\n\n            This function connects the list of routes to the given\n            controller, prepending the given path_prefix. Then for each URL it\n            finds which request methods aren't handled and configures those\n            to return a 405 error. Finally, it adds a handler for the\n            OPTIONS method to all URLs that returns the list of allowed\n            methods with 204 status code.\n            \"\"\"\n            # register the routes with the mapper, while keeping track of which\n            # methods are defined for each URL\n            urls = {}\n            for r in routes:\n                url = path_prefix + r['url']\n                methods = r['method']\n                if isinstance(methods, six.string_types):\n                    methods = [methods]\n                methods_str = ','.join(methods)\n                mapper.connect(r['name'], url, controller=controller,\n                               action=r['action'],\n                               conditions={'method': methods_str})\n                if url not in urls:\n                    urls[url] = methods\n                else:\n                    urls[url] += methods\n\n            # now register the missing methods to return 405s, and register\n            # a handler for OPTIONS that returns the list of allowed methods\n            for url, methods in urls.items():\n                all_methods = ['HEAD', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE']\n                missing_methods = [m for m in all_methods if m not in methods]\n                allowed_methods_str = ','.join(methods)\n                mapper.connect(url,\n                               controller=default_resource,\n                               action='reject',\n                               allowed_methods=allowed_methods_str,\n                               conditions={'method': missing_methods})\n                if 'OPTIONS' not in methods:\n                    mapper.connect(url,\n                                   controller=default_resource,\n                                   action='options',\n                                   allowed_methods=allowed_methods_str,\n                                   conditions={'method': 'OPTIONS'})\n\n        # Stacks\n        stacks_resource = stacks.create_resource(conf)\n        connect(controller=stacks_resource,\n                path_prefix='/{tenant_id}',\n                routes=[\n                    # Template handling\n                    {\n                        'name': 'template_validate',\n                        'url': '/validate',\n                        'action': 'validate_template',\n                        'method': 'POST'\n                    },\n                    {\n                        'name': 'resource_types',\n                        'url': '/resource_types',\n                        'action': 'list_resource_types',\n                        'method': 'GET'\n                    },\n                    {\n                        'name': 'resource_schema',\n                        'url': '/resource_types/{type_name}',\n                        'action': 'resource_schema',\n                        'method': 'GET'\n                    },\n                    {\n                        'name': 'generate_template',\n                        'url': '/resource_types/{type_name}/template',\n                        'action': 'generate_template',\n                        'method': 'GET'\n                    },\n\n                    {\n                        'name': 'template_versions',\n                        'url': '/template_versions',\n                        'action': 'list_template_versions',\n                        'method': 'GET'\n                    },\n\n                    {\n                        'name': 'template_functions',\n                        'url': '/template_versions/{template_version}'\n                               '/functions',\n                        'action': 'list_template_functions',\n                        'method': 'GET'\n                    },\n\n                    # Stack collection\n                    {\n                        'name': 'stack_index',\n                        'url': '/stacks',\n                        'action': 'index',\n                        'method': 'GET'\n                    },\n                    {\n                        'name': 'stack_create',\n                        'url': '/stacks',\n                        'action': 'create',\n                        'method': 'POST'\n                    },\n                    {\n                        'name': 'stack_preview',\n                        'url': '/stacks/preview',\n                        'action': 'preview',\n                        'method': 'POST'\n                    },\n                    {\n                        'name': 'stack_detail',\n                        'url': '/stacks/detail',\n                        'action': 'detail',\n                        'method': 'GET'\n                    },\n\n... snip\n\n                ])\n... snip\n\n        super(API, self).__init__(mapper)\n```\n\n#### (2-2-2) `[filter:osprofiler]`セクションの`osprofiler.web:WsgiMiddleware.factory`メソッドが起動される\n- [osprofiler.web.WsgiMiddleware.factory](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L92-L96)メソッドが起動される\n- その場合、クロージャ`filter_`への引数`app`には、`heat.api.openstack.v1.API`インスタンスのオブジェクト値が渡される\n- [WsgiMiddlewareクラス](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L69-L134)がインスタンス化されて、`self.application`には、`heat.api.openstack.v1.API`インスタンスのオブジェクト値が設定される\n- [WsgiMiddlewareクラス](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L69-L134)の`__call__`メソッド起動準備が完了したことになる\n\n\n#### (2-2-3) `[filter:context]`セクションの`heat.common.context:ContextMiddleware_filter_factory`メソッドが起動される\n- [heat.common.context.ContextMiddleware_filter_factory](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L395-L403)メソッドが起動される\n- その場合、クロージャ`filter`への引数`app`には、`osprofiler.web.WsgiMiddleware`インスタンスのオブジェクト値が渡される\n- [ContextMiddlewareクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L334-L392)がインスタンス化される\n- 上位クラスの[Middlewareクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L602-L632)のコンストラクタが起動されて、`self.application`には、`osprofiler.web.WsgiMiddleware`インスタンスのオブジェクト値が設定される\n- [ContextMiddlewareクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L334-L392)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-4) `[filter:authtoken]`セクションの`keystonemiddleware.auth_token:filter_factory`メソッドが起動される\n- [keystonemiddleware.auth_token.filter_factory](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L955-L962)メソッドが起動される\n- その場合、クロージャ`filter`への引数`app`には、`heat.common.context.ContextMiddleware`インスタンスのオブジェクト値が渡される\n- [AuthProtocolクラス](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L535-L952)がインスタンス化されて、`self._app`には、`heat.common.context.ContextMiddleware`インスタンスのオブジェクト値が設定される\n- [AuthProtocolクラス](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L535-L952)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-5) `[filter:authurl]`セクションの`heat.common.auth_url:filter_factory`メソッドが起動される\n- [heat.common.auth_url.filter_factory](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L65-L71)メソッドが起動される\n- その場合、クロージャ`filter`への引数`app`には、`keystonemiddleware.auth_token.AuthProtocol`インスタンスのオブジェクト値が渡される\n- [AuthUrlFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L25-L62)がインスタンス化される\n- Pythonモジュール`keystonemiddleware.auth_token`が、インポートされる\n- `/etc/heat/heat.conf`ファイルの`[keystone_authtoken]`セクションに記述された`auth_uri`パラメータ値が取得される\n- 上位クラスの[Middleware](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L602-L632)のコンストラクタが起動されて、`self.application`には、`keystonemiddleware.auth_token.AuthProtocol`インスタンスのオブジェクト値が設定される\n- [AuthUrlFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L25-L62)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-6) `[filter:versionnegotiation]`セクションの`heat.common.wsgi:filter_factory`メソッドが起動される\n- `heat.common.wsgi.filter_factory`メソッド起動により、[FilterFactory クラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1067-L1090)の`__call__`メソッドが起動される\n- `_import_factory`メソッドが呼ばれる\n- `local_conf`には、`{'heat.filter_factory': 'heat.api.openstack:version_negotiation_filter'}`という情報が設定されている\n- その場合、クロージャ`filter`への引数`app`には、`heat.common.auth_url.AuthUrlFilter`インスタンスのオブジェクト値が渡される\n- [version_negotiation_filterメソッド](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/__init__.py#L19-L21)が起動される\n- [VersionNegotiationFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/version_negotiation.py#L29-L110)がインスタンス化される\n- 上位クラスの[Middleware](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L602-L632)のコンストラクタが起動されて、`self.application`には、`heat.common.auth_url.AuthUrlFilter`インスタンスのオブジェクト値が設定される\n- [VersionNegotiationFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/version_negotiation.py#L29-L110)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-7) `[filter:http_proxy_to_wsgi]`セクションの`oslo_middleware:HTTPProxyToWSGI.factory`メソッドが起動される\n- [oslo_middleware.HTTPProxyToWSGI.factor](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/base.py#L50-L67)メソッドが起動される\n- その場合、クロージャ`middleware_filter`への引数`app`には、`heat.api.middleware.version_negotiation.VersionNegotiationFilter`インスタンスのオブジェクト値が渡される\n- [HTTPProxyToWSGIクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/http_proxy_to_wsgi.py#L27-L93)がインスタンス化されて、`self.application`には、`heat.api.middleware.version_negotiation.VersionNegotiationFilter`インスタンスのオブジェクト値が設定される\n- [HTTPProxyToWSGIクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/http_proxy_to_wsgi.py#L27-L93)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-8) `[filter:faultwrap]`セクションの`heat.common.wsgi:filter_factory`メソッドが起動される\n- `heat.common.wsgi.filter_factory`メソッド起動により、[FilterFactoryクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1067-L1090)の`__call__`メソッドが起動される\n- `_import_factory`メソッドが呼ばれる\n- `local_conf`には、`{'heat.filter_factory': 'heat.api.openstack:faultwrap_filter'}`という情報が設定されている\n- その場合、クロージャ`filter`への引数`app`には、`oslo_middleware.HTTPProxyToWSGI`インスタンスのオブジェクト値が渡される\n- [faultwrap_filterメソッド](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/__init__.py#L24-L25)が起動される\n- [FaultWrapperクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/fault.py#L53-L170)がインスタンス化される\n- 上位クラスの[Middleware](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L602-L632)のコンストラクタが起動されて、`self.application`には、`oslo_middleware.HTTPProxyToWSGI`インスタンスのオブジェクト値が設定される\n- [FaultWrapperクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/fault.py#L53-L170)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-9) `[filter:request_id]`セクションの`oslo_middleware.request_id:RequestId.factory`メソッドが起動される\n- [oslo_middleware.request_id.RequestId.factory](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/base.py#L50-L67)メソッドが起動される\n- その場合、クロージャ`middleware_filter`への引数`app`には、`heat.api.middleware.fault.FaultWrapper`インスタンスのオブジェクト値が渡される\n- [RequestIdクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/request_id.py#L32-L66)がインスタンス化されて、`self.application`には、`heat.api.middleware.fault.FaultWrapper`インスタンスのオブジェクト値が設定される\n- [RequestIdクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/request_id.py#L32-L66)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-10) `[filter:cors]`セクションの`oslo_middleware.cors:filter_factory`メソッドが起動される\n- [oslo_middleware.cors.filter_factory](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/cors.py#L400)メソッドが起動される\n- その場合、クロージャ`middleware_filter`への引数`app`には、`oslo_middleware.request_id.RequestId`インスタンスのオブジェクト値が渡される\n- [CORSクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/cors.py#L100-L397)がインスタンス化されて、`self.application`には、`oslo_middleware.request_id.RequestId`インスタンスのオブジェクト値が設定される\n- [CORSクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/cors.py#L100-L397)の`__call__`メソッド起動準備が完了したことになる\n\n### (2-3) `paste_deploy_app`メソッド処理は、ここで完了となる。\n\n## (3) wsgiサーバが起動される\n`wsgi.Server`クラスが、インスタンス化された後、[wsgi.Server.start](https://github.com/openstack/heat/blob/stable/stein/heat/cmd/api.py)メソッドが起動される\n\n```python:heat/cmd/api.py\ndef launch_api(setup_logging=True):\n    if setup_logging:\n        logging.register_options(cfg.CONF)\n    cfg.CONF(project='heat', prog='heat-api',\n             version=version.version_info.version_string())\n    if setup_logging:\n        logging.setup(cfg.CONF, 'heat-api')\n    config.set_config_defaults()\n    messaging.setup()\n\n    app = config.load_paste_app()\n\n    port = cfg.CONF.heat_api.bind_port\n    host = cfg.CONF.heat_api.bind_host\n    LOG.info('Starting Heat REST API on %(host)s:%(port)s',\n             {'host': host, 'port': port})\n    profiler.setup('heat-api', host)\n    gmr.TextGuruMeditation.setup_autorun(version)\n    server = wsgi.Server('heat-api', cfg.CONF.heat_api)\n    server.start(app, default_port=port)\n    return server\n\n\ndef main():\n    try:\n        server = launch_api()\n        systemd.notify_once()\n        server.wait()\n    except RuntimeError as e:\n        msg = six.text_type(e)\n        sys.exit(\"ERROR: %s\" % msg)\n```\n`/etc/heat/heat.conf`ファイルに、workersパラメータを設定することが可能だが、[\"Heat Configuration Sample\"](https://docs.openstack.org/heat/stein/configuration/sample_config.html)によると、デフォルトでは、設定されていないので、デフォルト\"0\"として扱われる。\n\n```\n[heat_api]\n...\n\n# Number of workers for Heat service. Default value 0 means, that service will\n# start number of workers equal number of cores on server. (integer value)\n# Minimum value: 0\n#workers = 0\n```\n\nそして、`workers = 0`の場合には、[run_server](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L564-L590)メソッドが起動される\n\n```python:heat/heat/common/wsgi.py\n    def run_server(self):\n        \"\"\"Run a WSGI server.\"\"\"\n        eventlet.wsgi.HttpProtocol.default_request_version = \"HTTP/1.0\"\n        eventlet.hubs.use_hub('poll')\n        eventlet.patcher.monkey_patch(all=False, socket=True)\n        self.pool = eventlet.GreenPool(size=self.threads)\n        socket_timeout = cfg.CONF.eventlet_opts.client_socket_timeout or None\n\n        # Close write to ensure only parent has it open\n        os.close(self.writepipe)\n        # Create greenthread to watch for parent to close pipe\n        eventlet.spawn_n(self._pipe_watcher)\n\n        try:\n            eventlet.wsgi.server(\n                self.sock,\n                self.application,\n                custom_pool=self.pool,\n                url_length_limit=URL_LENGTH_LIMIT,\n                log=self._logger,\n                debug=cfg.CONF.debug,\n                keepalive=cfg.CONF.eventlet_opts.wsgi_keep_alive,\n                socket_timeout=socket_timeout)\n        except socket.error as err:\n            if err[0] != errno.EINVAL:\n                raise\n        self.pool.waitall()\n```\n\n# ◼️ heat-apiのリクエスト受け付け処理の動作メカニズムを調査してみる\nつづいて、heat-apiでのリクエスト受け付け処理の流れを、確認していきます。\n\n## (1) [oslo_middleware.cors.CORSクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/cors.py#L100-L397)の`__call__`メソッドが起動される\n\n- `CORSクラス`の[`__call__`メソッド](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/base.py#L126-L136)が起動される\n- `self.application`には、`oslo_middleware.request_id.RequestId`インスタンスのオブジェクト値が設定されるため、RequestIdクラスの`__call__`メソッド`を呼び出すことになる\n\n## (2) [oslo_middleware.request_id.RequestIdクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/request_id.py#L32-L66)の`__call__`メソッドが起動される\n\n- [RequestIdクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/request_id.py#L32-L66)の`__call__`メソッドが起動される\n- `req_id`が、新たに生成される\n- `req.environ['openstack.request_id']`に、新たに生成された`req_id`が設定される\n- `self.application`には、`heat.api.middleware.fault.FaultWrapper`インスタンスのオブジェクト値が設定されるため、FaultWrapperクラスの`__call__`メソッド`を呼び出すことになる\n- レスポンスメッセージのヘッダ情報に、`x-openstack-request-id`パラメータとして追加される\n\n## (3) [heat.api.middleware.fault.FaultWrapperクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/fault.py#L53-L170)の`__call__`メソッドが起動される\n\n- `FaultWrapperクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L626-L632)が起動される\n- `FaultWrapperクラス`の[`process_request`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/fault.py#L166-L170)が起動される\n- `self.application`には、`oslo_middleware.HTTPProxyToWSGI`インスタンスのオブジェクト値が設定されるため、HTTPProxyToWSGIクラスの`__call__`メソッド`を呼び出すことになる\n\n## (4) [oslo_middleware.HTTPProxyToWSGIクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/http_proxy_to_wsgi.py#L27-L93)の`__call__`メソッドが起動される\n\n- `HTTPProxyToWSGIクラス`の[`__call__`メソッド](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/base.py#L126-L136)が起動される\n- `HTTPProxyToWSGIクラス`の[`process_request`メソッド](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/http_proxy_to_wsgi.py#L55-L93)が起動される\n- `self.application`には、`heat.api.middleware.version_negotiation.VersionNegotiationFilter`インスタンスのオブジェクト値が設定されるため、VersionNegotiationFilterクラスの`__call__`メソッド`を呼び出すことになる\n\n## (5) [heat.api.middleware.version_negotiation.VersionNegotiationFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/version_negotiation.py#L29-L130)の`__call__`メソッドが起動される\n\n- `VersionNegotiationFilterクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L626-L632)が起動される\n- `VersionNegotiationFilterクラス`の[`process_request`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/version_negotiation.py#L37-L110)が起動される\n- [req.path_info_peek](https://docs.pylonsproject.org/projects/webob/en/stable/reference.html)メソッドを用いて、`req.environ['PATH_INFO']`に、バージョン番号が含まれていなければ、リクエストメッセージに対するバージョンチェックが行われる\n- バージョンチェックで問題なければ、デバックログとして、__\"Matched versioned URI. Version: 1.0\"__と出力される\n- `self.application`には、`heat.common.auth_url.AuthUrlFilter`インスタンスのオブジェクト値が設定されるため、AuthUrlFilterクラスの`__call__`メソッド`を呼び出すことになる\n\n## (6) [heat.common.auth_url.AuthUrlFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L25-L62)の`__call__`メソッドが起動される\n\n- `AuthUrlFilterクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L626-L632)が起動される\n- `AuthUrlFilterクラス`の[`process_request`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L55-L62)が起動される\n- `req.headers['X-Auth-Url']`に、`self.auth_url`が設定される（すなわち、リクエスト受け付け毎に、`/etc/heat/heat.conf`ファイルの`[keystone_authtoken]`セクションの`auth_uri`パラメータ値が引用される）\n\n```/etc/heat/heat.conf\n[keystone_authtoken]\n\nauth_uri = http://<keystone-server>:5000\n```\n- `self.application`には、`keystonemiddleware.auth_token.AuthProtocol`インスタンスのオブジェクト値が設定されるため、AuthProtocolクラスの`__call__`メソッド`を呼び出すことになる\n\n## (7) [keystonemiddleware.auth_token.AuthProtocolクラス](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L535-L952)の`__call__`メソッドが起動される\n\n- `AuthProtocolクラス`の[`__call__`メソッド](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L327-L334)が起動される\n- `AuthProtocolクラス`の[`process_request`メソッド](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L598-L670)が起動される\n- auth_token処理が開始される\n- `self._app`には、`heat.common.context.ContextMiddleware`インスタンスのオブジェクト値が設定されるため、ContextMiddlewareクラスの`__call__`メソッド`を呼び出すことになる\n\n## (8) [heat.common.context.ContextMiddlewareクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L334-L392)の`__call__`メソッドが起動される\n\n- `ContextMiddlewareクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L626-L632)が起動される\n- `ContextMiddlewareクラス`の[`process_request`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L344-L392)が起動される\n- context情報が生成される\n- `self.application`には、`osprofiler.web.WsgiMiddleware`インスタンスのオブジェクト値が設定されるため、WsgiMiddlewareクラスの`__call__`メソッド`を呼び出すことになる\n\n## (9) [osprofiler.web.WsgiMiddlewareクラス](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L69-L134)の`__call__`メソッドが起動される\n\n- `WsgiMiddlewareクラス`の[`__call__`メソッド](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L108-L134)が起動される\n- `self.application`には、`heat.api.openstack.v1.API`インスタンスのオブジェクト値が設定されるため、heat.api.openstack.v1.APIクラスの`__call__`メソッド`を呼び出すことになる\n\n## (10) [heat.api.openstack.v1.APIクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/v1/__init__.py#L28-L485)の`__call__`メソッドが起動される\n\n- `heat.api.openstack.v1.APIクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L727-L733)が起動される\n- リクエストメッセージ受け付け処理として、ルーティングのマッピング情報との比較により、その後の継続処理が決定される\n- そして、適切な[policy処理](https://github.com/openstack/heat/blob/stable/stein/heat/common/policy.py)が施される\n- [StackController](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/v1/stacks.py#L171-L748)クラスで定義されたメソッドが起動される\n\n## (11) heat-engineへの依頼すべき、メッセージ生成が完了した段階で、RabbitMQを経由して、heat-engineに情報伝達される。\nなお、メッセージング処理機構は、Qiita記事「[OpenStackメッセージング機構を探ってみる](https://qiita.com/ttsubo/items/1f2884d41c3fe3129c5e)」を参照ください。\n\n\n# ◼️ おわりに\nheat-api内部構造を説明するにあたり、結構、複雑な文章になってしまった。\nただし、大まかなheat-api処理は、Qiita記事「[OpenStackを活用して、WSGI アプリケーションの仕組みを理解する](https://qiita.com/ttsubo/items/0a1abecce272559edc94)」で記述したサンプルアプリと、やっている事は、概ね同じです。\n根気を持って確認してもらえれば、理解は難しくないと思います。\n\n\n\n# ◼️ 参考文献\n## (1) Paste Deployment\n- [Docs: Paste Deployment](https://pastedeploy.readthedocs.io/en/latest/index.html)\n- [PEP333: The WSGI Specification](http://docs.repoze.org/moonshining/pep333.html)\n- [A WSGI Developers’ Toolkit: Paste](http://docs.repoze.org/moonshining/tools/paste.html)\n- [OpenStack API's and WSGI](http://www.slideshare.net/lhrc_mikeyp/openstack-apis-and-wsgi)\n- [How to OpenStack API and WSGI api-paste.ini Work](http://fosshelp.blogspot.com/2014/03/how-to-openstack-api-and-wsgi-api.html)\n- [Getting Started with Python WSGI and Paste Deployment](http://fosshelp.blogspot.com/2014/03/getting-started-with-python-wsgi-and.html)\n- [PasteDeploy で WSGI アプリケーションを設定する](http://momijiame.tumblr.com/post/26684032980/pastedeploy-で-wsgi-アプリケーションを設定する)\n\n\n## (2) WebOb\n- [WebOb Reference](https://docs.pylonsproject.org/projects/webob/en/stable/reference.html)\n- [Python の WebOb で WSGI のリクエスト・レスポンスをカプセル化する](http://momijiame.tumblr.com/post/50145128041/python-の-webob-で-wsgi-のリクエストレスポンスをカプセル化する)\n\n## (3) その他\n- [Python の Routes で HTTP リクエストをルーティングする](http://momijiame.tumblr.com/post/29400971777/python-の-routes-で-http-リクエストをルーティングする)\n","created_at":"2019-04-14T13:20:57+09:00","id":"5ed65c53ba1f2d7a5219","tags":[{"name":"openstack","versions":[]},{"name":"Heat","versions":[]}],"url":"https://qiita.com/ttsubo/items/5ed65c53ba1f2d7a5219"},{"title":"[Android]VisualStudioでNativeActivityを使ってAPKを作ってみる","body":"# はじめに\nAndroidNDKを使ったテストアプリを作りたい場合、Visual Studioを使うと簡単に実装することができます。\n簡単に手順をまとめていこうと思います。\n\n# 開発環境\n- OS：Windows 10\n- Visual Studio 2017 Professional\n\n# エミュレーターを使うためにHyper-Vを有効にする\nWindowsのHyper-Vを有効にします。\n1. コントロールパネルを開きます。\n![9.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/839d0eca-af5a-7303-beb5-5ab0a4e4017f.png)\n\n2. 「プログラム」->「プログラムと機能」->「Windows の機能の有効化または無効化」を選択します。\n![10.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/abcf6c3f-ee27-c545-4880-226a6cca8180.png)\n\n3. Windows の機能ウィンドウが立ち上がりますため「Hyper-V」内の「Hyper-V プラットフォーム」と「Hyper-V 管理ツール」にチェックを入れ「OK」を押します。\n![11.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/23202bb2-9d77-1ca8-a4b8-3a173cb60c18.png)\n\n# 環境構築\nさっそく始めていきます。\nまずVisual Studio Installerの設定から。\n\n1. Visual Studio Installerを立ち上げ「ワークロード」->「C++ によるモバイル開発」にチェックを入れます。\n![1.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/75d897f8-dea7-5118-5518-3cac92b29513.png)\n\n2. 「個別のコンポーネント」->「エミュレーター」->「Visual Studio Emulator for Android」にチェックを入れインストールします。\n![2.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/5bbe77b6-d792-4207-4af4-71926e2d5b67.png)\n\n# プロジェクトの準備\n1. Visual Studio 2017を立ち上げ「ファイル(F)」->「プロジェクト(P)...」を選択します。\n![3.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/0db39323-6cd5-f395-a8ba-db7d787f3d22.png)\n\n2. 新しいプロジェクトウィンドウが立ち上がるため「Visual C++」->「クロス プラットフォーム」->「Android」->「Native-Activity アプリケーション」を選択し、「名前」欄にプロジェクト名を入力し「OK」を押します。\n![4.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/1f4cda4c-a8c9-b237-bd65-ff26f32abe7c.png)\n\n3. プロジェクトが立ち上がるため「ソリューション エクスプローラー」->「ソリューション」を選択し、「ビルド(B)」->「ソリューションのビルド(B)」をクリック。ビルドが通ることを確認します。\n※もしビルドが通らない場合、環境変数が通っていない可能性がありますので、PCを再起動してもう一度試してみて下さい。\n![5.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/95c928f4-e020-0852-5f86-4c6add6a400f.png)\n\n# エミュレーターの準備\n1. 「ソリューション プラットフォーム」を「x86」選択し、実行ボタンの右の▼をクリックし、「Android 用 Visual Studio エミュレーター...」を選択します。(①～③の順番にクリック)\n![6.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/f94feb4f-638d-1031-b352-c76452ab88db.png)\n\n2. Visual Studio Emulator for Androidが立ち上がるのでエミュレーターの実行ボタン（緑色の▶）を選択します。\n![7.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/e08dc59b-9301-e2de-d17f-bf823e100f66.png)\n\n3. エミュレーターが立ち上がることを確認します。\n![12.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/41dc3611-26c4-f838-bcb0-297b470c8113.png)\n\n4. エミュレーターが立ち上がっている状態でVisual Studioを確認すると実行ボタンの(オフライン)だった部分にIPアドレスっぽい物が表示されていることを確認します。\n![15.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/51bd7a72-163b-b06b-7b6a-ad93ed1a1fe8.png)\n\nこれで準備完了です。\n\n# APKを作ってインストール\nでは、実際にAPKを作ってインストールしてみます。\n1. Visual Studio上の実行ボタンの右の▼をクリックし、IPアドレスっぽい物が表示されているエミュレーターを選択し、実行ボタンをクリック。\n\n2. エミュレーター上でアプリが動いていることを確認します。\n![16.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/3d13c105-5e68-4b7e-9e8d-c3b2a1369e6a.png)\n\n# まとめ\nこれでNativeActivityを使ったAPKを実行することができました。\nブレークポイントや値のウォッチもできますので、デバッグはかなりしやすいと思います。\nVisual Studio上でのAndroidアプリ開発の記事はまだまだ少ないので今後増やしていければと思っています。\n\n# トラブルシューティング\n私がこの記事を書くにあたり、躓いたところをまとめました。\n皆さんの参考になれば幸いです。\n\n1. Visual Studioの実行ボタンを押すと「オブジェクト参照がオブジェクト インスタンスに設定されていません。」と出る場合\nVisual Studio Emulator for AndroidやAndroid シミュレーターが立ち上がっていない状態で実行すると発生する場合がありますので、実行してから再度試してみて下さい。\n\n2. エミュレーターの表示が（オフライン）のままになっている。\n3. Visual Studioの実行ボタンを押すと「Could not locate the Android Debug Bridge (adb.exe).」ダイアログが出る。\n![13.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/e2a2f788-9b69-1336-8911-11d299648c7e.png)\n\n2、3ともに「Visual Studio Emulator for Android」を入れ直すと解決する可能性があります。\nVisual Studio Installerを立ち上げ、「Visual Studio Emulator for Android」のチェックを外し更新。PCを再起動した後、再度チェックを入れてインストールし直してみて下さい。\n\n# 参考サイト\n・[[Android] Hyper-Vで使うVisual Studio Emulator for Androidの最初の一歩 - Effectiveさお](http://h-sao.com/blog/2017/07/27/setting-visual-studio-android-emulator-on-hyper-v/)\n・[Visual Studio Emulator for Android - Microsoft](https://docs.microsoft.com/ja-jp/visualstudio/cross-platform/visual-studio-emulator-for-android?view=vs-2019)\n","created_at":"2019-04-14T13:20:07+09:00","id":"42785dfda4238cb105af","tags":[{"name":"C++","versions":[]},{"name":"Android","versions":[]},{"name":"VisualStudio","versions":[]},{"name":"AndroidNDK","versions":[]},{"name":"VisualStudio2017","versions":[]}],"url":"https://qiita.com/furui/items/42785dfda4238cb105af"},{"title":"RDKitで原子間の最短パス、距離行列を求める","body":"### はじめに\nRDKitで掲題の件、調査したためメモっておく\n\n### 環境\n- Windows 10\n- Python 3.6\n- RDKit 2018/9/2\n\n### やり方\nまずは、必要なものをインポート\n\n```python\nfrom rdkit.Chem import AllChem, Draw, rdmolops\nfrom rdkit.Chem.Draw import IPythonConsole\n```\n\nmolファイルを読み込んで、分かりやすいようインデックス付きの画像で化合物を表示。\n\n```python\ndef mol_with_atom_index( mol ):\n    atoms = mol.GetNumAtoms()\n    for idx in range( atoms ):\n        mol.GetAtomWithIdx( idx ).SetProp( 'molAtomMapNumber', str( mol.GetAtomWithIdx( idx ).GetIdx() ) )\n    return mol\n\n\nmol = AllChem.SDMolSupplier(\"../som/2D2_new/16.isoliquiritigenin.mol\")\nmol_with_atom_index(mol[0])\n```\n\nするとこんな画像が得られる。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/329816/d77fe8e1-7716-1608-44e4-8cb3573257da.png)\n\n0番目のOHと、13番目のOH間のパスは、以下のように得られる。\n```python\nrdmolops.GetShortestPath(mol[0],0,8) \n(0, 1, 2, 3, 4, 5, 6, 7, 8)\n```\n\nまた全ての原子間の距離行列はこんな感じで得られる。\n\n```python\nrdmolops.GetDistanceMatrix(mol[0])\narray([[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  8.,  9., 10., 11.,\n        12., 10.,  9., 10.,  3.,  2.],\n       [ 1.,  0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  7.,  8.,  9., 10.,\n        11.,  9.,  8.,  9.,  2.,  1.],\n       [ 2.,  1.,  0.,  1.,  2.,  3.,  4.,  5.,  6.,  6.,  7.,  8.,  9.,\n        10.,  8.,  7.,  8.,  3.,  2.],\n       [ 3.,  2.,  1.,  0.,  1.,  2.,  3.,  4.,  5.,  5.,  6.,  7.,  8.,\n         9.,  7.,  6.,  7.,  2.,  3.],\n       [ 4.,  3.,  2.,  1.,  0.,  1.,  2.,  3.,  4.,  4.,  5.,  6.,  7.,\n         8.,  6.,  5.,  6.,  1.,  2.],\n       [ 5.,  4.,  3.,  2.,  1.,  0.,  1.,  2.,  3.,  3.,  4.,  5.,  6.,\n         7.,  5.,  4.,  5.,  2.,  3.],\n       [ 6.,  5.,  4.,  3.,  2.,  1.,  0.,  1.,  2.,  2.,  3.,  4.,  5.,\n         6.,  4.,  3.,  4.,  3.,  4.],\n       [ 7.,  6.,  5.,  4.,  3.,  2.,  1.,  0.,  1.,  1.,  2.,  3.,  4.,\n         5.,  3.,  2.,  3.,  4.,  5.],\n       [ 8.,  7.,  6.,  5.,  4.,  3.,  2.,  1.,  0.,  2.,  3.,  4.,  5.,\n         6.,  4.,  3.,  4.,  5.,  6.],\n       [ 8.,  7.,  6.,  5.,  4.,  3.,  2.,  1.,  2.,  0.,  1.,  2.,  3.,\n         4.,  2.,  1.,  2.,  5.,  6.],\n       [ 9.,  8.,  7.,  6.,  5.,  4.,  3.,  2.,  3.,  1.,  0.,  1.,  2.,\n         3.,  3.,  2.,  3.,  6.,  7.],\n       [10.,  9.,  8.,  7.,  6.,  5.,  4.,  3.,  4.,  2.,  1.,  0.,  1.,\n         2.,  2.,  3.,  4.,  7.,  8.],\n       [11., 10.,  9.,  8.,  7.,  6.,  5.,  4.,  5.,  3.,  2.,  1.,  0.,\n         1.,  1.,  2.,  3.,  8.,  9.],\n       [12., 11., 10.,  9.,  8.,  7.,  6.,  5.,  6.,  4.,  3.,  2.,  1.,\n         0.,  2.,  3.,  4.,  9., 10.],\n       [10.,  9.,  8.,  7.,  6.,  5.,  4.,  3.,  4.,  2.,  3.,  2.,  1.,\n         2.,  0.,  1.,  2.,  7.,  8.],\n       [ 9.,  8.,  7.,  6.,  5.,  4.,  3.,  2.,  3.,  1.,  2.,  3.,  2.,\n         3.,  1.,  0.,  1.,  6.,  7.],\n       [10.,  9.,  8.,  7.,  6.,  5.,  4.,  3.,  4.,  2.,  3.,  4.,  3.,\n         4.,  2.,  1.,  0.,  7.,  8.],\n       [ 3.,  2.,  3.,  2.,  1.,  2.,  3.,  4.,  5.,  5.,  6.,  7.,  8.,\n         9.,  7.,  6.,  7.,  0.,  1.],\n       [ 2.,  1.,  2.,  3.,  2.,  3.,  4.,  5.,  6.,  6.,  7.,  8.,  9.,\n        10.,  8.,  7.,  8.,  1.,  0.]])\n```\n\nこの行列の最大値を調べることにり、全原子間で最大のパスが原子0と原子13の間の12であることもわかる。\n\n\n","created_at":"2019-04-14T13:17:06+09:00","id":"db73ab5a20a8a2b7d122","tags":[{"name":"RDKit","versions":[]}],"url":"https://qiita.com/kimisyo/items/db73ab5a20a8a2b7d122"},{"title":"Googleの入社エントリとTwitterアカウントまとめ","body":"後で傾向を調べたいのでひとまず集めた。\n\n[ぼくはこうやって（8年前）Googleに入った - アスペ日記](https://takeda25.hatenablog.jp/entry/2019/04/02/002028)\n[Googleに入社して1年が経った - 更新しない備忘録改二](https://odashi.hatenablog.com/entry/2019/04/01/185355)\n[こうしてGoogleに入社した(kumagi編) - Software Transactional Memo](http://kumagi.hatenablog.com/entry/how-i-enter-google)\n[Googleに入社した時のこと - 六本木で働くデータサイエンティストのブログ](https://tjo.hatenablog.com/entry/2019/03/27/123000)\n[Google に入るまでの話 · GitHub](https://gist.github.com/kosamari/20dd4c0359b7a429e6a5a7db2bf2db06)\n[いかにしてわたしは Google に入社し、そして退職したか - The Decisive Strike](https://knagayama.hatenablog.com/blog/2019/03/30/100625)\n[私はこうやって（１２年前） Google に入った – CTRL+x CTRL+s](https://ctrl-x-s.blog/2019/03/25/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%EF%BC%88%EF%BC%91%EF%BC%92%E5%B9%B4%E5%89%8D%EF%BC%89-google-%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F/)\n[私はこうやってGoogleに入った (ソフトウェアエンジニア、中途採用編) – ほげ.ブログ](https://hoge.blog/2019/03/25/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%EF%BC%88%EF%BC%91%EF%BC%91%E5%B9%B4%E5%89%8D%EF%BC%89-google-%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F/)\n[Google に入るまでの話 · GitHub](https://gist.github.com/kinu/b85f99c41c87cf59c20d1bac523b8fbf)\n[私はこうやってGoogleに入った（新卒ソフトウェアエンジニア） - n-yoda's blog](http://ny.hateblo.jp/entry/2019/03/29/010611)\n[私はこうやってGoogleに入りました（Reiko編） – Reiko at Work – Medium](https://medium.com/@reiko_at_work/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6google%E3%81%AB%E5%85%A5%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F-reiko%E7%B7%A8-e53e265c3871)\n[こうしてわたしは Google に入社した（非技術職・意識低い編） - Naomi says,](http://naomi14.hatenablog.com/entry/2019/03/28/154957)\n[未経験から独学でプログラミングを身につけて新卒でグーグルに入った話 · GitHub](https://gist.github.com/kenichi-fukushima/c58345502a99a1f218eb143bf17aa303)\n[私はこうして Google に入った (SWE・新卒編) - ふしみのブログ](https://rfushimi.hatenablog.jp/entry/2019/03/26/233131)\n[自分がGoogleに入った時の話 – Tsutomu Ohkura – Medium](https://medium.com/@ohkura/%E8%87%AA%E5%88%86%E3%81%8Cgoogle%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E8%A9%B1-45e017acbbfc)\n[或曰: 私はこうしてGoogleスイスに入った](https://blog.issei.org/2019/03/google.html)\n[Googleってとこにソフトウェアエンジニアで入ったんですけど](https://anond.hatelabo.jp/20190328210347)\n[G社に内定した - 更新しない備忘録改二](https://odashi.hatenablog.com/entry/20160927/1474995927)\n\n----\n\nURLの一覧からRubyでタイトルを取得するコード。\n\n```ruby\nrequire 'open-uri'\nrequire 'cgi'\n\nentities = [\n    ['https://takeda25.hatenablog.jp/entry/2019/04/02/002028', 'https://twitter.com/takeda25'],\n    ['https://odashi.hatenablog.com/entry/2019/04/01/185355', 'https://twitter.com/odashi_t'],\n    ['http://kumagi.hatenablog.com/entry/how-i-enter-google', 'https://twitter.com/kumagi'],\n    ['https://tjo.hatenablog.com/entry/2019/03/27/123000', 'https://twitter.com/TJO_datasci'],\n    ['https://gist.github.com/kosamari/20dd4c0359b7a429e6a5a7db2bf2db06', 'https://twitter.com/kosamari'],\n    ['https://knagayama.hatenablog.com/blog/2019/03/30/100625', 'https://twitter.com/KazushiNagayama'],\n    ['https://ctrl-x-s.blog/2019/03/25/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%EF%BC%88%EF%BC%91%EF%BC%92%E5%B9%B4%E5%89%8D%EF%BC%89-google-%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F/', 'https://twitter.com/hidetokazawa'],\n    ['https://hoge.blog/2019/03/25/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%EF%BC%88%EF%BC%91%EF%BC%91%E5%B9%B4%E5%89%8D%EF%BC%89-google-%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F/', 'https://twitter.com/r_ima'],\n    ['https://gist.github.com/kinu/b85f99c41c87cf59c20d1bac523b8fbf', 'https://twitter.com/kinu'],\n    ['http://ny.hateblo.jp/entry/2019/03/29/010611', 'https://twitter.com/n__yoda'],\n    ['https://medium.com/@reiko_at_work/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6google%E3%81%AB%E5%85%A5%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F-reiko%E7%B7%A8-e53e265c3871', 'https://twitter.com/WorkReiko'],\n    ['http://naomi14.hatenablog.com/entry/2019/03/28/154957', 'https://twitter.com/NaomiIto14'],\n    ['https://gist.github.com/kenichi-fukushima/c58345502a99a1f218eb143bf17aa303', 'https://twitter.com/k__e_n_i'],\n    ['https://rfushimi.hatenablog.jp/entry/2019/03/26/233131', 'https://twitter.com/fushimir'],\n    ['https://medium.com/@ohkura/%E8%87%AA%E5%88%86%E3%81%8Cgoogle%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E8%A9%B1-45e017acbbfc', 'https://twitter.com/ohkura'],\n    ['https://blog.issei.org/2019/03/google.html', 'https://twitter.com/issei_swe'],\n    ['https://anond.hatelabo.jp/20190328210347', nil],\n    ['https://odashi.hatenablog.com/entry/20160927/1474995927', 'https://twitter.com/odashi_t'],\n]\n\nurls = []\ntwitters = []\ntitles = []\n\nentities.each do |url, twitter|\n  open(url).read.match(/<title>(.+)<\\/title>/)\n  title = CGI.unescapeHTML($1)\n\n  puts \"[#{title}](#{url})\"\n\n  urls << url\n  twitters << twitter\n  titles << title\nend\n\nputs entities.size\nputs urls.uniq.size\n```\n","created_at":"2019-04-14T13:16:56+09:00","id":"dace2771dd65b0871d23","tags":[{"name":"Ruby","versions":[]}],"url":"https://qiita.com/ts-3156/items/dace2771dd65b0871d23"},{"title":"ユースケースから始めるドメイン駆動設計","body":"ソフトウェア開発手法「ICONIX（アイコニクス）プロセス」の整理\n\n##### 概要\nICONIXプロセスの思想は「漸進的な反復と洗練による継続的な改善」。\n\n\n##### ICONIXプロセスのワークフロー\n1. 要求段階\n 1-1. 機能要求：システムが提供する機能を定義  \n 1-2. ドメインモデリング：問題領域の理解（ユビキタス言語の定義）※作業時間目安：2時間  \n 1-3. 振る舞い要求：最初のユースケース（ドラフト版）を作成  \n 1-4. 要求レビュー：ユースケースが顧客要求を満たしているか確認  \n2. 分析・予備レビュー  \n 2-1. ロバストネス分析：ロバストネス図を使ってユースケース記述を書き直す  \n 2-2. ドメインモデルを更新（作業：見落としていたクラスの発見や曖昧だった部分を修正したり、属性の追加）  \n 2-3. システムに機能名をつける  \n 2-4. ユースケース（ドラフト版）を更新  \n3. 予備設計レビュー  \n4. 詳細設計  \n 4-1. ユースケースごとにシーケンス図を作成（シーケンス図の目的はクラスの責務割当て）  \n 4-2. ドメインモデルを更新（ドメインオブジェクトに操作を追加）  \n ドメインオブジェクトはエンティティとなり、ドメインモデルは静的クラス（クラス図）へ生まれ変わる  \n 4-3. 静的モデルの整理  \n5. 詳細設計レビュー\n6. 実装\n\n##### 学習範囲\n1-2.ドメインモデリングと1-3.振る舞い要求まで \n\n##### ドメインモデリング\n[目的] \nドメインモデリングはプロジェクトで利用される共通言語（辞書）を作成する作業。 \nドメインモデリングの目的はプロジェクトメンバー全員に明確な用語で問題領域を確実に理解させること。 \nプロジェクトのドメインモデルはスコープを定義しユースケース作成の基盤とする。 \n最初のドメインモデリングからユースケースを作成していく過程でドメインモデルを固めていく。 \n\n[ガイドライン]\n現実世界（問題領域）に焦点をあてる \nオブジェクト間の関係は汎化（A is B)、集約(A has B)を利用 \n最初のドメインモデリングにかける時間は2時間が目安 \n問題領域の主要な概念を中心にクラスを構成する \nドメインモデルとデータモデルはイコールではない \nオブジェクト（単一インスタンスを表現した存在）とDBのテーブルを混同しない \nドメインモデルをプロジェクトの共通言語として利用する \n名前が曖昧にならないようにユースケースを書く前にドメインモデルを作成する \n最終的なクラス図とドメインモデルは正確に一致するとは限らない \n画面やその他GUI固有の部品クラスを配置しない \n\n[MEMO」\n\n| 関係       | 記号 | 説明 |    \n|:-----------------|:-----------------|:-- |\n| 汎化（A is B)| A --▷ B|AはBである（例：テレビは家電である）|\n| 集約(A has B) |A ◇-- B  | AはBをもっている（例：ソニーはテレビを持っている）|\n\n\n##### 振る舞い要求（最初のユースケース）\n[目的] \nユースケースはシステムの振る舞い要求を得る為の構造化された手法。 \n具体的には「ユーザーはこのシステムで何をしたいのか。」「ユーザーは何を得たいのか。」といった疑問に答える。 \n\n[ガイドライン] \nユースケースのシナリオは「基本的なシナリオ」と「例外的なシナリオ」を用意する \nユースケースはドメインモデルで用いた単語を使って記述する \n設計が可能となるユースケースを書く \nユースケース記述は2段階以内で記述する \nアクターとユースケース図を使ってユースケースを組織化する \nユースケースは叙述的に記述する \nイベントの応答の流れとしてユースケースを記述し、ユーザーとシステムの対話の両側を記述する \nGUIプロトタイプや画面モックアップを使う \nユースケースは実行時の振る舞いの仕様である \n名詞 - 名詞 -動詞という構文に従って記述する \nバウンダリングクラス（システムと外部の境界）の名前を使う※ログイン画面、決済画面など \n\n[MEMO] \nユースケースの関係\n\n| 関係       |       説明 |    \n|:-----------------|:------------------|\n| A --▷ B| AはBの一種|\n| A \\<\\<invokes\\>\\> B |Aが実行中にBが実行される |\n| A \\<\\<precedes\\>\\> B |Bの実行前にAが完全に実行されている|\n","created_at":"2019-04-14T13:13:10+09:00","id":"0c9a69d120cddb53a36a","tags":[{"name":"DDD","versions":[]},{"name":"ICONIX","versions":[]},{"name":"ユースケース","versions":[]},{"name":"ドメインモデル","versions":[]}],"url":"https://qiita.com/minarai/items/0c9a69d120cddb53a36a"},{"title":"Laravel × PostgreSQL をHerokuへデプロイする","body":"## ■はじめに\n\nLaravelで作成したWebアプリケーションをHerokuの本番環境にデプロイするまでの手順をまとめます。Laravelを用いるとドキュメントルートの設定だったり、マイグレーションの設定が必要なので注意が必要です。環境変数の設定で非常に手こずりました。  \n[Herokuの推奨DBがPostgreSQL](https://jp.heroku.com/postgres)だったのでDBはPostgreSQLを用います。[拡張機能](https://elements.heroku.com/addons/heroku-postgresql)もサポートされている様。  \nまた、手軽にstaging/production環境を作成できる[Heroku Pipeline](https://devcenter.heroku.com/articles/pipelines)を利用します。  \nWebアプリケーションの開発自体はVirtualBoxにCentOSを立てて行います。\n\n## ■構築環境\n- Heroku\n- Laravel5\n- PostgreSQL\n\n## ■事前準備\n### Heroku CLIのインストール\n\n- 基本ブラウザのGUIでやる想定なので念のためインストール\n\n```sh:bash\n$ brew install heroku/brew/heroku\n$ heroku --version # 確認\n```\n\n### Herokuのアカウント作成\n\n- [こちら](https://jp.heroku.com)からアカウントを作成する\n- クレジットカード情報を入力すれば無料のdyno時間が**550時間→1000時間**になるので、登録しておいた方が良い\n\n### Herokuへログイン\n\n```sh:bash\n$ heroku login\n```\n\n## ■Heroku側の設定\n\n### アプリの作成\n\n- staging環境用とproduction環境用のアプリをそれぞれ作成する\n\n### Heroku Pipelineの設定\n\n- New > create New Pipeline を押しパイプラインを作成\n- 作成したパイプラインのstaging,productionにそれぞれのアプリを割り当てる\n- それぞれのアプリで**Github連携**をする(staging環境は**developブランチ**,production環境は**masterブランチ**)\n- staging環境は**自動デプロイ**の設定をすることで、developへマージされると自動でアプリがデプロイされる\n- **Review Apps**を有効にすることでPR作時に確認用のアプリケーションが作成される\n\n### Review Appsの設定\n\n1. REVIEW APPS > Enable Review Appsを押す\n2. parent appにstagingのアプリを選択し`Create an app.json File`を押す\n3. 後で直接編集すれば良いので、app.jsonの設定値を入力する画面はスルーでOK\n4. 今回は下記の様なapp.jsonを用意する\n\n```json:app.json\n{\n    \"addons\": [\n      \"heroku-postgresql\"\n    ],\n    \"buildpacks\": [\n\n    ],\n    \"description\": \"review app\",\n    \"env\": {\n        /* staging環境の環境変数 */\n    },\n    \"formation\": {\n    },\n    \"name\": \"<アプリ名>\",\n    \"scripts\": {\n      \"postdeploy\": \"php artisan migrate --force\"\n    },\n    \"stack\": \"heroku-18\"\n  }\n```\n\n### PostgreSQLのAdd-onの追加\n\n1. ブラウザでHerokuにログイン\n2. アプリ名 > Resources > Add-ons で`Heroku Postgres`を検索\n3. `Hobby Dev -Free`を選択\n\n## ■ソース側の設定\n\n### Webアプリケーションの作成\n\n- [Laravel 開発環境の構築（CentOS7）](https://qiita.com/koukibuu3/items/300ce50a9acb8674ccf3)を参考にLaravelプロジェクトを作成\n- PostgreSQLの導入方法は[CentOSにPosgreSQLの環境構築](https://qiita.com/koukibuu3/items/9a409a1256a8cf02e053)を参考\n\n### Procfileの生成\n\n```config:Procfile\nweb: vendor/bin/heroku-php-apache2 public/\n```\n\n- アプリディレクトリ直下に上記Procfileを生成\n- ProcfileはHerokuアプリの起動時に実行されるプロセスを記載する\n- ここではApacheの使用の指定と、ドキュメントルートの設定を行う\n- Procfileはきちんとコミット対象に含めること\n\n\n## ■環境変数の設定\n\n- 以下の手順をstaging環境とproduction環境両方のアプリに対して行う\n\n### DATABASE_URLの値を元に環境変数を設定\n\n```sh :bash\n$ heroku config:get DATABASE_URL -a <アプリ名>\npostgres://<ユーザ名>:<パスワード>@<ホスト名>:5432/<DB名>\n```\n\n### Heroku CLIで設定\n\n```sh:bash\n# DB種類\n$ heroku config:set DB_CONNECTION=pgsql -a <アプリ名>\n# ユーザ名\n$ heroku config:set DB_USERNAME=<ユーザ名> -a <アプリ名>\n# パスワード\n$ heroku config:set DB_PASSWORD=<パスワード> -a <アプリ名>\n# ホスト名\n$ heroku config:set DB_HOST=<ホスト名> -a <アプリ名>\n# DB名\n$ heroku config:set DB_DATABASE=<DB名> -a <アプリ名>\n# APPキー\n$ heroku config:set APP_KEY=$(php artisan key:generate --show) -a <アプリ名>\n\n# まとめて設定(その1)\n$ heroku config:set DB_CONNECTION=pgsql DB_USERNAME=<ユーザ名> DB_PASSWORD=<パスワード> DB_HOST=<ホスト名> DB_DATABASE=<DB名> APP_KEY=$(php artisan key:generate --show) -a <アプリ名>\n\n# まとめて設定(その2)\n$ heroku config:set DB_CONNECTION=pgsql -a <アプリ名> $(heroku config:get DATABASE_URL -a <アプリ名> | awk '{print gensub(/postgres:\\/\\/(.+):(.+)@(.+):5432\\/(.+)/, \"DB_USERNAME=\\\"\\\\1\\\" DB_PASSWORD=\\\"\\\\2\\\" DB_HOST=\\\"\\\\3\\\" DB_DATABASE=\\\"\\\\4\\\"\", \"g\")}')\n```\n\n### 設定内容の確認\n\n```sh:bash\n$ heroku config -a <アプリ名>\n=== <アプリ名> Config Vars\nAPP_KEY:       <APPキー>\nDB_CONNECTION: <DB種類>\nDB_DATABASE:   <DB名>\nDB_HOST:       <ホスト名>\nDB_PASSWORD:   <アプリ名>\nDB_USERNAME:   <ユーザ名>\n```\n\n- 正常な値がAPP_KEYの項目に設定されていないため、ここで生成された<APPキー>を、ブラウザ **(アプリ名 > Setting > Config Vars)** より、設定し直してあげる必要がある\n- ここまでやれば、アプリ名 > Open app からアプリを起動することで、無事にLaravelのサンプルページが表示されているはず\n- `$ heroku open -a <アプリ名>` でも可\n\n### DBのマイグレーション\n\n```sh:bash\n$ heroku run php artisan migrate -a <アプリ名>\n\n# マイグレーションをやり直す場合\n$ heroku run php artisan migrate:refresh --seed -a <アプリ名>\n```\n\n## ■参考\n\n- [Laravelをherokuにデプロイする(データベースはPostgreSQL)](https://qiita.com/tamappe/items/14a4e6890ecef4d49d1f)\n- [Laravel + Heroku + HerokuPostgres でDB設定をサクッと環境変数に突っ込む](https://qiita.com/kamukiriri/items/1c5e17872c2fcefa1678)\n- [Heroku Pipelineを使ってみる](https://qiita.com/yo-iida/items/f99566fe4617f848fa39)\n","created_at":"2019-04-14T13:04:19+09:00","id":"2ddc8bd2426f9b33fe4c","tags":[{"name":"Heroku","versions":[]},{"name":"PostgreSQL","versions":[]},{"name":"laravel","versions":[]}],"url":"https://qiita.com/koukibuu3/items/2ddc8bd2426f9b33fe4c"},{"title":"Microsoft Azure資格 (AZ-101) を取得するまでにやったお勉強のお話","body":"# はじめに\nMicrosoft Azure の資格の一つである AZ-101 を取得したので、\n勉強した内容&所感についてメモします\n（試験内容には触れていません)\n\nAZ-100についてはこちらの記事を参照いただければと思います\n(https://qiita.com/spinrock/items/294ce7e3cf2b306fea81)\n\n※ 5月で資格体系が変わって(?)、AZ-100(もしくはAZ-103)だけでAdministrator資格となるそうです  \n(https://blogs.partner.microsoft.com/mpn-japan/2019/03/21/simplifying-the-certification-path-for-microsoft-certified-azure-administrator-associate/)\n\n# AZ-101について\nhttps://www.microsoft.com/ja-jp/learning/azure-exams.aspx#exam-az-101-section  \nこちらを参照のこと\n\n# 事前知識\n+ 普段は仮想化サーバ(vSphere)などを触ってます\n+ AWSのAssociate資格を取得できるくらいには趣味レベルでクラウドサービスを使っています\n+ 実際のAzure構築経験はありません\n+ Azureポータルはそこそこ触っていました、主に以下の部分(AZ-100の範囲)\n  + IaaS(VM/Storage/VNETなど)周り\n  + VPN Gateway を用いたサイト間VPN周り(Azure-vSphere/AWSは試してみた)\n  + Azure Migrate (手元のvSphere環境にデプロイして遊んだ程度)\n\n# やったこと(ほぼAZ-100と同じです)\n+ mstepへの登録しました\n  + Azureの仕組みを学ぶスライドでざっくり仕組みを学びました\n+ 練習用のWeb問題集を解きました(不明点は以下で解消しました)\n  + Azureの無料アカウントに登録して実機検証しました\n  + Microsoft のドキュメントを読み込みました  \n    (私は、問題集の問題を自分で答えを導き出せるように簡易的な解説をまとめました)\n+ udemyで出ている資格勉強用動画の視聴しました  \n  (https://www.udemy.com/ja/)\n+ その他、参考にした書籍\n  + 「Azureテクノロジ入門 2019」\n  + 「ひと目でわかるAzure Active Directory 第2版」\n\n# 試験が終わったあとの個人的な所感\n+ Load Balancer/WebApp/FunctionApp周りについて理解できてなかった部分が多いと感じました  \n  + AWSのLambdaなどで遊んでいた時の知識(なんとなくレベル)を基に消去法で選択しました  \n  (正解していたのかどうかは今となってははっきりしませんが、、、)\n+ やっぱり英語は苦手\n","created_at":"2019-04-14T12:58:47+09:00","id":"4a0e822eb88bcc2f0fa6","tags":[{"name":"Azure","versions":[]},{"name":"資格勉強","versions":[]}],"url":"https://qiita.com/spinrock/items/4a0e822eb88bcc2f0fa6"},{"title":"MotoGP Grand Prix of the Americas 2019 live stream","body":"MotoGP Grand Prix of the Americas 2019 live stream\n\n\n#Click Here : http://bit.ly/2ZaGSDd\n\n#Click Here : http://bit.ly/2ZaGSDd\n\n\nMotoGP Grand Prix of the Americas 2019 live stream\nMotoGP Grand Prix of the Americas 2019 \nMotoGP Grand Prix\nMotoGP \n\n.\n.\n.\n.\n.\n","created_at":"2019-04-14T12:58:37+09:00","id":"a3b8abe03857f5569584","tags":[{"name":"prix","versions":[]},{"name":"MOTOGP","versions":[]},{"name":"Grand","versions":[]}],"url":"https://qiita.com/eyasinsu/items/a3b8abe03857f5569584"},{"title":"React, Reduxのお型付け","body":"[ブログ](https://mrsekut.site)を消そうかと思うので、一部の記事をQiitaへ移行してきました。\n2019/2/21に投稿したものです。\n\n\nReact, ReduxのTypeScriptでの型付けの個人的ベストプラクティスです。\n勉強会で発表したので簡単にブログにまとめます。\n\n\n# はじめに\nスライドは以下のページにあります。\n\n【参考】[React, Reduxのお型付け](https://scrapbox.io/public-mrsekut/React,_Redux%E3%81%AE%E3%81%8A%E5%9E%8B%E4%BB%98%E3%81%91)\n\n# コンセプト\n型の付け方には様々な方法があると思いますが、今回は以下のようなコンセプトで進めていきます。\n\n- 楽に\n- 安全に\n- 外部ライブラリに頼らずに\n\n「楽に」というのは、型の記述量を減らすという意味です。\n今実際開発しているプロダクトでは、一つのactionを追加するたびに、型を明示するために追記しないといけない部分が複数箇所にわたってしまっていました。\n今回は、それを改善するためにいろいろ工夫したものを紹介します。\n\n外部ライブラリというのは、typescript-fsaやtypesafe-actionsやredux-actionなどのことですが、メンテナンスなどの事も考えて、今回は何も使わずに型を付ける方法を紹介します。\n\n# 実はハンズオンです\n\nコードは以下です。\n\n【参考】[mrsekut/react-redux-with-typescript-handson](https://github.com/mrsekut/react-redux-with-typescript-handson/tree/all-any-type)\n\nとても小さいReduxプロダクトを用意しました。\n「+」と「-」があって数字を増やすだけのものです。\n\n「all-any-type」というブランチがあります。\nこれはすでに動く状態ですが、全てany型になっています。\nこれを一緒に型安全なものにしていきます。\n\n## 準備\n「all-any-type」ブランチを指定してクローンしてください。\n\n`$ git clone -b all-any-type https://github.com/mrsekut/react-redux-with-typescript-handson.git`\n\n`$ cd react-redux-with-typescript-handson`\n\nreactなどの依存パッケージをインストールします。\n`$ npm i`\n\nTypeScriptを監視状態でコンパイルします。\n`$ npm run tsc`\n\n別のターミナルで、以下を実行するとブラウザで動きを確認します。\n型をつけるだけなので最初から最後まで目に見える変化はありません。\n`$ npm start`\n\n# TypeScriptのキホン\n軽くTypeScriptの型の基本の話をします。\n必要のない方は飛ばしてください。\n\n## とりあえずこれさえ知っておけば大丈夫\nTypeScriptの型システムの話は、潜り込むとどこまでも深くて大変ですが、まずは以下の4種類ほど知っておけば耐えます。\n\n- number: 42とか\n- string: “hoge”とか\n- boolean: true, falseとか\n- any\n    - なんでもいけるやつ\n\n数値は整数や浮動小数点数などの区別はなく、同じnumberで型を付けます。\n\nanyは万能型で、何にでも対応できる型です。\nただし、これだけだと型のパワーの恩恵を受けられなくなるので、使うのは極力避けたいです。\n\n## 関数の型の書き方\nJSはすべてオブジェクトなこともあり、関数の型の書き方はいくつかあるのですが、今回は以下の形に統一します。\n\n`(任意の引数名: 引数の型) => 戻り値の型`\n\n```ts\n// number型の引数を一つ取って、戻り値のない関数\naddFunc: (num: number) => void;\n```\n\n## 型を自作する\n\nTypeScriptで型を自作するには2つの方法があります。\n微妙な差はありますが、まずは気にしなくても大丈夫です。\n\n### “type”で型に別名を付ける\n```ts\n// name, ageを持ったオブジェクトに「Person」と命名\ntype Person = {\n  name: string;\n  age: number;\n};\n```\n\n### “interface”でクラスやオブジェクトの仕様を決める\n```ts\ninterface Person {\n  name: string;\n  age: number;\n}\n```\n\n### ちなみにVSCodeでは\n\nVSCodeでは、変数はhoverするとその型を確認できますが、typeで作った型では中身を見れるのでちょっと便利です。\n![1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/f816c2f5-e6a1-7491-96ba-fa135fac39a4.png)\n\ninterfaceでは見れません。\n![3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/eac16165-0976-2835-8444-652504a04079.png)\n\ntypeとinterfaceの違いが知りたい方は以下の記事などを参考にしてみてください。\n\n【参考】\n\n- [Interface vs Type alias in TypeScript 2.7 – Martin Hochel – Medium](https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c)\n- [TypeScriptのInterfaceとType aliasの比較 – Qiita](https://qiita.com/tkrkt/items/d01b96363e58a7df830e)\n\n# では、型付けしていきましょう\n\nここから実際に、[これ](https://github.com/mrsekut/react-redux-with-typescript-handson)に型を付けていきます。\n実際に型を付け終わったものは[別のブランチ](https://github.com/mrsekut/react-redux-with-typescript-handson/tree/added-types)にあります。\n\n# Presentational Componentに型を付ける\nPresentational Componentというのは、Reduxと接続していない小さなコンポーネントたちのことを指します。\nプロダクトの大半がこのコンポーネントになります。\n\n## Counter/index.tsx\n[src/components/Counter/index.tsx](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/components/Counter/index.tsx)\n\n数値を表示するだけのコンポーネントです。\n以下のように型を付けます。\n\n![4.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/11400d13-c938-3bb6-0135-898497e47403.png)\n@types/reactとして用意されている`React.FC<T>`型を使います。\nFCはFunctional Componentの略ですね。\n\n`T`の部分にはプロパティを定義した自作の型をはめ込みます。\nここでは、親から受け取るnumber型のnumを書いています。\n\npropsは基本的に書き換えることはないので、readonlyで縛ることでより頑強になります。\n\n`Readonly<T>`というのはTypeScriptに用意されている型で、Tのプロパティをすべてreadonlyにした型をつくります。\n\nつまり、以下のように全プロパティに「readonly」と書いても同じです。\n<img width=\"207\" alt=\"5.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/b2c86f00-3461-0056-981d-5eff3e10ada3.png\">\n\nですが、全部に全部「readonly」と書くのも面倒なので、Readonly<T>で囲うことで少し楽ができます。\nホバーすると全く同じ様に型が当たっているのがわかるかと思います。\n<img width=\"338\" alt=\"66.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/dfc3398b-c0bb-26a5-79be-145b9eb5ddd4.png\">\n\n\n簡単ですね。\n以上のようにしてCounterコンポーネントに型が付きました。\nホバーすると型が適用されているのを確認できます。\n<img width=\"513\" alt=\"7.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/04831a9b-c8d7-7e1d-1dd8-85964bde6850.png\">\n\nこの調子で型付けをしていきます。\n\n## Button/index.tsx\n\n[src/components/Button/index.tsx](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/components/Button/index.tsx)\n\nその名の通り、ボタンのためのコンポーネントです。\nReact.FC<T>を使うなど、さきほどとだいたい同じです。\n![8.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/e5cc0841-27e2-884b-a024-f26dd5114e38.png)\n\n違う部分は任意の関数を使っている点と、childrenを使っている点です。\n\nButtonPropsの中の「onClick?」の疑問符は任意のプロパティであることを示します。\nこのButtonコンポーネントを使う時にonClick属性はあってもなくても良いということです。\n\n## @types/reactで用意されているカタガタ\n@types/reactには、似たような型がいくつかありますが、一部紹介します。。\n\n- `React.ReactElement`\n    - divやpのような仮想DOMを表す\n    - HTMLElementのReact版のようなもの\n- `React.ReactChild`\n    - ReactElementもしくはstringもしくはnumberを表す\n- `React.ReactNode`\n    - ReactElement, Fragment, Portals, primitiveな型\n\nいろいろありますが、childrenに対しては、React.ReactChildを使っておけば問題なさそうです。\n\n# 型を付けて何が嬉しいのか\n閑話休題。\nそもそもの話ですが、Reactを開発する上でコンポーネントに型を付けて何が嬉しいのかについてです。\n\n共同開発をするときや、外部ライブラリとして使うコンポーネントがあるときに、型があることでそのコンポーネントの作者の意図と反した使い方をするのを防ぐことができます。\n\nいまさっき作ったButtonコンポーネントの仕様はButtonPropsで定義しましたが、これと異なる使われ方をするとコンパイルエラーで知らせてくれます。\n![9.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/e04ca2e3-a253-081c-379c-215591f797f5.png)\n\n\n# Reduxに型を付ける\nでは、次にRedux側に型を付けていきます。\n今回はDucksデザインパターンを採用しており、actionやreducerはmodule.tsという1つのファイルの中に定義しています。\n\n# actionに型を付ける\n\n[src/modules/module.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/modules/module.ts)\n\nここで用意するactionは「+」「-」各ボタンを押したときに実行されるものです。\nasはキャストです。\n\n![10.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/2aa2d866-12d4-b1f5-c07c-789b03cd3d38.png)\n\n予め作っておいたActionTypesでキャストすることで型が付きます。\n\nこの書き方をすることで、わざわざactionを書くたびにそれようの型を書かなくて済みます。\n\n今までは以下のように書いていました。\n一つのaction一つのinterfaceを作っていたのでとても冗長になってしまっていました。\n<img width=\"579\" alt=\"11.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/a6b55dba-e145-f70e-cbcb-1935e10267af.png\">\n\n\n## module全体のactionに型を付ける\n\n[src/modules/module.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/modules/module.ts)\n\nあとでreducerに渡すためにmodule全体のactionに型を付けます。\n![12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/b824866b-97d7-37c2-c1a0-9ca6ac506740.png)\n\nここではTypeScriptのちょっとテクった書き方をしています。\n\n`typeof hoge`はhogeの型を表します。\nここではactionそれぞれの関数の型になります。\n\n`ReturnTypes<T>`もTypeScriptが用意しているもので、Tが関数の型の場合、その戻り値の型になります。\n\nReturnTypes<T>自体はconditional typesを使って以下のように定義されています。\n\n```ts\ntype ReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : any;\n```\n\nパイプ「|」はUnion typesです。\n\n# global stateに型を付ける\n\n[src/modules/module.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/modules/module.ts)\n\nglobal stateの型を付けます。\nstateの初期値の宣言などでも使います。\n\nこれもpropsのときと同じ様にreadonlyを付けています。\n![13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/82ba9f76-6861-4197-ae4b-6327616527cb.png)\n\n\n# Reducerに型を付ける\n\n[src/modules/module.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/modules/module.ts)\n\n![14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/edda0df0-5b81-1896-3521-2edc61387184.png)\n\nreduxが用意している`Reducer<S, A>`型と先ほど定義したmoduleのactionと、global stateの型を使います。\n\nもう一点工夫している箇所が、上記のコードの最後のdefaultの部分でnever型を使っている点です。\n\n`never`には`never`型の値しか入りません。\nコレを使って、union typesで定義したMainAction型に対して、switch文のcaseの漏れを防ぐことができます。\n\n例として、今回のコードの一つの分岐をコメントアウトすると、コンパイルエラーになるのがわかります。\n<img width=\"541\" alt=\"15.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/83346f81-f883-f2d7-42a4-f430288688e9.png\">\n\n今回の例では、actionは2つしかないので、漏れが出ることはないと思いますが、プロダクトが大きくなってくるとこの分岐が増えていきます。\n最初にreducerを作る時点でこの一行を書いておくことで、actionが増えてきてもうっかり書き忘れることを防ぐことができます。\n\n【参考】\n\n- [TypeScript 2.0のneverでTagged union typesの絞込を漏れ無くチェックする – Qiita](https://qiita.com/wadahiro/items/9ec4af968a7314402499)\n- [Never Type – TypeScript Deep Dive 日本語版](https://typescript-jp.gitbook.io/deep-dive/type-system/never)\n\n# Storeに型をつける\n\n[src/store.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/all-any-type/src/store.tsx)\n\nstore自体に型をつけるわけではないですが、各moduleで定義した型をここでまとめます。\n![16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/f891a37e-4ec1-69fa-d933-034e5328543d.png)\n\n一番下の行のActionはreduxで用意されている型です。\n\n# Container Componentに型をつける\n\n[src/containers/index.tsx](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/containers/index.tsx)\n\nこれで最後です。\ncontainer componentというのはReduxと接続しているコンポーネントのことです。\n\nまずはstateやactionをpropsに変換する関数に型を付けます。\n`Dispatch<T>`はreduxで用意されている型です。\n![17.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/7e975e2d-299d-ede1-3306-ad1a498b8113.png)\n\n次に、containerのpropsに型を付けます。\n上記2つの関数の`ReturnTypes`を使います。\n![18.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/a7cfc052-69c9-4967-4113-a7b214d028f4.png)\n\nこの型をReact.FC<T>を使ってコンポーネントに当てます。\n![19.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/0b564858-2415-5525-402d-a87b64eb23f0.png)\n\n\n# おわり\nお疲れ様でした。\nこれでプロダクト全体に型が行き渡り、再び息を吹き返しました。\nこんな感じで型を当てていくと、楽に、安全に、当てられるのではないでしょうか。\n\n# 参考\n- [piotrwitek/react-redux-typescript-guide: The complete guide to static typing in “React & Redux” apps using TypeScript](https://github.com/piotrwitek/react-redux-typescript-guide)\n- [typescript-fsaに頼らないReact × Redux – ログミーTech](https://logmi.jp/tech/articles/320496)\n- [React Reduxを型で縛ってみよう – Tech Blog – Recruit Lifestyle Engineer](https://engineer.recruit-lifestyle.co.jp/techblog/2019-01-31-how-to-bind-react-with-Flow/)\n","created_at":"2019-04-14T12:55:30+09:00","id":"a0cc644b424762278c20","tags":[{"name":"TypeScript","versions":[]},{"name":"React","versions":[]},{"name":"redux","versions":[]}],"url":"https://qiita.com/mrsekut/items/a0cc644b424762278c20"},{"title":"unity組み込みスクリプト言語","body":"何年か前にも調べたんだが、今更。\n\n# 非言語\n\n## ビジュアル\n\n- [ConstellationLanguage/Constellation: Constellation is a visual scripting language for unity that gives you the tools of a programmer without having to write a single line of code\\. Its goal is to give a user friendly approach to programming\\. It's currently in alpha, which means it’s going to evolve and improve the next few months\\.](https://github.com/ConstellationLanguage/Constellation)\n- [Bolt: Visual Scripting for Unity](https://ludiq.io/bolt)\n- 内蔵すると言ってる？ [Unity3D getting Visual Scripting in 2019\\.2 \\- Unity Forum](https://forum.unity.com/threads/unity3d-getting-visual-scripting-in-2019-2.577084/)\n\n## ノベルゲーム専用\n\n- [イギリスのゲームスタジオinkleがUnityとも連携可能なゲーム開発用スクリプト言語「ink」およびink用IDE「Inky」をオープンソースで公開中。 \\| AAPL Ch\\.](https://applech2.com/archives/20180501-ink-the-powerful-scripting-language.html)\n- [ink \\- inkle's narrative scripting language](https://www.inklestudios.com/ink/)\n\n# 言語\n\n## lua\n\n抜きん出でバリエーションが多い\n\n- [MoonSharp](http://www.moonsharp.org/)\n- [Unity Lua Interface Library \\- Asset Store](https://assetstore.unity.com/packages/tools/integration/unity-lua-interface-library-391)\n- [NLua/NLua: Bridge between Lua and the \\.NET\\.](https://github.com/NLua/NLua)\n- [xebecnan/UniLua: A pure c\\# implementation of Lua 5\\.2 focus on compatibility with Unity](https://github.com/xebecnan/UniLua)\n\nサポート終わったらしいものは除外\n\n### [Tencent/xLua: xLua is a lua programming solution for C\\# \\( Unity, \\.Net, Mono\\) , it supports android, ios, windows, linux, osx, etc\\.](https://github.com/Tencent/xLua)\n\n```csharp\n  Action luaAwake = scriptEnv.Get<Action>(\"awake\");\n  scriptEnv.Get(\"start\", out luaStart); \n```\n\n\n## python\n\n- [exodrifter/unity\\-python: Python plugin for Unity3D](https://github.com/exodrifter/unity-python)\n","created_at":"2019-04-14T12:54:59+09:00","id":"7e42430da160dee04607","tags":[{"name":"Unity","versions":[]},{"name":"embedded","versions":[]}],"url":"https://qiita.com/kamawanu/items/7e42430da160dee04607"},{"title":"iOSアプリエンジニアのためのAndroidアプリ開発入門　その2 〜新規プロジェクト作成編〜","body":"## はじめに（対象読者と内容の方向性）\n\nこの記事は『iOSアプリ開発はやったことあるけど、Androidアプリ開発ははじめて』という方向けにAndroidアプリ開発についてまとめたものです。\n\niOSアプリエンジニア向けなので、『iOSでのこういう機能は、Androidではこうやって実装する』、『iOSではこういう考え方だけど、Androidではこういう考え方で実装する』みたいな形で紹介できればと考えています。\n\n## 免責事項\n\nAndroidアプリ開発初心者が勉強しながら書いているので、たぶん間違いがたくさんあります。勉強していく過程で間違いに気がついたらその都度修正をしますが、「ここ間違ってるで〜」というのがあれば、ぜひツッコンでください。\n\n## 全体の目次\n\n[その1 〜インストール編〜](https://qiita.com/toshi586014/items/28a6dc614f3e8d879e9c)\nその2 〜新規プロジェクト作成編〜　←イマココ\n\n## 新規プロジェクトの作成\n\nまずは、新規プロジェクトを作成します。\n\nここで言うプロジェクトは、Xcodeのプロジェクトと同じように、アプリの内容（ソースコードやリソースなど）をひとまとめにしたものです。\n\n<img width=\"778\" alt=\"02-001.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/35ab951a-e06c-5ae2-9352-7739d2428d8c.png\">\n\n\nWelcom画面で『Start a new Android Studio project』をクリックします。\n\n<img width=\"1012\" alt=\"02-002.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/d3f30a7a-9a8a-db5f-14a2-3e660be1b6db.png\">\n\n\nXcodeと同じように、プロジェクトのテンプレートが表示されるので、これから開発するアプリで使うテンプレートを選択します。今回は、Empty Activityを選択してNextボタンをクリックします。\n\nActivityというのは、画面を表示するためのコンポーネントです（iOSアプリで言うところのViewControllerみたいなものですね）。\n\n今回選んだEmpty Activityは、XcodeのSingle View Appみたいな感じで、空っぽの画面が一つだけあるシンプルなプロジェクトです。\n\n<img width=\"968\" alt=\"02-003.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/e0e68008-01f4-bb6d-b256-91b8f3d18d55.png\">\n\n\nつぎに、プロジェクトの設定画面が表示されます。\n\nNameとPackage nameはそのままにします（たぶん、nameはXcodeのProduct Name、Package nameはXcodeのBundle Identifierだと思います）。\nSave locationはプロジェクトを保存する場所です。そのままでも構いませんが、別の場所がいい場合は変更してください。\nLanguageはKotlinに変更します（Kotlinは最近Androidアプリ開発の公式になった言語です。たぶん、Java→Objective-C、Kotlin→Swiftみたいなイメージではないでしょうか）。\n設定を変更したらFinishボタンをクリックします。\n\n<img width=\"1012\" alt=\"02-004.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/bc8b2be8-e11a-4408-6e8f-52fd1bf19200.png\">\n\n\nインストール画面が表示されるので、しばし待ちます。終わったらFinishボタンをクリックします。\n\n<img width=\"1512\" alt=\"02-005.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/769b01ad-7bdb-b28c-1065-8cd609d64f4e.png\">\n\n\nAndroid Studioのメイン画面が表示されました。やったね！\n\n## Android Studioの画面構成\n\nAndroid Studioの画面構成を、Xcodeと比較しながら、簡単に見てみましょう。\n\n<img width=\"1595\" alt=\"02-006.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/ab9e7489-a8b8-4bad-b4f3-bb6367193eec.png\">\n\n<img width=\"1512\" alt=\"02-007.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/7f4f7e99-48f6-b04f-3394-9109a81d999f.png\">\n\nXcodeと似ているので、なんとく想像できますね。\n\n画面上のツールバーが、Xcodeのツールバーに当たる部分です。Xcodeと同じようにアプリの実行などを行うことができます。\n\n左側のプロジェクトビューが、Xcodeのナビゲータエリアに当たる部分です。プロジェクトが持っているソースファイルや、画像などのリソースファイルなどを一覧表示するエリアです。\n\n右側の編集エリアが、Xcodeのエディタエリアに当たる部分です。画面レイアウトやソースコードの編集をするエリアです。\n\n画面下のツールウィンドウが、Xcodeのデバッグエリアに当たる部分です。アプリを実行しているときのログを表示することができます。\n\n表示したいファイルを選ぶときは、プロジェクトビューでファイルをダブルクリックします。Xcodeと違ってシングルクリックでは表示されないので注意してください。\n\n## 終わりに\n\n細かいところでは違いがありますが、Xcodeと似ているところもあるので、なんとなく親近感がわきますね。\n\nそれでは、次回の更新をお待ちください。\n","created_at":"2019-04-14T12:53:54+09:00","id":"ea6bc2321d3baa57f6ad","tags":[{"name":"Android","versions":[]},{"name":"Xcode","versions":[]},{"name":"iOS","versions":[]},{"name":"AndroidStudio","versions":[]}],"url":"https://qiita.com/toshi586014/items/ea6bc2321d3baa57f6ad"},{"title":"2019 american motogp live stream reddit","body":"Motogp Grnd Prix Of Americs Live Strem Online  TOTAL SPORTEK\n\n\n\n#Click Here : http://bit.ly/2ZaGSDd\n\n#Click Here : http://bit.ly/2ZaGSDd\n\n\n\n1\t\n2\n3\n4\n5\n\n","created_at":"2019-04-14T12:50:45+09:00","id":"66860e8e0ff57b768750","tags":[{"name":"live","versions":[]},{"name":"prix","versions":[]},{"name":"Grand","versions":[]},{"name":"Americas","versions":[]}],"url":"https://qiita.com/shadhin/items/66860e8e0ff57b768750"},{"title":"Node.js,Expressメモ②","body":"さてこいつを組み込みたいぜ！と始めたNode.jsの世界。こんにちは。\n\nExpressのノリを知ってから下のページをみて組み込みの実験をしてみたいと思っています。\nhttps://codepen.io/Ni55aN/pen/xzgQYq\n\nここまでわかってれば簡単に組み込めるのでは！？という気持ちをぐっと抑えて\nまたチュートリアルをやってみます。\n\nhttps://developer.mozilla.org/ja/docs/Learn/Server-side/Express_Nodejs\n\nこちらはこれだけやっとけばExpressのことがいろいろわかっちゃうぜ!という優れもの(まだやっていませんが)\n\n# やっとくといい設定\n①デバックを有効にする。\n`SET DEBUG=express-locallibrary-tutorial:* npm start`\nexpress-locallibrary-tutorialはこれからやるチュートリアルのプロジェクト名です。\nこれをやることでプロンプトにログがでるみたいですね。\n\n②サーバーのオートリロード\n`npm install --save-dev nodemon`\nパッケージをインストールする必要があるみたいです。\n常に必要そうだから-gをつけてインストールしとこうかと思います。\nドラえもんみたいな名前で親しみがわきます。\n\nこれはインストールだけではだめでpackage.jsonに追記する必要があるんですね。\n`\n\"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"devstart\": \"nodemon ./bin/www\" < こっち\n}\n`\n\nこれで①のコマンドをdevstartに書き換えればよいということは\nここの名前は決められたものじゃなさそうなのでいろいろなバリエーションを持てることが予想されます。\n\n\n# script > startの\"bin/www\"?\nプロンプトでstartしたときに呼び出されるスクリプトがさしているファイルもjsのようです。\n前にapp.jsが起動しないと勝手にサーバーのコマンドを書き加えましたがそれは作法と違ったことがわかりました。\nwwwファイルの冒頭でapp.jsが読み込まれています。\nserverの立ち上げなどもこちらで行われているようです。\n\n# アプリケーションの追加\nアプリケーションを追加するときは他のものと同じように読み込んで\n`var indexRouter= require(\"./routes/index\");`\n`var usersRouter = require('./routes/users');`\n\n①viewの設定\nアプリケーションごとに変更可能みたいです\nviewsフォルダ以下の同名のファイルが適応される？\n`app.set(\"views\", path.join(__dirname, \"views\"));`\n`app.set(\"view engine\", \"pug\")`\n\n②リクエスト処理チェーン(というらしい)の設定\n他にも設定されていますがとりあえず文脈的にこれだけ。\nindexは特別扱いで省略できるようです。\n`app.use('/', indexRouter);`\n`app.use('/users', usersRouter);`\n\n# routerとして認識させるには\napp.jsではexpress()そのものを最後にexportsしていますが\nrouterの場合はexpress.Router()というオブジェクトを作ってexportsするみたいです。\n\nappの場合\n`\nvar app = express();\n ---省略---\nmodule.exports = app;\n`\n\nrouterの場合\n`\nvar router = express.Router();\n---省略---\nmodule.exports = router;\n\n# viewsフォルダ\nview engineのファイルが置かれていますが、要するにプログラム的に拡張できるhtmlなのかな?と予想できます。\nGETされてきた値を元にjsで処理して、テンプレートに渡して表示。ということになりそうです。\npugファイルは継承できるんですね。\nrender時に置き換え用のデータを渡すようですが宣言されていない変数はなんなんでしょう。。\ntitleは定型なのかな。\n\nindex.js\n`res.render('index', { title: 'Express' });`\n\n# 最後の課題\nusers.jsに手を加えてusers/coolを表示させるというもの。\nうん。とりあえずわかっていることを実行します。\n①cool.jsの作成。\n　これがないとどうにもならなそうなのでindexをコピーしてリネーム。\n\n②users.jsに構造をつくる\n　フレームワークの合理性から考えてapp.jsのvar appとindexのvar express.Routerは構造は同じなのでは？と\n　思ったのでusersに以下を追加したらちゃんと表示されました。\n`var coolRouter = require(\"./cool\");`\n`router.use(\"/cool\", coolRouter);`\n\nappのuseにはもっといろいろ設定しているので何かやろうとしたときに必要なものもあるかもしれませんが\n最小はこれのようです。\n\nついでにviewsにcool.pugって作っただけで読まれるかどうかの実験をしましたがそれはダメ。\n動的に読まれているわけではないんですね。\nじゃあどこで読んでいるんだろうと思ってみてみたらrender関数の第一引数がそれでした。\n`res.render('cool', { title: 'You are so cool' });`\n\nrenderするときにこのテンプレ使ってね！ってことだったんですね。\nなるほど。\n\n因みにviewsの中を構造化できるのかなとテストしてみたら出来そうです。\nviews/cool.pug を以下に移動 views/test/cool.pug\n記述の変更\n`res.render(\"./test/cool\", {title: \"You are so cool\"});`\n\n注: cool.pugを移動させただけでは1行目のextend(継承)でエラーがでました。\n    layoutを階層にあわせて../layoutにしないとうまくいきません。\nつづく\n","created_at":"2019-04-14T12:50:31+09:00","id":"7f8e57b39b8d86265b66","tags":[{"name":"Node.js","versions":[]},{"name":"Express.js","versions":[]}],"url":"https://qiita.com/hat27/items/7f8e57b39b8d86265b66"},{"title":"澳洲留学挂科学校给了劝退邮件怎么办","body":"澳洲留学挂科学校给了劝退邮件，不能毕业拿不到学位怎么办+Q：575121832\n出国留学同样将面临对各种考试成绩，成绩是衡量学业成效最直观的标尺，但国外大学宽进严出的标准，自律差的学生时间都拿去享乐玩物丧失，耗费了精力没有准备去面临对上课、学习、作业、考试，那么带来的就只有挂科，同时拉低GPA所面临的将是学校的警告处分，部分处分严重的学生甚至还将遭受退学、开除、劝退等处分。\n\n只要作为一名学生，就永远逃脱不了学习、考试。学习中最能打击你痛处的是什么？没错，就是挂科。别以为说出国留学就能摆脱挂科所带来的困扰。是的，国外没有挂科，但是有各种Fail，要知道，国外院校在成绩合算时，日常学习表现的分数会占很大一部分比例，一旦Fail，不要指望像国内一样的卷子来让你补个考（当然，部分院校也会采用补考的形式）多数Fail的情况就要面临重修，同样的课程再来一学期，学费自负的同时也有大部分学生没那么好运，相反，一旦重修失败那将可能收到面临开除/劝退等邮件\n\n同时，留学过程中除了挂科，可能还会出现一些让你措手不及的问题，列如：出勤率低、GPA达不到学校规定要求，也有对于不了解国外院校的文化造成的违反学术诚信，考试作弊，论文抄袭，代写等等等等事件都将面临着被学校（Probation）警告，（Suspension）停学，（Withdrawal）劝退，（Dismissal）开除，导致不能顺利毕业的情况也时常发生，特别是对于那些在本科阶段，往往年纪不大，缺乏自制力的学生\n\n如果不幸遇到类似的情况该怎么办？\n\n21世纪是信息化时代，互联网已经完全融入了生活，改变了我们很多方式，学校的办公也离开了纸质的年代，电脑信息化的处理方式，数据结构程序化的处理更加有效的节省了不必要的时间以及消耗，也减少了人工的错误，为了保证数学质量，有效利用学校的软硬件资源，就必须提供一个智能化的，灵活的高校系统管理系统。咨询Q：575121832能在有限的条件下竭尽全力的为学生提供大学成绩修改《承接国外大学挂科/GPA/成绩修改，处理处分警告，开除、劝退等业务》\n\n首先，改成绩的目的是相互的，大家各取所需。解决学生学业阻碍\n\n而在留学的过程中遇到因为考试挂科、出勤率太低、GPA不够还是学术不诚信等等状况面临开除，或者已经被开除导致不能本科顺利毕业无法做学历认证和回国人员证明，甚至是在留学期间遇到 I-20被取消，这些问题都是有很好的解决办法的，无论现在是在国内国外，都可以加Q：575121832在线咨询，提供安全修改计划方案，针对性更改，解决学业成绩的困扰。\n","created_at":"2019-04-14T12:50:29+09:00","id":"2e93a49eeb7cfcfb0f5f","tags":[{"name":"澳洲留学挂科学校给了劝退邮件怎么办","versions":[]}],"url":"https://qiita.com/xixili/items/2e93a49eeb7cfcfb0f5f"},{"title":"Sketch / Adobe XD - 詳細比較表 / Detail Correlation Table【2019.04】","body":"![Sketch_AdobeXD_v3_th.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122142/f2f1cdff-64e2-6378-6fa2-b0d8a6be784a.png)\n\n#### 日本語 \n|      　　       |　Sketch v54.1　| Adobe XD v16.0 |\n|:---------------|:---------:|:--------:|\n|   価格 / 費用  |  ○<br>新規 \\$99/y<br> 更新 \\$69/y  |  ◎<br>新規/更新<br> \\$0  ~ |\n|       ページ管理      |    ○     |    ×    |\n|    ダークモード    |    ○     |    ×    |\n| 過去バージョン<br>ダウンロード |    ◎     |    ×    |\n|   クラウドストレージ  |    ◎ <br>Unlimited    |    △<br>2GB~100GB    |\n|    操作性<br>( ショートカットなど )    |    ○     |    ○    |\n| - 隣レイヤーへの移動<br> |    ○     |    ×    |\n| - レスポンシブデザイン対応 |    △    |    ○    |\n|    プラグイン豊富さ   |    ○    |    △    |\n|      業界シェア    |    ○    |    △    |\n| 動作軽快さ  　 |    ○    |    ◎    |\n| アップデートスピード　|    ○     |    ◎    |\n|    オフライン操作    |    ○    |    ○    |\n|    シンボル機能     |    ○    |    ○    |\n|    シンボル管理     |    ○    |    △    |\n|    スタイル管理    |    △     |    △    |\n| デフォルト機能　 |    △     |    ○    |\n| クラウドファイルへの<br>モバイルアクセス　 |    ○<br>Webのみ     |    ◎<br>アプリOK    |\n| モバイルアプリ　 |    ○<br>プレビューのみ   |    ◎<br>フォルダ閲覧可    |\n| プロトタイピング<br>( プレビュー ) |    △     |    ○    |\n| - モバイルプレビュー　|   ○   |    ○    |\n| - 多機能プレビュー　|    △     |    ○    |\n| - 要素固定プレビュー |   ○   |   ○   |\n| - 背景固定プレビュー |   ×   |   ○   |\n|     Windows      |    ×     |    ○    |\n|    日本語メニュー   |    ×     |    ○    |\n|     日本語資料     |    △    |    ○    |\n|   リピートグリッド  |    ×     |    ○    |\n|   データインポート  |    △     |    ○    |\n\n#### English\n|             |　Sketch v54.1　| Adobe XD v16.0 |\n|:---------------|:---------:|:--------:|\n| Price / Cost |  ○<br>New \\$99/y<br> Update \\$69/y  |  ◎<br>New/Update<br> \\$0  ~ |\n|   Page Management   |    ○     |    ×    |\n|    Dark Mode    |    ○     |    ×    |\n| Old Versioin<br>Download |    ◎     |    ×    |\n|  Cloud Storage   |    ◎ <br>Unlimited    |    △<br>2GB~100GB    |\n|    Operational (Shortcut etc)    |    ○     |    ○    |\n| - Move to Next Layer    |    ○     |    ×    |\n| - Responsive Design  |    △     |    ○    |\n|    Plugin Volume  |    ○    |    △    |\n|  Industry Share |    ○     |    △    |\n|   Quick Movement  |    ○     |    ◎    |\n|   Update Speed   |    ○     |    ◎    |\n|  Offline Operation  |    ○    |    ○    |\n| Synbol Function  |    ○    |    ○    |\n| Synbol Management |    ○    |    △    |\n| Style Management |    △     |    △    |\n|  Default Function　|    △     |    ○    |\n| Cloud File/Folder Access<br>from Mobile　 |    ○<br>Web Only     |    ◎<br>App OK    |\n|  Mobile App　   |    ○<br>Preview Only     |    ◎<br>File/Folder OK    |\n| Prototyping ( Preview ) |    △     |    ○    |\n| - Mobile Preview |    ○     |    ○    |\n| - Many Function Preview |    △     |    ○    |\n| - Fix Element Preview |   ○   |   ○   |\n| - Fix Background Preview |   ×   |   ○   |\n|      Windows       |    ×     |    ○    |\n|    Japanese Menu   |    ×     |    ○    |\n|    Japanese Document   |    △     |    ○    |\n|    Repeat Grid   |    ×     |    ○    |\n|   Import Date  |    △     |    ○    |\n\n<br>\n\n#### 総評\n最近 改めて両方とも使うようになってきたため比較してみました。\nやはり最近は AdobeXD の追い上げが凄いですね。\nXDがβ版のときは今ほどの良さを感じませんでしたし、\nSketchというライバルをかなり意識しての追い上げですね。\n\nSketchは、プラグイン豊富・ページ管理可能・ダークモード使える・クラウド容量無制限が好印象ですね。弱点としてはプラグインに依存気味・日本語に弱い・Windows版無し・背景固定プレビビュー不可といったところですね。私としてはプロトタイピングで背景固定プレビューできないのが辛いですね。業界シェアとしてはAdobeXDも増えてはきましたが、まだSketchのシェアが日本でも高い感じを受けますね。\n\nXDは、標準機能豊富・無料プラン復活・日本語サポート・Windowsサポート・リピートグリッドが便利・プロトタイピング問題なし・簡単にデータインポート可能と、総合力がかなり高い印象がありました。動作に関してもSketchもAiやPsよりはかなり速いですが、同じAdobeとは思えないほどXDは更に快適ですね。やはり優秀なチームでゼロから作り上げているという印象を受けました。XDが他の不足点をサポートすれば かなり強くなりますね。\n\nユーザーからすれば両方あるのはありがたいです。\nライトユーザーやWindowsユーザーにとっては AdobeXD 一択でしょうね。\n\nちなみに最近では Figma というツールも注目度が高くなりユーザーも増えてきて使ってみたりしますが、テキスト入力時にバグがあり まだ使用に耐えないですね。今後に期待です。\n<br><br> \n","created_at":"2019-04-14T12:45:38+09:00","id":"bc2388110a4731e43c93","tags":[{"name":"Design","versions":[]},{"name":"adobe","versions":[]},{"name":"sketch","versions":[]},{"name":"prototype","versions":[]},{"name":"XD","versions":[]}],"url":"https://qiita.com/think-a-lot/items/bc2388110a4731e43c93"},{"title":"Example of randomly generating tomorrow's hour and minute with datetime of #python","body":"<pre> <code class=\"py\">&gt;&gt;&gt; import datetime \n \n &gt;&gt;&gt; now = datetime.datetime.now() \n &gt;&gt;&gt; now \n # datetime.datetime(2019, 4, 13, 18, 44, 57, 269002) \n \n &gt;&gt;&gt; rand_datetime_today = now.replace(hour=random.randint(1,23), minute=random.randint(1,59), second=0, microsecond=0) \n &gt;&gt;&gt; rand_datetime_today \n # datetime.datetime(2019, 4, 13, 3, 8) \n \n &gt;&gt;&gt; rand_datetime_tomorrow = rand_datetime_today + datetime.timedelta(days=1) \n &gt;&gt;&gt; rand_datetime_tomorrow \n # datetime.datetime(2019, 4, 14, 3, 8) \n \n</code> </pre>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1260\n","created_at":"2019-04-14T12:43:26+09:00","id":"216701585e553237d7ac","tags":[{"name":"Python","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/216701585e553237d7ac"},{"title":"A simple example of creating a datetime object with a specific date / hour / minute / second specification in #python and parsing it into a string","body":"<p> <code>datetime.datetime()</code> . </p>\n\n<pre> <code class=\"py\">&gt;&gt;&gt; import datetime \n &gt;&gt;&gt; datetime.datetime(2016,1,2, 10,20,5, 100).strftime(&#39;%Y-%m-%d %H:%M:%S %a %f&#39;) \n &#39;2016-01-02 10:20:05 Sat 000100&#39; \n</code> </pre>\n\n<h1> ref </h1>\n\n<p> <a href=\"https://www.programiz.com/python-programming/datetime/strftime\">Python strftime ()-datetime to string</a> </p>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1261\n","created_at":"2019-04-14T12:43:26+09:00","id":"ad820d91e0c58f76a2e4","tags":[{"name":"Python","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/ad820d91e0c58f76a2e4"},{"title":"An example of writing multiple standard output of echo and cat together in one file with #shell","body":"<pre><code>echo $(echo &quot;abc&quot; &amp;&amp; echo &quot;b&quot; &amp;&amp; cat tmp/in.txt &amp;&amp; cat tmp/in.txt) &gt; tmp/out.txt\n</code></pre>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1265\n","created_at":"2019-04-14T12:43:26+09:00","id":"4f12f46f7a0faee3d8da","tags":[{"name":"shell","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/4f12f46f7a0faee3d8da"},{"title":"A simple Dockerfile example that creates an image or container with various gems in #ruby with #docker","body":"<h1> Dockerfile </h1>\n\n<pre> <code>FROM ruby \n \n RUN gem install reverse_markdown redcarpet \n \n</code> </pre>\n\n<h1> EXE </h1>\n\n<pre> <code>$ docker build . -t ruby-gems \n</code> </pre>\n\n<pre> <code>$ docker run -it ruby-gems /bin/bash \n</code> </pre>\n\n<pre> <code>root@dd130726b871:/# echo &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot; | reverse_markdown \n # Hello \n root@dd130726b871:/# echo &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot; | reverse_markdown | redcarpet \n &lt;h1&gt;Hello&lt;/h1&gt; \n</code> </pre>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1262\n","created_at":"2019-04-14T12:43:25+09:00","id":"21636b7a45cb4512a829","tags":[{"name":"Ruby","versions":["0.0.1"]},{"name":"docker","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/21636b7a45cb4512a829"},{"title":"An example of a simple script that combines multiple #JSON arrays flat with #python","body":"<h1> script </h1>\n\n<pre> <code class=\"py\">#!/usr/bin/env python3 \n \n import sys, json \n \n results = [] \n \n for input_data in sys.argv[1:]: \n results += json.loads(input_data) \n \n print(json.dumps(results)) \n \n</code> </pre>\n\n<h1> EXE </h1>\n\n<pre> <code>$ ./concat-array.py &#39;[1,2,3]&#39; &#39;[{&quot;a&quot;:&quot;b&quot;,&quot;c&quot;:&quot;d&quot;}]&#39; &#39;[&quot;e&quot;,&quot;f&quot;]&#39; | jq . \n [ \n 1, \n 2, \n 3, \n { \n &quot;a&quot;: &quot;b&quot;, \n &quot;c&quot;: &quot;d&quot; \n }, \n &quot;e&quot;, \n &quot;f&quot; \n ] \n</code> </pre>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1263\n","created_at":"2019-04-14T12:43:25+09:00","id":"78407615d7f7b2da586e","tags":[{"name":"Python","versions":["0.0.1"]},{"name":"JSON","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/78407615d7f7b2da586e"},{"title":"I want to switch profile images in night mode on Twitter at night. (#Python script example of updating profile image with #Twitter # API)","body":"<h1> config.py </h1>\n\n<pre> <code>CONSUMER_KEY = &#39;&#39; \n CONSUMER_SECRET = &#39;&#39; \n ACCESS_TOKEN = &#39;&#39; \n ACCESS_TOKEN_SECRET = &#39;&#39; \n \n</code> </pre>\n\n<p> # twitterauth.py </p>\n\n<pre> <code class=\"py\">#!/usr/bin/env python3 \n \n import os, config \n from requests_oauthlib import OAuth1Session \n \n if os.environ.get(&#39;TWITTER_CONSUMER_KEY&#39;): \n CONSUMER_KEY = os.environ.get(&#39;TWITTER_CONSUMER_KEY&#39;) \n CONSUMER_SECRET = os.environ.get(&#39;TWITTER_CONSUMER_SECRET&#39;) \n ACCESS_TOKEN = os.environ.get(&#39;TWITTER_ACCESS_TOKEN&#39;) \n ACCESS_TOKEN_SECRET = os.environ.get(&#39;TWITTER_ACCESS_TOKEN_SECRET&#39;) \n else: \n CONSUMER_KEY = config.CONSUMER_KEY \n CONSUMER_SECRET = config.CONSUMER_SECRET \n ACCESS_TOKEN = config.ACCESS_TOKEN \n ACCESS_TOKEN_SECRET = config.ACCESS_TOKEN_SECRET \n \n def twitter(): \n return OAuth1Session(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET) \n \n \n \n</code> </pre>\n\n<h1> Script </h1>\n\n<p> Specify the file path of the image and base64 encode and pass it as a string to the API. </p>\n\n<pre> <code class=\"py\">#!/usr/bin/env python3 \n \n # https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image.html \n \n # The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 400 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation. \n \n import json, twitterauth, base64, sys \n \n twitter = twitterauth.twitter() \n \n image_path = sys.argv[1] \n \n with open(image_path, &quot;rb&quot;) as image_file: \n image_encoded_string = base64.b64encode(image_file.read()) \n \n api_url = &#39;https://api.twitter.com/1.1/account/update_profile_image.json&#39; \n \n params = { \n &quot;image&quot;: image_encoded_string \n } \n \n response = twitter.post(api_url, params=params) \n \n print(json.dumps(response.json())) \n \n \n</code> </pre>\n\n<h1> EXE </h1>\n\n<pre> <code>$ ./update-profile.py image/profile.jpg \n {&quot;id&quot;: 473780756, &quot;id_str&quot;: &quot;473780756&quot;, &quot;name&quot;: &quot;Rails\\u6b744\\u5e74\\u30a8\\u30f3\\u30b8\\u30cb\\u30a2\\u3092\\u304a\\u63a2\\u3057\\u306e\\u65b9\\u306f\\u3053\\u3061\\u3089\\u307e\\u3067@\\u7a32\\u6d66\\u60a0\\u99ac&quot;, &quot;screen_name&quot;: &quot;YumaInaura&quot;, &quot;location&quot;: null, &quot;description&quot;: &quot;\\u6b21\\u306e\\u304a\\u4ed5\\u4e8b\\u63a2\\u3057\\u4e2d / Rails\\u696d\\u52d9\\u7d04\\u56db\\u5e74 / \\u73fe\\u5728\\u56db\\u793e\\u76f8\\u8ac7\\u4e2d / \\u30ea\\u30e2\\u30fc\\u30c8\\u512a\\u5148 / \\u5927\\u962a / Ruby / Perl / Shell / BigQuery / MySQL / Linux / Apache / ansible / Jenkins etc .. / \\u8a73\\u7d30\\u306fWantedly\\u3067 / Twitter DM\\u53ef&quot;, &quot;url&quot;: null, &quot;entities&quot;: {&quot;description&quot;: {&quot;urls&quot;: []}}, &quot;protected&quot;: false, &quot;followers_count&quot;: 593, &quot;friends_count&quot;: 0, &quot;listed_count&quot;: 30, &quot;created_at&quot;: &quot;Wed Jan 25 09:59:57 +0000 2012&quot;, &quot;favourites_count&quot;: 27660, &quot;utc_offset&quot;: null, &quot;time_zone&quot;: null, &quot;geo_enabled&quot;: true, &quot;verified&quot;: false, &quot;statuses_count&quot;: 41139, &quot;lang&quot;: &quot;en&quot;, &quot;contributors_enabled&quot;: false, &quot;is_translator&quot;: false, &quot;is_translation_enabled&quot;: false, &quot;profile_background_color&quot;: &quot;000000&quot;, &quot;profile_background_image_url&quot;: &quot;http://abs.twimg.com/images/themes/theme1/bg.png&quot;, &quot;profile_background_image_url_https&quot;: &quot;https://abs.twimg.com/images/themes/theme1/bg.png&quot;, &quot;profile_background_tile&quot;: false, &quot;profile_image_url&quot;: &quot;http://pbs.twimg.com/profile_images/1117233785987158016/1rvLg75w_normal.jpg&quot;, &quot;profile_image_url_https&quot;: &quot;https://pbs.twimg.com/profile_images/1117233785987158016/1rvLg75w_normal.jpg&quot;, &quot;profile_banner_url&quot;: &quot;https://pbs.twimg.com/profile_banners/473780756/1552991452&quot;, &quot;profile_link_color&quot;: &quot;1B95E0&quot;, &quot;profile_sidebar_border_color&quot;: &quot;000000&quot;, &quot;profile_sidebar_fill_color&quot;: &quot;000000&quot;, &quot;profile_text_color&quot;: &quot;000000&quot;, &quot;profile_use_background_image&quot;: false, &quot;default_profile&quot;: false, &quot;default_profile_image&quot;: false, &quot;following&quot;: null, &quot;follow_request_sent&quot;: null, &quot;notifications&quot;: null, &quot;translator_type&quot;: &quot;none&quot;} \n</code> </pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/13635059/56087018-a7d2d780-5e9d-11e9-9888-3459659025ed.png\" alt=\"image\"></p>\n\n<pre> <code>$ ./update-profile.py image/profile_sleepy.jpg \n {&quot;id&quot;: 473780756, &quot;id_str&quot;: &quot;473780756&quot;, &quot;name&quot;: &quot;Rails\\u6b744\\u5e74\\u30a8\\u30f3\\u30b8\\u30cb\\u30a2\\u3092\\u304a\\u63a2\\u3057\\u306e\\u65b9\\u306f\\u3053\\u3061\\u3089\\u307e\\u3067@\\u7a32\\u6d66\\u60a0\\u99ac&quot;, &quot;screen_name&quot;: &quot;YumaInaura&quot;, &quot;location&quot;: null, &quot;description&quot;: &quot;\\u6b21\\u306e\\u304a\\u4ed5\\u4e8b\\u63a2\\u3057\\u4e2d / Rails\\u696d\\u52d9\\u7d04\\u56db\\u5e74 / \\u73fe\\u5728\\u56db\\u793e\\u76f8\\u8ac7\\u4e2d / \\u30ea\\u30e2\\u30fc\\u30c8\\u512a\\u5148 / \\u5927\\u962a / Ruby / Perl / Shell / BigQuery / MySQL / Linux / Apache / ansible / Jenkins etc .. / \\u8a73\\u7d30\\u306fWantedly\\u3067 / Twitter DM\\u53ef&quot;, &quot;url&quot;: null, &quot;entities&quot;: {&quot;description&quot;: {&quot;urls&quot;: []}}, &quot;protected&quot;: false, &quot;followers_count&quot;: 593, &quot;friends_count&quot;: 0, &quot;listed_count&quot;: 30, &quot;created_at&quot;: &quot;Wed Jan 25 09:59:57 +0000 2012&quot;, &quot;favourites_count&quot;: 27660, &quot;utc_offset&quot;: null, &quot;time_zone&quot;: null, &quot;geo_enabled&quot;: true, &quot;verified&quot;: false, &quot;statuses_count&quot;: 41139, &quot;lang&quot;: &quot;en&quot;, &quot;contributors_enabled&quot;: false, &quot;is_translator&quot;: false, &quot;is_translation_enabled&quot;: false, &quot;profile_background_color&quot;: &quot;000000&quot;, &quot;profile_background_image_url&quot;: &quot;http://abs.twimg.com/images/themes/theme1/bg.png&quot;, &quot;profile_background_image_url_https&quot;: &quot;https://abs.twimg.com/images/themes/theme1/bg.png&quot;, &quot;profile_background_tile&quot;: false, &quot;profile_image_url&quot;: &quot;http://pbs.twimg.com/profile_images/1117233922763411457/9A3lowvf_normal.jpg&quot;, &quot;profile_image_url_https&quot;: &quot;https://pbs.twimg.com/profile_images/1117233922763411457/9A3lowvf_normal.jpg&quot;, &quot;profile_banner_url&quot;: &quot;https://pbs.twimg.com/profile_banners/473780756/1552991452&quot;, &quot;profile_link_color&quot;: &quot;1B95E0&quot;, &quot;profile_sidebar_border_color&quot;: &quot;000000&quot;, &quot;profile_sidebar_fill_color&quot;: &quot;000000&quot;, &quot;profile_text_color&quot;: &quot;000000&quot;, &quot;profile_use_background_image&quot;: false, &quot;default_profile&quot;: false, &quot;default_profile_image&quot;: false, &quot;following&quot;: null, &quot;follow_request_sent&quot;: null, &quot;notifications&quot;: null, &quot;translator_type&quot;: &quot;none&quot;} \n</code> </pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/13635059/56087024-bae5a780-5e9d-11e9-9a37-6149a8aa6174.png\" alt=\"image\"></p>\n\n<h1> sample Images </h1>\n\n<p> Be careful because it is rather strict such as capacity and size restrictions. </p>\n\n<p><img src=\"https://user-images.githubusercontent.com/13635059/56087008-8a057280-5e9d-11e9-94c0-6dd5c35a2c75.png\" alt=\"image\"></p>\n\n<p><img src=\"https://user-images.githubusercontent.com/13635059/56087028-d781df80-5e9d-11e9-9cf3-0b1488c94d01.png\" alt=\"image\"></p>\n\n<h1> Scheduled execution </h1>\n\n<p> Turn the cron on the server and so on. </p>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1259\n","created_at":"2019-04-14T12:43:24+09:00","id":"c2ab6464332ebc208cd3","tags":[{"name":"Python","versions":["0.0.1"]},{"name":"Twitter","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/c2ab6464332ebc208cd3"},{"title":"学習記録開始","body":"# 学習記録まとめ\n\n学習開始から2ヶ月、Qiitaの存在を知ったので学習記録をつけていくことにする。webもプログラミングも完全未経験のアラフォーです。アドバイス等あればよろしくお願いします。\n\n\n####　---計画---\n\n目的：旅をしながら生活費を賄えるようになる。\n目標：フリーランサーとして月20万円をコンスタントに稼げるようになる。\n言語：在宅案件の多いweb系言語を中心に学ぶ\n期間：2年以内に目標を達成する\n手段：基本独学、つまったらスクールを検討する\n\n\n####　---この2ヶ月でやったこと---\n-**Progate**　    \n　-HTML&CSS 2周\n　-JavaScript　2周\n　-jQuery 2周\n　-Saas　1周\n\n-**どっとインストール**　    \n　-もっと詳しくJavaScriptを学ぼう　1周\n\n-**Adobe**　\n　-Photoshop　なんとなーく基本的な使い方だけ理解\n　-illustrator 基本はマスター済\n\n**現在までの総学習時間：ざっくり100時間**\n\n\n####　---言語の優先順位---\n☆☆☆☆☆HTML&CSS / Boostrap\n☆☆☆☆☆JavaScript / jQuery\n☆☆☆PHP / Wordpress\n☆☆Ruby (仕事よりも個人的に作りたいものがある)\n\n\n####　---向こう半年間の計画---\n座学は疲れるし飽きるので、少し実践的な勉強に方向チェンジしたい。\n\n　-どっとインストールJavaScriptの「ミニアプリを作ってみよう」でJSの理解を深める\n　-webサイトの模写\n　-Paizaのクイズに挑戦\n　-(継続して週10時間の学習時間を確保する)\n　-(余裕があればwordpressを開設したい)\n\nまずはJavaScriptを使いこなせるようになることが最優先。\n8月いっぱいくらいまでに簡単なLP制作なら受注できるかも~？と思えるくらいの理解を深めたい。\n","created_at":"2019-04-14T12:38:37+09:00","id":"053c56a738251441d7cd","tags":[{"name":"初心者","versions":[]},{"name":"学習記録","versions":[]}],"url":"https://qiita.com/qiitamal/items/053c56a738251441d7cd"},{"title":"JavaでFlyweightパターン","body":"# はじめに\n[GoF](https://ja.wikipedia.org/wiki/ギャング・オブ・フォー_(情報工学))のデザインパターンを紹介している[『増補改訂版 Java言語で学ぶデザインパターン入門』](https://www.amazon.co.jp/増補改訂版Java言語で学ぶデザインパターン入門-結城-浩/dp/4797327030/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&psc=1&refRID=2ZE4GPYNN55JGDR5QMHP)を読んで、学んだ内容についてまとめます。\n\n# Flyweightパターン\n## Flyweightとは\nボクシングの軽量級である「フライ級」のことです。\n軽量級の意味することは「軽さ」であり、メモリの消費量が少ないことを指します。\nオブジェクトを生成するにはnewを行い、メモリを確保する(インスタンス化)必要がありますが、多くのオブジェクトを生成するとメモリを多く消費してしまい、処理の速度が遅くなってしまします。\nこのような問題を解決するためには、すでにnewしたインスタンスに関しては繰り返し使用することが望ましいでしょう。\nこのように**オブジェクトをできるだけnewせずに共有させることでメモリの消費量を抑制するパターン**のことを**Flyweightパターン**と言います。\n\n## 登場人物\nFlyweightパターン使用するのは以下のクラス図に登場するクラスです。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278934/3a0cb58d-fd5a-544a-04b5-c76be72b05e9.png)\n\n\n### 実装クラス\n- **Flyweight**\n共有して利用するクラスを表します。\n実装すべきメソッドなどは特にありませんので、難しい点はありません。\n\n- **FlyweightFactory**\n`Flyweight`を生成するための工場役となるクラスです。\nこの工場役を通してFlyweight役を作るとインスタンスを共有できるメソッドを持ちます。\n共有するインスタンスを格納する`pool`フィールドと、Flyweightを取得するための`getFlyewight`メソッドを持ちます。\n\n- **Client**\n`FlyweightFactory`を利用してFlyweightを利用するクラスです。\nFlyweightと同様に実装すべきメソッドなどは特に定まられていないため、難しい点はありません。\n\n## 具体例\n具体例として、以下のクラスをもとに説明します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278934/bf6fe2f1-0d70-662e-a399-c427f1e28b8d.png)\n\n\n### 実装クラス\n- **Stampクラス**  \n\n```java:Stamp.java\npackage sample;\n\npublic class Stamp {\n\t// 文字\n\tprivate char charname;\n\t// 利用回数\n\tprivate int useCount = 0;\n\t// 生成回数\n\tprivate int newCount = 0;\n\n\tpublic int getUseCount() {\n\t\treturn useCount;\n\t}\n\n\tpublic void setUseCount(int useCount) {\n\t\tthis.useCount = useCount;\n\t}\n\n\tpublic int getNewCount() {\n\t\treturn newCount;\n\t}\n\n\tpublic void setNewCount(int newCount) {\n\t\tthis.newCount = newCount;\n\t}\n\n\t// コンストラクタ\n\tpublic Stamp(char charname) {\n\t\tthis.charname = charname;\n\t}\n\n\t// 文字を表示する\n\tpublic void print() {\n\t\tSystem.out.println(\"charname:\" + this.charname);\n\t}\n}\n```\n`Stamp`クラスは共有して利用されるFlyweight役となるクラスです。\n文字`charname`を受け取って生成され、`print`メソッドで文字を表示します。\nまた、利用回数(`useCount`)と生成回数(`newCount`)が分かりやすいようにフィールドを持たせていますが、必須ではありません。\n\n- **StampFactoryクラス**  \n\n```java:StampFactory.java\npackage sample;\n\nimport java.util.HashMap;\nimport java.util.Map.Entry;\n\npublic class StampFactory {\n\t// 既に生成したStampインスタンスを管理\n\tprivate HashMap<String, Stamp> pool = new HashMap<>();\n\t// Singletonパターン\n\tprivate static StampFactory singleton = new StampFactory();\n\n\t// コンストラクタ\n\tprivate StampFactory() {\n\t}\n\n\t// シングルトンインスタンスを取得\n\tpublic static StampFactory getInstance() {\n\t\treturn singleton;\n\t}\n\n\t// Stampのインスタンス生成(共有)\n\tpublic synchronized Stamp getStamp(char charname) {\n\t\t// キー(文字)に紐づく値(Stampインスタンス)を取得する\n\t\tStamp bc = pool.get(\"\" + charname);\n\t\t// キー(文字)に紐づく値(Stampインスタンス)が取得できなかった場合\n\t\tif (bc == null) {\n\t\t\t// ここでStampのインスタンスを生成\n\t\t\tbc = new Stamp(charname);\n\t\t\t// newした回数をカウント\n\t\t\tbc.setNewCount(bc.getNewCount() + 1);\n\t\t\t// HashMapに格納\n\t\t\tpool.put(\"\" + charname, bc);\n\t\t}\n\t\t// newの有無にかかわらず利用した回数をカウント\n\t\tbc.setUseCount(bc.getUseCount() + 1);\n\t\treturn bc;\n\t}\n\n\t// HashMapが管理しているStampインスタンスを全件出力\n\tpublic void printAllPool() {\n\t\tfor (Entry<String, Stamp> entry : pool.entrySet()) {\n\t\t\tSystem.out.println(\n\t\t\t\t\tentry.getKey() + \" : \" + entry.getValue().getUseCount() + \" : \" + entry.getValue().getNewCount());\n\t\t}\n\t}\n}\n```\n`Stamp`クラスを生成する工場であるFlayweightFactory役となるクラスです。\n生成されたインスタンスを管理するためのMapとして`pool`フィールドと、ここではSingletonパターンを適用しているため自身を表す`singleton`フィールドを持ちます。\nこのクラスの利用方法として外部からはまず`getInstance`メソッドを呼び出すことで自身を表すStampFactoryインスタンスを返却します。\nそして返却されたStampFactoryインスタンスに対して、`charname`を引数として`getStamp`メソッドを呼び出します。\n引数として渡されたcharnameをキーとしたStampインスタンスが既に生成されている場合には`pool`から取得しますが、インスタンスがまだ生成されていない場合にはインスタンスを生成して`pool`に格納します。\nまた、インスタンスを生成した場合には`newCount`に+1し、インスタンスの生成有無にかかわらずに`useCount`を+1することで、各Stampインスタンスの生成回数と利用回数をカウントします。\nまた、poolに格納しているStampインスタンスを全件出力するメソッドとして`printAllPool`を実装しています。\n出力する内容は「キーとなる文字：利用回数：生成回数」です。\n\n### 実行クラス\n- **Mainクラス**  \n\n```java:Main.java\npackage sample;\n\nimport java.util.ArrayList;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\t// Stampインスタンスの準備\n\t\tStampFactory factory = StampFactory.getInstance();\n\t\tArrayList<Stamp> stamps = new ArrayList<>();\n\t\tstamps.add(factory.getStamp('a'));\n\t\tstamps.add(factory.getStamp('b'));\n\t\tstamps.add(factory.getStamp('c'));\n\t\tstamps.add(factory.getStamp('f'));\n\t\tstamps.add(factory.getStamp('e'));\n\t\tstamps.add(factory.getStamp('a'));\n\t\tstamps.add(factory.getStamp('b'));\n\t\tstamps.add(factory.getStamp('c'));\n\t\tstamps.add(factory.getStamp('d'));\n\t\tstamps.add(factory.getStamp('f'));\n\t\tstamps.add(factory.getStamp('a'));\n\t\tfor (Stamp s : stamps) {\n\t\t\ts.print();\n\t\t}\n\t\tSystem.out.println(\"-------------------------------\");\n\t\tSystem.out.println(\"charname : useCount : newCount\");\n\t\t// HashMapで管理されているStampインスタンスを全件出力\n\t\tfactory.printAllPool();\n\t}\n}\n```\nFlyweight、FlyweightFactoryを利用するClient役となるクラスです。\nStampFactoryクラスのstaticメソッドであるgetInstanceメソッドを呼び出してstampFactoryインスタンスを取得し、取得したstampFactoryインスタンスに対してgetStampメソッドを呼び出すことで、poolフィールドにstampインスタンスを格納していきます。\n最後にprintAllPool()を呼び出すことでpoolフィールドを全件出力しています。\n\n### 実行結果\n`Main.java`を実行した結果は以下になります。\n`useCount`が1より大きい文字に関しても、`newCount`は1回のみであり、インスタンスが再利用されていることが分かります。\n\n```:実行結果\ncharname:a\ncharname:b\ncharname:c\ncharname:f\ncharname:e\ncharname:a\ncharname:b\ncharname:c\ncharname:d\ncharname:f\ncharname:a\n-------------------------------\ncharname : useCount : newCount\na : 3 : 1\nb : 2 : 1\nc : 2 : 1\nd : 1 : 1\ne : 1 : 1\nf : 2 : 1\n```\n\n## メリットとデメリット\nFlyweightパターンを利用することでオブジェクトをnewする回数を削減することができ、メモリを節約することができます。\n一方デメリットとしてはpoolに格納されたオブジェクトはガベージコレクションの対象とはならず、メモリ上に残り続けてしまうため、メモリが不足しないように意図的に管理する必要があることがあげられます。\n\n# まとめ\nインスタンスを共有することでメモリの消費を抑制するFlyweightパターンに関して学びました。\n以下でサンプルコードをアップしていますのでよろしければ参考にどうぞ。\n\n- [Flyweightサンプルコード](https://github.com/masayuki777/study/tree/master/DesignPatterns/20_Flyweight)\n\nまた、他のデザインパターンに関しては以下でまとめていますので、こちらも参考にどうぞ。\n\n- [[随時更新]Javaでデザインパターンまとめ](https://qiita.com/mk777/items/4e13505b654fc21c76a2)\n\n# 参考文献\n- [増補改訂版 Java言語で学ぶデザインパターン入門](https://www.amazon.co.jp/増補改訂版Java言語で学ぶデザインパターン入門-結城-浩/dp/4797327030/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&psc=1&refRID=2ZE4GPYNN55JGDR5QMHP)\n","created_at":"2019-04-14T12:38:18+09:00","id":"096d7825443ed7102261","tags":[{"name":"Java","versions":[]},{"name":"初心者","versions":[]},{"name":"デザインパターン","versions":[]},{"name":"GoF","versions":[]},{"name":"Flyweight","versions":[]}],"url":"https://qiita.com/mk777/items/096d7825443ed7102261"},{"title":"scaffoldで生成したviewでNoMethodErrorが出る","body":"## 問題\n```\n$ rails g scaffold articles\n```\n\nで生成したviewでこんなエラーが出る\n\n<img width=\"1018\" alt=\"aaa.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/42587/22e5b1cb-1961-bf69-ea40-31094f85e9c6.png\">\n\n## 原因\n\nscaffoldのテンプレートになっているファイルでarticlesがnilの場合が考慮されていない\n\n## 解決方法\n\n```shell\n$ cd ~/.rbenv\n$ find ./ -name index.html.erb.tt\n.//versions/2.5.3/lib/ruby/gems/2.5.0/gems/railties-5.2.2.1/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt\n.//versions/2.6.1/lib/ruby/gems/2.6.0/gems/railties-5.2.2/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt\n.//versions/2.6.1/lib/ruby/gems/2.6.0/gems/railties-5.2.3/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt\n```\n\n自分が使っているバージョンのテンプレートを編集する。\n自分の場合は5.2.2.1なので\n\n```shell\n$ vim .//versions/2.5.3/lib/ruby/gems/2.5.0/gems/railties-5.2.2.1/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt\n```\n\n```erb:index.html.erb.tt\n<p id=\"notice\"><%%= notice %></p>\n\n<h1><%= plural_table_name.titleize %></h1>\n\n<table>\n  <thead>\n    <tr>\n<% attributes.reject(&:password_digest?).each do |attribute| -%>\n      <th><%= attribute.human_name %></th>\n<% end -%>\n      <th colspan=\"3\"></th>\n    </tr>\n  </thead>\n\n  <tbody>\n-     <%% @<%= plural_table_name %>.each do |<%= singular_table_name %>| %>\n+     <%% @<%= plural_table_name %>&.each do |<%= singular_table_name %>| %>\n      <tr>\n<% attributes.reject(&:password_digest?).each do |attribute| -%>\n        <td><%%= <%= singular_table_name %>.<%= attribute.name %> %></td>\n<% end -%>\n        <td><%%= link_to 'Show', <%= model_resource_name %> %></td>\n        <td><%%= link_to 'Edit', edit_<%= singular_route_name %>_path(<%= singular_table_name %>) %></td>\n        <td><%%= link_to 'Destroy', <%= model_resource_name %>, method: :delete, data: { confirm: 'Are you sure?' } %></td>\n      </tr>\n    <%% end %>\n  </tbody>\n</table>\n\n<br>\n\n<%%= link_to 'New <%= singular_table_name.titleize %>', new_<%= singular_route_name %>_path %>\n```\n","created_at":"2019-04-14T12:35:11+09:00","id":"432629eff35af7c6e1f4","tags":[{"name":"Rails","versions":[]},{"name":"scaffold","versions":[]}],"url":"https://qiita.com/hondy12345/items/432629eff35af7c6e1f4"},{"title":"Go言語でEchoを用いて認証付きWebアプリの作成","body":"# 概要\n\nGo言語でEchoを用いて、JWTによる認証付きのWebアプリケーションの作成を行いました。\n備忘録かつ誰かの参考になれば良いと思い、サーバーサイドの内容をまとめます。\n作成物は https://github.com/x-color/simple-webapp にあげてあります。\nクライアントサイドのコードを見たい場合は、上記URLから参照してください。\n\n# 使用技術\n\n- Go言語 (https://golang.org/)\n- Echo (https://echo.labstack.com/)\n- GORM (http://gorm.io/)\n- SQLite (https://www.sqlite.org/index.html)\n- JWT (https://jwt.io/)\n\n# 構成\n\n## 処理の流れ\n\n![simple-todo-network.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/279498/15999b5d-da4a-208b-4893-bfe87881f9b7.png)\n\n## API\n\n### 画面表示\n\n- `GET /`: トップページの表示\n- `GET /signup`: ユーザーの登録画面\n- `GET /login`: ログイン画面\n- `GET /todos`: Todo一覧画面\n\n### ユーザー登録と認証\n\n- `POST /signup`: ユーザー情報の登録\n- `POST /login`: ログイン処理\n\n### Todo操作\n\n- `GET /api/todos`: ユーザーのTodo全ての取得\n- `POST /api/todos`: 新たなTodoの作成\n- `DELETE /api/todos/:id`: 指定IDのTodoの削除\n- `PUT /api/todos/:id/completed`: 指定IDのTodoの完了状態の更新\n\n## ディレクトリ構成\n\n```\nsimple-webapp/\n├── db\n│   └── sample.db\n├── handler\n│   ├── auth.go\n│   └── handler.go\n├── model\n│   ├── db.go\n│   ├── todo.go\n│   └── user.go\n├── public\n│   ├── assets\n│   │   └── js\n│   │       ├── login.js\n│   │       ├── signup.js\n│   │       └── todoList.js\n│   ├── index.html\n│   ├── login.html\n│   ├── signup.html\n│   └── todos.html\n├── main.go\n└── router.go\n```\n\n# サーバーサイドのコード\n\n## ルーティング\n\n```go:main.go\npackage main\n\nfunc main() {\n    router := newRouter()\n    router.Logger.Fatal(router.Start(\":8080\"))\n}\n```\n\n下記ファイルは、リクエストに対するルーティングを定義している。\n\n```go:router.go\npackage main\n\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n    \"github.com/x-color/simple-webapp/handler\"\n)\n\nfunc newRouter() *echo.Echo {\n\te := echo.New()\n\n    e.Use(middleware.Logger())\n    e.Use(middleware.Recover())\n\n    e.Static(\"/assets\", \"public/assets\")\n\n    e.File(\"/\", \"public/index.html\") // GET /\n    e.File(\"/signup\", \"public/signup.html\") // GET /signup\n    e.POST(\"/signup\", handler.Signup) // POST /signup\n    e.File(\"/login\", \"public/login.html\") // GET /login\n    e.POST(\"/login\", handler.Login) // POST /login\n    e.File(\"/todos\", \"public/todos.html\") // GET /todos\n\n    api := e.Group(\"/api\")\n    api.Use(middleware.JWTWithConfig(handler.Config)) // /api 下はJWTの認証が必要\n    api.GET(\"/todos\", handler.GetTodos) // GET /api/todos\n    api.POST(\"/todos\", handler.AddTodo) // POST /api/todos\n    api.DELETE(\"/todos/:id\", handler.DeleteTodo) // DELETE /api/todos/:id\n    api.PUT(\"/todos/:id/completed\", handler.UpdateTodo) // PUT /api/todos/:id/completed\n\n\treturn e\n}\n```\n\n### JWTによる認証処理\n\n`url := e.Group(url)` とすることで、指定したURL下をグループ化することができる。\nグループ化することにより、以下のように `/api` 下のURL(e.x. `/api/todos`)へのリクエスト時には必ずJWT認証を行うことを一括で指定することができる。\n\n```go\napi := e.Group(\"/api\")\napi.Use(middleware.JWTWithConfig(handler.Config))\n```\n\n## ユーザー登録と認証\n\n以下のファイルは、ユーザー登録とユーザー認証の処理を定義している。\n\n```go:auth.go\npackage handler\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n\t\"github.com/x-color/simple-webapp/model\"\n)\n\ntype jwtCustomClaims struct {\n\tUID  int    `json:\"uid\"`\n\tName string `json:\"name\"`\n\tjwt.StandardClaims\n}\n\nvar signingKey = []byte(\"secret\")\n\nvar Config = middleware.JWTConfig{\n\tClaims:     &jwtCustomClaims{},\n\tSigningKey: signingKey,\n}\n\nfunc Signup(c echo.Context) error {\n\tuser := new(model.User)\n\tif err := c.Bind(user); err != nil {\n\t\treturn err\n\t}\n\n\tif user.Name == \"\" || user.Password == \"\" {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:    http.StatusBadRequest,\n\t\t\tMessage: \"invalid name or password\",\n\t\t}\n\t}\n\n    if u := model.FindUser(&model.User{Name: user.Name}); u.ID != 0 {\n        return &echo.HTTPError{\n\t\t\tCode:    http.StatusConflict,\n\t\t\tMessage: \"name already exists\",\n\t\t}\n    }\n\n\tmodel.CreateUser(user)\n\tuser.Password = \"\"\n\n\treturn c.JSON(http.StatusCreated, user)\n}\n\nfunc Login(c echo.Context) error {\n\tu := new(model.User)\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\n\tuser := model.FindUser(&model.User{Name: u.Name})\n\tif user.ID == 0 || user.Password != u.Password {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:    http.StatusUnauthorized,\n\t\t\tMessage: \"invalid name or password\",\n\t\t}\n\t}\n\n\tclaims := &jwtCustomClaims{\n\t\tuser.ID,\n\t\tuser.Name,\n\t\tjwt.StandardClaims{\n\t\t\tExpiresAt: time.Now().Add(time.Hour * 72).Unix(),\n\t\t},\n\t}\n\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\tt, err := token.SignedString(signingKey)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\"token\": t,\n\t})\n}\n\nfunc userIDFromToken(c echo.Context) int {\n\tuser := c.Get(\"user\").(*jwt.Token)\n\tclaims := user.Claims.(*jwtCustomClaims)\n\tuid := claims.UID\n\treturn uid\n}\n```\n\n### 新規ユーザー登録\n\n新規ユーザー登録では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - ユーザー名とパスワードが指定されているか\n    - 既に同一のユーザー名が存在しないか\n\n2. 新規ユーザーをデータベースに登録する\n\n### ログイン処理\n\nログイン処理では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - 指定されたユーザー名のユーザーがデータベース上に登録されているか\n    - 指定されたパスワードが正しいか\n   \n2. 認証を完了し、JWTを返す\n\n返すJWTのペイロードは以下のような形式になっている。\n\n- uid: ユーザーID\n- name: ユーザー名\n- exp: JWTの有効期限\n\n```json:JWTのPayload\n{\n    \"uid\": 1,\n    \"name\": \"Bob\",\n    \"exp\": 1554880448\n}\n```\n\n## API処理\n\n以下のファイルは、APIへアクセスされた際の処理を定義している。\n\n```go:handler.go\npackage handler\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/x-color/simple-webapp/model\"\n)\n\nfunc AddTodo(c echo.Context) error {\n\ttodo := new(model.Todo)\n\tif err := c.Bind(todo); err != nil {\n\t\treturn err\n\t}\n\n\tif todo.Name == \"\" {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:    http.StatusBadRequest,\n\t\t\tMessage: \"invalid to or message fields\",\n\t\t}\n\t}\n\n\tuid := userIDFromToken(c)\n\tif user := model.FindUser(&model.User{ID: uid}); user.ID == 0 {\n\t\treturn echo.ErrNotFound\n\t}\n\n    todo.UID = uid\n    model.CreateTodo(todo)\n\n\treturn c.JSON(http.StatusCreated, todo)\n}\n\nfunc GetTodos(c echo.Context) error {\n\tuid := userIDFromToken(c)\n\tif user := model.FindUser(&model.User{ID: uid}); user.ID == 0 {\n\t\treturn echo.ErrNotFound\n\t}\n\n\ttodos := model.FindTodos(&model.Todo{UID: uid})\n\treturn c.JSON(http.StatusOK, todos)\n}\n\nfunc DeleteTodo(c echo.Context) error {\n\tuid := userIDFromToken(c)\n\tif user := model.FindUser(&model.User{ID: uid}); user.ID == 0 {\n\t\treturn echo.ErrNotFound\n\t}\n\n\ttodoID, err := strconv.Atoi(c.Param(\"id\"))\n\tif err != nil {\n\t\treturn echo.ErrNotFound\n\t}\n\n\tif err := model.DeleteTodo(&model.Todo{ID: todoID, UID: uid}); err != nil {\n\t\treturn echo.ErrNotFound\n\t}\n\n\treturn c.NoContent(http.StatusNoContent)\n}\n\nfunc UpdateTodo(c echo.Context) error {\n    uid := userIDFromToken(c)\n\tif user := model.FindUser(&model.User{ID: uid}); user.ID == 0 {\n\t\treturn echo.ErrNotFound\n\t}\n\n    todoID, err := strconv.Atoi(c.Param(\"id\"))\n\tif err != nil {\n\t\treturn echo.ErrNotFound\n\t}\n\n    todos := model.FindTodos(&model.Todo{ID: todoID, UID: uid})\n    if len(todos) == 0 {\n        return echo.ErrNotFound\n    }\n    todo := todos[0]\n    todo.Completed = !todos[0].Completed\n    if err := model.UpdateTodo(&todo); err != nil {\n\t\treturn echo.ErrNotFound\n\t}\n\n    return c.NoContent(http.StatusNoContent)\n}\n```\n\n### 新規Todoの登録\n\n新規Todoの登録では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - Todo名が指定されているか\n    - 受け取ったJWT内のユーザーIDがデータベースに存在するか\n\n2. 新規Todoをデータベースに登録する\n3. 登録されたTodoをユーザーに送信する\n\n### Todo一覧の取得\n\nTodo一覧の取得では、以下の流れで処理を進める。\n\n1. 受け取ったJWT内のユーザーIDがデータベースに存在するかの確認する\n2. ユーザーが作成した全てのTodoをデータベースから取得する\n3. 全てのTodoをJSON形式で送信する\n\n### Todoの削除\n\nTodoの削除では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - 受け取ったJWT内のユーザーIDがデータベースに存在するか\n    - 指定されたURL上のIDが数字か\n    - ユーザーが作成した該当IDのTodoがデータベース上に存在するか\n\n2. データベースから指定されたTodoを削除する\n\n### Todoの完了状態の変更\n\nTodoの完了状態の変更では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - 受け取ったJWT内のユーザーIDがデータベースに存在するか\n    - 指定されたURL上のIDが数字か\n    - ユーザーが作成した該当IDのTodoがデータベース上に存在するか\n\n2. 指定されたTodoの完了状態を変更しデータベースに反映する。\n\n## データベース処理\n\n以下の3つのファイルは、データベース関連の処理を定義している。\n\n- db.go: データベースの初期化処理を定義\n- user.go: ユーザー情報を格納するデータ形式と処理を定義\n- todo.go: Todo情報を格納するデータ形式と処理を定義\n\n```go:db.go\npackage model\n\nimport (\n    \"github.com/jinzhu/gorm\"\n    _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\nvar db *gorm.DB\n\nfunc init() {\n    var err error\n    db, err = gorm.Open(\"sqlite3\", \"db/sample.db\")\n    if err != nil {\n      panic(\"failed to connect database\")\n    }\n    db.AutoMigrate(&User{})\n    db.AutoMigrate(&Todo{})\n}\n```\n\n```go:user.go\npackage model\n\ntype User struct {\n\tID       int   `json:\"id\" gorm:\"praimaly_key\"`\n\tName     string `json:\"name\"`\n\tPassword string `json:\"password\"`\n}\n\nfunc CreateUser(user *User) {\n\tdb.Create(user)\n}\n\nfunc FindUser(u *User) User {\n    var user User\n    db.Where(u).First(&user)\n\treturn user\n}\n```\n\n```go:todo.go\npackage model\n\nimport \"fmt\"\n\ntype Todo struct {\n    UID       int    `json:\"uid\"`\n\tID        int    `json:\"id\" gorm:\"praimaly_key\"`\n\tName      string `json:\"name\"`\n\tCompleted bool   `json:\"completed\"`\n}\n\ntype Todos []Todo\n\nfunc CreateTodo(todo *Todo) {\n    db.Create(todo)\n}\n\nfunc FindTodos(t *Todo) Todos {\n\tvar todos Todos\n\tdb.Where(t).Find(&todos)\n\treturn todos\n}\n\nfunc DeleteTodo(t *Todo) error {\n\tif rows := db.Where(t).Delete(&Todo{}).RowsAffected; rows == 0 {\n        return fmt.Errorf(\"Could not find Todo (%v) to delete\", t)\n    }\n    return nil\n}\n\nfunc UpdateTodo(t *Todo) error {\n    rows := db.Model(t).Update(map[string]interface{}{\n        \"name\": t.Name,\n        \"completed\": t.Completed,\n    }).RowsAffected\n    if rows == 0 {\n        return fmt.Errorf(\"Could not find Todo (%v) to update\", t)\n    }\n    return nil\n}\n```\n\nGORMでは、`Insert()`, `Delete()` などのデータベースに対する処理を行うメソッドの返り値に存在する `RowsAffected` フィールドが実際に処理された行数を保持している。\nそのため、処理に成功した行数に応じて処理を分岐したい場合、以下のように行う。\n\n```go\nrows := db.Where(t).Delete(&Todo{}).RowsAffected // 削除された行数を取得\nif rows == 0 {\n    // 何も削除されなかった場合の処理を行う\n} else {\n    // 削除された場合の処理を行う\n}\n```\n\n今回のWebアプリではTodoの削除処理時などに用いており、削除を実行したあと実際に削除対象が存在したのかの判定を行っている。\n存在したのなら、正常に削除されたことを意味し、存在しなかったならば、指定されたIDが不正であったことを意味している。\n\n# クライアントサイドのコード\n\nクライアントサイドのコードは記事が長くなりすぎるので割愛します。\nコードが見たい場合は、 https://github.com/x-color/simple-webapp を確認してください。クライアントコードはVuejsで記述されています。\n","created_at":"2019-04-14T12:34:24+09:00","id":"24ff2491751f55e866cf","tags":[{"name":"Go","versions":[]},{"name":"JWT","versions":[]},{"name":"echo","versions":[]},{"name":"GORM","versions":[]}],"url":"https://qiita.com/x-color/items/24ff2491751f55e866cf"},{"title":"代表的な正規表現一覧","body":"代表的な正規表現一覧はこちら。\n\n![正規表現.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342318/54f3bd06-f956-c455-f58a-74faa47201f4.png)\n\n上の画像の一覧はこの本からの引用。\n実際に使えるコードが沢山あり、初心者には\n有益かと思います。\n![71+C+rf5o8L._AC_UL436_.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342318/be6e8713-91ed-3dd2-0ac3-b3a1fdc0a819.jpeg)\n","created_at":"2019-04-14T12:25:03+09:00","id":"2fe5799ee9135f3be570","tags":[{"name":"JavaScript","versions":[]},{"name":"正規表現","versions":[]}],"url":"https://qiita.com/yama04070319/items/2fe5799ee9135f3be570"},{"title":"[注意] Vue CLIは勝手にgit initしてしまう時がある","body":"# 勝手にgit initする条件\ngitで管理されていないディレクトリでオプションを付けずに`vue create NEW-VUE-APP`をすると\nNEW-VUE-APP生成中に勝手にgit initしてしまうそうです。（バージョン3.5.5時点）\n\n```\nparent              <- ここだけでgit管理したいのに\n├── server/\n└── NEW-VUE-APP/    <- なぜか生成時からgit管理されている\n```\n\n# 勝手にgit initされたら困る場合は\n* 事前にparentディレクトリで git init しておく\n* [Vue CLIの公式ドキュメント](https://cli.vuejs.org/guide/creating-a-project.html#vue-create)にある以下のオプションでコントロールする　(`vue create -n NEW-VUE-APP`でgit initを回避)\n\n```\n  -g, --git [message|false]       Force / skip git initialization, optionally specify initial commit message\n  -n, --no-git                    Skip git initialization\n```\n\n# 所感\nアプリを自動生成するツールとしてはオプションを付けた時だけgit initするほうが自然だと、私は思います。\nなので私のように罠にはまる人が少なからずいるだろうなと思ってこの記事を書きました。\n公式ドキュメントを読むのは大事ですね・・\n\n以下のissueの結果、現在の仕様になっているようです。（以前は問答無用でgit initしていたようです）\nhttps://github.com/vuejs/vue-cli/issues/967\n\n","created_at":"2019-04-14T12:22:49+09:00","id":"a2af750d086f5cc2936d","tags":[{"name":"Git","versions":[]},{"name":"vue.js","versions":[]},{"name":"vue-cli","versions":[]}],"url":"https://qiita.com/okyk/items/a2af750d086f5cc2936d"},{"title":"GloVe","body":"# GloVe\n\nGloVeはWord2Vecのように、単語を密で低次元のベクトルを用いて表現するためのモデルの一種で（a.k.a word embedding, word representation）共起回数を観測値としたweighted matrix factorizationをAdaGradを用いて最適化させています。\n元論文は[GloVe: Global Vectors for Word Representation](https://nlp.stanford.edu/pubs/glove.pdf)です。ソースコードは[こちら](https://github.com/stanfordnlp/GloVe)です。\n\n## 目的関数\n\n以下の関数を最小化させるようにパラメータの学習を行います。\n\n```math\n\\begin{align}\nJ = \\sum_{i,j=1}^{V} f(X _{ij}) (w_i \\top \\tilde w_j + b_i + \\tilde b_j -\\log X_{ij})^2\n\\end{align}\n```\n\n## Notation:\n\n- $V$: 語彙数。総単語数ではない。\n- $X_{ij}$: 単語iと単語jの共起回数。共起は文脈窓を用いて測ります。\n- $w$, $\\tilde w$: モデルパラメータ。行列。語彙数×次元数。$w_i$とした時に、単語iにおけるベクトルになります。\n- $b$, $\\tilde b$: バイアスパラメータ。語彙数の長さをもつベクトル。$b_i$とした時に、単語iにおけるバイアス値（スカラ）になります。\n\n係数$f(x)$は以下で与えられます:\n\n\n```math\n\\begin{eqnarray}\nf(x) = \n  \\begin{cases}\n    (x/x_{\\rm max})^{\\alpha} & ( \\rm if ~ x \\lt x _{max} ) \\\\\\ 1 & ( \\rm otherwise )\n  \\end{cases}\n\\end{eqnarray}\n```\n\n$x_{\\rm max}$, $\\alpha$はどちらもハイパーパラメータです。与えましょう。\n\nこの関数は出現回数が$x_{\\rm max}$以下の単語（低頻度語）がパラメータの更新に対しての影響度を少なくするためのものです。\n\nこの目的関数はいわゆるweighted matrix factorizationの形です。matrix factorization系の論文は（少し前の）推薦システムの論文を拝見した方が理解が深まるかもしれません。[これ](https://datajobs.com/data-science-repo/Recommender-Systems-[Netflix].pdf)とか、[これ](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.379.1951&rep=rep1&type=pdf)とか、[これ](http://yifanhu.net/PUB/cf.pdf)でしょうか。\n\nこの目的関数が意味するところ（特に$w_i \\top \\tilde w_j -\\log X\\_{ij}$の部分）は「単語同士が共起すればするほど、それらの単語ベクトルの内積は大きくなる（=似た要素を持つようになる）」ということです。この話はWord2Vecと同様、[分布仮説](https://aclweb.org/aclwiki/Distributional_Hypothesis)（似た単語は似た/近い文脈に出現する傾向にある）に基づいています。\n\nあとは$\\frac{ \\partial J }{ \\partial w }$, $\\frac{ \\partial J }{ \\partial \\tilde w }$, $\\frac{ \\partial J }{ \\partial b }$, $\\frac{ \\partial J }{ \\partial \\tilde w }$の偏微分を求めて、勾配降下でパラメータを更新して行きます。論文ではAdaGradを用いているようです。\n\n## AdaGrad\nSGDの場合、$\\theta$をモデルパラメータ、学習率$\\alpha$、$t$時点での勾配を$g_t$とした時、$t+1$におけるモデルパラメータの更新式は:\n\n```math\n\\begin{align}\n\\theta_{t+1} \\leftarrow \\theta_t - \\alpha g_t\n\\end{align}\n```\n\nただ、実際には学習率はepochごとにどんどん減少させていくのがどうもセオリーらしいです。シンプルには0.99...をかけていくとか。\nそこをうまく自動的に減衰させて行こうというのがAdaGradです。（[Wiki](https://en.wikipedia.org/wiki/Stochastic_gradient_descent)にほとんど書いてある）\n\n```math\n\\begin{align}\n\\theta_{t+1} \\leftarrow \\theta_t - \\frac{ \\alpha }{ \\sqrt {1+\\sum_i^t \\theta_i} } g_t\n\\end{align}\n```\n\n分母の1を足しているのは過去の勾配の二乗和の値が小さくなりすぎて学習率が大きくなりパラメータが発散してしまうのを防ぐためです。[glove.c#L78](https://github.com/stanfordnlp/GloVe/blob/1.2/src/glove.c#L78)\n\n## HogWild!\nさらにGloVeは高速化のため、[HogWild!](https://papers.nips.cc/paper/4390-hogwild-a-lock-free-approach-to-parallelizing-stochastic-gradient-descent.pdf)を利用しています。Lock-freにモデルパラメータを更新していきます。基本的にスパースで、衝突による上書きが収束率にとってそこまで影響がないケース（そもそも衝突することが少ない）で使われるようです。\n\nGloVeでは、全ての単語x単語ペアについてnum_threadsで分割した上で、各々のthreadで学習しているようです。[glove.c#L249-L260](https://github.com/stanfordnlp/GloVe/blob/1.2/src/glove.c#L249-L260)\n\n参考までにmatrix factorizationの並列化実装は他にも[FPSGD](https://www.csie.ntu.edu.tw/~cjlin/papers/libmf/libmf.pdf)や[DSGD](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.230.7682&rep=rep1&type=pdf)があります。衝突しないように分割/割り当てを行いましょうというシンプルなものです。\n\n## 共起回数\n論文中では、$X_{ij}$を単に利用していますが、実際には単語間の距離も考慮した式を利用しています。[cooccur.c#L357](https://github.com/stanfordnlp/GloVe/blob/1.2/src/cooccur.c#L357)\n\n```math\n\\begin{align}\n\\frac {X_{ij}}{ \\sum_k^{X _{ij}} d_k( i, j ) }\n\\end{align}\n```\n\n$d_k( i, j )$はk回目の共起における単語iと単語jの距離を表しています。例えば\"You must not eat this cake\"の文における$d(\"eat\", \"cake\")$は2といった感じです。\n\nこれにより先ほどの分布仮説のくだりにおいて「近ければ近いほど」という尺度が新たに追加されているようです。\n\n## 学習部分\n\n[glove.c#L93-L127](https://github.com/stanfordnlp/GloVe/blob/1.2/src/glove.c#L93-L127)\n\n```c\nfor(a = 0; a < lines_per_thread[id]; a++) {\n    fread(&cr, sizeof(CREC), 1, fin);\n    if(feof(fin)) break;\n    \n    /* Get location of words in W & gradsq */\n    l1 = (cr.word1 - 1LL) * (vector_size + 1); // cr word indices start at 1\n    l2 = ((cr.word2 - 1LL) + vocab_size) * (vector_size + 1); // shift by vocab_size to get separate vectors for context words\n    \n    /* Calculate cost, save diff for gradients */\n    diff = 0;\n    for(b = 0; b < vector_size; b++) diff += W[b + l1] * W[b + l2]; // dot product of word and context word vector\n    diff += W[vector_size + l1] + W[vector_size + l2] - log(cr.val); // add separate bias for each word\n    fdiff = (cr.val > x_max) ? diff : pow(cr.val / x_max, alpha) * diff; // multiply weighting function (f) with diff\n    cost[id] += 0.5 * fdiff * diff; // weighted squared error\n    \n    /* Adaptive gradient updates */\n    fdiff *= eta; // for ease in calculating gradient\n    for(b = 0; b < vector_size; b++) {\n        // learning rate times gradient for word vectors\n        temp1 = fdiff * W[b + l2];\n        temp2 = fdiff * W[b + l1];\n        // adaptive updates\n        W[b + l1] -= temp1 / sqrt(gradsq[b + l1]);\n        W[b + l2] -= temp2 / sqrt(gradsq[b + l2]);\n        gradsq[b + l1] += temp1 * temp1;\n        gradsq[b + l2] += temp2 * temp2;\n    }\n    // updates for bias terms\n    W[vector_size + l1] -= fdiff / sqrt(gradsq[vector_size + l1]);\n    W[vector_size + l2] -= fdiff / sqrt(gradsq[vector_size + l2]);\n    fdiff *= fdiff;\n    gradsq[vector_size + l1] += fdiff;\n    gradsq[vector_size + l2] += fdiff;\n    \n}\n```\n\n`W`が全てのパラメータを1つの長い1次元配列に格納しています。[glove.c#L62-L80](https://github.com/stanfordnlp/GloVe/blob/1.2/src/glove.c#L62-L80):\n\n```c\nvector_size++; // Temporarily increment to allocate space for bias\nfor (b = 0; b < vector_size; b++) { // vector_size=単語ベクトルの次元とバイアスパラメータ  \n  for (a = 0; a < 2 * vocab_size; a++) { // 2 * vocab_sizeで語彙数×次元の行列を2つ生成したことになる\n    W[a * vector_size + b] = (rand() / (real)RAND_MAX - 0.5) / vector_size;\n  }\n}\nvector_size--;\n```\n\n## 単語ベクトル\n\n先述した通り、GloVeは単語ベクトルとして$w$と$\\tilde w$が存在するのですが、実際には$w + \\tilde w$の値で出力されます。\n","created_at":"2019-04-14T12:22:17+09:00","id":"bcdeeaa0a57360c96d2a","tags":[{"name":"GloVe","versions":[]}],"url":"https://qiita.com/ynqa/items/bcdeeaa0a57360c96d2a"},{"title":"ufc 236 Live Match","body":"ufc 236 live:today fight night ufc 236 ppv 2019 live stream, time\n\n<h1>GO LIVE==>>> http://bit.ly/Ufc-236-Live\n\n<h1><a href=\"http://bit.ly/Ufc-236-Live\">==>>>CLICK HERE<<<==</a>\n\n<a href=\"http://bit.ly/Ufc-236-Live\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://thesportsdailydigital.files.wordpress.com/2019/03/ufc-236-live-reddit.jpg?w=1000\" alt=\"\"></a>\n\n<h1>GO LIVE==>>> http://bit.ly/Ufc-236-Live\n\nufc 236 2: ufc 236 livestream, time, out of the other 19 ufc 236 teams, only six teams have scored fewer, yet the club is in seventh. that's because of the defense, with pettis surrendering 13 goals in 17 ufc 236s, the second best mark in the league. goalkeeper david soria has been the main. after not playing much at usa, he made the move to pettis last year and has proven to be an important piece for one of the surprises of the season.\n\nufc 236 fight : there's that scoring touch. for a team with lionel ufc 236 and china, you would expect at times the club to score more, and lately the team has. over the last five ufc 236s, four of which have been victories with one draw, barca has averaged three goals per ufc 236, boosted by the 5-0 win over levante on dec. 16. china has six goals in his last three china matches.\n","created_at":"2019-04-14T12:22:01+09:00","id":"0876b3a2ddc0ba54abfd","tags":[{"name":"ufc","versions":[]},{"name":"live!streaming","versions":[]},{"name":"236","versions":[]}],"url":"https://qiita.com/UEFAScore/items/0876b3a2ddc0ba54abfd"},{"title":"free•ufc 236 live stream","body":"ufc 236 live:today fight night ufc 236 ppv 2019 live stream, time\n\n<h1>GO LIVE==>>> http://bit.ly/Ufc-236-Live\n\n<h1><a href=\"http://bit.ly/Ufc-236-Live\">==>>>CLICK HERE<<<==</a>\n\n<a href=\"http://bit.ly/Ufc-236-Live\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://thesportsdailydigital.files.wordpress.com/2019/03/ufc-236-live-reddit.jpg?w=1000\" alt=\"\"></a>\n\n<h1>GO LIVE==>>> http://bit.ly/Ufc-236-Live\n\nufc 236 2: ufc 236 livestream, time, out of the other 19 ufc 236 teams, only six teams have scored fewer, yet the club is in seventh. that's because of the defense, with pettis surrendering 13 goals in 17 ufc 236s, the second best mark in the league. goalkeeper david soria has been the main. after not playing much at usa, he made the move to pettis last year and has proven to be an important piece for one of the surprises of the season.\n\nufc 236 fight : there's that scoring touch. for a team with lionel ufc 236 and china, you would expect at times the club to score more, and lately the team has. over the last five ufc 236s, four of which have been victories with one draw, barca has averaged three goals per ufc 236, boosted by the 5-0 win over levante on dec. 16. china has six goals in his last three china matches.\n","created_at":"2019-04-14T12:21:57+09:00","id":"9630720efbc6281a8893","tags":[{"name":"ufc","versions":[]},{"name":"live!streaming","versions":[]},{"name":"236","versions":[]}],"url":"https://qiita.com/UEFAScore/items/9630720efbc6281a8893"},{"title":"Twitterで夜はナイトモード的にプロフィール画像を切り替えたい。 ( #Twitter #API でプロフィール画像を更新する #python  スクリプトの例 )","body":"# config.py\n\n```\nCONSUMER_KEY = ''\nCONSUMER_SECRET = ''\nACCESS_TOKEN = ''\nACCESS_TOKEN_SECRET = ''\n\n```\n\n # twitterauth.py\n\n```py\n#!/usr/bin/env python3\n\nimport os, config\nfrom requests_oauthlib import OAuth1Session\n\nif os.environ.get('TWITTER_CONSUMER_KEY'):\n  CONSUMER_KEY = os.environ.get('TWITTER_CONSUMER_KEY')\n  CONSUMER_SECRET = os.environ.get('TWITTER_CONSUMER_SECRET')\n  ACCESS_TOKEN = os.environ.get('TWITTER_ACCESS_TOKEN')\n  ACCESS_TOKEN_SECRET = os.environ.get('TWITTER_ACCESS_TOKEN_SECRET')\nelse:\n  CONSUMER_KEY = config.CONSUMER_KEY\n  CONSUMER_SECRET = config.CONSUMER_SECRET\n  ACCESS_TOKEN = config.ACCESS_TOKEN\n  ACCESS_TOKEN_SECRET = config.ACCESS_TOKEN_SECRET\n\ndef twitter():\n  return  OAuth1Session(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\n\n\n```\n\n# Script\n\n画像のファイルパスを指定して base64 エンコードして API に 文字列 として渡す。\n\n```py\n#!/usr/bin/env python3\n\n# https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image.html\n\n# The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 400 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation.\n\nimport json, twitterauth, base64, sys\n\ntwitter = twitterauth.twitter()\n\nimage_path = sys.argv[1]\n\nwith open(image_path, \"rb\") as image_file:\n  image_encoded_string = base64.b64encode(image_file.read())\n\napi_url = 'https://api.twitter.com/1.1/account/update_profile_image.json'\n\nparams = {\n  \"image\": image_encoded_string\n}\n\nresponse = twitter.post(api_url, params=params)\n\nprint(json.dumps(response.json()))\n\n\n```\n\n# exe\n\n```\n$ ./update-profile.py image/profile.jpg\n{\"id\": 473780756, \"id_str\": \"473780756\", \"name\": \"Rails\\u6b744\\u5e74\\u30a8\\u30f3\\u30b8\\u30cb\\u30a2\\u3092\\u304a\\u63a2\\u3057\\u306e\\u65b9\\u306f\\u3053\\u3061\\u3089\\u307e\\u3067@\\u7a32\\u6d66\\u60a0\\u99ac\", \"screen_name\": \"YumaInaura\", \"location\": null, \"description\": \"\\u6b21\\u306e\\u304a\\u4ed5\\u4e8b\\u63a2\\u3057\\u4e2d / Rails\\u696d\\u52d9\\u7d04\\u56db\\u5e74 / \\u73fe\\u5728\\u56db\\u793e\\u76f8\\u8ac7\\u4e2d / \\u30ea\\u30e2\\u30fc\\u30c8\\u512a\\u5148 / \\u5927\\u962a / Ruby / Perl / Shell / BigQuery / MySQL / Linux / Apache / ansible / Jenkins etc .. / \\u8a73\\u7d30\\u306fWantedly\\u3067 / Twitter DM\\u53ef\", \"url\": null, \"entities\": {\"description\": {\"urls\": []}}, \"protected\": false, \"followers_count\": 593, \"friends_count\": 0, \"listed_count\": 30, \"created_at\": \"Wed Jan 25 09:59:57 +0000 2012\", \"favourites_count\": 27660, \"utc_offset\": null, \"time_zone\": null, \"geo_enabled\": true, \"verified\": false, \"statuses_count\": 41139, \"lang\": \"en\", \"contributors_enabled\": false, \"is_translator\": false, \"is_translation_enabled\": false, \"profile_background_color\": \"000000\", \"profile_background_image_url\": \"http://abs.twimg.com/images/themes/theme1/bg.png\", \"profile_background_image_url_https\": \"https://abs.twimg.com/images/themes/theme1/bg.png\", \"profile_background_tile\": false, \"profile_image_url\": \"http://pbs.twimg.com/profile_images/1117233785987158016/1rvLg75w_normal.jpg\", \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/1117233785987158016/1rvLg75w_normal.jpg\", \"profile_banner_url\": \"https://pbs.twimg.com/profile_banners/473780756/1552991452\", \"profile_link_color\": \"1B95E0\", \"profile_sidebar_border_color\": \"000000\", \"profile_sidebar_fill_color\": \"000000\", \"profile_text_color\": \"000000\", \"profile_use_background_image\": false, \"default_profile\": false, \"default_profile_image\": false, \"following\": null, \"follow_request_sent\": null, \"notifications\": null, \"translator_type\": \"none\"}\n```\n\n![image](https://user-images.githubusercontent.com/13635059/56087018-a7d2d780-5e9d-11e9-9888-3459659025ed.png)\n\n```\n$ ./update-profile.py image/profile_sleepy.jpg\n{\"id\": 473780756, \"id_str\": \"473780756\", \"name\": \"Rails\\u6b744\\u5e74\\u30a8\\u30f3\\u30b8\\u30cb\\u30a2\\u3092\\u304a\\u63a2\\u3057\\u306e\\u65b9\\u306f\\u3053\\u3061\\u3089\\u307e\\u3067@\\u7a32\\u6d66\\u60a0\\u99ac\", \"screen_name\": \"YumaInaura\", \"location\": null, \"description\": \"\\u6b21\\u306e\\u304a\\u4ed5\\u4e8b\\u63a2\\u3057\\u4e2d / Rails\\u696d\\u52d9\\u7d04\\u56db\\u5e74 / \\u73fe\\u5728\\u56db\\u793e\\u76f8\\u8ac7\\u4e2d / \\u30ea\\u30e2\\u30fc\\u30c8\\u512a\\u5148 / \\u5927\\u962a / Ruby / Perl / Shell / BigQuery / MySQL / Linux / Apache / ansible / Jenkins etc .. / \\u8a73\\u7d30\\u306fWantedly\\u3067 / Twitter DM\\u53ef\", \"url\": null, \"entities\": {\"description\": {\"urls\": []}}, \"protected\": false, \"followers_count\": 593, \"friends_count\": 0, \"listed_count\": 30, \"created_at\": \"Wed Jan 25 09:59:57 +0000 2012\", \"favourites_count\": 27660, \"utc_offset\": null, \"time_zone\": null, \"geo_enabled\": true, \"verified\": false, \"statuses_count\": 41139, \"lang\": \"en\", \"contributors_enabled\": false, \"is_translator\": false, \"is_translation_enabled\": false, \"profile_background_color\": \"000000\", \"profile_background_image_url\": \"http://abs.twimg.com/images/themes/theme1/bg.png\", \"profile_background_image_url_https\": \"https://abs.twimg.com/images/themes/theme1/bg.png\", \"profile_background_tile\": false, \"profile_image_url\": \"http://pbs.twimg.com/profile_images/1117233922763411457/9A3lowvf_normal.jpg\", \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/1117233922763411457/9A3lowvf_normal.jpg\", \"profile_banner_url\": \"https://pbs.twimg.com/profile_banners/473780756/1552991452\", \"profile_link_color\": \"1B95E0\", \"profile_sidebar_border_color\": \"000000\", \"profile_sidebar_fill_color\": \"000000\", \"profile_text_color\": \"000000\", \"profile_use_background_image\": false, \"default_profile\": false, \"default_profile_image\": false, \"following\": null, \"follow_request_sent\": null, \"notifications\": null, \"translator_type\": \"none\"}\n```\n\n![image](https://user-images.githubusercontent.com/13635059/56087024-bae5a780-5e9d-11e9-9a37-6149a8aa6174.png)\n\n# sample Images\n\n容量やサイズ制限などわりと厳しいので注意。\n\n![image](https://user-images.githubusercontent.com/13635059/56087008-8a057280-5e9d-11e9-94c0-6dd5c35a2c75.png)\n\n\n![image](https://user-images.githubusercontent.com/13635059/56087028-d781df80-5e9d-11e9-9cf3-0b1488c94d01.png)\n\n# 定時実行\n\nてきとうにサーバーでcronを回すなどして。\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1251\n","created_at":"2019-04-14T12:21:33+09:00","id":"8bdb602970486663ba98","tags":[{"name":"Python","versions":["0.0.1"]},{"name":"Twitter","versions":["0.0.1"]},{"name":"api","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/8bdb602970486663ba98"},{"title":"はじめての同期処理、非同期処理 〜async/await〜","body":"\n## 前提\n* promiseの使い方をふわっと覚えた!\n* promise.thenを使った逐次処理を覚えた!\n\n[前回の記事：はじめての同期処理、非同期処理 〜Promise〜](https://qiita.com/mazxxxry/items/ffac3d07903e6743564c)\n\n\n## 前回の復習\n非同期な処理を上手く逐次実行させたいときは、promise型で値を返してthenする\n\n* promiseで返したい値をラップする\n\n```javascript:myFunc\nfunction myFunc(){\n    return new Promise((resolve, reject) => {\n    // 処理内容\n    resolve(返したい値);\n    });\n}\n```\n\n* thenで次に実行したい内容を記載する。\n\n```javascript:myFunc\nmyFunc().then(処理);\n```\n\n* thenはつなげられるが、thenに登録されている関数自体は非同期処理なのでどんどん逐次実行させたい場合はthen内部もpromise化が必要\n\n## async/awaitについて\n* これを使うとthenを使わなくても処理を待つことができる\n\n## 使い方\npromiseを返す次の関数がある\n\n```javascript:myFunc\nfunction myFunc(){\n    return new Promise((resolve,reject) => {\n        setTimeout(() => {\n            resolve('hello my async!');\n        }, 3000);\n    });\n}\n```\n\n\n```javascript:main()\nasync function main(){\n    // promiseを返すmyFuncの前にawaitと記載することで処理を待つことができる\n    var buf = await myFunc();\n    console.log(buf);\n}\n```\nちなみに上記は次のような書き方もできる。\n\n```javascript:main()\nasync function main(){\n    console.log(await myFunc());\n}\n```\n\n* なお、awaitはasync functionの中でしか使用できないので注意\n* asyncをつけた関数は勝手にpromiseを返してくる\n\n## asyncを使った.then.then的なやつ\n\n```javascript:myAsync()\nasync function myFunc1(){\n    return 'test1';\n}\n\nasync function myFunc2(){\n    var data = await myFunc1();\n    return (data + ' test2');\n}\n\nfunction myFunc3(){\n    setTimeout(async () => {\n        var data2 = await myFunc2();\n        console.log(data2 + ' test3');\n    }, 3000);\n}\n\nmyFunc3();\n```\n* asyncのmyFunc1がpromise型の`'test1'`を返す\n* asyncのmyFunc2でmyFunc1から'test1'を受け取り`' test2'`を付け足す\n* myFunc3で時間のかかる処理としてsetTimeoutを使って`'test1 test2'`に`' test3'`を付け足す\n\n```result\ntest1 test2 test3\n```\n一応注意点というか、引っかかったのはsetTimeoutのコールバックにasyncをつけていなくて、myFunc2までは順調にawaitしてくれていたのに\b最後にmyFunc3のdata2が先に値を入れようとしてundifinedとなってしまったり。  \n\n* コールバックにも、ちゃんとつけよう、async\n\n\n## APPENDIX\n* [async/awaitを使ったモダンな非同期処理](https://qiita.com/rana_kualu/items/f3dfcb8e7ef0cc9955d6)\n\n### 関数の表記方法について\nはじめて=>このなぞの矢印を見たときはなにこれと思ったので一応書いておく。  \n=>というのはアロー関数というらしい。  \n\n```javascript\n\nfunction 関数名(arg){}\n```\n\nこれと、\n\n```javascript\n\nfunction (arg){}\n```\n\nこれと、\n\n```javascript\n\n(arg) => {}\n```\n\nこれはほとんど同義らしい。  \n詳しいことはアロー関数とか無名関数とか匿名関数とかでぐぐるとよいと思われる。  \n\n\n以上。\n","created_at":"2019-04-14T12:21:14+09:00","id":"4ea4ecb44945d0ed98d5","tags":[{"name":"JavaScript","versions":[]},{"name":"初心者","versions":[]}],"url":"https://qiita.com/mazxxxry/items/4ea4ecb44945d0ed98d5"},{"title":"+91-8890952019 Love Problem Solution Astrologer in india","body":"+91-8890952019 Love Problem Solution Astrologer in india+91-8890952019 Love Problem Solution Astrologer in india+91-8890952019 Love Problem Solution Astrologer in india+91-8890952019 Love Problem Solution Astrologer in india+91-8890952019 Love Problem Solution Astrologer in india\n","created_at":"2019-04-14T12:20:33+09:00","id":"4e7d6c9f526c88db4c91","tags":[{"name":"love","versions":[]}],"url":"https://qiita.com/astro10/items/4e7d6c9f526c88db4c91"},{"title":"Word2Vec","body":"# Word2Vec\n\n元論文は[Distributed Representations of Words and Phrases\nand their Compositionality](https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf)です。\n\nWord2Vecは総称のようなもので、具体的には以下の2つのコンポーネントの組み合わせです:\n\nModel\n\n- Continuous Bag of Words (CBOW)\n- Skip-Gram\n\nOptimizer (Approximater?)\n\n- Hierarchical Softmax\n- Negative Sampling\n\n今回はSkip-GramについてHierarchical SoftmaxとNegative Samplingを紹介していきたいと思います。\n\n## Skip-Gram\n\nSkip-Gramは以下の目的関数を最大化するようにパラメータの学習を行います:\n\n```math\n\\begin{align}\n  E=\\frac{1}{T} \\sum_{i}^{T} \\sum_{i-c \\leq j \\leq i+c} \\log P(w_j|w_i)\n\\end{align}\n```\n\n長さ$T$のコーパスについて各単語$w_i$に対して前後$c$に隣接する単語$w_j$が出現する条件付き確率$p(w_j|w_i)$で構成されています。また、$p(w_j|w_i)$は以下で定義されています。\n\n```math\n\\begin{align}\n  P(w_j|w_i) = \\frac{\\exp (v_i \\top v'_j)}{\\displaystyle \\sum^K_k \\exp (v'_k \\top v_i)}\n\\end{align}\n```\n\nコーパスの大きさにもよりますが、基本的には分母の計算量が膨大なため（語彙数に比例する）、Hierarchical SoftmaxとNegative Samplingで近似的な目的関数を定義することで計算時間の効率化が主な内容です。\n\n## Hierarchical Softmax\n- [Hierarchical Probabilistic Neural Network Language Model](https://www.iro.umontreal.ca/~lisa/pointeurs/hierarchical-nnlm-aistats05.pdf)\n\nHierarchical Softmaxは葉が単語で出現回数を元に構成されたハフマン木を構築します。\n\n![hierarchical_softmax.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/74875/6cc8204a-3876-65fd-2d5c-c137cb25b2a2.png)\n\n各`NODE`（ノード）がベクトルを持っており、該当する単語のパス上に存在するノードを参照しながら単語ベクトルの更新を行います。\n\nHierarchical Softmaxにおける$P(w_j|w_i)$は論文に倣って記述すると以下の通りです:\n\n```math\n\\begin{align}\n  P(w_j|w_i)=\\prod_{l=1}^{L(w_j)-1} \\sigma{([\\![n(w_j, l+1)=ch(n(w_j, l))]\\!] \\cdot {v'}_{n(w_j, l)}^\\top v_{w_i})}\n\\end{align}\n```\n\n$\\sigma(x)$はシグモイド関数を表します。説明のため、この数式を少し書き換えてみます。\n\n```math\n\\begin{align}\n  P(w_j|w_i) = \\prod_{l=1}^{L(w_j)-1} \\frac {\\exp \\{(1-c_l) \\cdot v_l \\top v_i\\} }{1 + \\exp (v_l \\top v_i) }\n\\end{align}\n```\n\n```math\n\\begin{eqnarray}\n  \\log P(w_j|w_i) &=& \\sum_{l=1}^{L(w_j)-1} \\log \\frac {\\exp \\{(1-c_l) \\cdot v_l \\top v_i\\} }{1 + \\exp (v_l \\top v_i) } \\\\\n                  &=& \\sum_{l=1}^{L(w_j)-1} [ (1-c_l) \\cdot v_l \\top v_i - \\log \\{1 + \\exp (v_l\\top v_i) \\} ]\n\\end{eqnarray}\n```\n\n### Notation\n\n- $L(w_j)-1$: ハフマン木におけるルートから単語$w_j$の直前までのパス。\n- $c_l$: パスlの地点における**子**のコード。0, または1。\n- $v_l$: 単語パスlの地点におけるノードのベクトル。\n- $v_i$: 単語$w_i$のベクトル。\n\nちなみに\n\nif $c_l=1$:\n\n```math\n\\begin{eqnarray}\n  P(w_j|w_i) &=& \\prod_{l=1}^{L(w_j)-1} \\frac {1}{1 + \\exp (v_l \\top v_i) } \\\\\\\\\n             &=& 1 - \\sigma (v_l \\top v_i)\n\\end{eqnarray}\n```\n\nif $c_l=0$:\n\n```math\n\\begin{eqnarray}\n  P(w_j|w_i) &=& \\prod_{l=1}^{L(w_j)-1} \\frac {\\exp (v_l \\top v_i)}{1 + \\exp (v_l \\top v_i) } \\\\\\\\\n             &=& \\sigma (v_l \\top v_i)\n\\end{eqnarray}\n```\n\n2分木上のどちらのパスを辿ったかの確率の掛け合わせで目的関数を表現していることがわかります。\n\nパラメータは$v_l$、および$v_i$で勾配法を用いて更新されます。したがって$v_l$、$v_i$における偏微分$\\frac{\\partial \\log P(w_i|w_j)}{\\partial v_i}$、$\\frac{\\partial \\log P(w_i|w_j)}{\\partial v_l}$は:\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial v_i} = \\sum_{l=1}^{L(w_j)-1} v_l \\left[1 - c_l - \\frac {\\exp \\{(1-c_l) \\cdot v_l \\top v_i\\} }{1 + \\exp (v_l \\top v_i)} \\right]\n\\end{align}\n```\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial v_l} = v_i \\left[1 - c_l - \\frac {\\exp \\{(1-c_l) \\cdot v_l \\top v_i\\} }{1 + \\exp (v_l \\top v_i)} \\right]\n\\end{align}\n```\n\n## Negative Sampling\n\nNegative Samplingは[Noise Contrastive Estimation]((https://arxiv.org/pdf/1410.8251.pdf))の拡張です。共起しなかった単語から負例としてサンプリングを行い、そのベクトルを用いて学習を行います。\n\n```math\n\\begin{align}\n  P(w_j|w_i) = \\sigma(u_j \\top v_i) \\prod_{k=1}^{K} \\sigma(-u_k \\top v_i)\n\\end{align}\n```\n\n```math\n\\begin{align}\n  \\log P(w_j|w_i) = \\log \\sigma(u_j \\top v_i) + \\sum_{k=1}^{K} \\log \\sigma(-u_k \\top v_i)\n\\end{align}\n```\n\n### Notation\n- $v_j$: 単語$w_j$のベクトル。\n- $K$: サンプル数。\n- $u_i$, $u_k$: 単語$u_i$、およびサンプルされた単語におけるコンテクストベクトル。Negative Samplingで学習を行う際は単語ベクトルとは別に同じサイズのベクトルを用意しています。このベクトルもパラメータとして扱い、サンプリングされた単語やターゲットから見て共起している単語はこちらのベクトルを利用して学習を行います。\n\nパラメータは$u_j$, $u_k$, $v_i$でHierarchical Softmaxと同様に勾配法を用いて学習を行います。したがって$u_j$, $u_k$, $v_i$における偏微分$\\frac{\\partial \\log P(w_j|w_i)}{\\partial u_j}$, $\\frac{\\partial \\log P(w_j|w_i)}{\\partial u_k}$, $\\frac{\\partial \\log P(w_j|w_i)}{\\partial v_i}$は:\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial u_j} = 1 - \\sigma(u_j \\top v_i) \\cdot v_i\n\\end{align}\n```\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial u_k} = - \\sigma(u_k \\top v_i) \\cdot v_i\n\\end{align}\n```\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial v_i} = 1 - \\sigma(u_j \\top v_i) \\cdot u_j - \\sum_{k=1}^{K} \\log \\sigma(-u_k \\top v_i) \\cdot u_k\n\\end{align}\n```\n\n## Subsampling\n\n出現頻度の極端に高い単語はそのほかの単語に比べると情報量が少ないので、学習には利用しないようにしています。そのためにSubsamplingと呼ばれるテクニックが紹介されています。論文中に記述されているSubsamplingの式は以下の通りです。\n\n```math\n\\begin{align}\n  p(w_i)=\\sqrt \\frac{t}{f(w_i)}\n\\end{align}\n```\n\n$f(w_i)$は$w_i$の学習コーパス内における出現回数を表します。$p(w_i)$は学習に利用するかどうかの確率として扱います。ただ、実装を見てみると若干式の差異が見られます:\n\n```c\n// The subsampling randomly discards frequent words while keeping the ranking same\nif (sample > 0) {\n  real ran = (sqrt(vocab[word].cn / (sample * train_words)) + 1) * (sample * train_words) / vocab[word].cn;\n  next_random = next_random * (unsigned long long)25214903917 + 11;\n  if (ran < (next_random & 0xFFFF) / (real)65536) continue;\n}\n```\n\nこれを数式で表すと:\n\n\n```math\n\\begin{align}\n  p(w_i)=\\left(\\sqrt \\frac{g(w_i)}{t} + 1\\right) \\cdot \\frac{t}{g(w_i)}\n\\end{align}\n```\n\n> $t$ is a chosen threshold, typically around $10^{-5}$.\n\n$g(w_i)$は$w_i$の出現頻度をコーパス内の総単語数で割った値です。$p(w_i)$は先と同様に単語$w_i$が学習に含まれるかどうかの確率です。言い換えると、$g(w_i)$の値が大きい、つまり$w_i$の出現頻度が多い場合（`and`や`the`のような単語が含まれる可能性が高いです）、$p(w_i)$は小さい値をとるため無視されやすくなるというわけです。\n\nつまり、式は違えど上記の$P(w_i)$らは同じことを意味しています。ご参考程度に、グラフの形状は以下の通りです:\n\n![subsample.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/74875/fcb6d5e5-b1cc-44bd-ac15-f960255ad06f.png)\n","created_at":"2019-04-14T12:14:57+09:00","id":"0eebf686b216404621fe","tags":[{"name":"word2vec","versions":[]}],"url":"https://qiita.com/ynqa/items/0eebf686b216404621fe"},{"title":"Javascript EventaddListerのEventの種類","body":"こちらに詳細が記載されている\n\nhttps://qiita.com/mrpero/items/156968e3512d42fffc5e\n","created_at":"2019-04-14T12:14:14+09:00","id":"fd6e1e00b83a2c585760","tags":[{"name":"JavaScript","versions":[]},{"name":"event","versions":[]}],"url":"https://qiita.com/yama04070319/items/fd6e1e00b83a2c585760"},{"title":"JmeterでMySQLへの接続","body":"### インストール\n#### Requirements\n- Java 8 or Java 9\n- JREまたはJDK(HTTPS扱うならJDK推奨)\n\n実行環境\n\n- macOS 10.14.4\nJavaなんでプラットフォームは基本的になんでもよさげ。\n\nインストールコマンドはbrewでいける。versionは5.1.1だった。\n\n```\nbrew install jmeter\n```\n\nそれとMySQLに接続する為、ドライバをダウンドロードし、jmeterのlibフォルダ配下にjarファイルを置く\n\n```\ncurl  -LO https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.15.tar.gz\ntar -xzvf mysql-connector-java-8.0.15.tar.gz \ncd mysql-connector-java-8.0.15\ncp mysql-connector-java-8.0.15.jar /usr/local/Cellar/jmeter/5.1.1/libexec/lib/\n```\n\n### スクリプト作成\n\n参考URL: https://jmeter.apache.org/usermanual/build-db-test-plan.html\n\n1. Add -> ThreadGroup\n2. Add → Config Element → JDBC Connection Configuration. \n3. Add → Sampler → JDBC Request\n4. Add → Listener → Summary Report\n\n### CLI\n[オプション](http://jmeter.apache.org/usermanual/get-started.html#non_gui)\nざっくり\n\n - -n でcli\n - -t test file\n - -l ファイル出力\n \n```\njmeter -n -t example.test -l test.log\n```\n\n### 変数\nTest Plan -> Config Element -> User defined variables\n\n${}で呼び出し\ninsert into t1 values (null,'${test_var}');\n\n#### CSVからの読み込み\nThread Group -> Add -> Config Element -> CSV Data Set Config\n\nvariable namesに変数名を入れる。カンマ区切りで複数入力可能\n\ncsvファイルは実行するファイルと同じ場所に配置しておく。\nスレッド毎に新しい行を読み込む。新しい行がなければループする。\n\n### Tips\n基本的に負荷試験はCLIでの実行する。\nGUIはスクリプト作成時や確認用。\nリスナーは無効化しておく。\n\nMemory不足で落ちたらHEAPサイズ(Xmx)を上げる。\n\n```\n$ grep -i Xmx /usr/local/Cellar/jmeter/5.1.1/libexec/bin/jmeter\n##   JVM_ARGS=\"-Xms1g -Xmx1g\" jmeter etc.\n##                    Defaults to \"-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m\"\n: \"${HEAP:=\"-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m\"}\"\n```\n\n2年ぐらい前に触った時は1Gもなかった気がする。\n\nそれでもダメなら、下記を参考に調整かな\nhttps://www.blazemeter.com/ja/blog/nine-easy-solutions-jmeter-load-test-%E2%80%9Cout-memory%E2%80%9D-failure\n","created_at":"2019-04-14T12:12:41+09:00","id":"ae90b57bf250cf6e04a7","tags":[{"name":"JMeter","versions":[]}],"url":"https://qiita.com/mou34/items/ae90b57bf250cf6e04a7"},{"title":"はじめての同期処理、非同期処理 〜Promise〜","body":"## 現状\n* 別に(今は)ふわっとした知識でいいのでpromiseを扱いたい\n* node.jsでなんか色々やろうとしている\n* プログラミングはほとんど経験がない(printfはできる)\n* javascriptももちろん全く触ったことがない(最近はじめてnode.jsをいれてみた。なぜかいきなりnode.jsか〜)\n* そもそもweb系の経験もない\n* でもweb系をやりたいわけでもなく、サーバーもフロントも今後いじる予定は（今の所そんなに）ない\n* 間違ってたら絶賛教えてほしい\n\nちなみに、同期処理と逐次処理を混同しているけどその点については今回は触れません。\n\n## promiseってなんぞ\n* 非同期処理を扱いやすくするなんだかの仕様らしい\n\nそもそも、非同期処理というがソースは上から順番に実行されると思っている私にとって非同期処理と言われてもまったくもってわからない！\n\n## 非同期処理ってなんぞ...\n### 同期処理\n* 同期処理は名前の通り同期した処理\n\n```\n同期処理1();\n同期処理2();\n同期処理3();\n```\n\n* 処理1が終わって結果が返ってきたら処理2を行う\n* 処理2が終わって結果が返ってきたら処理3を行う\n\n私のような初学者のほとんどはこの処理が当たり前だと思っている、はず。  \nちなみに、asyncが非同期処理でsyncが同期処理っぽいです。\n\n### 非同期処理\n* みんなてんでバラバラに実行されていく(てんでバラバラっていうのは嘘ですけど)\n\n```\n非同期処理1();\n非同期処理2();\n非同期処理3();\n```\n\n* 非同期処理1がスタートする\n* 非同期処理2がスタートする\n* 非同期処理3がスタートする\n* 処理の終わった方からreturnしてくる\n\nなのでjavaとかCとかちょろっと触ったことあるし、というノリいきなりnode.jsやろうとすると死にます。死んだ。  \n私が一番実感したのは次のようなコードを書いたときです。\n\n```javascript:myFunc1.js\nconsole.log('myFunc1の実行を開始======');\nvar buf = myFunc1();\nconsole.log('myFunc1の結果を表示：', buf);\n\nconsole.log('myFunc2の実行を開始======');\nvar buf2 = myFunc2();\nconsole.log('myFunc2の結果を表示：', buf2);\n\nconsole.log('myFunc3の実行を開始======');\nvar buf3 = myFunc3();\nconsole.log('myFunc3の結果を表示：', buf3);\n```\n\nなお、myFunc1,myFunc2,myFunc3の中にはリターン時に`console.log('myFunc1()の処理が終わりました！')`と返すようにしておく。あくまでも一例。  \n上記のようなコードを`node myFunc.js`とかで実行すると次のような結果が出力される。\n\n```result\nmyFunc1の実行を開始======\nmyFunc1の結果を表示： undefined\nmyFunc2の実行を開始======\nmyFunc2の結果を表示： undefined\nmyFunc3の実行を開始======\nmyFunc3の結果を表示： undefined\nmyFunc2()の処理が終わりました!\nmyFunc3()の処理が終わりました!\nmyFunc1()の処理が終わりました!\n```\n\nここで私のような一般人は？？？？？？？？？と思うわけです。  \n想定しているのは次のような出力だったはず。  \n\n```expect\nmyFunc1の実行を開始======\nmyFunc1()の処理が終わりました!\nmyFunc1の結果を表示： 'foo'\nmyFunc2の実行を開始======\nmyFunc2()の処理が終わりました!\nmyFunc2の結果を表示： 'bar'\n...\n\n```\n\n* この現象がまさに非同期処理(だと思っている)\n* 上から順番に実行していくが、処理が終わったものから順次結果を返していく\n\nそういうことが起きるものですから、何も知らない状態でmyFunc1の実行結果を受け取ってmyFunc2で処理しよう、などと考えると痛い目にあうわけです。  \n\n\n## Promiseというもの\npromiseという形に沿ったなにかをreturnする関数myPromise()というものがあったとする。  \n\n```\nmyPromise().then()\n```\n\nふわっとした理解でいうならば、myPromiseの実行結果を受け取り.then()で処理してくれるらしい。  \nなんかこれを使えば逐次処理もうまくいきそうな気がしてきた。  \n\nなお、promiseにはよく入門サイトや解説サイトで次の使い方が紹介されている。  \n* .then()\n* .then().then().then() (メソッドチェーン)\n* Promise.all()\n\n一応理解のために全部使ってみる。\n\n### Promiseを使ってみる\nとりあえずpromiseという形の何かをreturnする関数myPromiseを作って、thenで逐次処理を目指す。\n\n#### promiseのインスタンス化\n\n```javascript:myPromise\nfunction myPromise(){\n    return new Promise();\n}\n```\n\nこれでpromise型の何かを返すmyPromiseができたので、実際何を返してほしいのかnewしたPromise内部に記載していく。  \n\n* よく例にあがるsetTimeoutを利用して、3000ms(3s)後に文字列を返すような処理を書く\n* setTimeOut()は次のような使い方をする。\n\n```javascript:settimeout\nsetTimeOut(処理内容, 実行のタイミング(ms));\n```\n\nこれをpromiseで包むが、次の点に注意が必要。  \n* promise型はresolve, rejectという値を返す  \n* resolveは処理が成功したとき\n* rejectは処理が失敗したときに返される\n\nなので、setTimeoutをpromiseで包むのは次のようにする。\n\n```javascript:myPromise().js\nfunction myPromise(){\n    return new Promise(function(resolve,reject){\n        setTimeout(処理内容, 実行のタイミング);\n    });\n}\n```\n\nこの時点で既にややこしすぎて心が折れそう。  \n\nだから3秒たったら`Hello myPromise!`と返してくる処理をpromise化すると、次のようになる。  \n\n```javascript:myPromise.js\nfunction myPromise(){\n  return new Promise(function(resolve,reject){\n    setTimeout(function(){\n        // resolve(返したい値)\n      resolve('Hello myPromise!');\n    }, 3000)\n  });\n}\n```\n\n### .then\n上記のmyPromise.jsで、とりあえず`Hello myPromise!`という文字列が返ってくるわけだが、この返ってきた値を受け取って表示したい。（逐次処理）  \nそういうときに、.thenを使う。\n\n```javascript:myPromise.js\nmyPromise().then(処理内容);\n```\n\nしたがって、myPromise内で行った処理を受け取ったら表示する、という処理を書くのはthen内。  \n\n```javascript:myPromise.js\nmyPromise().then(function(value){\n    console.log(value);\n});\n```\n\nなお、thenにはcatchもできるようです。  \n\n```javascript:myPromise.js\nmyPromise().then(略).catch(function(error){エラー時の処理内容});\n```\n* catchじゃなくてthen内でも処理内容を書くこともできるらしい。それについては一身上の都合により略\n\n```javascript:myPromise\nmyPromise().then(resolve時の処理内容, reject時の処理内容);\n```\n\n### .thenを使ったメソッドチェーン\n* thenを多用することで逐次処理が行える\n* 例えば処理1を行った結果を用いて処理2、その結果を用いて処理3を行いたいとき\n\nイメージとしてはこう。\n\n```javascript:myPromise\nmyPromise(処理1).then(処理2).then(処理3)\n```\n注意すべきなのは、下記の点。\n\n* 1つ目のthen(処理1)の返す値を使って2つ目のthen(処理3)を行う場合、1つ目のthen(処理2)の中身もpromise化しておかないと2つ目のthen(処理3)は勝手に処理を始めてしまったりする\n\nここらで流石にpromiseとthenの使い方を覚え始めた。\n\n### Promise.all()\nPromise.all()を使うと、複数処理をまとめて走らせておいて全部終わったら値を受け取るという高度なことが簡単にできるらしい！  \n\n\n```javascript:promise.all()\nPromise.all([\n    promise化した処理1(),\n    promise化した処理2(),\n    promise化した処理3()\n])\n  .then(function(data){\n      console.log(data);\n  })\n```\n* thenの処理内容は、処理1~3が全て終わってから実行される。\n\n```\n[処理1の結果, 処理2の結果, 処理3の結果]\n```\n* 結果が配列に格納されて出てくる\n* promise.all内の処理のどれかをpromise化しなかったりするとどうなるのか不明\n\n\nまあそんな感じでしょう。\n詳しいことは分からないけど、使えるくらいには理解できてきた気がする。気のせいかもしれない。  \n\n\nとりあえず、次はasync/awaitを使っていきたい。  \n\n## APPENDIX\n* [JavaScript Promiseの本](http://azu.github.io/promises-book/)\n* [【node.js入門】Promiseによる非同期処理の使い方まとめ！](https://www.sejuku.net/blog/76485)\n\n","created_at":"2019-04-14T12:09:57+09:00","id":"ffac3d07903e6743564c","tags":[{"name":"JavaScript","versions":[]},{"name":"promise","versions":[]},{"name":"初心者","versions":[]}],"url":"https://qiita.com/mazxxxry/items/ffac3d07903e6743564c"},{"title":"SEO","body":"##コンテンツマーケティング\n###目次\n###目的\n売上UP、採用数UP、認知度UP\n###■ポイント\n+ 検索意図を満たしているか\n+ 記事の内容\n+ いろんな人から支持を得てる(最適な被リンク)\n\n###■なにをするのか\n+ 有益な情報を発信し、様々なキーワードで上位表示をする\n+ 悩みや役立つ情報をコラムを書く\n+ 自社商品の顧客になりそうなユーザーが検索しそうなキーワードでたくさん上位表示\n\n自社のビジネスに関連するキーワードをピックアップ\n↓\nそれらのキーワードで上位表示するために記事を書く\n↓\n様々なキーワードで上位表示される\n↓\n見込み客が集客できる\n\n###■キーワードの選定方法\n\n商品が明確×悩みが明確なキーワード\n\n「婚活サイト おすすめ」\n「ドッグフード 人気」\n「パーソナル トレーナー 新宿」\n「商標キーワード」\n\n■ニーズが高いキーワード\n「結婚したい」\n「犬 長生きする方法」\n「小顔になりたい」\n「筋トレ 効率的」\n「相続 家族 問題」\n\n■見込み客を育てるキーワード\n30代 平均　年収\n犬　しつけ　上手くいかない\nボブ　似合う　顔の形\n男性　モテる方法\n保険　受け取り方\n\n■軸となる単一キーワードを考える\n「婚活サイトの場合」\n結婚、婚活、お見合い、恋活、出会い、相席屋\n「ドッグフードの通販会社の場合」\nドッグフード 無添加、犬 しつけ、マルチーズ　エサ　おすすめ\n「パーソナルトレーナーの場合」\n筋トレ　食事、ダイエット　お腹、大胸筋　鍛え方、プロテイン　飲むタイミング\n\n■検索キーワードツールを使ってリストを作成する\n複合キーワードをまとめたリストを検索意図でグループ分けをする\n\n■コンテンツ制作で考えておくべきこと\n\n+ 検索意図\n狙っているキーワードはどんな意図で検索されるか\n\n+ 専門性\n調べたい人にとって深く言及されているか\n+ 網羅性\nあらゆる角度から説明されているか\n\n■記事\n\n+ そのキーワードの１位-20位のサイトをリサーチして、なにが書かれているかリストアップする\n+ リストアップした内容を全て記事に盛り込み網羅する\n+ アマゾンでそのジャンルの書籍を買って読む\n\n```\n目次にする\n<h2>妊娠した時にかかるお金</h2>\n<h3>定期検診の費用</h3>\n<h3>入院費用</h3>\n<h3>出産費用</h3>\n<h3>出産までに準備しとくもの</h3>\n\n<h2>妊娠したときにもらえるお金</h2>\n<h3>育児休業手当</h3>\n<h3>出産一時金</h3>\n\n<h2>税金などについて</h2>\n<h3>産休中の社会保険料</h3>\n<h3>出産後の所得税について</h3>\n\n<h2>こんな場合は高くなる場合も</h2>\n<h3>個室で入院する場合</h3>\n```\n\n##■ライティングで気をつけること\n自分の体験談が入っていることをアピール\n他の記事のやんわりした否定\nとにかく詳しく書いていることをアピール\n簡単な結論を先に書いちゃう\n絶対に覚えておくことを書いちゃう\n絶対にしてはいけないことを書いちゃう\n※どれか一つをはじめに書く\n\n「〇〇　ランキング」ならランキングから書いたり、ユーザーの気持ちになって記事の順番を考える\n\nキーワードを上から下までまんべんなく入れる\n\n難しい言葉は使わない\n\n共起語に変換したほうがいい場合は変換する\n\nとにかく見やすくわかりやすく\n画像での説明\n図での説明\n表での説明\nイラストでの説明\n動画での説明\n列挙する場合はリストにする(brタグ)\n\n##記事のSEO価値の公式\n記事コンテンツ「オリジナリティ」「専門性」\n\n内部リンクなどでの補足「網羅性」\n\n参照リンク「客観性」「正当性」\n\n一覧とさらに深掘りした内容の記事への内部リンク\n","created_at":"2019-04-14T12:06:43+09:00","id":"a4b5ce4cbc1c74d1e8fb","tags":[{"name":"SEO","versions":[]}],"url":"https://qiita.com/4npei/items/a4b5ce4cbc1c74d1e8fb"},{"title":"React Release v16.8.6","body":"https://github.com/facebook/react/releases/tag/v16.8.6\n\n## v16.8.6\n### React DOM\n- `useReducer()`での誤ったbailoutを修正\n- Safari DevToolsにおけるiframeの警告を修正\n- `contextType`が`Context`ではなく`Context.Consumer`にセットされたときに警告するように\n- `contextType`が無効な値にセットされたときに警告するように\n","created_at":"2019-04-14T12:05:36+09:00","id":"23cb4c0b27d5e29db202","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/23cb4c0b27d5e29db202"},{"title":"React Release v16.8.5","body":"https://github.com/facebook/react/releases/tag/v16.8.5\n\n## v16.8.5\n### React DOM\n- selectタグで選択されている最初のoptionにsize属性を設定しないように修正\n- `useEffect(async () => ...)`のwarningメッセージを改善\n- 重複したReactによるエラーメッセージの改善\n\n### React DOM Server\n- サーバレンダリング時のuseLayoutEffectのwarningメッセージを改善\n\n### React Shallow Renderer\n- Hooksで動くshallow rendererの`setState`を修正\n- shallow rendererで`React.memo`をサポートするように修正\n- shallow rendererでHooks内の`forwardRef`をサポートするように修正\n","created_at":"2019-04-14T12:05:13+09:00","id":"b8dfeb7eda2cf6ac0cb6","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/b8dfeb7eda2cf6ac0cb6"},{"title":"React Release v16.8.4","body":"https://github.com/facebook/react/releases/tag/v16.8.4\n\n## v16.8.4\n### React DOM and other renderers\n- `useContext`hookを利用したコンポーネントで、DevToolsがランタイムエラーを起こすバグを修正\n\n","created_at":"2019-04-14T12:04:51+09:00","id":"e6c0aa1177e8626cde95","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/e6c0aa1177e8626cde95"},{"title":"React Release v16.8.3","body":"https://github.com/facebook/react/releases/tag/v16.8.3\n\n## v16.8.3\n### React DOM\n- UMDビルド時に入力フォームが正しく動作しなバグを修正\n- renderフェーズの更新が破棄されるバグを修正\n\n### React DOM Server\n- renderが完了する前にストリームが破棄された場合、context stackを巻き戻すように修正\n  - その後のrenderで誤った値が渡されるのを防ぐため\n\n\n### ESLint Plugin for React Hooks\n- recommendedルールに`exhaustive-deps`を追加\n  - useEffectの依存関係周り\n    - https://www.npmjs.com/package/eslint-plugin-react-hooks\n    - https://github.com/facebook/react/issues/14920\n","created_at":"2019-04-14T12:04:30+09:00","id":"7f6568f7b6a18f2fdc5d","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/7f6568f7b6a18f2fdc5d"},{"title":"React Release v16.8.2","body":"https://github.com/facebook/react/releases/tag/v16.8.2\n\n## v16.8.2\n### React DOM\n- `useEffect`内で`ReactDOM.render`が動作しない問題を修正\n- 空のPortalsをマウントした際にクラッシュする問題を修正\n- dependenciesが指定されなかった際に`useImperativeHandle`が正しく動くように修正\n  - `useImperativeHandle`の第3引数\n- `crossOrigin`属性がSVG要素で動くように修正\n- HooksでSuspenseを使用した際の誤検知を修正\n\n### React Test Utils and React Test Renderer\n- コンポーネントスタックを`act()`に含めるように\n","created_at":"2019-04-14T12:03:42+09:00","id":"11b75529241e24429a86","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/11b75529241e24429a86"},{"title":"React Release v16.8.0, v16.8.1","body":"https://github.com/facebook/react/releases/tag/v16.8.0\nhttps://github.com/facebook/react/releases/tag/v16.8.1\n\n## v16.8.0\n### React\n- Hooksの追加\n- Hooksの`useReducer`のlazy initialization APIを改善\n\n### React DOM\n- `useState`/`useReducer`で同一値の再レンダリングを回避\n- `useState`/`useReducer`の値の比較に`Object.is`を利用\n- `useEffect`/`useMemo`/`useCallback`で最初に渡された引数を比較しない\n- `React.lazy()`にsynchronous thenablesをサポート\n- strict-modeのHooksでコンポーネントを2回レンダリングするように\n- 開発モードでHooksの順序に対して警告を出すように\n- cleanup関数はundefinedを必ず返すように(その他の値やnullは禁止)\n\n### React Test Renderer and Test Utils\n- shallowレンダリングでHooksをサポート\n- shallowレンダリング時に`getDerivedStateFromProps`があるときの`shouldComponentUpdate`内の誤った状態を修正\n- テストが実際の動作とより厳密に一致するよう、バッチ処理のための`ReactTestRenderer.act()`および`ReactTestUtils.act()`を追加\n\n### ESLint Plugin: React Hooks\n- 初回リリース\n- ループが発生した際のレポート機能を追加\n- throwingをルール違反とみなさないように\n\n## v16.8.1\n### React DOM and React Test Renderer\n- 古いバージョンのReactと同時に利用した際にクラッシュする問題を修正\n\n### React Test Utils\n- Node環境でクラッシュする問題を修正\n","created_at":"2019-04-14T12:03:07+09:00","id":"eebde3bb04424e3bafb0","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/eebde3bb04424e3bafb0"},{"title":"AtCoder Beginner Contest 124 D 解説動画（尺取法、累積和）をPythonでやってみる","body":"# 概要\n\n2度目のAtCoder Beginner Contestで、今回もD問題が解けず悔しい思いをしました。\n今回は解説PDFで実装が省略されていたこともあり、C++での解説動画をPythonでやってみることを通じ、アルゴリズムを理解しようということでやってみました。。\n尚、解説動画は生配信で色々とアクシデントがあり面白いので、この記事は見なくても、解説動画を見て、いいねボタンを押しましょう。\n\n[AtCoder Beginner Contest 124 D - Handstand](https://atcoder.jp/contests/abc124/tasks/abc124_d)\n[AtCoder Beginner Contest 124 解説配信](https://youtu.be/FRzpDCx17vw)\n[AtCoder Beginner Contest 124 解説PDF](https://img.atcoder.jp/abc124/editorial.pdf)\n\n# TLE (Time Limit Exceeded)になるやり方\n\n直大さん(@chokudai)くらいのスーパープログラマーがキレイにコードを書くと通ってしまうことがありますが、普通は通らない実装方法です。\n\n``` python\nN, K = map(int, input().split())\nS = input()\nNums = []\nnow = 1 # 今見ている数\ncnt = 0 # nowがいくつ並んでいるか\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        Nums.append(cnt)\n        now = 1 - now   # 0と1を切り替えるときの計算 now ^= 1\n        cnt = 1\nif cnt != 0:\n    Nums.append(cnt)\n# 1-0-1-0-1-0-1 って感じの配列が欲しい\n# 1-0-1-0-1-0 みたいに0で終わっていたら適当に1つ足す\nif len(Nums) % 2 == 0:\n    Nums.append(0)\n\nAdd = 2 * K + 1\nans = 0\n# 1-0-1... の1から始めるので、偶数番目だけ見る\nfor i in range(0, len(Nums), 2):\n    tmp = 0\n    left = i\n    right = min(i + Add, len(Nums))\n    for j in range(left, right):\n        tmp += Nums[j]\n    ans = max(tmp, ans)\n\nprint(ans)\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/271789/94195b1f-41c9-426d-326b-16a8b1d37ce9.png)\n\nfor文が2重になっていることから計算回数が$O(N^2)$になるため、PythonではしっかりTLEになりました。\n個人的には now = 1 とすることで、0から始まる時にNums[0]に0を入れられるところ、now = 1 - now で0と1を交互にできるところ、偶数番目だけを見るなどで、なるほど！となってしまいました。\nだいたい末端処理の実装でやらかして、デバックで疲弊してしまうので、こういうテクニックを自然に使えるようになりたいです。\n\n# 尺取法\n\n``` python\nN, K = map(int, input().split())\nS = input()\nNums = []\nnow = 1 # 今見ている数\ncnt = 0 # nowがいくつ並んでいるか\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        Nums.append(cnt)\n        now = 1 - now   # 0と1を切り替えるときの計算 now ^= 1\n        cnt = 1\nif cnt != 0:\n    Nums.append(cnt)\n# 1-0-1-0-1-0-1 って感じの配列が欲しい\n# 1-0-1-0-1-0 みたいに0で終わっていたら適当に1つ足す\nif len(Nums) % 2 == 0:\n    Nums.append(0)\n\nAdd = 2 * K + 1\nans = 0\n# 尺取り法 forループの外側にleft, rightを持つ\nleft = 0\nright = 0\ntmp = 0 # [left, right)のsum\n# 1-0-1... の1から始めるので、偶数番目だけ見る\nfor i in range(0, len(Nums), 2):\n    # 次のleft, rightを計算する\n    Nextleft = i\n    Nextright = min(i + Add, len(Nums))\n    # 左端を移動する\n    while Nextleft > left:\n        tmp -= Nums[left]\n        left += 1\n    # 右端を移動する\n    while Nextright > right:\n        tmp += Nums[right]\n        right += 1\n    ans = max(tmp, ans)\n\nprint(ans)\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/271789/77f11527-f399-73b2-b00d-5fe970408a81.png)\n\n尺取法というのは実は解説動画で初めて聞いたのですが、右側と左側の動きが尺取虫のように動くということでしょうね。\n計算回数が$O(N)$になるので、Pythonでも余裕をもって通ります。C++では5msということで、差は大きいですね\n理論は分かっても実装となると苦労しそうなのですが、left, right, Nextleft, Nextrightという使い方が分かりやすく、メンテナンス性も高いコードで、こういうコードを書きたいですね。\n\n# 累積和\n\n``` python\nN, K = map(int, input().split())\nS = input()\nNums = []\nnow = 1 # 今見ている数\ncnt = 0 # nowがいくつ並んでいるか\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        Nums.append(cnt)\n        now = 1 - now   # 0と1を切り替えるときの計算 now ^= 1\n        cnt = 1\nif cnt != 0:\n    Nums.append(cnt)\n# 1-0-1-0-1-0-1 って感じの配列が欲しい\n# 1-0-1-0-1-0 みたいに0で終わっていたら適当に1つ足す\nif len(Nums) % 2 == 0:\n    Nums.append(0)\n\nAdd = 2 * K + 1\n# 累積和を作る\n# 0 1 2 3 4 5 6\n#  0 1 2 3 4 5\nsum = [0] * (len(Nums) + 1)\nfor i in range(len(Nums)):\n    sum[i + 1] = sum[i] + Nums[i]\nans = 0\n# 1-0-1... の1から始めるので、偶数番目だけ見る\nfor i in range(0, len(Nums), 2):\n    # 次のleft, rightを計算する [left, right)\n    left = i\n    right = min(i + Add, len(Nums))\n    tmp = sum[right] - sum[left]\n    ans = max(tmp, ans)\n\nprint(ans)\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/271789/16ea1b77-42aa-3387-435b-b8e509299d45.png)\n\n累積和という言葉は聞いたことはありましたが、実装はしたことが無いと思います。\n計算回数が$O(N)$になり尺取法と同程度ということですが、実行時間が少しだけ尺取法より早くなりました。c++では同じ5msでしたね。\n実装は非常に分かりやすいコードで、直大さんも累積和を推奨しますと言っていたので、次に累積和を使う問題が出たらスムーズな実装を目指したいと思います。\n","created_at":"2019-04-14T12:02:16+09:00","id":"55e751ecf72bb7894a46","tags":[{"name":"Python","versions":[]},{"name":"AtCoder","versions":[]},{"name":"競技プログラミング","versions":[]},{"name":"累積和","versions":[]}],"url":"https://qiita.com/hironobukawaguchi3/items/55e751ecf72bb7894a46"},{"title":"gin gormでテーブル操作","body":"[前回](https://qiita.com/ogurasousui/items/c0324dbb8dfdb9e0ac1b)DB接続まで\n今回も雑にテーブルの基本操作\n\n## DB接続\n\n接続をメソッドに。本来は環境やDBを設定ファイルなどで切り替えれるようにするのが良いか\n\n```db/db.go\npackage db\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nfunc Connection() *gorm.DB {\n\tdb, err := gorm.Open(\"mysql\", \"root:@tcp(db:3306)/gin_app?charset=utf8&parseTime=True&loc=Local\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdb.LogMode(true)\n\treturn db\n}\n```\n\n## マイグレーション\n\nこちらもメソッドに。任意で実行できるように変更 \n\n```migrate/migrate.go\npackage main\n\nimport (\n\t\"app/db\"\n\t\"app/model\"\n\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nfunc main() {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tdb.AutoMigrate(&model.User{})\n\tdb.AutoMigrate(&model.UserName{})\n}\n```\n\nマイグレーション実行は\n\n```\ndocker exec -it gin_app go run /go/src/app/migrate/migrate.go\n```\n\n## モデル\n各テーブルをモデルとして定義\n今回はリレーションも使って見たかったので `user` `user_name` を作成\n\nテーブルは↓こんなかんじ\n\n```\n$ docker exec -it gin_db mysql -u root -e \"use gin_app; show tables;\"\n+-------------------+\n| Tables_in_gin_app |\n+-------------------+\n| user_names        |\n| users             |\n+-------------------+\n```\n\n```model/user.go\npackage model\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\ntype User struct {\n\tgorm.Model\n\tUserName UserName\n}\n```\n\n```model/user_name.go\npackage model\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\ntype UserName struct {\n\tgorm.Model\n\tUserID uint\n\tName   string\n}\n```\n\n## コントローラ\n名前はserviceでもなんでもいいかもしれない\nとりあえず動けばいいのでバリデーションなどは入れていません\n\n```controller/user.go\npackage controller\n\nimport (\n\t\"app/db\"\n\t\"app/model\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype User struct{}\n\nfunc NewUser() *User {\n\treturn &User{}\n}\n\nfunc (t *User) Get(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar user model.User\n\tresult := db.First(&user, c.Param(\"id\")).Related(&user.UserName)\n\tc.JSON(200, result.Value)\n}\n\nfunc (t *User) List(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar users []model.User\n\tresult := db.Preload(\"UserName\").Find(&users)\n\tc.JSON(200, result.Value)\n}\n\nfunc (t *User) Create(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar user model.User\n\tdb.Create(&user)\n\n\tvar userName model.UserName\n\tc.BindJSON(&userName)\n\tuserName.UserID = user.ID\n\tdb.Create(&userName)\n}\n\nfunc (t *User) Update(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar user model.User\n\tdb.First(&user, c.Param(\"id\")).Related(&user.UserName)\n\tif user.UserName.ID > 0 {\n\t\tc.BindJSON(&user.UserName)\n\t\tdb.Save(&user.UserName)\n\t}\n}\n\nfunc (t *User) Delete(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar user model.User\n\tdb.First(&user, c.Param(\"id\")).Related(&user.UserName)\n\tif user.ID > 0 {\n\t\tdb.Delete(&user)\n\t}\n\tif user.UserName.ID > 0 {\n\t\tdb.Delete(&user.UserName)\n\t}\n\n\t// こっちの消し方でも良い\n\t// db.Where(\"id = ?\", c.Param(\"id\")).Delete(&model.User{})\n\t// db.Where(\"user_id = ?\", c.Param(\"id\")).Delete(&model.UserName{})\n}\n```\n## main\n\n各操作をルーターに追加\n\n```main.go\npackage main\n\nimport (\n\t\"app/controller\"\n\n\t\"github.com/gin-gonic/gin\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/users\", controller.NewUser().List)\n\tr.GET(\"/users/:id\", controller.NewUser().Get)\n\tr.POST(\"/users\", controller.NewUser().Create)\n\tr.PUT(\"/users/:id\", controller.NewUser().Update)\n\tr.DELETE(\"/users/:id\", controller.NewUser().Delete)\n\n\tr.Run()\n}\n```\n\n## 実行\n\n### 作成\n```\ncurl -X POST http://localhost:3001/users -d '{\"name\": \"hoge\"}'\n```\n\n### 1件取得\n```\ncurl http://localhost:3001/users/1\n```\n\n### 全件取得\n```\ncurl http://localhost:3001/users/\n```\n\n### 更新\n```\ncurl -X PUT http://localhost:3001/users/1 -d '{\"name\": \"huga\"}'\n```\n\n### 削除\n```\ncurl -X DELETE http://localhost:3001/users/1\n```\n\nおわり\n\n\n\n\n","created_at":"2019-04-14T12:01:57+09:00","id":"dcd84fd96d2e8797a5e8","tags":[{"name":"Go","versions":[]},{"name":"GORM","versions":[]},{"name":"gin","versions":[]}],"url":"https://qiita.com/ogurasousui/items/dcd84fd96d2e8797a5e8"},{"title":"Script名をオブジェクト名に設定するエディター拡張","body":"#動機\nUnityではゲームオブジェクトの名前を任意に設定できるが、管理クラスなど大きな役割を果たすものはスクリプト名をそのまま設定したいこともある。\nそういった場合でのタイプミスを減らすためにもエディター拡張を作ってみた。\n\n#動作環境\n- Windows 10\n- Untiy2018.3.12f1\n\n#スクリプト\n```C#\nusing UnityEngine;\nusing UnityEditor;\npublic static class SetScriptNameToGameObject\n{\n    // 1.コンテキストメニューから処理を呼び出せるように属性を付加\n    [MenuItem(\"CONTEXT/MonoBehaviour/Set ScriptName To GameObject\")]\n    private static void Excute(MenuCommand command)\n    {\n        // 2.選択したスクリプト名を取得\n        var name = command.context.GetType().ToString();\n        // 3.スクリプト名の名前空間を取り除く\n        while (name.Contains(\".\"))\n        {\n            var index = name.IndexOf('.');\n            name = name.Remove(0, index + 1);\n        }\n\n        // 4.選択したコンテキストの先頭文字は現在のオブジェクト名になる\n        var target = command.context.ToString().Split(' ')[0];\n        // シーン内にあるオブジェクトを取得してスクリプト名を設定\n        GameObject.Find(target).name = name;\n    }\n}\n```\n\n##使ってみた\n![SetScriptNameToGameObject.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/96676/2f63e260-77f4-cc72-6038-6b02dfd96aac.gif)\nMonoBehaviourを継承したスクリプトのコンテキストメニューから**SetScriptNameToGameObject**を選択することでゲームオブジェクトの名前がスクリプト名になるようになった。\nこれでタイプミスが減るし、そもそも手入力する必要がなくなる。\n","created_at":"2019-04-14T11:59:28+09:00","id":"3d87d88e0a9b92c3d506","tags":[{"name":"C#","versions":[]},{"name":"Unity","versions":[]},{"name":"Unity拡張","versions":[]}],"url":"https://qiita.com/ogawa4283/items/3d87d88e0a9b92c3d506"},{"title":"Java + AJD4JP で和暦の情報 (元号・祝日・旧暦・干支・六曜・九星) を表示する","body":"## 概要\n\n- Java 用のライブラリ AJD4JP を用いて和暦の情報 (元号・旧暦・干支・六曜・九星) を表示する\n- AJD4JP はバージョン 1\\.4\\.5\\.2019 から新元号「令和」に対応している\n\n## AJD4JP (Astronomical Julian Day for Japan) について\n\n[AJD4JP について \\[AJD4JP 日本専用カレンダー処理 Javaクラスライブラリ\\]](http://ajd4jp.osdn.jp/doku.php)\n\n> Java用の、日本向け万年暦カレンダー処理を行うための開発ライブラリです。\n> 令和などの元号や、過去(明治時代)から現在にかけての祝日(山の日、振替休日や春分の日、ハッピーマンデー含む)の取得が可能です。\n> また、旧暦や六曜(または六輝)、干支(年・月・日・時)や九星(年・月・日・時)の取得も可能です。\n> ユリウス通日(ユリウス日)を使用するため、物理的に表現可能な日時範囲が大きい事も特徴です。\n> 漢数字での表現など、日時の書式化機能や文字列の全角半角変換・判定機能も持ちます。\n\n[Release ajd4jp 1\\.4\\.6\\.2019 \\- AJD4JP 日本専用カレンダー処理 Javaクラスライブラリ \\- OSDN](https://osdn.net/projects/ajd4jp/releases/70961)\n\n> 元号法。\n> 2019年5月1日以降、元号判定結果が「令和」となります。\n> \n> 皇室典範特例法。\n> 2019年5月1日以降「天皇誕生日」が12月23日から2月23日となります。\n> \n> 国民の祝日に関する法律の一部を改正する法律（平成30年法律第57号）。\n> 2020年以降「体育の日」の名称が「スポーツの日」となります。\n> \n> 「国民の祝日に関する法律」の特例(2020年東京オリンピック・パラリンピック競技大会)。\n> 2020年に限り「海の日」は7月23日となります。\n> 2020年に限り「スポーツの日」は7月24日となります。\n> 2020年に限り「山の日」は8月10日となります。\n> \n> 本リリースはjava6環境で実行可能ですが、次回リリースよりjava8以降でビルドする予定です。\n\n## 今回の環境\n\n- macOS 10.14 Mojave\n- OpenJDK 12\n- AJD4JP 1.4.6.2019\n\n```\n$ java -version\nopenjdk version \"12\" 2019-03-19\nOpenJDK Runtime Environment (build 12+33)\nOpenJDK 64-Bit Server VM (build 12+33, mixed mode, sharing)\n\n$ sw_vers\nProductName:\tMac OS X\nProductVersion:\t10.14.4\nBuildVersion:\t18E226\n```\n\n## ソースコード\n\n```java\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\n\nimport ajd4jp.AJD;\nimport ajd4jp.Era;\nimport ajd4jp.Holiday;\nimport ajd4jp.SexagenaryCycle;\nimport ajd4jp.LunisolarYear;\nimport ajd4jp.LSCD;\nimport ajd4jp.STCD;\nimport ajd4jp.format.Formats;\nimport ajd4jp.format.JapaneseYearF;\nimport ajd4jp.format.MonthF;\nimport ajd4jp.format.DayF;\nimport ajd4jp.format.WeekF;\nimport ajd4jp.format.Two;\nimport ajd4jp.format.TwoJapan;\nimport ajd4jp.format.C;\n\n// 和暦情報を出力するクラス\npublic class JapaneseDate {\n\n    public static void main(String[] argv) {\n\n        JapaneseDate jd = new JapaneseDate();\n\n        // GregorianCalendar の第2引数 Month 値は0から始まるので1を引く(1月の場合は0を指定)\n\n        // 昭和 最後の日\n        jd.print(new GregorianCalendar(1989, 1 - 1, 7));\n\n        // 平成 最初の日\n        jd.print(new GregorianCalendar(1989, 1 - 1, 8));\n\n        // 平成 最後の日\n        jd.print(new GregorianCalendar(2019, 4 - 1, 30));\n\n        // 令和 最初の日\n        jd.print(new GregorianCalendar(2019, 5 - 1, 1));\n\n        // 令和の天皇誕生日\n        jd.print(new GregorianCalendar(2020, 2 - 1, 23));\n\n        // 令和2年から「体育の日」は「スポーツの日」に名称変更\n        jd.print(new GregorianCalendar(2020, 7 - 1, 24));\n    }\n\n    /**\n     * 指定した Calendar オブジェクトに対応する和暦情報を出力します。\n     * @param cal 和暦情報を出力したい日付の Calendar オブジェクト\n     */\n    public void print(Calendar cal) {\n\n        AJD ajd = new AJD(cal);\n\n        // 西暦の年、月、日、曜日\n        SimpleDateFormat sdf = new SimpleDateFormat(\"Y年M月d日(E曜日)\", new Locale(\"ja\", \"JP\"));\n        String seireki = sdf.format(cal.getTime());\n        System.out.println(\"西暦: \" + seireki);\n\n        // 和暦の元号、年、月、日、曜日\n        Era.Year era = ajd.getEra();\n        String wareki =\n            era.getEra().getName() + era.getYear() + \"年\" +\n            ajd.getMonth() + \"月\" + ajd.getDay() + \"日(\" + ajd.getWeek().getJpName() + \"曜日)\";\n        System.out.println(\"和暦: \" + wareki);\n\n        // 和暦の漢数字\n        System.out.println(\"和暦(漢数字): \" + format.toString(ajd));\n\n        // 祝日\n        Holiday h = Holiday.getHoliday(ajd);\n        if (h != null) {\n            String shukujitsu = h.getName(ajd);\n            System.out.println(\"祝日: \" + shukujitsu);\n        }\n\n        // 干支 (十干と十二支)\n        SexagenaryCycle sc = SexagenaryCycle.getDay(ajd);\n        String jikkan = sc.getHeavenlyStem().getName();\n        String junishi = sc.getEarthlyBranch().getName();\n        System.out.println(\"干支(十干): \" + jikkan);\n        System.out.println(\"干支(十二支): \" + junishi);\n\n        // 旧暦\n        LunisolarYear year = LunisolarYear.getLunisolarYear(ajd);\n        LSCD lscd = year.getLSCD(ajd);\n\n        // 旧暦の年、月、日\n        String kyureki = lscd.getYear() + \"年\" + lscd.getMonth() + \"月\" + lscd.getDay() + \"日\";\n        System.out.println(\"旧暦: \" + kyureki);\n\n        // 旧暦の和風月名\n        String getsumei = lscd.getMonthName();\n        System.out.println(\"旧暦の和風月名: \" + getsumei);\n\n        // 六曜\n        String rokuyo = lscd.getRokuyo().getName();\n        System.out.println(\"六曜: \" + rokuyo);\n\n        // 九星\n        String kyusei = STCD.Kyusei.getDay(ajd).getName();\n        System.out.println(\"九星: \" + kyusei);\n\n        System.out.println();\n    }\n\n    // 和暦の漢数字表記用フォーマットクラス\n    private static Formats format = new Formats(\n        new JapaneseYearF(\n            new TwoJapan(\n                Two.Rule.FIRST, // 1を元と表記する。\n                Two.Rule.TRIPLE // 21以上の場合、三文字で表記する。\n            )\n        ),\n        new C(\"年\"),\n        new MonthF(new TwoJapan()),\n        new C(\"月\"),\n        new DayF(\n            new TwoJapan(\n                Two.Rule.TENS // 10～19の場合、1ではなく十で表記する。\n            )\n        ),\n        new C(\"日 \"),\n        new WeekF(),\n        new C(\"曜日  \")\n    );\n}\n```\n\n## コンパイル\n\n```\n$ ls\nJapaneseDate.java\tajd4jp-1.4.6.2019.jar\n\n$ javac -classpath ajd4jp-1.4.6.2019.jar JapaneseDate.java\n```\n\n## 実行結果\n\n```\n$ java -classpath ajd4jp-1.4.6.2019.jar:. JapaneseDate\n西暦: 1989年1月7日(土曜日)\n和暦: 昭和64年1月7日(土曜日)\n和暦(漢数字): 昭和六十四年一月七日 土曜日  \n干支(十干): 丁\n干支(十二支): 卯\n旧暦: 1988年11月30日\n旧暦の和風月名: 霜月\n六曜: 仏滅\n九星: 四緑木星\n\n西暦: 1989年1月8日(日曜日)\n和暦: 平成1年1月8日(日曜日)\n和暦(漢数字): 平成元年一月八日 日曜日  \n干支(十干): 戊\n干支(十二支): 辰\n旧暦: 1988年12月1日\n旧暦の和風月名: 師走\n六曜: 赤口\n九星: 五黄土星\n\n西暦: 2019年4月30日(火曜日)\n和暦: 平成31年4月30日(火曜日)\n和暦(漢数字): 平成三十一年四月三〇日 火曜日  \n祝日: 国民の休日\n干支(十干): 丁\n干支(十二支): 酉\n旧暦: 2019年3月26日\n旧暦の和風月名: 弥生\n六曜: 仏滅\n九星: 一白水星\n\n西暦: 2019年5月1日(水曜日)\n和暦: 令和1年5月1日(水曜日)\n和暦(漢数字): 令和元年五月一日 水曜日  \n祝日: 天皇の即位の日\n干支(十干): 戊\n干支(十二支): 戌\n旧暦: 2019年3月27日\n旧暦の和風月名: 弥生\n六曜: 大安\n九星: 二黒土星\n\n西暦: 2020年2月23日(日曜日)\n和暦: 令和2年2月23日(日曜日)\n和暦(漢数字): 令和二年二月二三日 日曜日  \n祝日: 天皇誕生日\n干支(十干): 丙\n干支(十二支): 申\n旧暦: 2020年1月30日\n旧暦の和風月名: 睦月\n六曜: 赤口\n九星: 八白土星\n\n西暦: 2020年7月24日(金曜日)\n和暦: 令和2年7月24日(金曜日)\n和暦(漢数字): 令和二年七月二四日 金曜日  \n祝日: スポーツの日\n干支(十干): 戊\n干支(十二支): 辰\n旧暦: 2020年6月4日\n旧暦の和風月名: 水無月\n六曜: 先負\n九星: 七赤金星\n```\n\n## 参考資料\n\n- [AJD4JP について \\[AJD4JP 日本専用カレンダー処理 Javaクラスライブラリ\\]](http://ajd4jp.osdn.jp/doku.php)\n- [Release ajd4jp 1\\.4\\.6\\.2019 \\- AJD4JP 日本専用カレンダー処理 Javaクラスライブラリ \\- OSDN](https://osdn.net/projects/ajd4jp/releases/70961)\n- [AJD4JP 1\\.4\\.6\\.2019 API 仕様](http://ajd4jp.osdn.jp/api/)\n- [GregorianCalendar \\(Java SE 12 & JDK 12 \\)](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/GregorianCalendar.html)\n\n","created_at":"2019-04-14T11:59:18+09:00","id":"10a9a62affdb8b733507","tags":[{"name":"Java","versions":[]},{"name":"和暦","versions":[]},{"name":"元号","versions":[]},{"name":"令和","versions":[]}],"url":"https://qiita.com/niwasawa/items/10a9a62affdb8b733507"},{"title":"AmazonSNSをCLIからササっと使ってみる（メール+SMS）","body":"# IAMユーザーを作成\nAmazonSNSFullAccessを持たせてIAMユーザーを作成する。\nKey IDとSecret Access Keyをメモっておく。\n\n# AWSのCLIをインストール\n\n```bash\n# pipがない人はpipを入れる\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"\nsudo python get-pip.py\n\n# pip経由でCLIをインストール\nsudo pip install awscli\n\naws configure\n# 以下のように設定\n# AWS Access Key ID [None]: 先ほど作成したIAMのKey ID\n# AWS Secret Access Key [None]: 先ほど作成したIAMのSecret Access Key\n# Default region name [None]: ap-northeast-1\n# Default output format [None]: json\n```\n\n# トピックを作成\nAmazonSNSではトピックを購読するという形でメッセージを送ります。\n試しにトピックを作ります。\n\n```bash\naws sns create-topic --name my_topic\n```\n以下のように出力されれば成功です。\n\n```json\n{\n    \"TopicArn\": \"arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic\"\n}\n```\n\n# メールを送ってみる\nまずはメールを送ってみます。\n\n```bash\naws sns subscribe \\\n--topic-arn arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic \\\n--protocol email \\\n--notification-endpoint wktq@dev.jp\n```\n\nこれで購読確認のメールが送信されます。承認すると、管理画面に購読者が追加されます。\n![スクリーンショット 2019-04-14 11.24.51.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/114895/9998dd9e-e6c6-d980-53c9-173e2ef1dc6c.png)\n\n試しにメールを送ってみます。\n\n```bash\naws sns publish \\\n--topic-arn arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic \\\n--subject \"Test mail\" \\\n--message \"Hello World\"\n```\n\n無事に届きました。\n![スクリーンショット 2019-04-14 11.27.42.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/114895/e01b0748-12f0-510d-3012-327b57e1c4bd.png)\n\n# SMSを送ってみる\n\n```bash\naws sns subscribe \\\n--topic-arn arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic \\\n--protocol sms \\\n--notification-endpoint +818012345678\n```\n\n```json\n{\n    \"SubscriptionArn\": \"arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic:[ユニークARN]\"\n}\n```\n\nSMSの場合は2段階確認が不要です。おそらく自動的に有効な電話番号かチェックしています。\n--target-arnには直接電話番号を入れてもokのようです。\n\nちゃんと届きました。\n\n```bash\naws sns publish \\\n--target-arn \"+818091246940\" \\\n--subject \"Test mail\" \\\n--message \"Hello World\"\n```\n\n<img width=\"375\" alt=\"IMG_757065D71941-1.jpeg\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/114895/259a72a6-8d1e-7fd9-b25d-a5bdcde2eadf.jpeg\">\n\n宝箱は早速アンロックします。\n\n# 料金\n[https://aws.amazon.com/jp/sns/sms-pricing/](https://aws.amazon.com/jp/sns/sms-pricing/)\n料金は上記より確認できます。（Japanを検索）\n\nキャリア以外にもHNIとかあってよくわかりませんが、$0.06278~0.09268（7.03円〜10.38円のようです）\n","created_at":"2019-04-14T11:59:02+09:00","id":"ea57e5eeba35139f3f8e","tags":[{"name":"AWS","versions":[]},{"name":"cli","versions":[]},{"name":"SMS","versions":[]},{"name":"AmazonSNS","versions":[]}],"url":"https://qiita.com/wktq/items/ea57e5eeba35139f3f8e"},{"title":"【Laravel】リレーション先のリレーションをEager Loading","body":"## 前提となるリレーション例\n* Comment\n\n```php\n    public function person()\n    {\n        return $this->belongsTo(Person::class, 'person_id');\n    }\n```\n  \n* Person\n\n ```php\n    public function posts()\n    {\n        return $this->hasMany(Post::class, 'person_id', 'id');\n    }\n```\n\n* Post\n    * 定義なし\n\n\n## Eager Loading例\n\n```php\n\n    Comment::with(['person', 'person.posts'])->get();\n```\n","created_at":"2019-04-14T11:50:58+09:00","id":"f61eac2890dd7f706cc5","tags":[{"name":"laravel","versions":[]}],"url":"https://qiita.com/fuubit/items/f61eac2890dd7f706cc5"},{"title":"ubuntu 18.04にvscodeをインストールする","body":"# 環境\n\n- ubuntu 18.04\n- vscode 1.33.1\n\n# リポジトリを登録する\n\naptのレポジトリで使用するマイクロソフトのキーをダウンロードしてきます。\n\n```\n~$ curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\n```\n\nダウンロードしてきたキーをaptに登録します。\n\n```\n~$ sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/\n```\n\naptのリポジトリを登録します\n\n```\n~$ sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list'\n```\n\n# インストール\n\naptでhttpsアクセスできるように**apt-transport-https**をインストールします。\n\n```\n~$ sudo apt install apt-transport-https\n```\n\nvscodeをインストールします。\n\n```\n~$ sudo apt update\n~$ sudo apt install code\n```\n\n起動は**code**です。\n\n```\n~$ code\n```\n","created_at":"2019-04-14T11:50:52+09:00","id":"e4db676e846897f8d554","tags":[{"name":"VSCode","versions":[]}],"url":"https://qiita.com/yoshiyasu1111/items/e4db676e846897f8d554"},{"title":"botkitとnodejsでslackbotを作成した際の参考リンク集","body":"#はじめに\n最近botkitを使ってslackbotを作成しました。\nその時に参考にしたページをまとめます。\n完全に備忘録です。\n\n#参考リンク\n一番ベースにしたもの(slackbot管理ページへのリンクもある)\nhttps://qiita.com/batch_/items/f141c595a6e587cd4588\n\nWindowsでの環境構築\nhttps://qiita.com/NagaokaKenichi/items/e0715b6bdde8459a705c\n\ncontroller.hears(どんなメッセージが来た時にどんなメッセージを返すか)の設定について詳しく書いてある\nhttps://clickan.click/slack-botkit/\n\nHerokuにデプロイする\nhttps://qiita.com/biga816/items/148a1156cd8b1a964b91\n\n### まだ試してない\n外部APIを叩く方法について書かれている\nhttps://qiita.com/potato4d/items/81e9e8aef6cd57c234af\n\nSlash Command(/inviteみたいなやつ)のつくりかた\n(たぶん上のリンクたちとは違うサービスを使ってる？)\nhttps://qiita.com/hiconyan/items/b506b0631265268a850b\n\n\n\n","created_at":"2019-04-14T11:46:42+09:00","id":"cda807ddaa07b748019b","tags":[{"name":"Windows","versions":[]},{"name":"Node.js","versions":[]},{"name":"Heroku","versions":[]},{"name":"slackbot","versions":[]},{"name":"Botkit","versions":[]}],"url":"https://qiita.com/gatosyocora/items/cda807ddaa07b748019b"},{"title":"USBについてのメモ#2","body":"USBについて雑多なメモ。その2\n\n#USBのソフトウェア\n##ソフトウェアの階層\nざっくりとわけるとホスト/デバイスにそれぞれ3つにわけられる。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/294245/baa41180-86fc-a602-b5de-71959ff11ed8.png\" width=50%>\n\n###ホスト\n- ホストコントローラドライバ\n    - 一番HWに近い層で、以下の仕事を担っている。\n        - レジスタの初期化や制御データの初期化\n        - USBホスト・ポート制御(ルートハブ制御、デバイス接続/切断制御、サスペンド/レジューム制御)\n        - 転送制御(コントトール転送、バルク転送、インタラプト転送、アイソクロナス転送)\n        - 割り込み/イベント処理\n        - 上記機能に関するUSBバス・ドライバ、OS機能、PCI Expressバスドライバへのインターフェースの提供\n    - USB3.0で提供されることとなったxHCは単一のコントローラでLow/Full/High/Super Speedをサポートすることができる。\n        - USB2.0対応のEHCIではHighスピード通信専用\n        - そのため、コンパチ対応のため、OHCI/UHCIコントローラーを搭載する必要があった。\n- バスドライバ\n    - 特定のコントローラ/デバイスに依存しない層で、すべてのコントローラ/デバイスに対して拡張性を意識した設計をする必要がある。\n    - コントローラドライバ、クラスドライバを管理するそうである。\n    - USBデバイスの管理をし、クラスドライバ/コントローラドライバにインターフェースを提供している。\n        - USBデバイス管理\n            - デバイスエニュメレーション管理(アドレス割り当て、各種ディスクリプタ情報取得/保持)\n            - デバイスツリー構成、デバイスアドレス管理\n            - USBハブポート制御/管理\n            - バスステート、リソース管理\n            - パワーマネジメント管理\n        - クラスドライバインターフェース\n            - デフォルトパイプ(標準リクエスト)リクエストの生成/発行\n            - バルク、インタラプト、アイソクロナス/コントロールパイプによるリクエストの生成/発行\n            - デバイススロットの有効化/無効化\n            - バルクストリーム転送\n            - デバイス情報提供、アクセス、制御(標準ディスクリプタ取得/設定など)\n            - パイプステート制御\n            - コンフィグレーション/インターフェース設定、オルタネートセッティング\n            - クラスリクエスト、ベンダリクエスト\n        - コントローラドライバインターフェース\n            - 接続/切断、サスペンドレジューム検出\n            - エニュメレーションに関する標準リクエストコール \n- クラスドライバ\n    - 特定のデバイスのターゲット機能を実現する階層\n    - マスストレージクラスやオーディオクラス用の標準デバイスクラスもあれば、ベンダ用のクラスドライバもある。\n\n###デバイス\n- ディスクリプタ情報を生成してホストに渡すことが重要な機能の1つで、その情報をもとにUSBホストは同じUSB接続でも通信相手によって必要な通信を行うことができる。\n- デバイスソフトウェアにも以下の階層が存在する。\n- コントローラドライバ\n    - HWに一番近い層で、以下の仕事を担っている\n        - USBデバイス接続/切断\n            - VBUS制御\n        - パワーマネジメント\n            - サスペンドレジューム制御\n        - 転送制御\n            - コントロール転送/バルク転送/インタラプト転送/アイソクロナス転送\n        - DMAコントローラ・ハードウェア制御\n            - USB EPCバッファ-メモリ間DMA転送\n            - USB EPCバッファ-他デバイス間DMA転送\n        - 割り込み制御\n            - 転送割り込み/DMA終了割り込み\n            - 切断/接続、サスペンド/レジューム割り込み\n- バスドライバ\n    - クラスドライバ/コントローラドライバの管理を行っている層で以下の仕事を担っている\n        - ディスクリプタ管理\n        - リクエスト処理\n        - USBデバイス管理\n            - 接続・切断、イベント発生\n        - コントローラドライバインターフェース\n        - クラスドライバインターフェース\n- クラスドライバ\n    - USB製品に合わせてユーザーから見た機能を実現する層\n    - USB2.0 3.0による違いに関してはバスドライバ、コントローラドライバで吸収されているため、基本的な通信においての差分はあまり気にしなくてもいい。(5.0Gbpsを実現するにはケアが必要。)\n    - 以下の仕事を担っている\n        - クラス固有ディスクリプタ管理\n        - デバイスクラス転送制御\n        - クラスリクエスト機能\n        - アプリケーションへのAPIの提供\n        - ブリッジI/F機能\n","created_at":"2019-04-14T11:39:33+09:00","id":"6ee032d01ead72e1df2a","tags":[{"name":"USB","versions":[]},{"name":"組み込み","versions":[]},{"name":"組み込みLinux","versions":[]}],"url":"https://qiita.com/kento_study/items/6ee032d01ead72e1df2a"},{"title":"Docker ComposeでRailsプロジェクトを立ち上げる","body":"## 概要\n[公式](https://docs.docker.com/compose/rails/)のやることだけ書いたやつです。\n\n## 手順\n\n```shell\n$ cd ~/projects\n$ mkdir project && cd $_\n$ vim Dockerfile\n```\n\n```dockerfile:Dockerfile\nFROM ruby:2.5\nRUN apt-get update -qq && apt-get install -y nodejs postgresql-client\nRUN mkdir /myapp\nWORKDIR /myapp\nCOPY Gemfile /myapp/Gemfile\nCOPY Gemfile.lock /myapp/Gemfile.lock\nRUN bundle install\nCOPY . /myapp\n\n# Add a script to be executed every time the container starts.\nCOPY entrypoint.sh /usr/bin/\nRUN chmod +x /usr/bin/entrypoint.sh\nENTRYPOINT [\"entrypoint.sh\"]\nEXPOSE 3000\n\n# Start the main process.\nCMD [\"rails\", \"server\", \"-b\", \"0.0.0.0\"]\n```\n\n```shell\n$ vim Gemfile\n```\n\n```ruby:Gemfile\nsource 'https://rubygems.org'\ngem 'rails', '~>5'\n```\n\n```shell\n$ touch Gemfile.lock\n$ vim entrypoint.sh\n```\n\n```shell:entrypoint.sh\n#!/bin/bash\nset -e\n\n# Remove a potentially pre-existing server.pid for Rails.\nrm -f /myapp/tmp/pids/server.pid\n\n# Then exec the container's main process (what's set as CMD in the Dockerfile).\nexec \"$@\"\n```\n\n```\n$ vim docker-compose.yml\n```\n\n```yml:docker-compose.yml\nversion: '3'\nservices:\n  db:\n    image: postgres\n    volumes:\n      - ./tmp/db:/var/lib/postgresql/data\n  web:\n    build: .\n    command: bash -c \"rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'\"\n    volumes:\n      - .:/myapp\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n```\n\n```shell\n$ docker-compose run web rails new . --force --no-deps --database=postgresql\n$ ls -l\ntotal 80\n-rw-r--r--   1 hondy12345  staff   453  4 14 11:08 Dockerfile\n-rw-r--r--   1 hondy12345  staff  2214  4 14 11:27 Gemfile\n-rw-r--r--   1 hondy12345  staff  5355  4 14 11:28 Gemfile.lock\n-rw-r--r--   1 hondy12345  staff   374  4 14 11:27 README.md\n-rw-r--r--   1 hondy12345  staff   227  4 14 11:27 Rakefile\ndrwxr-xr-x  10 hondy12345  staff   320  4 14 11:27 app\ndrwxr-xr-x   9 hondy12345  staff   288  4 14 11:28 bin\ndrwxr-xr-x  16 hondy12345  staff   512  4 14 11:27 config\n-rw-r--r--   1 hondy12345  staff   130  4 14 11:27 config.ru\ndrwxr-xr-x   3 hondy12345  staff    96  4 14 11:27 db\n-rw-r--r--   1 hondy12345  staff   305  4 14 11:27 docker-compose.yml\n-rw-r--r--   1 hondy12345  staff   202  4 14 11:27 entrypoint.sh\ndrwxr-xr-x   4 hondy12345  staff   128  4 14 11:27 lib\ndrwxr-xr-x   3 hondy12345  staff    96  4 14 11:27 log\n-rw-r--r--   1 hondy12345  staff    63  4 14 11:27 package.json\ndrwxr-xr-x   9 hondy12345  staff   288  4 14 11:27 public\ndrwxr-xr-x   3 hondy12345  staff    96  4 14 11:27 storage\ndrwxr-xr-x  11 hondy12345  staff   352  4 14 11:27 test\ndrwxr-xr-x   6 hondy12345  staff   192  4 14 11:27 tmp\ndrwxr-xr-x   3 hondy12345  staff    96  4 14 11:27 vendor\n$ sudo chown -R $USER .\n$ docker-compose build\n```\n\n```shell\n$ vim config/database.yml\n```\n\n```yml:config/database.yml\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  host: db\n  username: postgres\n  password:\n  pool: 5\n\ndevelopment:\n  <<: *default\n  database: project_development\n\n\ntest:\n  <<: *default\n  database: project_test\n```\n\n```shell\n$ docker-compose up\n$ docker-compose run web rake db:create\n```\n\n## 完了\nhttp://localhost:3000/\n![FireShot Capture 008 - Ruby on Rails - localhost.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/42587/a820325c-c078-c622-bf91-205503eaa344.png)\n","created_at":"2019-04-14T11:38:15+09:00","id":"1b3e84124bba1eda6c01","tags":[{"name":"Rails","versions":[]},{"name":"docker","versions":[]},{"name":"docker-compose","versions":[]}],"url":"https://qiita.com/hondy12345/items/1b3e84124bba1eda6c01"},{"title":"C++での画像処理向けにcv::Mat_<T>を拡張して便利に使う　その１","body":"# tl;dr\nOpenCVのcv::Matやcv::Mat_は便利だけど、画像処理に使うには、もう少し機能がほしい。そこで、cv::Mat_を派生して、(1)Offset値参照によるアドレス計算の省略機能 (2)画面外の画素の参照機能 (3)実数座標値による補完画素値の取得機能を追加してみた。ターゲットはC++17。Visual Studio 2017 15.9.3,OpenCV4.0で動作確認。最初は、ノウハウを備忘録も兼ねて公開するつもりだったが、割と凝ってしまったので、ちゃんと整備して正式に公開しようかな。\n\n# サンプルコード\n```c++\n#include <iostream>\n#include <opencv2/opencv.hpp>\n#include <opencv2/highgui/highgui.hpp>\n\n\nstruct Offset\n{\n\tOffset(size_t _offset) : offset(_offset) {}\n\tvoid operator++() { ++offset; }\n\tvoid operator++(int) { offset++; }\n\tsize_t offset;\n};\n\ntemplate<class T>\nclass Mtx_ : public cv::Mat_<T>\n{\npublic:\n\tusing cv::Mat_<T>::Mat_;\n\tusing cv::Mat_<T>::operator();\n\n\tOffset calcOffset(int y, int x) const\n\t{\n\t\treturn Offset(this->stepT(0) * y + x);\n\t}\n\n\tT& operator()(const Offset& offset)\n\t{\n\t\treturn dataT()[offset.offset];\n\t}\n\n\tconst T& operator()(const Offset& offset) const\n\t{\n\t\treturn dataT()[offset.offset];\n\t}\n\n\tconst T& operator()(int y, int x) const\n\t{\n\t\treturn dataT()[y*this->stepT(0) + x];\n\t}\n\n\tT& operator()(int y, int x)\n\t{\n\t\treturn dataT()[y*this->stepT(0) + x];\n\t}\n\n\tT operator()(float y, float x)\n\t{\n\t\tfloat fx0 = std::floor(x);\n\t\tfloat fy0 = std::floor(y);\n\t\tfloat fx1 = fx0 + 1.f;\n\t\tfloat fy1 = fy0 + 1.f;\n\n\t\tint hb = horzBorder();\n\t\tint vb = vertBorder();\n\n\t\tint x0 = static_cast<int>(fx0);\n\t\tif (x0 < -hb) x0 = -hb;\n\t\tif (x0 > this->cols + hb-2) x0 = this->cols + hb - 2;\n\n\t\tint y0 = static_cast<int>(fy0);\n\t\tif (y0 < -vb) y0 = -vb;\n\t\tif (y0 > this->rows + vb - 2) y0 = this->rows + vb - 2;\n\n\t\tint x1 = x0 + 1;\n\t\tint y1 = y0 + 1;\n\n\t\tT* p = (*this)[y0] + x0;\n\t\tT v00 = p[0];\n\t\tT v10 = p[this->stepT()];\n\t\tT v01 = p[1];\n\t\tT v11 = p[this->stepT()+1];\n\n\t\tfloat v0 = v00 * (fx1 - x) + v01 * (x - fx0);\n\t\tfloat v1 = v10 * (fx1 - x) + v11 * (x - fx0);\n\t\treturn v0 * (fy1 - y) + v1 * (y - fy0);\n\t}\n\n\tT operator()(cv::Point2f pt)\n\t{\n\t\treturn (*this)(pt.y, pt.x);\n\t}\n\n\n\tstatic Mtx_<T> createWithBorder(int _rows, int _cols, int vborder, int hborder = vborder)\n\t{\n\t\tcv::Mat_<T> mat(_rows + vborder * 2, _cols + hborder * 2);\n\t\tMtx_<T> mtx2 = mat(cv::Rect(hborder, vborder, _cols, _rows));\n\t\treturn \tmtx2;\n\t}\n\n\tstatic Mtx_<T> createWithBorder(cv::Size sz, int vborder, int hborder = vborder)\n\t{\n\t\treturn createWithBorder(sz.height, sz.width, vborder, hborder);\n\t}\n\tint horzBorder() const {\n\t\tcv::Size sz;\n\t\tcv::Point pt;\n\t\tthis->locateROI(sz, pt);\n\t\treturn pt.x;\n\t};\n\tint vertBorder() const {\n\t\tcv::Size sz;\n\t\tcv::Point pt;\n\t\tthis->locateROI(sz, pt);\n\t\treturn pt.y;\n\t};\n\n\tvoid extrapolate()\n\t{\n\t\tconst auto vborder = vertBorder();\n\t\tconst auto hborder = horzBorder();\n\t\t//Left\n\t\tfor (int y = 0; y < this->rows; y++) {\n\t\t\tauto pix = (*this)(y, 0);\n\t\t\tauto offset = calcOffset(y, -hborder);\n\t\t\tfor (int dx = 0; dx < hborder; dx++) {\n\t\t\t\t(*this)(offset) = pix;\n\t\t\t\toffset++;\n\t\t\t}\n\t\t}\n\t\t//Right\n\t\tfor (int y = 0; y < this->rows; y++) {\n\t\t\tauto pix = (*this)(y, this->cols - 1);\n\t\t\tauto offset = calcOffset(y, this->cols);\n\t\t\tfor (int dx = 0; dx < hborder; dx++) {\n\t\t\t\t(*this)(offset) = pix;\n\t\t\t\toffset++;\n\t\t\t}\n\t\t}\n\t\t//Top\n\t\tfor (int y = 0; y < vborder; y++) {\n\t\t\tauto offset_s = calcOffset(0, -hborder);\n\t\t\tauto offset_d = calcOffset(-y - 1, -hborder);\n\t\t\tfor (int dx = 0; dx < this->cols + hborder * 2; dx++) {\n\t\t\t\t(*this)(offset_d) = (*this)(offset_s);\n\t\t\t\toffset_d++;\n\t\t\t\toffset_s++;\n\t\t\t}\n\t\t}\n\t\t//Bottom\n\t\tfor (int y = 0; y < vborder; y++) {\n\t\t\tauto offset_s = calcOffset(this->rows - 1, -hborder);\n\t\t\tauto offset_d = calcOffset(this->rows, -hborder);\n\t\t\tfor (int dx = 0; dx < this->cols + hborder * 2; dx++) {\n\t\t\t\t(*this)(offset_d) = (*this)(offset_s);\n\t\t\t\toffset_d++;\n\t\t\t\toffset_s++;\n\t\t\t}\n\t\t}\n\t}\nprivate:\n\tconst T* dataT() const { return reinterpret_cast<const T*>(this->data); }\n\tT* dataT() { return reinterpret_cast<T*>(this->data); }\n};\n\nusing Mtx1b = Mtx_<uchar>;\nusing Mtx3b = Mtx_<cv::Vec3b>;\nusing Mtx4b = Mtx_<cv::Vec4b>;\nusing Mtx1i = Mtx_<int>;\nusing Mtx1w = Mtx_<unsigned short>;\nusing Mtx1f = Mtx_<float>;\nusing Mtx3f = Mtx_<cv::Vec4f>;\nusing Mtx4f = Mtx_<cv::Vec4f>;\n\ntemplate<class T>\nvoid print(const Mtx_<T>& m)\n{\n\tint vborder = m.vertBorder();\n\tint hborder = m.horzBorder();\n\n\tfor (int y = -vborder; y < m.rows+vborder; y++) {\n\t\tfor (int x = -hborder; x < m.cols+hborder; x++) {\n\t\t\tstd::cout << m(y, x) << \" \";\n\t\t}\n\t\tstd::cout << std::endl;\n\t}\n}\n\n\ntemplate<class MAT>\nvoid fill_value(MAT& m)\n{\n\tint i = 0;\n\tfor (int y = 0; y < m.rows; y++) {\n\t\tfor (int x = 0; x < m.cols; x++) {\n\t\t\tm(y, x) = i;\n\t\t\ti++;\n\t\t}\n\t}\n}\n\n\n//使い方\nint main()\n{\n\tusing namespace std;\n\n\t//入力用データ生成\n\tMtx1w mtx(10, 10);\n\tfill_value(mtx);\n\n\t//(1)(1)Offset値参照によるアドレス再計算の省略機能\n\tcout << \"(1)Offset値参照によるアドレス再計算の省略機能\" << endl;\n\tMtx1f mtxf(mtx.size());\n\tassert(mtxf.stepT() == mtx.stepT());\n\tfor (int y = 0; y < mtx.rows; y++) {\n\t\tfor (int x = 0; x < mtx.cols; x++) {\n\t\t\tauto os = mtx.calcOffset(y, x);\n\t\t\tmtxf(os) = mtx(os);\n\t\t}\n\t}\n\tcout << \"mtx(1,1)=\" << mtx(1, 1) << endl;\n\tcout << \"mtxf(1,1)=\" << mtxf(1, 1) << endl;\n\tcout << endl;\n\n\t//(2)画面外の画素値の参照\n\tcout << \"(2)画面外の画素値の参照\" << endl;\n\tauto mtx_ext = Mtx1i::createWithBorder(10, 10, 1, 2);\n\tfill_value(mtx_ext);\n\tmtx_ext.extrapolate();\n\tprint(mtx_ext);\n\n\tcv::Mat_<int> mat = mtx_ext;\n\tcout << \"mtx_ext(0,0)=\" << mtx_ext(0, 0) << endl;\n\tcout << \"mat(0,0)=\" << mat(0, 0) << endl;\n\tcout << endl;\n\n\t//(3)実数座標値による補完画素値の取得\n\tcout << \"(3)実数座標値による補完画素値の取得\" << endl;\n\tcout << \"mtxf(0,0)=\" << mtxf(0, 0) << endl;\n\tcout << \"mtxf(0,1)=\" << mtxf(0, 1) << endl;\n\tcout << \"mtxf(1,0)=\" << mtxf(1, 0) << endl;\n\tcout << \"mtxf(1,1)=\" << mtxf(1, 1) << endl;\n\tcout << \"mtxf(0.5,0.5)=\" << mtxf(0.5f, 0.5f) << endl;\n\tcout << \"mtxf(0.9,0.4)=\" << mtxf(0.9f, 0.4f) << endl;\n\tcout << \"mtx(0.9,0.4)=\" << mtx(0.9f, 0.4f) << endl;\n}\n```\n# 結果\n```console\n(1)Offset値参照によるアドレス計算の省略機能\nmtx(1,1)=11\nmtxf(1,1)=11\n\n(2)画面外の画素値の参照\n0 0 0 1 2 3 4 5 6 7 8 9 9 9\n0 0 0 1 2 3 4 5 6 7 8 9 9 9\n10 10 10 11 12 13 14 15 16 17 18 19 19 19\n20 20 20 21 22 23 24 25 26 27 28 29 29 29\n30 30 30 31 32 33 34 35 36 37 38 39 39 39\n40 40 40 41 42 43 44 45 46 47 48 49 49 49\n50 50 50 51 52 53 54 55 56 57 58 59 59 59\n60 60 60 61 62 63 64 65 66 67 68 69 69 69\n70 70 70 71 72 73 74 75 76 77 78 79 79 79\n80 80 80 81 82 83 84 85 86 87 88 89 89 89\n90 90 90 91 92 93 94 95 96 97 98 99 99 99\n90 90 90 91 92 93 94 95 96 97 98 99 99 99\nmtx_ext(0,0)=0\nmat(0,0)=0\n\n(3)実数座標値による補完画素値の取得\nmtxf(0,0)=0\nmtxf(0,1)=1\nmtxf(1,0)=10\nmtxf(1,1)=11\nmtxf(0.5,0.5)=5.5\nmtxf(0.9,0.4)=9.4\nmtx(0.9,0.4)=9\n```\n\n# 解説\n## (1)Offset値参照によるアドレス再計算の省略機能\nOffset値を計算するメソッドとOffset値を引数として画素値を返すオペレータを定義することによって、**２つ以上のMtx_型オブジェクトで、同一座標の画素値を参照するときに、y*step+xといったアドレッシングのための再計算を省略**できる。画素値型が異なったMtx_型オブジェクトでも同じOffset値を使えるので型変換にも使える。ただし、Mat_<T>::stepT()で参照されるメモリ確保された行の大きさが異なる場合は、当然使えないので、使う場合には注意が必要。\n\n## (2)画面外の画素値の参照\nカスタムなN×Nカーネルによるフィルタ処理を書く場合、擬似的に画面外(座標値が負、もしくは、幅、高さ以上で、コード上はborderと表現)を参照したい場合がある。画面外を参照できないと座標値をクリップする必要があり、参照ごとにクリップすると処理が重くなる。**ROI機能を使って、borderを設定したMtx_型のオブジェクトを作成し、低いコストで画面外を参照可能**とした。画面外もoperatorを使って参照できる。extrapolationで、borderをcopyモードで埋めることができる。なお、上記のコードではMatやMat_では実装されているデバッグモード時の座標値範囲チェックを実装していない。\n　\n## (3)実数座標値による補完画素値の取得 \n**座標値をfloatで受け取り線形補間による画素値を返すことを可能**とした。現段階では、値の取得だけで、書き込みには未対応。set関数を作ってもいいけど、せっかくだからoperatorで書きたい。線形補間コードの記述も含めて、次回、記事を書きたい。\n\n# 補足\nソースは無保証でソースを使用したことによって発生した損害に対して、責任を負いません。\n","created_at":"2019-04-14T11:36:46+09:00","id":"bc2fc2667cfb22fcf075","tags":[{"name":"C++","versions":[]},{"name":"OpenCV","versions":[]}],"url":"https://qiita.com/luftfararen/items/bc2fc2667cfb22fcf075"},{"title":"Raspberry Pi 3 B+に シャットダウンスイッチを付ける","body":"\n## シャットダウンスイッチをつけた理由\nカムプログラムロボットに組み込んだRaspberry Piでプログラムするとき、ChromeBookのLinuxターミナルや、VNCクライアントで接続して作業するので、作業終了後は shutdownコマンドやGUIのShutdownボタンで、OSをシャットダウンして Raspberry Piを終了させます。\nでも、ChromeBookを終了した後に、Raspberry Piのシャットダウンを忘れていた事に気づくことが度々あり、その都度 ChromeBookを起動させるのが面倒でした。\n\n**↓こんなの作っています。**\n![P_20190313_024111_vHDR_Auto - Edited (1).jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/57306/2f11d5a2-de3f-d5f4-49fa-cac840adfb4c.jpeg)\n[Qiita: Raspberry Pi 3 Mobel B+とカムプログラムロボットでロボット作成\n](https://qiita.com/K-Ponta/items/507b1a655a3489663bc8)\n\nあと、（どのくら先になるか分かりませんが）自立起動させた場合、シャットダウンボタンがあったほうが都合がいいかなと思い、シャットダウンボタンを追加してみました。\n\n\n### シャットダウンボタンの設置イメージ\nブレッドボード上に設置したタクトスイッチの端子を、GPIO.7(BCM 4)と、GND に接続します。\n![P_20190414_101104_vHDR_Auto - Edited.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/57306/4ef86e97-75b2-8be2-97c8-8d39fbac73c1.jpeg)\n\n## OS環境\nRaspberry Piの OSはRaspbian 9.8になります。\n\n```bash\npi@raspberrypi:~ $ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Raspbian\nDescription:    Raspbian GNU/Linux 9.8 (stretch)\nRelease:        9.8\nCodename:       stretch\n```\n\nOSの各パッケージはまめに **apt-get update** しているので最新だと思います。\n\n## シャットダウンプログラム\n\nプログラムは piユーザのホームディレクトリに binディレクトを作成してそこに保存することにしました。\n\n```bash\npi@raspberrypi:~ $ mkdir bin/\npi@raspberrypi:~ $ vi ./bin/shutdown_button.py\n```\n\nプログラムはpythonで記述し、python2,python3の両方で動作することを確認済みです。\nプログラムは、このページを参考にシャットダウンボタンを作成しました。\n[クラゲのIoT: RaspberryPiにshutdownボタンを付けよう](http://jellyware.jp/kurage/raspi/shutdown_button.html)\n\n```python:shutdown_button.py\n#!/usr/bin/python\n\nimport time\nimport RPi.GPIO as GPIO\nimport os\n\nGPIO.setmode(GPIO.BCM)\n\nGPIO.setup(4,GPIO.IN, pull_up_down=GPIO.PUD_UP)\n\ntry:\n    while True:\n        GPIO.wait_for_edge(4, GPIO.FALLING)\n        sw_counter = 0\n\n        while True:\n            sw_status = GPIO.input(4)\n\n            if sw_status == 0:\n                sw_counter = sw_counter + 1\n                if sw_counter >= 200:\n                    os.system(\"sudo shutdown -h now\")\n                    break\n            else:\n                break\n\n            time.sleep(0.01)\n\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    GPIO.cleanup()\n```\n\n2秒以上、押し続けた場合、shutdown コマンドを実行するようにしています。\n\n## OS起動時に自動実行するようにする\n\n動作確認後、etcの下にあるrc.local ファイルを編集して、起動時にプログラムを実行するようにしています。\n\n```bash\npi@raspberrypi:~ $ sudo vi /etc/rc.local \n```\n\nexit 0 の前の1行が追加したコードになります。\n\n```bash:/etc/rc.local\n/home/pi/bin/shutdown_button.py\nexit 0\n```\n\n追加後、Rsapberry Piを再起動すると設定が反映されます。\n再起動後、タクトスイッチを長押してシャットダウンが実行されることを確認します。\n\n## 最後に\nシャットダウンスイッチを作っていて、Raspberry Piのハードウェアとソフトウェアの両方を比較的簡単に連動させながら扱えるの魅力を再実感しました。\nコンピュータのプログラムを学ぶときに、手で触れられる部分とプログラムを連動させられると**実感**として判りやすいので、大切ですね。\n\n願わくは、20年度からの小学校でのプログラム教育義務化にもこの感覚は反映させてほしいです。小学校の子がいる、おっさんプログラマからのお願いです。\n\nでも、できる環境があるのと、それを教えることができる環境があるかは、別物ですよね。。。。、難しいです。\n","created_at":"2019-04-14T11:35:43+09:00","id":"12127d7077d69a82693c","tags":[{"name":"Python","versions":[]},{"name":"電子工作","versions":[]},{"name":"RaspberryPi","versions":[]}],"url":"https://qiita.com/K-Ponta/items/12127d7077d69a82693c"},{"title":"Sambaでリモート接続","body":"### Windows → Vagrant → VB → CentOSにSambaをインストールしてファイル共有\n\nユーザー作成\n\n```\nsudo useradd user-name\npasswd user-password\n```\n\nsambaをインスト―ル\n\n```\nsudo yum -y install samba\n#Sambaにユーザーを登録\nsudo pdbedit -a user-name\n```\n\nsamba設定ファイルを編集\n\n```\nsudo vi /etc/samba/smb.conf\n\n以下　変更追加\n[global]\n        workgroup = MY-WORK-GRP\n        security = user\n        passdb backend = tdbsam\n        printing = bsd\n        wide links = yes\n        unix extensions = no\n\n[public]\n        comment = Vagrant local my-project\n        path = /home/my-project\n        public = yes\n        browseable = yes\n        writable = yes\n        read only = No\n        inherit acls = Yes\n        force user = user-name\n        force group = user-name\n        guest ok = yes\n        guest only = yes\n        map archive = no\n        valid users = vagrant,user-name\n        create mode = 0775\n        directory mode = 0775\n        hosts allow = ALL\n        vfs objects = streams_xattr\n\n[homes]\n        comment = Home Directories\n        valid users = %S, %D%w%S\n        browseable = No\n        read only = No\n        inherit acls = Yes\n\n[printers]\n        comment = All Printers\n        path = /var/tmp\n        printable = Yes\n        create mask = 0600\n        browseable = No\n```\n\n\n\nSamba起動\n\n```\nsudo systemctl start smb\nsudo systemctl enable smb\n```\n\nselinuxの設定を無効にする\n\n```\nvim /etc/selinux/config\nSELINUX=disabled\n```\n\n\nシンボリックリンク\n\n```\nmkdir /home/vagrant/my-project\nmkdir /home/my-project\nchmod 0755 /home/vagrant\nchmod 0775 /home/vagrant/my-project\nln -s /home/vagrant/my-project /home/my-project/my-project\n```\n\n\n共有設定（Windows)\n仮想マシンのIP：192.168.33.100\n\n```\n\\\\192.168.33.100\\public\\my-project\n```\n\n\nその他(sshのパスワード認証を許可)\n\n```\nsudo vi /etc/ssh/sshd_config\n# 下記コメントアウトを解除設定\n#PasswordAuthentication yes\nsystemctl restart sshd\n```\n","created_at":"2019-04-14T11:34:49+09:00","id":"649cfb13c0dba244df06","tags":[{"name":"vagrant","versions":[]},{"name":"Win10","versions":[]},{"name":"samba,centos7","versions":[]}],"url":"https://qiita.com/minarai/items/649cfb13c0dba244df06"},{"title":"VirtualBox のバグで Guest Addition がインストールできない","body":"注: この記事は2019年3月28日に書いた．\n\nVirtualBox を，WindowsホストでUbuntu16.04ゲストというパターンで動かしている．数日前から急にshared folderがマウントできなくなってしまった．正確には以下のコマンドで手動マウントはできるのだが，自動マウントをしてくれない．\n\n```\n# mount -t vboxsf (マウントポイント名) /media/sf_(マウントポイント名)\n```\n\nその他にも妙な挙動がいくつか．どうも，Guest Addition のビルドに失敗している模様．\n\n```\n# cd /media/(ユーザ名)/VBox_GAs_....\n# ./VBoxLinuxAdditions.run\n```\nを実行すると失敗して，`/var/log/vboxadd-setup.log` を見ると，\n\n```\n/tmp/vbox.0/r0drv/linux/memobj-r0drv-linux.c:1113:18: error: too many arguments to function ‘get_user_pages’\n             rc = get_user_pages(pTask,                  /* Task for fault accounting. */^M\n                  ^\n```\n\nてなのが出ている．\n\n\n[解決法](https://qiita.com/nk0130/items/0899b523ec7444b20135)を書いてくれている人がいた．直っているけれどリリースには入っていないのだそうで[テストビルド](https://www.virtualbox.org/wiki/Testbuilds)を持ってくるのだと．\n\nなんでも\nThe Windows test build packages are working precisely like a usual VirtualBox installer packages, with one difference: they will not work (the error message will point to unsigned drivers) if you install them on Windows 10 if your system has UEFI secure boot enabled. To make these test build work you need to disable UEFI secure boot in the system's UEFI config.\nだそうなので，UEFIセキュアブートを無効にしなくてはいけない．\n\nうまくいった．\n\n","created_at":"2019-04-14T11:28:20+09:00","id":"3897d498a85ea471fd05","tags":[{"name":"VirtualBox","versions":[]},{"name":"共有フォルダ","versions":[]},{"name":"VirtualBoxGuestAdditions","versions":[]}],"url":"https://qiita.com/tanabe13f/items/3897d498a85ea471fd05"},{"title":"Sigfox Sequence Number（シーケンス番号）管理","body":"シーケンス番号は、Sigfoxプロトコルのオーバーヘッドの一部であり、メッセージが送信されるたびにデバイス自体によってインクリメントされます。Sigfoxクラウドは、シーケンス番号をデバイスメッセージの一貫性の観点で確認し、メッセージを受信しますが、このシーケンス番号に連続していない場合、警告・エラーが発生します。\n\n###Warningイベント\n**\"break in message sequence\"**イベントが発生します。このイベントは警告イベントであり、メッセージ受信には影響を及ぼしません。\n###Errorイベント\n**\"out of message sequence\"**イベントが発生します。このイベントが発生すると、Sigfoxクラウドは該当デバイスからのメッセージを受信しなくなるため、その状態を復帰させるためには、**disengage sequence number**をする必要があります。\n###シーケンスライフサイクル\nシーケンス番号は、4096メッセージで、ゼロリセットされます。\n\n#イベントの発生トリガ\nWarningイベント、Errorイベントは下記定義により発生します。\n\n- days x 300\n- contract x (days + 2)\n\ndays: 2つのメッセージ間の経過日。同一日（24時間内）の場合は\"1\"\ncontract: 契約上の上り回数制限\n上記2つの計算値の**min**値、**max**値を用い、シーケンスの飛びが\n\n1. min値以下の場合は**warning**イベント発生\n2. max値より大の場合は**error**イベント発生\n3. min値とmax値の間の場合は、イベントは発生しない\nとなります。\n\n例えば、\n\n- 2つのメッセージ間の経過: 40時間\n- 契約上の上り回数: 50回\nの場合、days=2、contract=50となり、\n\n- days x 300 = 2 x 300 = **600**\n- contract x (days + 2) = 50 x (2 + 2) = **200**\n\nとなり、min=200、max=600となります。\nつまり、2つのメッセージ間のシーケンス番号飛びが\n\n1. 200以下の場合は、Warningイベント発生\n2. 600より大の場合は、Errorイベント発生\n3. 200～600の場合は、イベントは発生せず、次のメッセージ受信時の判断\n\nとなります。\n\n[Sigfox Japan KCCS](https://qiita.com/organizations/sigfox)\n\n","created_at":"2019-04-14T11:26:10+09:00","id":"36127777480ed107405a","tags":[{"name":"管理","versions":[]},{"name":"SigFox","versions":[]},{"name":"seqNumber","versions":[]}],"url":"https://qiita.com/ghibi/items/36127777480ed107405a"},{"title":"ある数列の発散について","body":"今回は以下のような問題を解いてみたいと思います。必要な知識は合同式だけですので、\n高校生でも十分に理解できる内容です。\n\n\n## 問題\n\n```math:\n\n正の整数 m と x に対し m^x の各桁の和を\nF_m(x) と表すことにする。\\\\\nこのときmが10の冪でなければ、xが増大するにしたがいF_m(x)は発散することを証明せよ。\n```\n\n例えば m = 3 とすると\n\n```math:\nF_3(1)=3,~~F_3(2)=9,~~F_3(3)=2+7=9,~~F_3(4)=8+1=9,~~F_3(5)=2+4+3=9, \\cdots\n```\n\nというような値となります。\n#### オイラーの定理\nこの問題を解くにあたって鍵となるのは、オイラーの定理と言われる次の定理です。\n\n```math:\naとnが互いに素な整数であるとき、次が成り立つ。\\\\\n　　　　　    a^{\\varphi(n)} \\equiv 1 \\pmod n \\\\\nここで\\varphi(n)~は~n~以下の~n~と互いに素な正の整数の個数を表す。\n```\nこの定理は、n が素数の時は次の有名なフェルマーの小定理となります。\n\n```math:\npが素数で、a~が~p~と互いに素な正の整数であるとき、次が成り立つ。\\\\\n　　　　　a^{p-1} \\equiv 1 \\pmod p \\\\\n```\n\n\n##証明\n４つの場合に分けて考えていきます。\n#### Case 1　整数mが5でも2でも割り切れないとき\n```math:\nF_m(x)が発散しないならば任意の整数~x~に対しF_m(x) \\leq F_m(x_0) を満たすx_0 \\in {\\mathbb N}が存在する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nm^{x_0}の桁数を~l~とすると~10^l>m^{x_0}~である。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nまたオイラーの定理より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n　m^{\\varphi(10^l)} \\equiv 1 \\pmod {10^l}\\\\\n\nしたがって~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nm^{\\varphi(10^l)+x_0} \\equiv m^{x_0} \\pmod {10^l}\\\\\nm^{\\varphi(10^l)+x_0}は下~l~桁が~m^{x_0}~と等しく最上位の数が~0~でないことから~F_m(\\varphi(10^l)+x_0)>F_m(x_0)~となるが、~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nこれは~x_0の定義に反する。よってF_m(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n\n```\n\n\n#### Case 2　整数mが5の倍数で、かつ2の倍数ではないとき\n\n[補題]\n\n```math:\nlを任意の自然数として、関数g_l:{\\mathbb N} \\rightarrow {\\mathbb　N} を次のように定める。\\\\\ng_l(x)=\\{5^{l \\varphi (10^x)}を十進法表示したときの下x桁の和 \\}\\\\\n\nこのときg_l(x)は発散する。\n```\n[補題の証明]\n\n```math:\n\ng_l(x)が発散しないならば任意の整数~x~に対しg_l(x) \\leq g_l(x_1) を満たすx_1 \\in {\\mathbb N}が存在する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nまた\\varphi(10^n)=4 \\cdot 10^{n-1}であるから任意の自然数k~に対し~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n5^{l \\varphi (10^{x_1+k})}-5^{l \\varphi (10^{x_1})}\n=5^{l \\cdot 4 \\cdot 10^{x_1-1}} (5^{l \\cdot 4 \\cdot 10^{x_1+k-1}-{l \\cdot 4 \\cdot 10 ^{x_1 -1}}}-1)\\\\\n\n=5^{l \\cdot 4 \\cdot 10^{x_1-1}} (5^{l \\cdot 4 \\cdot 10^{x_1-1}(10^k-1)}-1)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\cdots(1)\\\\\n\n\n\nさらに\\varphi(2^n)=2^{n-1}で、5^lと2^nは互いに\n素な整数だからオイラーの定理より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n(5^l)^{\\varphi(2^n)} \\equiv 5^{l 2^{n-1}} \\equiv 1 \\pmod {2^n}\\\\\n従って\n5^{l \\cdot 4 \\cdot 10^{x_1-1}(10^k-1)}-1 \\equiv (5^{l \\cdot 2^{x_1-1}})^{ 4 \\cdot 5^{x_1-1}(10^k-1)}-1 \\equiv 0 \\pmod {2^{x_1}}~~~~~~~~~\\cdots(2)~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n\n一方10^{x_1-1} \\geq x_1 より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n5^{l \\cdot 4 \\cdot 10^{x_1-1}} \\equiv 0 \\pmod {5^{x_1}} ~~~~~~~~~\\cdots(3)\\\\\n\n(1)(2)(3)より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n5^{l{\\varphi(10^{x_1+k})}} - 5^{l \\varphi(10^{x_1})} \\equiv 0 \\pmod {10^{x_1}}\\\\\n\nすなわち5^{l{\\varphi(10^{x_1+k})}}の下x_1桁は全て5^{l \\varphi(10^{x_1})}に等しい。\\\\\n\ng_l(x_1)の最大性から5^{l{\\varphi(10^{x_1+k})}}の下x_1+1桁目からx_1+k桁目は全て0である。\\\\\nよって5^{l{\\varphi(10^{x_1})}}  \\equiv A \\pmod {10^{x_1}}~~~~(1 \\leq A \\leq 10^{x_1}-1)とおくと~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n5^{l{\\varphi(10^{x_1+k})}} - A \\equiv 0 \\pmod {10^{x_1+k}}\\\\\n従って\n5^{l{\\varphi(10^{x_1+k})}} - A \\equiv 0 \\pmod {5^{x_1+k}}\\\\\n一方\\varphi(10^{x_1+k})=4 \\cdot 10^{x_1+k-1}>x_1+kより5^{l{\\varphi(10^{x_1+k})}} \\equiv 0 \\pmod {5^{x_1+k}}\\\\\nよって\nA \\equiv 0 \\pmod {5^{x_1+k}}\\\\\n\n\nしかしこれはk~が十分大きいとき成り立たない。よってg_l(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n\n```\n\n[Case 2の証明]\n\n```math:\nm=5^{l'}p~~(p~は10と互いに素な整数）とおくと、任意の自然数~y~に対し\nオイラーの定理より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\np^{\\varphi(10^y)} \\equiv 1 \\pmod {10^y} であるから~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nm^{\\varphi(10^y)} = p^{\\varphi(10^y)}5^{l'\\varphi(10^y)} \\equiv  5^{l'\\varphi(10^y)} \\pmod {10^y}\\\\\n\n補題より5^{l'\\varphi(10^y)}の下~y~桁の和はいくらでも大きな数をとりうるので、F_m(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\n\n#### Case 3　整数mが2の倍数で、かつ5の倍数ではないとき\n\n[補題Ⅱ]\n\n```math:\naを任意の自然数として、関数h_a:{\\mathbb N} \\rightarrow {\\mathbb　N} を次のように定める。\\\\\nh_a(x)=\\{2^{a \\varphi (10^x)}を十進法表示したときの下x桁の和 \\}~~(x \\in {\\mathbb N} )\\\\\n\nこのときh_a(x)は発散する。\n```\n[補題Ⅱの証明]\n\n```math:\n\nh_a(x)が発散しないならば任意の整数~x~に対しh_a(x) \\leq h_a(x_2) を満たすx_2 \\in {\\mathbb N}が存在する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n任意の自然数~b~に対し~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n2^{a \\varphi (10^{x_2+b})}-2^{a \\varphi (10^{x_2})}\\\\\n=2^{a \\cdot 4 \\cdot 10^{x_2-1}} (2^{a \\cdot 4 \\cdot 10^{x_2-1}(10^b-1)}-1)   \\equiv 0 \\pmod {10^{x_2}}\\\\\n\nよって~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n2^{a{\\varphi(10^{x_2})}}  \\equiv B \\pmod {10^{x_2}}~~~~(1 \\leq B \\leq 10^{x_2}-1)とおくと\\\\\n2^{a{\\varphi(10^{x_2+b})}} - B \\equiv 0 \\pmod {10^{x_2+b}}\\\\\n従って\n2^{a{\\varphi(10^{x_2+b})}} - B \\equiv 0 \\pmod {2^{x_2+b}}\\\\\nよって\nB \\equiv 0 \\pmod {2^{x_2+b}}\\\\\n\n\nしかしこれは~b~が十分大きいとき成り立たない。よってh_a(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n\n```\n\n\n\n\n\n\n\n[Case 3の証明]\n\n```math:\nm=2^{l''}q~~(q~は10と互いに素な整数）とおくと、任意の自然数z~に対し~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nオイラーの定理よりq^{\\varphi(10^z)} \\equiv 1 \\pmod {10^z} であるから~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nm^{\\varphi(10^z)} = q^{\\varphi(10^z)}2^{l''\\varphi(10^z)} \\equiv  2^{l''\\varphi(10^z)} \\pmod {10^z}\\\\\n\n補題Ⅱより2^{l''\\varphi(10^z)}の下z~桁の和はいくらでも大きな数をとりうるので、F_m(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n```\n\n\n#### Case 4　整数mが10の倍数のとき\n```math:\nm=10^cd~~~~~~(c,d \\in {\\mathbb N}, \\frac{d}{10} \\notin {\\mathbb N})\\\\\nとおけば(m^xの各桁の和)=(d^xの各桁の和）であり、\n{\\rm Case 1 ～3}よりd^xの各桁の和は発散するので\nF_m(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\n証明終。\n","created_at":"2019-04-14T11:22:05+09:00","id":"5490a1099dee8ad7065e","tags":[{"name":"数学","versions":[]},{"name":"数列","versions":[]}],"url":"https://qiita.com/yakinoki/items/5490a1099dee8ad7065e"},{"title":"Azure ML StudioをExcel-VBAから呼び出してみる","body":"Azure ML Studioでアルゴリズムの違いによる予測結果の違いを比べようとして、Azure ML Studioが生成するExcelで比較していましたが、自由にハンドリングしたかったのでExcel-VBAから呼び出すようにしてみました。\n\n#Azureの設定について\nFree版リソースの設定やwebAPIの制限などちょっとコツがあるようなので、試行錯誤した点を書きます。\n\n1.はじめは既存のダッシュボードから新規(+)→AI + Machine Learningを選択→すべて表示→Machine Learning Studio Workspace を選んで、パラメータを選択と進んだのですが、ワークスペースの価格レベルで標準しか選択できませんでした。\n\nそこで[Azure Machine Learningの無償版を利用する (2018.10.22現在)](https://sadynitro.hatenablog.jp/entry/2018/10/22/205155)を参考にして[Machine Learning Studio](https://azure.microsoft.com/ja-jp/services/machine-learning-studio/)からFree版を作成しました。\n\nこの場合、[東日本リージョンで Azure ML の提供を開始](https://blogs.technet.microsoft.com/mssvrpmj/2016/11/17/%E6%9D%B1%E6%97%A5%E6%9C%AC%E3%83%AA%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%A7-azure-ml-%E3%81%AE%E6%8F%90%E4%BE%9B%E3%82%92%E9%96%8B%E5%A7%8B/)に記載されているように、無料ワークスペースは米国中南部リージョンで作成されるようです。\n\n2.Free版では[Machine Learning Studio の価格](https://azure.microsoft.com/ja-jp/pricing/details/machine-learning-studio/)にあるように、実稼働WebAPI(新しいARMベースのAPI)は提供されません。ただしクラシック版のAPI作成は可能です。Free版は、モデルを作成し、REDICTIVE生成して「DEPLOY WEB SERVICE」を押すと(選択肢は無く)クラシック版のAPIが作成されます。標準プランは「DEPLOY WEB SERVICE」を押すとクラシックとNEWの選択が可能です。\n\n3.実稼働 Web APIは、価格プランを「DevTest Standard」を選ぶ事で無料になります。「DevTest Standard」は2件までが有効で、3個目を作成すると新しく作成したものが有効になるようです。\n\n#Excel-VBA\n\n1.モデルは[Azure ML StudioとFlask連携によるWebアプリケーションサンプル](https://qiita.com/vye03702/items/8b50dce8e4af56208049\n)で作成したブースティッドデシジョンツリー(NEW)に、デシジョンフォレスト(クラシック)・デシジョンジャングル(クラシック)・ニューラルネットワーク(NEW)を追加しました。\n\n2. Range(\"O1\")にデータの入力規則の設定でアルゴリズムを切り替えるようにします。\n\n3. VBAで辞書型を使えるようにする為、ScriptingRuntimeの参照設定が必要です。\n![参照設定.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/228860/f1da6d3c-306a-07fa-0f23-e8424781493f.jpeg)\n\n3.(クラシック)か(NEW)でjsonのリクエスト・レスポンスの値の構造が異なります。\n\n```(クラシック)のレスポンス例\n{\n  \"Results\": {\n    \"output1\": {\n      \"type\": \"DataTable\",\n      \"value\": {\n        \"ColumnNames\": [\n          \"age\",\n          \"workclass\",\n          \"education-num\",\n          \"occupation\",\n          \"race\",\n          \"sex\",\n          \"capital-gain\",\n          \"capital-loss\",\n          \"hours-per-week\",\n          \"native-country\",\n          \"Scored Labels\",\n          \"Scored Probabilities\"\n        ],\n        \"ColumnTypes\": [\n          \"Numeric\",\n          \"String\",\n          \"Numeric\",\n          \"String\",\n          \"String\",\n          \"String\",\n          \"Numeric\",\n          \"Numeric\",\n          \"Numeric\",\n          \"String\",\n          \"String\",\n          \"Numeric\"\n        ],\n        \"Values\": [\n          [\n            \"0\",\n            \"value\",\n            \"0\",\n            \"value\",\n            \"value\",\n            \"value\",\n            \"0\",\n            \"0\",\n            \"0\",\n            \"value\",\n            \"value\",\n            \"0\"\n          ],\n          [\n            \"0\",\n            \"value\",\n            \"0\",\n            \"value\",\n            \"value\",\n            \"value\",\n            \"0\",\n            \"0\",\n            \"0\",\n            \"value\",\n            \"value\",\n            \"0\"\n          ]\n        ]\n      }\n    }\n  }\n}\n```\n\n```(NEW)のレスポンス例\n{\n  \"ExecutionResults\": {\n    \"Results\": {\n      \"ExecutionOutputs\": {\n        \"output1\": [\n          {\n            \"items\": {\n              \"output1Item\": {\n                \"age\": \"Integer\",\n                \"workclass\": \"String\",\n                \"education-num\": \"Integer\",\n                \"occupation\": \"String\",\n                \"race\": \"String\",\n                \"sex\": \"String\",\n                \"capital-gain\": \"Integer\",\n                \"capital-loss\": \"Integer\",\n                \"hours-per-week\": \"Integer\",\n                \"native-country\": \"String\",\n                \"Scored Labels\": \"String\",\n                \"Scored Probabilities\": \"Number\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n![AzureML.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/228860/6ac057ac-6ac2-9041-4dcb-756b389a546d.jpeg)\n\n```Excel-VBA\nSub json()\n'#################################################################################\n'#\n'#\n'#   https://doruby.jp/users/ookouchi/entries/201708-EXCEL-VBA-JSON-API-MSXML2-XMLHTTP\n'#\n'#################################################################################\n \nDim Url, api_key As String\n\nIf Range(\"O1\") = \"ブースティッドデシジョンツリー\" Then\n    Url = \"https://japaneast.services.azureml.net/subscriptions/4ddef21b07bb41~略\"\n    api_key = \"h/NXP0LLLwwklqkiPh~略\"\nElseIf Range(\"O1\") = \"デシジョンフォレスト\" Then\n    Url = \"https://ussouthcentral.services.azureml.net/workspaces86a2c1ea93175da9~略\"\n    api_key = \"M4pihqQXhoYR110aEB~略\"\nElseIf Range(\"O1\") = \"デシジョンジャングル\" Then\n    Url = \"https://ussouthcentral.services.azureml.net/workspaces/86a2c1ea9318430c99e75da993~略\"\n    api_key = \"DuoTIGAEQwFn~略\"\nElse\n    Url = \"https://japaneast.services.azureml.net/subscriptions/4ddef21b07bb41559891c93ee~略\"\n    api_key = \"uiRl7dWPLdeN~略\"\nEnd If\n\nRange(\"H1\") = Now()\nRange(\"J1\") = Now()\n \nDim i As Double\ni = 3\n\nDo While Sheets(\"Sheet1\").Cells(i, 1).Value <> \"\"\n    DoEvents\n    \n    'オブジェクトを生成\n    Dim JsonObject As Object\n    Set JsonObject = New Dictionary\n    \n    If Range(\"O1\") = \"デシジョンフォレスト\" Or Range(\"O1\") = \"デシジョンジャングル\" Then\n\n        '#クラシックAPI用のjson\n        JsonObject.Add \"Inputs\", New Dictionary\n        JsonObject(\"Inputs\").Add \"input1\", New Dictionary\n        \n        JsonObject(\"Inputs\")(\"input1\").Add \"ColumnNames\", New Collection\n        \n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"age\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"workclass\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"education-num\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"occupation\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"race\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"sex\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"capital-gain\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"capital-loss\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"hours-per-week\"\n        JsonObject(\"Inputs\")(\"input1\")(\"ColumnNames\").Add \"native-country\"\n         \n        JsonObject(\"Inputs\")(\"input1\").Add \"Values\", New Collection\n         \n        JsonObject(\"Inputs\")(\"input1\")(\"Values\").Add New Collection\n         \n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 1).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 2).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 3).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 4).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 5).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 6).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 7).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 8).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 9).Value\n        JsonObject(\"Inputs\")(\"input1\")(\"Values\")(1).Add Sheets(\"Sheet1\").Cells(i, 10).Value\n          \n        JsonObject.Add \"GlobalParameters\", New Dictionary\n    \n    Else\n        JsonObject.Add \"Inputs\", New Dictionary\n        JsonObject(\"Inputs\").Add \"input1\", New Collection\n        \n        JsonObject(\"Inputs\")(\"input1\").Add New Dictionary\n         \n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"age\", Sheets(\"Sheet1\").Cells(i, 1).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"workclass\", Sheets(\"Sheet1\").Cells(i, 2).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"education-num\", Sheets(\"Sheet1\").Cells(i, 3).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"occupation\", Sheets(\"Sheet1\").Cells(i, 4).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"race\", Sheets(\"Sheet1\").Cells(i, 5).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"sex\", Sheets(\"Sheet1\").Cells(i, 6).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"capital-gain\", Sheets(\"Sheet1\").Cells(i, 7).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"capital-loss\", Sheets(\"Sheet1\").Cells(i, 8).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"hours-per-week\", Sheets(\"Sheet1\").Cells(i, 9).Value\n        JsonObject(\"Inputs\")(\"input1\")(1).Add \"native-country\", Sheets(\"Sheet1\").Cells(i, 10).Value\n        \n    End If\n    \n     \n    ' イミディエイトウィンドウで確認（デバック用）\n    Debug.Print JsonConverter.ConvertToJson(JsonObject, Whitespace:=2)\n    \n    Dim objHTTP, jsonObj As Object\n    Set objHTTP = CreateObject(\"msxml2.xmlhttp\")\n    \n    objHTTP.Open \"POST\", Url, False\n    objHTTP.setRequestHeader \"Content-Type\", \"application/json\"\n    objHTTP.setRequestHeader \"Authorization\", \"Bearer \" & api_key\n    objHTTP.send JsonConverter.ConvertToJson(JsonObject)\n        \n    ' レスポンスコード（正常）\n    If objHTTP.Status = 200 Then\n    \n        Set jsonObj = JsonConverter.ParseJson(objHTTP.responseText)\n    \n        If Range(\"O1\") = \"ブースティッドデシジョンツリー\" Then\n            Sheets(\"Sheet1\").Cells(i, 12).Value = jsonObj(\"Results\")(\"output1\")(1)(\"Scored Labels\")\n        ElseIf Range(\"O1\") = \"デシジョンフォレスト\" Then\n            Sheets(\"Sheet1\").Cells(i, 14).Value = jsonObj(\"Results\")(\"output1\")(\"value\")(\"Values\")(1)(11)\n        ElseIf Range(\"O1\") = \"デシジョンジャングル\" Then\n            Sheets(\"Sheet1\").Cells(i, 16).Value = jsonObj(\"Results\")(\"output1\")(\"value\")(\"Values\")(1)(11)\n        Else\n            Sheets(\"Sheet1\").Cells(i, 18).Value = jsonObj(\"Results\")(\"output1\")(1)(\"Scored Labels\")\n        End If\n    Else\n        MsgBox (\"エラーです :\" & objHTTP.responseText)\n    End If\n   i = i + 1\n   Range(\"E1\") = i\n\nLoop\n   \nRange(\"J1\") = Now()\nMsgBox (\"終了です\")\nEnd Sub\n \n```\n4.リクエストのJSON作成・戻ったレスポンスから目的の値を取り出す定義が、ちょっと試行錯誤してしまいましたが、いったんわかればExcelから自由に入力を与えて戻り値も自由にプロットできるので分析などに便利かと思います。\n","created_at":"2019-04-14T11:21:12+09:00","id":"c980645dbfb59f67c4c8","tags":[{"name":"Azure","versions":[]},{"name":"機械学習","versions":[]},{"name":"Excel-VBA","versions":[]}],"url":"https://qiita.com/vye03702/items/c980645dbfb59f67c4c8"},{"title":"【令和】新元号対応に関するMicrosoft Win32等の時限措置に関する検証について","body":"# 時限措置\n\n経済産業省公開文書で、4月限定の時限措置に関する記載があります。\n\n改元に伴う元号による年表示の取扱いについて（平成３１年４月１日新元号への円滑な移行に向けた関係省庁連絡会議申合せ）\nhttps://www.meti.go.jp/policy/it_policy/kaigen/20190402_kaigen_2.pdf\n\n> （３）元号法第１項に基づく政令の公布後の取扱い 元号法（昭和 54 年法律第 43 号）第１項に基づく政令の公布日か ら施行日前までの間において、各府省が作成し公にする文書に元号 を用いて改元日以降の年を表示する場合は、「平成」を用いるもの とする\n\nこちらについて、Microsoftの3/18のセミナーでは不確定情報として対応を検討するような話が出ていました。\nhttps://qiita.com/tfukumori/items/1dc60eb473eff5efb994/revisions/110\n\n# 検証\n\nWin32のAPIを参照するDelphiの環境で、この時限措置が適用されたのかは不明ですが、システム日時が5月にならないと新元号が表示されないという問題がでた、という記事がありました。\n\n[【令和】Microsoft の元号対応が迷走している件 | Qiita](https://qiita.com/ht_deko/items/249db60e1c99ba440969)\n\nWin32、VBA、VB6、Microsoft.VisualBasic.Compatibility.VB6.Formatにもかかわる問題と思われるので、oleaut32.dllを直接呼び出して検証してみることにしました。\n\n## 環境\n\nWindows 10 1809 (OSビルド 17763.437)\nhttps://support.microsoft.com/ja-jp/help/4493509/windows-10-update-kb4493509\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/204150/c70ad81a-9bb8-f01d-a5f0-f759bfa1e7a8.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/204150/167aec30-0742-137c-67c5-6025590120b4.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/204150/4acb96aa-3d0d-b77f-3c4b-28e0a31bed9b.png)\n\n\n\n## レジストリ\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/204150/fef850a1-dee8-39dc-3acf-b2b435f8cc50.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/204150/0d14258f-e134-b681-dded-c05cc97fa36a.png)\n\n## コード\n\n```csharp:Class1.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApp1\n{\n    class Class1\n    {\n        private static class NativeMethods\n        {\n            [DllImport(\"oleaut32.dll\", CharSet = CharSet.Unicode)]\n            internal static extern int VarFormat(ref object expr,\n                    string format,\n                    int firstDay,\n                    int firstWeek,\n                    int flags,\n                    [MarshalAs(UnmanagedType.BStr)] out string result);\n\n        }\n\n        public static string Vb6Format(object expr, string format)\n        {\n            string result;\n            int hr = NativeMethods.VarFormat(ref expr, format, 0, 0, 0, out result);\n            if (hr != 0) throw new COMException(\"Format error\", hr);\n            return result;\n        }\n    }\n}\n```\n\n```csharp:Program.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var d = DateTime.Parse(\"2019/5/1\");\n            Console.WriteLine( Class1.Vb6Format(d, \"gggee年mm月dd日\"));\n            Console.ReadLine();\n        }\n    }\n}\n```\n\n## 結果\n\n結果としては、直接oleaut32.dllを呼び出した場合には、システム日付が4月でも、時限措置が適用されず、新元号が表示される形となりました。\n\n```\n令和01年05月01日\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/204150/e96fafa4-d852-f44b-a002-03c4a48d09b4.png)\n\n\n\n","created_at":"2019-04-14T11:17:30+09:00","id":"db57e91743915abe52c8","tags":[{"name":"Windows","versions":[]},{"name":"C#","versions":[]},{"name":"元号","versions":[]},{"name":"元号対応","versions":[]},{"name":"令和","versions":[]}],"url":"https://qiita.com/tfukumori/items/db57e91743915abe52c8"},{"title":"railsでbootstrap-sassを導入する手順","body":"## はじめに\nrailsでbootstrapを使う際の手順についてまとめました。\n今回はscssを使用するのでbootstrap-sassを使用します。\n\n##①gemをinstall\n```ruby:Gemfile\ngem 'bootstrap-sass'\ngem 'jquery-rails'\n```\n追加後、`bundle install`\n\n##②application.jsに以下を追加\n```javascript:application.js\n//= require jquery\n//= require jquery_ujs\n```\n//= require_tree .より上に追加する。\n\n##③application.scssに変更\napplication.scss\n↓\napplication.scss\nに名称変更\n\n##④application.scssに以下を追加\n```scss:application.scss\n@import \"bootstrap\";\n@import \"bootstrap-sprockets\";\n```\n","created_at":"2019-04-14T11:16:16+09:00","id":"3cda2d5a292e51bdb751","tags":[{"name":"Rails","versions":[]},{"name":"Sass","versions":[]},{"name":"scss","versions":[]},{"name":"bootstrap4","versions":[]}],"url":"https://qiita.com/katsu105/items/3cda2d5a292e51bdb751"},{"title":"AtCoderの問題をJavascriptで解くためのテンプレ作りました","body":"最近アルゴリズムの勉強も兼ねて競技プログラミング（AtCoder）をやるようになったのですが、\nどうやら競技プログラミングをJavascript / Node.jsで解く人は少数派であり、各種コンテストサイトでの対応状況は芳しくないと思われます。\n\nAtCoderの処理系はNode.js v5.12が利用されており（2019/4/14時点）、色々と使えない構文や関数が存在しています。\n\n - let （strict modeにすれば使える）\n - 分割代入\n - べき乗演算子\n - Array​.prototype​.includes()\n - String​.prototype​.pad​Start()\n - BigInt\n - Object.entries / Object.values ... etc\n\nそのため、手元のNode.jsのバージョンが高いと、「解けた！」と思っていざ提出すると通らないなんてことがあるので、nvm入れて切り替えてやっていたのですが、「Javascriptなんだからトランスパイルすれば良くね...？」と思ったので作りました。\n\nhttps://github.com/DecoratedKnight/js-cp-template\n\nbabelとbabel-polyfillだけで十分かなと思っていたら、BigIntに関してはpolyfillでもダメだったので、[BigInteger.js](https://www.npmjs.com/package/big-integer) を入れました。（外部ライブラリ使って問題解くのはどうなんだ、という気もしますが...）\nwebpackで1枚のjsにバンドルしますので、例えばlodash入れたりとかもできてしまいます。\n\n当然のことながらコードはビルド後の物を提出することになり、[こんな感じ](https://atcoder.jp/contests/abc124/submissions/4966156) になってしまうので、この方式で提出する人が増えると、回答を見比べるとかそういった楽しみが無くなってしまうのが痛いです！\n\n最新のNode.jsのバージョンに追従してくれればこんなことしなくていいのに（チラッ）\nそのためにも、まずは少しでもJavascriptで問題を解く人が増えるといいなと思います！\n","created_at":"2019-04-14T11:14:53+09:00","id":"734ef78edb7dccec33e6","tags":[{"name":"JavaScript","versions":[]},{"name":"Node.js","versions":[]},{"name":"AtCoder","versions":[]},{"name":"競技プログラミング","versions":[]},{"name":"webpack","versions":[]}],"url":"https://qiita.com/DecoratedKnight/items/734ef78edb7dccec33e6"},{"title":"DashboardのテンプレートAdminLTEをElectronで動かす（Tablesページの改造）","body":"# 概要\n前回「[DashboardのテンプレートAdminLTEをElectronで動かす](https://qiita.com/h6591/items/d0ffb515c35c0b885991)」で無事表示することが出来たので、`Tables`メニューの`Data tables`のページを改造します。テーブルデータはテンプレートで使われている内容をJSONの外部ファイルにして読み込むようにします。実際はMongoDBを使って実装したのですが、MongoDBを知らない人には試せないのでJSONファイルでの投稿にしました。また、テーブル表示には[Tabulator](http://tabulator.info/)を使ます。JSONデータの送受信は**IPC**で行いますので**preload**を使います。\n\n# テーブルデータのJSONファイル化\n\n改造するファイルは`AdminLTE-2.4.10/pages/tables/data.html`で、`<table>`タグで記述されているデータをJSONファイルにします。\n\n1. `data.html`のデータ部分をテキストエディタにコピペする\n1. Javascriptのコードを付加してプログラムを作成します\n1. **Node.js**で作成したプログラムを実行して`JSONファイル(data.json)`を作成します\n\nまず初めにデータは`data.html`ファイルの`542行目から948行目`までテキストエディタにコピペします。\n\n```html:テキストエディタ\n<tr>\n  <td>Trident</td>\n  <td>Internet\n    Explorer 4.0\n  </td>\n  <td>Win 95+</td>\n  <td> 4</td>\n  <td>X</td>\n</tr>\n～省略～\n<tr>\n  <td>Other browsers</td>\n  <td>All others</td>\n  <td>-</td>\n  <td>-</td>\n  <td>U</td>\n</tr>\n```\n\n次にコピペしたHTMLを`<table> ...  </table>`で挟んでhtml変数にします。そして**cheerio**を使ってHTMLからデータを取り出してJSON化するプログラム`data.js`を作成します。\n**cheerio**を使ったプログラムは「[Node.js で html の表の中身を CSV 形式に加工する](https://qiita.com/daktu32/items/f3f31d1691d0f10380ca)」を参考にしました\n\n```javascript:data.js\nvar html = `\n<table>\n<tr>\n  <td>Trident</td>\n  <td>Internet\n    Explorer 4.0\n  </td>\n  <td>Win 95+</td>\n  <td> 4</td>\n  <td>X</td>\n</tr>\n                ～省略～\n<tr>\n  <td>Other browsers</td>\n  <td>All others</td>\n  <td>-</td>\n  <td>-</td>\n  <td>U</td>\n</tr>\n</table>\n`\nconst cheerio = require('cheerio')\n$ = cheerio.load(html)\n$('tr').each((i,tr)=>{\n    let data=[]\n    $(tr).children().each((j,td) => {\n        data.push($(td).html())\n    })\n    let json={engine:data[0], browser:data[1], platform:data[2],version:data[3],css:data[4]}\n    console.log(JSON.stringify(json))\n})\n```\n**cheerio**をインストール後、`data.js`を実行して`data.json`ファイルを作成します。`data.json`は`AdminLTE-2.4.10`フォルダに作成します。\n\n```shell\nnpm install cheerio --save-dev\nnode data.js > data.json\n```\n\n実行した結果`data.json`の内容は次のようになります。最初の4件は`browser`のところに改行が入っていますが元のデータに入っているので修正はしていません。\n\n```json:data.json\n{\"engine\":\"Trident\",\"browser\":\"Internet\\n    Explorer 4.0\\n  \",\"platform\":\"Win 95+\",\"version\":\" 4\",\"css\":\"X\"}\n{\"engine\":\"Trident\",\"browser\":\"Internet\\n    Explorer 5.0\\n  \",\"platform\":\"Win 95+\",\"version\":\"5\",\"css\":\"C\"}\n{\"engine\":\"Trident\",\"browser\":\"Internet\\n    Explorer 5.5\\n  \",\"platform\":\"Win 95+\",\"version\":\"5.5\",\"css\":\"A\"}\n{\"engine\":\"Trident\",\"browser\":\"Internet\\n    Explorer 6\\n  \",\"platform\":\"Win 98+\",\"version\":\"6\",\"css\":\"A\"}\n{\"engine\":\"Trident\",\"browser\":\"Internet Explorer 7\",\"platform\":\"Win XP SP2+\",\"version\":\"7\",\"css\":\"A\"}\n```\n\n`data.json`は正確にはJSONではありません。一行一行はJSONですが全体としてはJSONではありませんので注意してください。\n\n# Tabulatorのインストール\n\nインストールは次のURLを参照してください\nhttp://tabulator.info/docs/4.2/install\n\n```shell\nnpm install tabulator-tables --save\n```\n\n# main.jsの改造、preload.jsの追加、data.htmlの改造\n\n## main.jsの改造内容\n\n- `preload.js`を作成して`BrowserWindow`のパラメータとして`preload`項目を追加する\n- `ipcMain.On`でRendererプロセスからのipc通信で`data.js`を読んでRendererプロセスにデータを渡す\n\n```javascript:main.js\nconst { app, BrowserWindow } = require('electron')\nconst path = require('path')\nconst { ipcMain } = require('electron')\nconst fs = require('fs')\nconst readline = require('readline');\n\n// data.htmlのjavascriptからのファイル名を受信してJSONデータを読んで送信\nipcMain.on('ipc-json', (event, file)=>{\n  let replyData = []\n  let rs = fs.createReadStream(file, 'utf8')\n  let reader = readline.createInterface({input: rs})\n  reader.on('line', data => {\n    replyData.push(JSON.parse(data))\n  }).on('close' , () => {\n    event.sender.send('ipc-json-reply', replyData)\n  })\n})\n\nlet mainWindow\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    show: false, backgroundColor: '#FFF', width: 1600, height: 1000, frame: true,\n    webPreferences: {\n      nodeIntegration: false,\n     //preload.jsを指定\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  mainWindow.loadFile('index.html')\n\n  mainWindow.once('ready-to-show', () => { mainWindow.show() })\n  mainWindow.on('closed', function () {\n    mainWindow = null\n  })\n}\n\napp.on('ready', createWindow)\n\napp.on('window-all-closed', function () {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', function () {\n  if (mainWindow === null) {\n    createWindow()\n  }\n})\n```\n\n## preload.jsの追加\n\nRendererプロセスで`ipcRenderer`を`gIpcRenderer`として使えるようにします。`preload.js`は`AdminLTE-2.4.10`フォルダに作成します。\n\n```javascript:preload.js\ngIpcRenderer = require('electron').ipcRenderer\n```\n\n## AdminLTE-2.4.10/pages/tables/data.htmlの改造\n\n`530行目から960行目`を次の一行に置き換えます。\n\n```html:AdminLTE-2.4.10/pages/tables/data.html.html\n            <!-- /.box-header -->\n            <div id=\"example-tabulator\"></div>\n            <!-- /.box-body -->\n```\n\n次に`Tabulator`用のJavascriptとcssを`<head>`部に指定します。\n\n```html:AdminLTE-2.4.10/pages/tables/data.html.html\n  <link href=\"../../node_modules/tabulator-tables/dist/css/tabulator.min.css\" rel=\"stylesheet\">\n  <script src=\"../../node_modules/tabulator-tables/dist/js/tabulator.min.js\"></script>\n```\n\n次の`<!-- Tabulator用Javascript -->`以降の`<script> ... </script>`を`data.html`の最後のほうに追加します。\n\n```html:AdminLTE-2.4.10/pages/tables/data.html.html\n<script>\n    $(function () {\n      $('#example1').DataTable()\n      $('#example2').DataTable({\n        'paging'      : true,\n        'lengthChange': false,\n        'searching'   : false,\n        'ordering'    : true,\n        'info'        : true,\n        'autoWidth'   : false\n      })\n    })\n  </script>\n\n<!-- Tabulator用Javascript -->\n  <script>\n    gIpcRenderer.on('ipc-json-reply', (event, arg) => {\n      let table = new Tabulator(\"#example-tabulator\", {\n        data: arg,\n        layout: \"fitColumns\",\n        pagination: \"local\",\n        paginationSize: 10,\n        columns:[\n          {title:\"Rendering engine\", field: \"engine\"},\n          {title:\"Browser\", field:\"browser\"},\n          {title:\"Platform(s)\", field:\"platform\"},\n          {title:\"Engine version\", field: \"version\", align:\"right\"},\n          {title: \"CSS grade\", field: \"css\", align:\"center\", formatter:\"html\"}\n        ]\n      });\n    })\n    gIpcRenderer.send('ipc-json', \"data.json\")\n  </script>\n</body>\n\n</html>\n```\n\n- gIpcRendererは`preload.js`で定義した変数です\n- gIpcRenderer.Onで`main.js`が送信したデータを受信します。`arg`にJSONデータの配列が入っています。\n- gIpcRenderer.sendでメインプロセスに読み込みたいファイル名を送ります。結果はgIpcRenderer.Onで受信します\n- `formatter:\"hmtl\"`となっているのは`CSS grade`データの中に`C/A<sup>1</sup>`というHTMLデータあり**C/A<sup>1</sup>**と表示させるためです\n\n# 実行画面\n![adminlte3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/258007/ccab5fd9-2f84-881c-6216-1a65b00e9d9f.png)\n\n# 参照リンク\n- 前回投稿記事　[DashboardのテンプレートAdminLTEをElectronで動かす](https://qiita.com/h6591/items/d0ffb515c35c0b885991)\n- [AdminLTE](https://adminlte.io/)\n- [Tabulator](http://tabulator.info/)\n- [Node.js で html の表の中身を CSV 形式に加工する](https://qiita.com/daktu32/items/f3f31d1691d0f10380ca)\n\n","created_at":"2019-04-14T11:08:14+09:00","id":"297b61e0c680ff1a92fb","tags":[{"name":"cheerio","versions":[]},{"name":"Electron","versions":[]},{"name":"AdminLTE","versions":[]},{"name":"DashBoard","versions":[]},{"name":"Tabulator","versions":[]}],"url":"https://qiita.com/h6591/items/297b61e0c680ff1a92fb"},{"title":"Gifsicle+node.jsでgifアニメをまとめて最適化","body":"## はじめに\n[自サイト](https://pentamania.github.io/portal/)では彩りのため、gifアニメを載せている。しかし元々ブログやtwitter紹介用に大きめに録画したものを、特に何の加工もせずCSSで小さく表示していただけだったので、無駄にファイルサイズがでかく（ものによっては1MB超えだったり）、訪問者に全く優しくなかった。\n\nさすがにどうにかしようと思ったが、いちいちアニメを撮り直す元気もない。\nバッジ処理でまとめて最適化できないだろうかとネットを巡って見つけたのが以下のgifsicleというツール。\nhttps://www.lcdf.org/gifsicle/\n\n[npmにNode.js用にラップされたパッケージ](https://www.npmjs.com/package/gifsicle)があったのでそちらを利用し、最適化スクリプトを書いた。\n\n```optimize-gif.js\nconst { execFile } = require('child_process');\nconst gifsicle = require('gifsicle');\nconst fs = require('fs');\nconst path = require('path');\n\nconst RESIZE_WIDTH = \"150\";\nconst COLOR_NUM = \"64\";\n\nconst baseDir = path.resolve('./assets/images/works-thumbnail');\nconst inputFileDir = path.resolve(`${baseDir}/rawgif`);\n\nfs.readdirSync(inputFileDir).forEach(file => {\n  execFile(gifsicle,\n    [\n      '--resize-fit-width', RESIZE_WIDTH,\n      '--colors', COLOR_NUM,\n      'optimize=3',\n      '-o', `${baseDir}/${file}`, // 出力先\n      `${inputFileDir}/${file}` // 入力\n    ],\n    (err) => {\n      console.log('minified!: ', file);\n    }\n  );\n});\n```\n\nexecFileで第二引数にオプションを渡して実行する。\n入出力オプションを除くと、今回は以下を設定。\n\n- アスペクト比を保ちながらリサイズ（--resize-fit-widthオプション）\n- 色数の制限（--colors）\n- [最適化レベル](https://qiita.com/tatoo3198/items/58771c30ff03975197b6#%E6%9C%80%E9%81%A9%E5%8C%96)\n（--optimize：ただしこれはいまいち効果が実感できず）\n\n## 結果\nオリジナルと比較すると、さすがに劣化が目立つけど、サイト上で縮小表示するとあまり気にはならない程度ではある。\n\n##### オリジナル\n![hatuyume-lucky.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/81823/b1334271-a731-8f01-591a-1c314a5bdfaa.gif)\n\n##### 縮小版\n![hatuyume-lucky.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/81823/fc9aa5bc-79e8-8b4b-7b27-7f1ee2a424ba.gif)\n\n何かわちゃわちゃしているなぁ感ができていればよいので良しとする。\n\n### ダイエット結果の一例\n- 787KB（407x293） → **236KB（150x108）**\n- 465KB（210x165） → **167KB（150x118）**\n- 1040KB（472x416） → **138KB（150x132）**\n\nファイルサイズ縮小率は基本的には1/3 ~ 1/4弱だが、中にはガクッと減ったものも。\nまぁまぁのライザップぶり。\n\nいいねとマサカリお待ちしております。\n\n# 参考\n- https://pentamania.github.io/portal/ （マイラヴリーウェブサイト）\n- https://github.com/pentamania/portal （マイラヴリーウェブサイトのリポジトリ）\n","created_at":"2019-04-14T11:04:17+09:00","id":"a7e7fa13a1209083dd84","tags":[{"name":"Node.js","versions":[]},{"name":"GIFアニメ","versions":[]},{"name":"gifsicle","versions":[]}],"url":"https://qiita.com/pentamania/items/a7e7fa13a1209083dd84"},{"title":"デバイスメッセージをSigfoxクラウド上で確認できないとき","body":"Sigfoxデバイスを長らく使っていると、「あれ？メッセージが届いてきていない？」と気づかれる瞬間があるのではないでしょうか？\nまずはサービスエリアを疑う訳ですが、今まで使えていた場所なので、そんなはずがない。。。\nそんな場合、まずは\"MESSAGES\"画面ではなく、**\"TRASH MESSAGES\"**メニューを開いてみてください。TRASH MESSAGEに最近のメッセージデータが表示されているのであれば、下記を確認してください。\n\n1. トークンが切れていないか？\n2. シーケンス番号飛びによりメッセージ受信が拒否されている\n\n#トークンが切れていないか？\nSigfoxデバイスを利用する場合は、[KCCS](https://www.kccs-iot.jp/)や[パートナー](https://www.kccs-iot.jp/partner/)、[Sigfox Buy](https://buy.sigfox.com/)から回線トークンを購入します。トークンには、契約開始日(Start date)に基づいたActivate(回線開通)可能な期限(Activation end date)、通信可能な期限(Communication end date)が定義されています。\n例えば、契約内容（Contract Info）が下記の場合\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/172313/e2321eff-0876-5149-ab68-95102f20c882.png)\n\n\n- Start date : 2017-03-31\n- Activation end date : 2018-03-31\n- Communication end date : 2019-03-31\n\nその契約上で使うデバイスは、2018年3月31日までにアクティベーションする必要があります。期限ギリギリ（2018年3月31日）にアクティベートしたデバイスは、2019年3月31日まで使用可能という意味になります。\nまた、例えば、2017年10月10日にアクティベートした場合は、そこから1年間がトークンの期限となります。\nトークンの延長も可能ですが、トークン自動更新の設定を入れていない場合、トークン切れによるメッセージ受信ができないという事例がよくあります。\n\n**\"トークン切れ\"**の場合は、下図のようにデバイス一覧画面の**Token state**欄に![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/172313/ef3900a8-6402-939d-06fc-c958154e4214.png)というマークが付いています。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/172313/abb34887-925c-b257-fbc3-da27276a3581.png)\n\n念のため、デバイスIDをクリックし、デバイス情報（Information）ページを見てみると、トークンが切れていることがわかります。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/172313/353d57a7-417f-ebec-f8d0-95f3e83b8ffd.png)\n\n### トークン切れの場合の対処方法\nトークン切れの場合は、**\"リスタート\"**することにより、引き続きメッセージ受信ができるようになります。\n継続して利用可能なトークンが契約内に残っていることを前提に、![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/172313/dbbf435a-5fe5-f264-5a52-530a5ae8fb0b.png)\nRestartボタンをクリックしていただければ結構です。\n\n#シーケンス番号飛びによりメッセージ受信が拒否されている\nSigfoxの場合、なりすましデバイス防止のひとつとして、シーケンス番号管理をしています。(デバイス管理については[こちら](https://qiita.com/ghibi/items/4eccef2ba81cf86a3385)も見てください）\nシーケンス番号が一定値以上飛んでしまった場合には、メッセージが受信できなくなります。\nDeviceの\"EVENTS\"メニューを見ると、シーケンス番号の警告(warning)やエラー(error)情報を確認することができます。\nシーケンス番号によるメッセージ管理については、[こちら](https://qiita.com/ghibi/items/36127777480ed107405a)参照。\n\n###シーケンス番号飛び時の対処方法\nDeviceTypeないしDeviceのInfomationページ右上に配置されている![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/172313/ddcd09e6-0f34-6dec-e9f4-330e83f3a246.png)\nengaged sequence numberボタンをクリックしてください。\nこれにより、シーケンス番号管理がリセットされ、以降のメッセージを受信できるようになります。\n\n[Sigfox Japan KCCS](https://qiita.com/organizations/sigfox)\n\n","created_at":"2019-04-14T11:01:41+09:00","id":"d6d4256e7810b82a12b6","tags":[{"name":"Device","versions":[]},{"name":"message","versions":[]},{"name":"token","versions":[]},{"name":"SigFox","versions":[]}],"url":"https://qiita.com/ghibi/items/d6d4256e7810b82a12b6"},{"title":"active_hushについて　DB触れずに情報を扱う","body":"##active_hush\n\n商品の出品などで、selectタグでたくさん選択できるようにする\n\nだけどDBに一つずつ情報を入れるのはめんどくさい\n\nそんな時はactive_hushを使いましょう！！！\n\n##使い方\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/369818/c0eca8e6-0bff-0d81-9595-155014afc8db.png)\n\nまずはgemを入れて　bundle　installを行いましょう！\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/369818/d3153b55-f1d6-b316-2999-c18600d8aeed.png)\n\n続いて情報を入れたいモデルの中に、belongs_to_active_hushで紐付けましょう\n後々紐付けて情報でないな？ってなったらprimary_key外しちゃってください\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/369818/7a37ec01-7ecd-1ae9-f1f1-7ab745e0ee51.png)\n\n今回はregion（都道府県）だけ紹介します。\n画像のようにid, nameと持たせることで情報を引っ張り出すことができます\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/369818/28d386f4-107c-ebfe-84e2-faaadec96ab6.png)\n\nselectタグはちなみにこんな感じです　region_idというのが　DBベースに保存したいもので、\n\n保存ができたら\n\n@item.region.nameで引っ張ってこれます。\n\n\n##参考資料\nhttps://kossy-web-engineer.hatenablog.com/entry/2019/01/08/205702\n","created_at":"2019-04-14T11:00:38+09:00","id":"fdae8b05537273a77f98","tags":[{"name":"DB","versions":[]},{"name":"都道府県","versions":[]},{"name":"active_hush","versions":[]}],"url":"https://qiita.com/hatimaki_naka/items/fdae8b05537273a77f98"},{"title":"いくつかの必要な項目が見つからなかったため、操作を完了できません。（エラーコード-43)","body":"macで外付けのHDDにファイルを移動しようとして\n\n「いくつかの必要な項目が見つからなかったため、操作を完了できません。（エラーコード-43)」\n\nというエラーがでる。ネットでそのまま検索すると\n\n【即解決】エラーで消せなくなったMacのファイルを消す方法（簡単です）\nhttps://tamoc.com/delete-mac-file01/\n\nmacOS High Sierrra バージョン10.13.6\n\n>手順１：Finderの設定をリセットする。\n>（ユーザー名）→「ライブラリ」→「Preferences」内にあるcom.apple.finder.plistを削除する。\n\nFinderの「ユーザー名」に「ライブラリ」というフォルダが見当たらない。\n理由は不明。\n\nターミナルを立ち上げて\n\n```shell-session\n$ cd\n$ cd Library\n$ cd Preferences\n$ ls -al com.apple.finder.plist\n-rw-------  1 ogawakiyoshi  staff  67646  4 14 10:43 com.apple.finder.plist\n```\n\nおお、たしかにファイルがある。\n\n```\n$ rm com.apple.finder.plist\n```\n\n>手順2：Finderを再起動する。\n>Commandキー ＋ Optionキー ＋ Escキーを押して「アプリケーショのの強制終了」画面を表示して、Finderの再起動をかける。\n\n🍎メニューの強制終了を選んでも同様。\n\nFinderを選ぶと「再度開く」が出てくる。\n\n<img width=\"430\" alt=\"再度.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/51423/06690c37-436c-b9ad-bf2b-9815b2047888.png\">\n\n「再度開く」をクリックすると\n\"Finder\"を強制終了してもよろしいですか？\nと聞かれる。「再度開く」を選ぶ。\n\n<img width=\"458\" alt=\"再度２.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/51423/c59deb13-7f39-9b92-44cc-20d9b36927b2.png\">\n\np.s.\n再起動をせずに、操作すると、rmしたはずのファイルがまたできている。\n","created_at":"2019-04-14T10:58:29+09:00","id":"d9fd719ca942a0a91601","tags":[{"name":"Mac","versions":[]}],"url":"https://qiita.com/kaizen_nagoya/items/d9fd719ca942a0a91601"},{"title":"iOSのデフォルトで搭載されている便利な機能リファレンス v1.0","body":"本記事は全てSwift2.0以下は対応してません。\nOKやCancelなどの文字列は変えるとボタンの文字が変わります。\ntitleや、messageなども目的によって変えてください。\n\n#アラート\n##表示スタイル\n###普通のアラート (Alert)\n>```Alert.swift\n>// ボタンを押下した時にアラートを表示するメソッド\n>@IBAction func dispAlert(sender: UIButton) {\n>\n>    // ① UIAlertControllerクラスのインスタンスを生成\n>    // タイトル, メッセージ, Alertのスタイルを指定する\n>    // 第3引数のpreferredStyleでアラートの表示スタイルを指定する\n>    let alert: UIAlertController = UIAlertController(title: \"アラート表示\", message: \"保存してもいいですか？\", preferredStyle:  UIAlertControllerStyle.Alert)\n>\n>    // ② Actionの設定\n>    // Action初期化時にタイトル, スタイル, 押された時に実行されるハンドラを指定する\n>    // 第3引数のUIAlertActionStyleでボタンのスタイルを指定する\n>    // OKボタン\n>    let defaultAction: UIAlertAction = UIAlertAction(title: \"OK\", style: UIAlertActionStyle.Default, handler:{\n>        // ボタンが押された時の処理を書く（クロージャ実装）\n>        (action: UIAlertAction!) -> Void in\n>        print(\"OK\")\n>    })\n>    // キャンセルボタン\n>    let cancelAction: UIAlertAction = UIAlertAction(title: \"キャンセル\", style: UIAlertActionStyle.Cancel, handler:{\n>        // ボタンが押された時の処理を書く（クロージャ実装）\n>        (action: UIAlertAction!) -> Void in\n>        print(\"Cancel\")\n>    })\n>\n>    // ③ UIAlertControllerにActionを追加\n>    alert.addAction(cancelAction)\n>    alert.addAction(defaultAction)\n>\n>    // ④ Alertを表示\n>    presentViewController(alert, animated: true, completion: nil)\n>}\n>```\n\n###下部から出てくるアラート (ActionSheet)\nUIAlertControllerクラスのインスタンスを生成するときに、prefferredStyleをActionSheetに変えるとActionSheetとなるみたいです。\n>```Alert.swift\n>let alert: UIAlertController = UIAlertController(title: \"アラート表示\", message: \"保存してもいいですか？\", preferredStyle:  UIAlertControllerStyle.ActionSheet)\n>```\n\nこういうことらしいです。\n\n###テキストボックス付きのアラート\nActionSheetでは使えないみたいです。残念。\niOS 10まで使われていたApp Storeの、パスワード入力ダイアログです。\n\n```Alert.swift\nalert.addTextFieldWithConfigurationHandler({(text:UITextField!) -> Void in\n  text.placeholder = \"これはPlaceholderです\"\n  var label:UILabel = UILabel(frame: CGRectMake(0, 0, 50, 30))\n  label.text = \"IDを入力→\"\n  text.leftView = label\n  text.leftViewMode = UITextFieldViewMode.Always\n})\n```\n\nこれを`③ UIAlertControllerにActionを追加`の後に書きます。\nするとテキストボックスが作成されるはずです。\n\n##ボタンスタイル\n| UIAlertActionStyle |文字色|スタイル|複数指定|その他|\n|:------------------:|:---:|:----:|:-----:|:-:|\n| default            | 青  |標準   |可     ||\n| cancel             | 青  |太字   |不可   |最下部に位置固定|\n| destructive        | 赤  |標準   |可     ||\n\n`② Actionの設定`の時に、ボタン作成コードを変えるとこうなるみたいです。\n\n>```Alert.swift\n>// Defaultボタン\n>let defaultAction_1: UIAlertAction = UIAlertAction(title: \"default_1\", style: >UIAlertActionStyle.Default, handler:{\n>    (action: UIAlertAction!) -> Void in\n>    print(\"defaultAction_1\")\n>})\n>\n>// Cancelボタン\n>let cancelAction: UIAlertAction = UIAlertAction(title: \"cancel\", style: >UIAlertActionStyle.Cancel, handler:{\n>    (action: UIAlertAction!) -> Void in\n>    print(\"cancelAction\")\n>})\n>\n>// Destructiveボタン\n>let destructiveAction_1: UIAlertAction = UIAlertAction(title: \"destructive_1\", style: UIAlertActionStyle.Destructive, handler:{\n>    (action: UIAlertAction!) -> Void in\n>    print(\"destructiveAction_1\")\n>})\n>```\n\n#共有画面\n`Accounts`をインポートします。\n\n```Share.swift\nimport Accounts\n```\n\n```Share.swift\nlet shareText = \"ここに共有したいテキスト\"\nlet shareWebsite = NSURL(string: \"ここに共有したいウェブサイト\")!\nlet shareImage = UIImage(named: \"共有したい画像\")!\nlet activityItems = [shareText, shareWebsite, shareImage]\n// 初期化処理\nlet activityVC = UIActivityViewController(activityItems: activityItems, applicationActivities: nil)\n// 使用しないアクティビティタイプ\nlet excludedActivityTypes = [\n    UIActivityTypePostToFacebook,\n    UIActivityTypePostToTwitter,\n    UIActivityTypeMessage,\n    UIActivityTypeSaveToCameraRoll,\n    UIActivityTypePrint\n]\nactivityVC.excludedActivityTypes = excludedActivityTypes\n// UIActivityViewControllerを表示\nself.presentViewController(activityVC, animated: true, completion: nil)\n```\n\n#Touch ID認証\nまずLocalAuthentication.frameworkをプロジェクトに追加します。\nプロジェクトの設定（？）のGeneralの下の方にある「Linked Frameworks and Libraries」に\n`LocalAuthentication.framework`を追加します。\n![LocalAuthentication.frameworkを追加する.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/266216/523a91d8-1509-a930-f1ce-f238bc361329.png)\n\n```TouchID.swift\nimport LocalAuthentication\n```\n\n`LocalAuthentication`をインポートします。\nこれで準備は完了です。\n\n```TouchID.swift\nlet context = LAContext()\nvar error : NSError?\nif context.canEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, error: &error) {\n    context.evaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, localizedReason: \"ここに何のための認証なのかを書く\", reply: { success, error in\n        if (success) {\n            NSLog(\"認証成功\")\n        } else {\n            NSLog(\"認証失敗：\" + error!.code.description)\n        }\n    })\n} else {\n    NSLog(\"TouchIDが非対応の機種です\")\n}\n```\n\n\n\n#引用したページ\n##アラート\nhttps://qiita.com/funafuna/items/b76e62eb82fc8d788da5\nhttps://qiita.com/kitanoow/items/8e12c575f574b0f22016\n##共有画面\nhttps://qiita.com/nashirox/items/56894599013d712faa0a\n##Touch ID\nhttps://qiita.com/SRAUFactory/items/82ab85c166eee9e5fa0e\n","created_at":"2019-04-14T10:56:33+09:00","id":"a566084655b2cc40370f","tags":[{"name":"Xcode","versions":[]},{"name":"iOS","versions":[]},{"name":"まとめ","versions":[]},{"name":"Swift","versions":[]},{"name":"iOS12","versions":[]}],"url":"https://qiita.com/tscrafter/items/a566084655b2cc40370f"},{"title":"google Colaboratoryで簡単にファイルの入出力","body":"### ドライブ内にpngファイルを保存してみる\n\n```python\nfrom google.colab import drive\ndrive.mount('./gdrive')\n```\n\nGo to this URL in a browser: ハイパーリンクがここに表示される\n\nEnter your authorization code:\n··········\n\n\nここでパスワードの入力を求められるので，上のハイパーリンクをクリックしてサイトに飛ぶ\n\n↓\n\nアカウントの選択\n「Google Drive File Stream」に移動\n\nここでcolaboratoryで保存したいgoogle driveのアカウント（私の場合はcolaboratoryで使用しているアカウント）をクリック\n↓\n\nGoogle Drive File Stream が Google アカウントへのアクセスをリクエストしています\n\n下の方を見ると「許可」のボタンがあるので，それを押す\n\n↓\n\nログイン\nこのコードをコピーし、アプリケーションに切り替えて貼り付けてください。\n4/LAGqa4WWzSrti88D5C0P6kfYJbfL-XhnCTQmfp\n\nのように長いパスワードが表示されるので，それをコピーして最初に求められたパスワードのところに張り付ける．\n\n↓\n\n```python\n!ls gdrive\n```\n!と打つとlinuxコマンドが使えるので，マウントが成功したかを確認\n成功していると\n\n'My Drive'\n\nと出力される．\n\n```python\n\ndrive_root_dir=\"./gdrive/My Drive\"\n\nimport numpy as np\nfrom PIL import Image\n\nnoise = (np.random.rand(128,128,3)*255.0).astype(np.uint8)\n\nimg.save(drive_root_dir+\"/noise.png\")\n```\nで保存ができる．\n\n同様に，この状態でnumpyでのsaveやloadもそのままできます．\n\n","created_at":"2019-04-14T10:55:14+09:00","id":"f516c0d21a72a870b0ec","tags":[{"name":"ファイル入出力","versions":[]},{"name":"colaboratory","versions":[]}],"url":"https://qiita.com/ReoNagai/items/f516c0d21a72a870b0ec"},{"title":"アソシエーション(rails 学習)","body":"###はじめに\n初学者の学習アウトプットです。\n先輩方。\nアドバイス、訂正、オススメ記事等ありましたらお願いします。\n\n#アソシエーション\nrailsを学習しているのですがアソシエーションって言葉は覚えて、モデル同士の関係に関連付けをするっていうのは分かったのです。\n\nしかし!!!!!\n\nモデル同士の関連付けしてどうなるの？\n何ナノ？アソシエーション~~それ美味しいの~~？\n(初心者あるある)っていうことに陥って何となく~~分かった~~(分かったつもりになってた)\nを抜け出せるように理解したいと思いました。\n\nじゃ、やりましょう!!\n\n###アソシエーションを定義する\n今回Twitterの簡易版アプリを使用しています。\nツイート(投稿)とユーザーを関連付けさせます。\n全てのツイートはいずれかのユーザーが投稿したもので、ユーザーは自分が投稿した複数のツイートを所持していることになります。\n\nモデルクラスにhas_manyやbelongs_to等が定義されてる。\n所属する側のテーブルに所属するクラス名_idというカラムが存在する。\n\n```ruby\n\nclass User < ApplicationRecord #Userモデル\n    devise :database_authenticatable, :registerable,\n           :recoverable, :rememberable, :validatable\n    has_many :tweets  \n  end\n```\n```ruby\n\n class Tweet < ApplicationRecord #Tweetモデル\n    belongs_to :user\n  end\n```\n\nこいう感じで定義されました。\n\nここまでは理解ができるのですが次ですね。\n次、何が？どうなんの？って、、、\n\n###アソシエーションを実装\n\nアソシエーションなしの場合。\ntweetsテーブルに対して、user_idがuserのidと等しいレコードを取得しています。\n\n```\n#ターミナルにてrails cコマンド実行\n\n$ rails c\n  [1] pry(main)> user = User.find(1)\n  [2] pry(main)> Tweet.where(user_id: user.id)\n  => [#<Tweet id: 1, image: \"http://photo1.jpg\", text: \"いい景色だ。\", created_at: \"2014-12-06 09:00:00\", updated_at: \"2014-12-06 09:00:00\", user_id: 1>,\n  #<Tweet id: 1, image: \"http://photo2.jpg\", text: \"楽しい思い出は消えない。\", created_at: \"2014-12-06 10:00:00\", updated_at: \"2014-12-06 10:00:00\", user_id: 1>]\n```\n\nアソシエーション実装後\nUserモデルに「User has many Tweets」の状態のアソシエーションを定義したので、Userモデルのインスタンス.tweetsと記述するだけでそのインスタンスが所持しているツイートを取得することができます。(記述が少なくなってる)\n\n```\n $ rails c\n  [1] pry(main)> user = User.find(1)\n  [2] pry(main)> user.tweets\n  => [#<Tweet id: 1, image: \"http://photo1.jpg\", text: \"いい景色だ。\", created_at: \"2014-12-06 09:00:00\", updated_at: \"2014-12-06 09:00:00\", user_id: 1>,\n  #<Tweet id: 1, image: \"http://photo2.jpg\", text: \"楽しい思い出は消えない。\", created_at: \"2014-12-06 10:00:00\", updated_at: \"2014-12-06 10:00:00\", user_id: 1>]\n```\nこれを実装すると\n\n```ruby\n\n  class UsersController < ApplicationController\n\n    def show\n      @nickname = current_user.nickname\n      @tweets = current_user.tweets\n    end\n\n  end\n ```\n\nこんな感じになり簡単というか記述が減って綺麗に見えるのでよかった!と思いました。\nあと自分でアソシエーションをしっかり組んで自分のアプリに技術を落とし込んでいきたいです。\nもっと色んなパターンも他にもあると思うのでそこも勉強が必要かなと。\n\nこちらの記事参考にしました。\n\n【Rails初心者向け】モデル間の関連付け（アソシエーション）まとめ\nhttps://qiita.com/To_BB/items/47d2c7b1bc3513025d7b\n","created_at":"2019-04-14T10:49:23+09:00","id":"13edfca2cee8af245c43","tags":[{"name":"Rails","versions":[]}],"url":"https://qiita.com/hellhellmymy/items/13edfca2cee8af245c43"},{"title":"Unity、入門ライティング設定！","body":"## 概要\n最初は**「(簡易的な)VRChatのワールド最適化について」**としようと思ったのですが、結局ワールド作成における最適化の話は**（殆どライティングの話になるな）**と思ったので、さっとUnityのライティングについて網羅できる記事を書こうと思います。\n「Unity 最適化」で調べても、話としてはC#の事とかメモリの管理の話が中心で「VRChatのワールド最適化」とはまた話が異なるので、この記事を書こうと思いました。\nあまりガチガチの話はできないので、**VRChatでワールド作り始めた人向けの記事**として書きます。\n\n## 目標設定\n![Lighting.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/47099ca4-6dc6-a2c9-67c2-7ddf0de723e4.png)\nVRCで指定されてるUnity2017.4.15f1を使用しています。\nスフィアとキューブだけを並べた新規のシーンを作成。**(あまり重くならないように)**ライトの設定だけで画作りを行ってゆく。\nマテリアルのShaderはスタンダードShaderです。\n\n## Hello Unity\n![Auto.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/83784097-6c95-5ee1-7a43-99c69b24afd5.png)\nまず、エディタのメニューバー[Window]>[Lighting]>[Setting]でタブを開いて**[Auto Generate]のチェックを外しましょう。**\nUnityの教本にはほぼほぼ書いてあって、分かってる人からすると当たり前なのですが…もしかすると、導線によってはそういった情報が手に入らない可能性はあるので触れておきます。\n\nAuto Generateとは、**作業中にUnityが自動でライトの計算を行ってくれる機能**なのですが、大体のフローとしてはWorldをセットアップして区切りがついた段階でライトの計算をする方がスムーズです。デフォルトだとオンになっているので外します。\n**チェックを外した後は手動でベイク(ライトの計算を行う)してから、プレビュー**してゆきます。\n\nちなみに、**Lightingの設定はSceneと紐づいている**ので、[add Scene]から新規に作成した場合、最初に外す必要があります。\nプロジェクト単位の設定ではない事に注意が必要です。\n\n**Generate Lightmap UV's**\nライトをベイクしたらモデルが汚くなった！という方は、アセットフォルダからモデルの設定を確認してみてください。\n<a target=\"blank\" href=\"http://nn-hokuson.hatenablog.com/entry/2017/01/30/193251\">【Unity】Unity5でライトをベイクした結果が汚い</a>\n\n## ライト(Light)コンポートを知る\n![UniLighting.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/0beb60ca-9d4b-58c2-693e-63c365948938.png)\nワールドをセットアップする場合、極力Lightの持つプロパティについて説明できるようにしておくのがよいです。\n\n何故なら、ムービーなどで使われる3Dは１枚の画像をレンダリングに時間をかけるプリレンダと呼ばれる物に対して、ゲームは**リアルタイムレンダリング**でリアルタイムに実行されるからです。\nそもそも光のシュミレーションという時間のかかる処理を、**短時間でそれっぽく見せるのがリアルタイムレンダリングの技術**なので、最適化をするにしても理解が必要というわけです。\n代表的な部分についてざっくり説明します。\nあと全てのコンポートで共通ですが、ハテナマークの辞書をクリックすると、リファレンスに飛びます。\n<a target=\"blank\" href=\"https://docs.unity3d.com/ja/current/Manual/class-Light.html\">Light インスペクター</a>\n\n### Mode （ライトのベイクについて）\n**Realtime(リアルタイム)、 Mixed(両方)、 Baked(焼き込み、事前計算)**　があります。\nVRChatの場合「リアルタイムが１灯～２灯、他はベイク」ぐらいを目安に考えるのがいいと思います。\n（もちろん、作りたいものや演出によって異なるので、あくまで目安です）\nMixedは「動いてる物に対してはリアルタイム、止まってる物に対してはBakeする」というだけなので、リアルタイムとして数えます。\n\n![Bakestatic.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/02462a5f-1a69-d6b0-a2c1-0248a0203171.png)\n>ゲームを実行してから[Status]を押すと、レンダリングをするのに行われている処理の統計が確認できます。\n>注目すべき箇所は Batch と SetPass calls の値で…この値を減らすことで'レンダリンに必要な'処理は軽くなります。\n\nそれではベイクの説明に移ります。\n**上の画像は「全てのオブジェクトをstaticにしてBaked」**したのに対して、**下の画像はオブジェクトを配置しただけで何せずそのまま実行しています。(非static）**\nライトは「ディレクショナルライト（Mixed）１灯のみ」で共通です。\n\n**見た目は同じなのにパフォーマンスが異なります。**\nリアルタイムの場合 Saved by batching が 0 で Batches と SetPass の値が大きく…\nベイクの場合 Saved by batching が 13 で Batches と SetPass の値が小さくなっています。\n\nどういう事か？といいますと…**バッチ(Batches)処理とは「(ざっくり)まとめて処理する」**という意味で。\nリアルタイム(非スタティック)ではまとめられる処理が無いのに対して、スタティックにしてベイクするとまとめられる処理が増えるので処理が最適化されるという事です。\n\nリアルタイムの場合、**オブジェクトが動く可能性を考慮しています。**\nゲームである以上、外的要因が加わり動いたり、消えたりする可能性があるので、動くオブジェクトは毎フレームオブジェクトの状態を見た上で計算する必要があるわけです。\nなので、リアルタイム(非スタティック)の場合、**似たような見た目であってもそれぞれ結果が異なる可能性があるので、処理がまとめられず…１つのオブジェクト毎に１つ１つ処理する必要がある。**という事です。\nスタティックでオブジェクトが止まっていれば、Unityがレンダリングを最適化しやすくなるので、バッチ(Saved by batching)が増えます。\n\nまた「ライトを焼き込む(ベイク)」といい、ライトは事前計算する事ができます。\n**ゲーム的に破壊されない建物などの場合、動かないので毎フレーム計算する必要はない**わけです。\nそういったものは**「ライトの結果を事前に計算しておいて表示する」**という方法がとれます。\nこれなら、高速かつ高品質な結果が得られるわけです。（ベイクした計算済みの結果は必要なので、メモリは必要）\n\nまとめると…\n・ベイクできるものについてはベイクしよう！（持てる物などはベイクすると矛盾するのでしない）\n・スタティックにできるものはスタティックにしよう！\n・そもそも、レンダリンとかプログラムとか難しい事抜きにして**「まとまってると仕事がしやすい」**というのは人もコンピューターも同じだぞ！\n\n### Type(ライトの種類について)\nDirectional, Point, Spot ,Area とありますが、ポイントライトとディレクショナルライトについて触れておきます。\n\n![d.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/10974ec0-4a95-9bdc-eaaa-80583cccb98e.jpeg)\nDirectionalライトは影響範囲こそ広いものの**「光の強さは一定」**のモデルなので、計算は単純化しやすい。\n**太陽光の差し込む方向ベクトル** と **明るさ** だけあれば基本的なシュミレーションはできてしまう。\n\n![p.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/e44798f6-9ae0-e76a-29cd-3fc6411205c6.jpeg)\n一方で、**ポイントライトとは１点から周囲に広がるの光で、距離によって減衰する効果を持つ**\nこれをプログラムとして表現する時どうなるか？\nまず、光の方向ベクトルは一方方向だけでなく、三次元の放射状広がるベクトルとなる。光の当たったポリゴンによって光のベクトルは異なる。\nまた、減衰を考慮するので、光源からオブジェクトまでの距離を求めて、光の当たった箇所の光の強さを求める必要がある。あきらかに**計算回数が多い**。\n\n>体感的に、自然現象をプログラムに直した時（計算複雑そうだな）って思う感覚が必要。\n\n要するに**Directionalライトは単純なモデルに対して、ポイントライトは処理の多いモデル**という事です。\nで大事なのは「ポイントライトを使うな」という事ではなく**「ポイントライトは効果的に使おう」**という事である。\n\nポイントライトで表現できるのは暖炉の火や、焚火などが考えられる。非常に魅力的。\nつまり、ライティングの主役は**こいつに決めて**（演出による）そこから主役を盛り上げるようにライティングを設計する。\nあと、**ベイクできるポイントライトは極力ベイクしましょう。**\nベイクしてしまえば実行時の処理はさほどかからないので、雰囲気の出るよい光源を軽量に扱える。\n\n### その他設定\n**Intensity**\n明るさ。ただ、**リアルタイムなライトの場合、よほどの事がない限り１をベースに考える**のがよいです。\nVRChatはワールドによって光源が異なる為、**実際問題Shaderの最適な設定はワールド毎に異なる**のが現実です。\nVRCで人気のShaderはワールド毎に環境が異なるという特殊な状況を加味した上で、最大公約数となる処理を行っています。\nなので、明るさに変わった値を入れてしまうのは得策ではありません。（ベイクするライトは関係ない）\n\n**Shadow Type**\n床に落ちる影の設定。**リアルタイムなライトの場合、暗いワールドで影がなくても矛盾しない場合は**切った方が無難。\nちなみに シャドウ(影) と シェード(陰) は意味が違う。\n<a target=\"blank\" href=\"https://docs.unity3d.com/ja/current/Manual/ShadowOverview.html\">影</a>\n\n## 環境光について(Environment)\nライティングの設計において、ポストプロセス以上に大事だと思うのが、環境光(Environment)だと思います。\n\n![e.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/09b25011-d783-19b1-0d32-c21a3ad7e18d.gif)\n一目瞭然だと思いますが、落ちてる影の色を変える事ができます。\nEnvironmentLoghtingは**デフォルトの場合「Source Skybox」になっており、Unityデフォルトのプロシージャルskydomeを使用するとプロシージャルskydomeの色を影として与えます。**\n新海誠監督の映像などを見ると分かりますが、**落ちてる影すらも色鮮やか**です。\nつまり、空気感のようなものを演出する場合はEnvironmentLoghtingを絶対にいじる必要があり、理解する必要があるわけです。\n**そもそも拡散光とはどういう事なのか？**みたいなのは、美術書とかに載ってます。\n\n![en.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/775ef1ff-0b2c-e9c8-fb96-ee3dd2268734.png)\n今回は「頑張っていい感じの夕方にする」という目標でライティングしてゆきます。\nひとまず、現段階では上記のような環境光にして、夕方にしてみます。\n\n## リフレクションプローブについて\n\n![reflection.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/9b444eee-beb3-38ad-c212-b43009113406.png)\n**左がリフレクションプローブなし、右がリフレクションプローブ有り**\nよくみると左は室内なのにスカイボックスを反射していて、右はちゃんと室内を反射しています。\n\nリフレクションプローブとは、**物体が反射した時の映り込みに使うデータ**です。\n細かい使い方等は、調べてください… <a target=\"blank\" href=\"https://docs.unity3d.com/ja/current/Manual/UsingReflectionProbes.html\">リフレクションプローブの使用</a>\n\n主に、物体を鏡面反射させたい時に出てくるので、一見するとワールドに鏡面のものがなければ関係ないように思います。（大理石とか、光沢のあつ机とか、ガラスとかが無いワールド）\nしかし、**ワールドに訪れた人の中に、反射する金属のマテリアルを設定している可能性**はあります。\nまた、見栄えもよくなり、室内なのに空を反射するといった矛盾もなくなるので**Bakedであれば基本的に設定し得です。**\n設定するようにしましょう。\n\n![rihureku.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/f811f767-0a53-2556-f3e4-1f078a9a1f8e.png)\nまた、リフレクションプローブの映り込みで違和感のあるものに関してはstaticのメニューからチェックを外すと、リフレクションプローブのベイク対象から外されます。\n\n## 以上を踏まえてライティング\n![20190414054922img.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/30a7757e-3fd5-4b01-e947-da31cfeedf53.png)\nセットアップ直後\n\n![20190414101131img.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149449/f6fbc452-7b8d-9dba-356e-40527d0f3ba2.png)\nライト調整後（ポストエフェクトなし）\n\nライトは…ディレクショナルライト(Mixd)×１、ポイントライト(Bake)×２で、ポイントライトは窓際の落ちてる光と、室内の明かりで１灯つかいました。\n結局スカイボックスはアセットを使用しました…どうしてもディレクショナルライトを傾けて空の色を変える場合、他のライティングを邪魔するのと、(プロシージャルスカイボックスの色を変えたくて)角度のキツイディレクショナルライトを置く事になるぐらいであればスカイボックスを変えた方がいいです。\n（リアルタイムライトはキャラにも落ちるので）\n\n・環境光(Environment)の調整\n・基本ライトの使用（＋マテリアルの調整）\n・リフレクションプローブを普通にセットアップ\n以上に気を遣うだけで、余計な処理を行わずにそれっぽくできます。\n\nここからポストエフェクトを追加すればよりよくなるとおもいます。\n<a target=\"blank\" href=\"https://youtu.be/r5mNmH68KPQ\">【Unite 2017 Tokyo】ゲームの見た目も盛ったら変わる！ヤバい！ポストプロセス！入門！</a>\n\n## おわり\nこれでUnityのライティング入門の話は終わりです。\n初学者向けの表面的な内容だけをなぞってるので、ステップアップしたい場合は個人的に以下の教材が良かったです。（保証はしません）\n\n<a target=\"blank\" href=\"https://www.amazon.co.jp/dp/4862461530/ref=cm_sw_r_tw_dp_U_x_FaPSCb2EWTQ39\">カラー&ライト ~リアリズムのための色彩と光の描き方</a>\nUnityとは関係ない美術本ですが、光とか色の捉え方や表現の仕方、考え方など学べます。\n絵にかくか、CGにするかの違いなので、そもそもの絵作りの正解とは何か？を考えるヒントになります。\nこの本で言われてる事をUnityに置き換える事ができればいいわけです。\n\n## 参考リンク\n<a target=\"blank\" href=\"https://docs.unity3d.com/ja/current/Manual/LightingInUnity.html\">ライティングの概要</a>\n<a target=\"blank\" href=\"https://docs.unity3d.com/ja/current/Manual/OptimizingGraphicsPerformance.html\">グラフィックスパフォーマンスの最適化</a>\n<a target=\"blank\" href=\"https://unity3d.com/jp/learn/tutorials/projects/creating-believable-visuals/lighting-and-setup\">ライティングと設定</a>\n","created_at":"2019-04-14T10:45:45+09:00","id":"8845d076c4356809f0ff","tags":[{"name":"Unity","versions":[]}],"url":"https://qiita.com/Nekomasu/items/8845d076c4356809f0ff"},{"title":"Ionic4 に Google Analytics を入れる","body":"## 初めに\nionic4 でPWAアプリを開発しようとした際、Ionic の公式サイトで記述されている\n方法で、Google Analytics がうまく導入できずに困ったときのために\nこの記事を書きていきます。\n\n## Ionic4 のプロジェクトを制作する\n始めるにあたり、Ionic CLI を使い、プロジェクトを作成します。\nその際、テンプレートはどれでも構いませんが、\nフレームワークは、Angularで進めていきます。\n\n```bash\nionic start Example  \n```\n\n## Google Analytics を導入する\n\nそれでは、実際に導入していきたいと思います。\nここでは、Google Analytics での登録完了後、\nトラフィックコード: `UA-XXXXXXXXX-Y` が発行後\nについて進めていきます。\n参考にしたサイトはこちらになります。\n\nhttps://blog.yuhiisk.com/archive/2018/05/18/angular-google-analytics.html\n\nプロジェクト ”Example” 作成後、\n\n\n``` bash\ncd Example\nionic g service gs\n```\nとコマンドを入力してください。入力後、\n`ga.service.ts`, を編集します。\n\n```ga.service.ts\nimport { Injectable } from '@angular/core';\n\ndeclare let gtag:any;\n@Injectable({\n  providedIn: 'root'\n})\nexport class GaService {\n\n  constructor() { }\n\n  private useGA():boolean{\n    return typeof gtag!==undefined;\n  }\n  sendPageView(url:string):void{\n    if(!this.useGA()){return;}\n    gtag('config','UA-XXXXXXXXX-Y',{\n    //'UA-XXXXXXXXX-Y'には、生成されたコードを入力してください。\n    'page-path':url \n    });\n  }\n  sendEvent(eventName:string,\n            eventCategory:string,\n            eventAction:string,\n            eventLabel:any):void{\n    if(!this.useGA()){ return; }\n    gtag('event',eventName,{\n      event_category:eventCategory,\n      event_action:eventAction,\n      event_label:eventLabel\n    });\n  }\n}\n\n```\n\n次に、app.compornent.tsを編集します。\n\n```app.compornent.ts\n\nimport { Component } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\nimport { Router,NavigationEnd } from '@angular/router';\nimport { GaService } from './ga.service';\nimport { filter } from 'rxjs/operators';\n\ndeclare let ga: Function;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html'\n})\nexport class AppComponent {\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar,\n    private router:Router,\n    private gaService :GaService\n    \n  ) {\n    this.initializeApp();\n  }\n\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n      this.router.events\n      .pipe(\n       filter(e=>e instanceof NavigationEnd))\n      .subscribe((params: any)=>{\n        this.gaService.sendPageView(params.url);\n      });\n      \n    });\n  }\n}\n\n```\n\n最後に、index.htmlに、次のコードを`head`内に追加してください。\n\n```index.html\n<head>\n ...\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-XXXXXXXXX-Y\"></script>\n  <script>\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n  </script>\n ...\n</head>\n```\n\n\nこれにより、Google Analytics の準備はできました。\nこのコードをデプロイした後、Google Analytics で、\n現在の利用者が１人とカウントされていたら成功です。\n\n","created_at":"2019-04-14T10:39:04+09:00","id":"303ce91fb1c946c3e9ce","tags":[{"name":"GoogleAnalytics","versions":[]},{"name":"Angular","versions":[]},{"name":"ionic4","versions":[]}],"url":"https://qiita.com/0622okakyo/items/303ce91fb1c946c3e9ce"},{"title":"混合正規分布によるクラスタリング","body":"```{r}\nlibrary(dplyr)\n\nN=10000;\n\nclass=4\n\npi=rep(0.25,class)\n\nmu=c(-5,5,8,3);sig=c(1,5,3,4)\n\n#真の出身（正解データ）\n\nattr=sample(1:class,N,replace = T,prob=pi)\n\nx=rep(-99,N)\n\nfor(j in 1:class){\n  \n x[which(attr==j)]<-rnorm(length(which(attr==j)),mu[j],sig[j])\n \n}\n\n#initial conditions\n\nmu=sample(c(-20:20),class);sig=sample(c(1:50),class)\n\npi=c(0.2,0.6,0.1,0.1)\n\ntimes=100\n\nfor(j in 1:times){\n  \ns_piN=array(0,dim=c(class,N))  \n\nfor(i in 1:class){\n  \n s_piN[i,]=pi[i]*dnorm(x,mu[i],sig[i]) \n  \n}\n\nqn=c()\n\nfor(i in 1:class){\n  \n qn=c(qn,sum(s_piN[i,]/apply(s_piN,2,sum))/N) \n\n}\n\npi=qn\n\nmu=c()\n\nsig=c()\n\nfor(i in 1:class){\n  \nmu_val=sum(x*s_piN[i,]/apply(s_piN,2,sum))/(N*pi[i])  \n  \nmu=c(mu,mu_val)  \n\nsig=c(sig,sqrt(sum((s_piN[i,]/apply(s_piN,2,sum))*((x-mu_val)*(x-mu_val)))/(N*pi[i])))\n  \n}\n\n\n}\n\n```\n\n```{r}\n\nN=1000\n\npi0=0.5;pi1=0.5\n\nmu0=5;mu1=-5\n\nsig0=1;sig1=5\n\n\nattr=sample(0:1,N,replace=T,prob=c(pi0,pi1))\n\nx=rep(-99,N)\n\nx[which(attr==0)]=rnorm(length(which(attr==0)),mu0,sig0)\n\nx[which(attr==1)]=rnorm(length(which(attr==1)),mu1,sig1)\n\n#initial conditions\n\nmu0=1;mu1=1;sig0=10;sig1=20;pi0=0.1;pi1=0.9\n\niteration=20\n\nfor(i in 1:iteration){\n  \n piN0=pi0*dnorm(x,mu0,sig0);piN1=pi1*dnorm(x,mu1,sig1)\n \n qn0=piN0/(piN0+piN1);qn1=piN1/(piN0+piN1)\n \n pi0=sum(qn0)/N;pi1=sum(qn1)/N\n \n mu0=sum(qn0*x)/(N*pi0);mu1=sum(qn1*x)/(N*pi1)\n  \n sig0=sqrt(sum(qn0*(x-mu0)*(x-mu0))/(N*pi0))\n \n sig1=sqrt(sum(qn1*(x-mu1)*(x-mu1))/(N*pi1))\n  \n}\n\n```\n","created_at":"2019-04-14T10:27:03+09:00","id":"a98a791cc9b0967d1a6a","tags":[{"name":"RStudio","versions":[]}],"url":"https://qiita.com/kozakai-ryouta/items/a98a791cc9b0967d1a6a"},{"title":"Qiitaを書いていて嬉しいこと・嬉しかったこと","body":"\n1. いいね\nまだ書きかけの状態でいいねをもらうと、この話題、真剣に書かなきゃと内容が充実すうr。\nいいねをくださった方の記事を拝見して参考になることを調べる。\nいいねをくださった方が、他の誰の記事をいいねしているかを拝見して参考になることを調べる。\n\n2. follow\nfollowしてくださった方が、誰をfollowしているか、誰にfollowされているかを拝見して参考にする。\n\n3. コメント\n誤字・脱字の指摘と、自分のまだ使いこなせていない機能を教えてもらうと技がだんだん身につく。\n編集リクエストだと、同時に自分も直していると訳がわからなくなって直せなくなってしまう。\n\n編集リクエストは、本当に単純な事項で、知らない機能について簡単に使うのには便利だが、複雑なことにはなじまない。\n\n4. 編集リクエスト\n誤字・脱字の指摘と、自分のまだ使いこなせていない機能を教えてもらうと技がだんだん身につく\n\n5. Twitterでのいいね\nTwitterとの連携がうまくできていない。\nある完成度になってからTwitterに流すようにしている。\nTwitterでいいねしてくださった方の１割くらいは、Qiitaでもいいねしてくださっている感じ。\n\n6. TwitterでのRT\n自分のfollowerは少ない。2732人。\n\n\n7. Twitterでのコメント\nURLの紹介など感謝。\n\n8. はてなbookmarkでのいいね\nはてなbookmarkで100登録があるとヒット。\n\n9.  はてなbookmarkでのコメント\n貴重なご意見をいただいています。\n\n10. facebookでのいいね\nfacebookの友達は1337人。1%いいねをもらう記事はなかなかかけない。\n\n11. facebookでのシェア\n友達の輪がプログラミングの話題で広がると嬉しい。\n\n12. facebookでのコメント \n関連情報など教えてもらいました。\n\n#文書履歴(document history)\nver. 0.01 初稿 20190414 朝\nver. 0.02 半分がみだしだけだったのを文章追記 20190414午前\n","created_at":"2019-04-14T10:21:36+09:00","id":"7f7796943ace8b9a99b0","tags":[{"name":"Qiita","versions":[]}],"url":"https://qiita.com/kaizen_nagoya/items/7f7796943ace8b9a99b0"},{"title":"UbuntuとApacheでmod_auth_formを使ってみる","body":"# はじめに\nこの記事ではJavaによるOP実装例をベースに、シングルサインオン(SSO)を実現する方法を書いてみます。\nhttps://qiita.com/namikitakeo/items/c4f1a23ed7609c65342e\n\n# 実行環境\n下記バージョンで動作確認しています。myopはJavaアプリケーションでApacheのリバースプロキシ設定で中継します。\n- Ubuntu on Windows(14.04.6 LTS, Trusty Tahr)\n- Apache2 Ubuntu(Apache/2.4.7)\n\n# 実装方針\nmod_auth_formを利用する事でログイン/ログアウトをApacheで行いセッション管理にCOOKIEを用いる事でSSOを実現します。\n\n以下の例ではフォーム認証のID/パスワードにはファイルを利用します。もちろんDBやLDAPに対応する事も可能ですので認証に依存しない認可の仕組みをつくる事が可能となります。\n\n<pre>\n$htpasswd -b /etc/apache2/passwd user01 user01\n</pre>\n\n以下のURL構成を想定しています。\n<pre>\nhttps://myop.example.com/myop/authorize\nhttps://myop.example.com/myop/jwk_uri\nhttps://myop.example.com/myop/tokeninfo\nhttps://myop.example.com/myop/.well-known/openid-configuration\nhttps://myop.example.com/login.html\nhttps://myop.example.com/dologin.html\nhttps://myop.example.com/logout.html\nhttps://myop.example.com/dologout.html\n</pre>\n\n以下のURLのみID/パスワードで保護します。ユーザーが最初にアクセスした際は有効なCOOKIEがありませんので、\n<pre>\nhttps://myop.example.com/myop/authorize?param=aaa\n</pre>\n\nログイン画面にリダイレクトされます。\n<pre>\nhttps://myop.example.com/login.html?param=aaa\n</pre>\n\nログイン画面では/dologin.htmlにパラメータをPOSTする事で有効なCOOKIEを発行します。\n<pre>\nhttpd_username：user01\nhttpd_password：user01\nhttpd_location：https://myop.example.com/myop/authorize?param=aaa\n</pre>\n\nApacheのリバースプロキシ設定でTomcatのmyopに中継する際にHTTPヘッダ(uid)で有効なID(user01)を連携します。\n\n<pre>\n&lt;Location \"/myop/authorize\"&gt;\n        require valid-user\n        AuthUserFile /etc/apache2/passwd\n        AuthType form\n        AuthName realm\n        AuthFormLoginRequiredLocation /login.html?%{QUERY_STRING}\n        Session On\n        SessionCookieName session path=/\n        SessionCryptoPassphrase secret\n        RewriteEngine On\n        RewriteCond %{LA-U:REMOTE_USER} (.+)\n        RewriteRule . - [E=RU:%1,NS]\n        RequestHeader set uid %{RU}e\n&lt;/Location&gt;\n&lt;Location /dologin.html&gt;\n        SetHandler form-login-handler\n        AuthFormProvider file\n        AuthUserFile /etc/apache2/passwd\n        AuthType form\n        AuthName realm\n        AuthFormLoginSuccessLocation /myop/authorize?%{QUERY_STRING}\n        AuthFormLoginRequiredLocation /login.html\n        Session On\n        SessionCookieName session path=/\n        SessionCryptoPassphrase secret\n&lt;/Location&gt;\n&lt;Location /dologout.html&gt;\n        SetHandler form-logout-handler\n        AuthFormLogoutLocation /logout.html\n        AuthName realm\n        Session On\n        SessionCookieName session path=/\n        SessionCryptoPassphrase secret\n&lt;/Location&gt;\n</pre>\n","created_at":"2019-04-14T10:18:00+09:00","id":"cfeb5a3fbad2446f0404","tags":[{"name":"Apache","versions":[]},{"name":"mod_auth_form","versions":[]}],"url":"https://qiita.com/namikitakeo/items/cfeb5a3fbad2446f0404"},{"title":"Elixir ~前提となる基本に立ち返る~","body":"　#ここまでのあらまし\n\nここまで、Enumを使った記法や簡単な関数のモジュール化、PJとして扱うところまでをやった。\n\n[こちらのサイト](https://dev.to/gumi/elixir-02--30n1) を参照しながら体系的理解について備忘録的にドキュメントをしたためていきます。\n\n#本題、Elixirの基本\n\nわたしにとって引っかかった、覚えるべきところを記していくのでElixirの基本、あらましについてすべてを記述していくわけではありません。\n\n四則演算\n\n```elixir\niex > (1 + 2) * 3 - 4\n5\n```\n\n四則演算は、カッコで囲まれたところや乗法除法から計算していく模様。\n中高の数学と同じといえそうです。\n\n除法の/は結果が整数であっても浮動小数点を以て扱うよう。\n\nこれに対して答えを整数で返すのがdiv、除法の余りを返すのがrem。\n\n```elixir\niex > div(10, 2)\n5\niex > div 10, 2\n5\niex > rem 10, 3\n1\n```\n\nここで、基本的な型についてわたしに引っかかったものを備忘録。\n”プログラミングElixir”という書籍がここのあたりの記述があかるかったけれど、プログラミング入門者のわたしにはいささか内容が緻密で読みづらかったので後にまわすことにしています。\n\n論理値 true\nアトム :atom \nリスト [1,2,3]\nタプル{1,2,3}\n\n論理値かどうか確かめるのがis_boolean/1関数。\n\n```elixir\niex > is_boolean(1 > 2)\ntrue\niex > is_boolean(1)\nfalse\n```\n\nヘルプを表示するのがh。自学自習、Elixir学習において避けて通れない英語読解のために役に立ちそう。ガンガン使っていこう。\n\n```elixir\niex > h is_number/1\n```\n返ってきたヘルプがこちら\n<img width=\"649\" alt=\"スクリーンショット 2019-04-14 09.46.29.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/306722/673af7dd-691d-6848-38a1-802fa0176a54.png\">\n\n入力したタームが整数か浮動小数であった場合true、それ以外はfalseを返す、といったところでしょうか。\n\nアトムはそれ自体がそのまま値になる。\n\n```elixir\niex > :atom\n:atom\niex > :atom == :hello\nfalse\n```\n\nis_atom/1やis_boolean/1といった関数がありますがここでは例示に対する理解が完璧でないため割愛します。\n\nElixirのモジュール名もアトム。モジュールをつくるときは大文字から始める。\n\n```elixir\niex(14)> is_atom(String)\n\"htrue\niex(15)> is_atom(MyModule)\ntrue\n```\n\n文字列は””で囲む。\nアトムを文字列に含めるときは#{}で囲む。\n\n```elixir\niex > \"hello\"\n\"hello\"\niex > \"hello #{world}\"\n** (CompileError) iex:17: undefined function world/0\n    (elixir) src/elixir_bitstring.erl:142: :elixir_bitstring.expand_expr/4\n    (elixir) src/elixir_bitstring.erl:27: :elixir_bitstring.expand/8\n    (elixir) src/elixir_bitstring.erl:20: :elixir_bitstring.expand/4\niex > \"hello #{:world}\"\n\"hello world\"\n```\n\n↑アトムとして扱うための：を忘れたのでコンパイルエラーが出ています。\n\n文字列には改行が含められる。またエスケープシーケンス\\nで加えてもよい。\nIO.puts/2で示されるアトム:okは、正しく入力できた際の戻り値。\n\n```elixir\niex > IO.puts\"hello/nworld\"\nhello/nworld\n:ok\niex > IO.puts\"hello\n... > world\n... > \"\nhello\nworld\n\n:ok\n```\nあれ。ちょっと改行のしくみに疑問。\n\nバイト数を調べるのがbyte_size/1、文字数を調べるのがString.length/1。\n\n```elixir\niex > byte_size(\"hello\")\n5\niex > byte_size(\"健康\")\n6\niex > String.length(\"hello\")\n5\niex(23)> String.length(\"健康\")\n2\n```\n\n#編集後記\n\nたいへんわかりやすくまとまっているブログを見つけたので理解をあたらしくすることができています。\n続きは次のドキュメントに切り分けます。\n\n全然関係ないんですがHHKB Lite 2 US配列を買いました。\n音楽業界ってアップルのテンキー付きJIS配列が標準かつわたしのMacBook ProもJIS配なので、まだまだ慣れないですが書き始めてエンジンかかってくるとタイピングが楽しくなってきます。\nめざせ後継メインマシンUSキー化＆HHKB Professional購入。\n\nうまずたゆまず、頑張ります。\nKento Mizuno\n\n\n\n\n\n\n\n\n\n\n\n","created_at":"2019-04-14T10:13:40+09:00","id":"5471fb4770f30b33812a","tags":[{"name":"Elixir","versions":[]},{"name":"fukuoka.ex","versions":[]}],"url":"https://qiita.com/kmizuno0211/items/5471fb4770f30b33812a"},{"title":"とにかくDockerイメージを渡したい","body":"dockerイメージの受け渡しを行うときに、docker-hubや自前のリポジトリを使える状態にあれば良いのですが、とにかくイメージよこせ！と、とりあえず早急にイメージだけを渡す必要に迫られ他ので、その際にとった方法を残しておきます。\n\n### イメージのエクスポート\n`docker save`を行うと、イメージをtar形式で標準出力してくれます。これをリダイレクトして任意のファイルに出力します。\nその後、gzipコマンドでさらに圧縮すると、元のサイズの1/3強くらいになりました。\n\n```\ndocker save [イメージ名] > my image.tar\ngzip image.tar\n```\nあとは出来上がったファイルをダウンロードやコピーをするなりして、催促する人に渡します。\n\n### イメージのインポート\nエクスポートと逆の手順にてインポートすることができます。\nつまり、gzipコマンドで解凍し、解凍されたファイルを`docker load`で読み込みます。\n\n```\ngzip -d image.tar.gz\ndocker load < image.tar\n```\n\nエラーが発生しなければOKです。\n私は、`docker save`したファイルが壊れていた事が何回か続いたため、人に渡す前には`docker load`でエラーが発生しない確認を行なってから人に渡すようにしようと思います。\n\n### 参考\nhttps://docs.docker.com/engine/reference/commandline/save/\n","created_at":"2019-04-14T10:04:48+09:00","id":"55d3e87a08364b715b3b","tags":[{"name":"docker","versions":[]},{"name":"rhel7.4","versions":[]}],"url":"https://qiita.com/hexenschuss1112/items/55d3e87a08364b715b3b"},{"title":"Minikube on Mac（Pod編）","body":"Minikube on Mac（Pod編）\n==================\n\nMac に Minikube を導入して色々と試してみたメモです。とりあえず MySQL Pod を動かすところまで。\n\n## 環境\n\n* macOS Mojave 10.14.4\n* Docker Desktop 2.0.0.3\n* kubernetes-cli 1.14.0\n  * `brew install kubernetes-cli`\n* minikube 1.0.0\n  * `brew cask install minikube`\n\n## Minikube とは\n\n[Minikube](https://github.com/kubernetes/minikube) とは 1 Node（Master Node と Worker Node を兼務）構成のシンプルな k8s Cluster をローカルで動作させるツールです。macOS だと Node を VirtualBox で動かすか [HyperKit](https://github.com/moby/hyperkit) で動かすかの二択になると思いますが、今回は HyperKit で動作させます。\n\n### HyperKit\n\nHyperKit は xhyve/bhyve というハイパーバイザを内包する仮想化ツールで、[xhyve](https://github.com/machyve/xhyve) は OS X 10.10 Yosemite 以降に搭載された [Hypervisor.framework](https://developer.apple.com/documentation/hypervisor) 上で動く hypervisor らしい。\n\n## さっそく実践：Pod を立てる\n\n早速 Minikube Cluster を作成します。`--vm-driver` で HyperKit を指定。\n\n```shell\nNOTE:~ ohno$ sudo minikube start --vm-driver=hyperkit\n😄  minikube v1.0.0 on darwin (amd64)\n🤹  Downloading Kubernetes v1.14.0 images in the background ...\n🔥  Creating hyperkit VM (CPUs=2, Memory=2048MB, Disk=20000MB) ...\n💿  Downloading Minikube ISO ...\n 142.88 MB / 142.88 MB [============================================] 100.00% 0s\n📶  \"minikube\" IP address is 192.168.65.9\n🐳  Configuring Docker as the container runtime ...\n🐳  Version of container runtime is 18.06.2-ce\n⌛  Waiting for image downloads to complete ...\n✨  Preparing Kubernetes environment ...\n💾  Downloading kubeadm v1.14.0\n💾  Downloading kubelet v1.14.0\n🚜  Pulling images required by Kubernetes v1.14.0 ...\n🚀  Launching Kubernetes v1.14.0 using kubeadm ...\n⌛  Waiting for pods: apiserver proxy etcd scheduler controller dns\n🔑  Configuring cluster permissions ...\n🤔  Verifying component health .....\n💗  kubectl is now configured to use \"minikube\"\n🏄  Done! Thank you for using minikube!\n```\n\n起動後の状態。\n\n```shell\nNOTE:~ ohno$ sudo minikube status\nhost: Running\nkubelet: Running\napiserver: Running\nkubectl: Correctly Configured: pointing to minikube-vm at 192.168.65.9\nNOTE:~ ohno$ sudo kubectl get nodes\nNAME       STATUS   ROLES    AGE   VERSION\nminikube   Ready    master   12m   v1.14.0\n```\n\nMinikube Node の実体は HyperKit で動作している仮想マシンで boot2docker という軽量 Linux ディストリビューションが利用されています。`minikube ssh` で仮想マシンにログインできます。Minikube の hostPath volume はこの VM 上のファイル・ディレクトリになります。（Mac のローカルでは無い）\n\n```shell\nNOTE:~ ohno$ sudo minikube ssh\n                         _             _\n            _         _ ( )           ( )\n  ___ ___  (_)  ___  (_)| |/')  _   _ | |_      __\n/' _ ` _ `\\| |/' _ `\\| || , <  ( ) ( )| '_`\\  /'__`\\\n| ( ) ( ) || || ( ) || || |\\`\\ | (_) || |_) )(  ___/\n(_) (_) (_)(_)(_) (_)(_)(_) (_)`\\___/'(_,__/'`\\____)\n\n$ uname -a\nLinux minikube 4.15.0 #1 SMP Tue Mar 26 02:53:14 UTC 2019 x86_64 GNU/Linux\n```\n\n早速 Pod を作っていきます。今回は MySQL コンテナに PersistentVolume をマウントする感じで Pod を立てます。マニフェストはこんな感じです。\n\n```yaml:mysql-pod-hostpath.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mysql\nspec:\n  volumes:\n  - name: mysql-pv\n    hostPath:\n      path: /data/mysql-data/\n  containers:\n  - image: mysql:latest\n    name: mysql\n    volumeMounts:\n    - name: mysql-pv\n      mountPath: /var/lib/mysql\n    env:\n    - name: MYSQL_ROOT_PASSWORD\n      value: password\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mysql-pv\nspec:\n  accessModes:\n    - ReadWriteOnce\n    - ReadOnlyMany\n  storageClassName: standard\n  capacity:\n    storage: 1Gi\n  persistentVolumeReclaimPolicy: Retain\n  hostPath:\n    path: /data/mysql-data/\n```\n\nマニフェストを apply してリソースを作成。\n\n```bash\nNOTE:~ ohno$ sudo kubectl apply -f mysql-pod-hostpath.yaml\npod/mysql created\npersistentvolume/mysql-pv created\nNOTE:~ ohno$ sudo kubectl get pods\nNAME    READY   STATUS              RESTARTS   AGE\nmysql   0/1     ContainerCreating   0          10s\nNOTE:~ ohno$ sudo kubectl get pods\nNAME    READY   STATUS    RESTARTS   AGE\nmysql   1/1     Running   0          18s\n```\n\n## 接続確認\n\n立てた Pod に接続してみます。`kubectl port-forward` でローカルポートを Pod に転送するようにします。\n\n```shell\nNOTE:~ ohno$ sudo kubectl port-forward pods/mysql 3306:3306\nPassword:\nForwarding from 127.0.0.1:3306 -> 3306\nForwarding from [::1]:3306 -> 3306\n```\n\nここではクライアントに MySQL Workbench をインストールして CLI 用に PATH を通しています。\n\n```shell\nNOTE:~ ohno$ export PATH=$PATH:/Applications/MySQLWorkbench.app/Contents/MacOS\n```\n\n`mysql` で接続。\n\n```shell\nNOTE:~ ohno$ mysql -h 127.0.0.1 -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 12\nServer version: 8.0.15 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n```\n\n無事つながりました。\n","created_at":"2019-04-14T09:59:53+09:00","id":"94593d81c16c2d53f172","tags":[{"name":"kubernetes","versions":[]},{"name":"minikube","versions":[]}],"url":"https://qiita.com/ohno2019/items/94593d81c16c2d53f172"},{"title":"I want to switch profile images in night mode on Twitter at night. (#Python script example of updating profile image with #Twitter # API)","body":"<h1> config.py </h1>\n\n<pre> <code>CONSUMER_KEY = &#39;&#39; \n CONSUMER_SECRET = &#39;&#39; \n ACCESS_TOKEN = &#39;&#39; \n ACCESS_TOKEN_SECRET = &#39;&#39; \n \n</code> </pre>\n\n<p> # twitterauth.py </p>\n\n<pre> <code class=\"py\">#!/usr/bin/env python3 \n \n import os, config \n from requests_oauthlib import OAuth1Session \n \n if os.environ.get(&#39;TWITTER_CONSUMER_KEY&#39;): \n CONSUMER_KEY = os.environ.get(&#39;TWITTER_CONSUMER_KEY&#39;) \n CONSUMER_SECRET = os.environ.get(&#39;TWITTER_CONSUMER_SECRET&#39;) \n ACCESS_TOKEN = os.environ.get(&#39;TWITTER_ACCESS_TOKEN&#39;) \n ACCESS_TOKEN_SECRET = os.environ.get(&#39;TWITTER_ACCESS_TOKEN_SECRET&#39;) \n else: \n CONSUMER_KEY = config.CONSUMER_KEY \n CONSUMER_SECRET = config.CONSUMER_SECRET \n ACCESS_TOKEN = config.ACCESS_TOKEN \n ACCESS_TOKEN_SECRET = config.ACCESS_TOKEN_SECRET \n \n def twitter(): \n return OAuth1Session(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET) \n \n \n \n</code> </pre>\n\n<h1> Script </h1>\n\n<p> Specify the file path of the image and base64 encode and pass it as a string to the API. </p>\n\n<pre> <code class=\"py\">#!/usr/bin/env python3 \n \n # https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image.html \n \n # The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 400 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation. \n \n import json, twitterauth, base64, sys \n \n twitter = twitterauth.twitter() \n \n image_path = sys.argv[1] \n \n with open(image_path, &quot;rb&quot;) as image_file: \n image_encoded_string = base64.b64encode(image_file.read()) \n \n api_url = &#39;https://api.twitter.com/1.1/account/update_profile_image.json&#39; \n \n params = { \n &quot;image&quot;: image_encoded_string \n } \n \n response = twitter.post(api_url, params=params) \n \n print(json.dumps(response.json())) \n \n \n</code> </pre>\n\n<h1> EXE </h1>\n\n<pre> <code>$ ./update-profile.py image/profile.jpg \n {&quot;id&quot;: 473780756, &quot;id_str&quot;: &quot;473780756&quot;, &quot;name&quot;: &quot;Rails\\u6b744\\u5e74\\u30a8\\u30f3\\u30b8\\u30cb\\u30a2\\u3092\\u304a\\u63a2\\u3057\\u306e\\u65b9\\u306f\\u3053\\u3061\\u3089\\u307e\\u3067@\\u7a32\\u6d66\\u60a0\\u99ac&quot;, &quot;screen_name&quot;: &quot;YumaInaura&quot;, &quot;location&quot;: null, &quot;description&quot;: &quot;\\u6b21\\u306e\\u304a\\u4ed5\\u4e8b\\u63a2\\u3057\\u4e2d / Rails\\u696d\\u52d9\\u7d04\\u56db\\u5e74 / \\u73fe\\u5728\\u56db\\u793e\\u76f8\\u8ac7\\u4e2d / \\u30ea\\u30e2\\u30fc\\u30c8\\u512a\\u5148 / \\u5927\\u962a / Ruby / Perl / Shell / BigQuery / MySQL / Linux / Apache / ansible / Jenkins etc .. / \\u8a73\\u7d30\\u306fWantedly\\u3067 / Twitter DM\\u53ef&quot;, &quot;url&quot;: null, &quot;entities&quot;: {&quot;description&quot;: {&quot;urls&quot;: []}}, &quot;protected&quot;: false, &quot;followers_count&quot;: 593, &quot;friends_count&quot;: 0, &quot;listed_count&quot;: 30, &quot;created_at&quot;: &quot;Wed Jan 25 09:59:57 +0000 2012&quot;, &quot;favourites_count&quot;: 27660, &quot;utc_offset&quot;: null, &quot;time_zone&quot;: null, &quot;geo_enabled&quot;: true, &quot;verified&quot;: false, &quot;statuses_count&quot;: 41139, &quot;lang&quot;: &quot;en&quot;, &quot;contributors_enabled&quot;: false, &quot;is_translator&quot;: false, &quot;is_translation_enabled&quot;: false, &quot;profile_background_color&quot;: &quot;000000&quot;, &quot;profile_background_image_url&quot;: &quot;http://abs.twimg.com/images/themes/theme1/bg.png&quot;, &quot;profile_background_image_url_https&quot;: &quot;https://abs.twimg.com/images/themes/theme1/bg.png&quot;, &quot;profile_background_tile&quot;: false, &quot;profile_image_url&quot;: &quot;http://pbs.twimg.com/profile_images/1117233785987158016/1rvLg75w_normal.jpg&quot;, &quot;profile_image_url_https&quot;: &quot;https://pbs.twimg.com/profile_images/1117233785987158016/1rvLg75w_normal.jpg&quot;, &quot;profile_banner_url&quot;: &quot;https://pbs.twimg.com/profile_banners/473780756/1552991452&quot;, &quot;profile_link_color&quot;: &quot;1B95E0&quot;, &quot;profile_sidebar_border_color&quot;: &quot;000000&quot;, &quot;profile_sidebar_fill_color&quot;: &quot;000000&quot;, &quot;profile_text_color&quot;: &quot;000000&quot;, &quot;profile_use_background_image&quot;: false, &quot;default_profile&quot;: false, &quot;default_profile_image&quot;: false, &quot;following&quot;: null, &quot;follow_request_sent&quot;: null, &quot;notifications&quot;: null, &quot;translator_type&quot;: &quot;none&quot;} \n</code> </pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/13635059/56087018-a7d2d780-5e9d-11e9-9888-3459659025ed.png\" alt=\"image\"></p>\n\n<pre> <code>$ ./update-profile.py image/profile_sleepy.jpg \n {&quot;id&quot;: 473780756, &quot;id_str&quot;: &quot;473780756&quot;, &quot;name&quot;: &quot;Rails\\u6b744\\u5e74\\u30a8\\u30f3\\u30b8\\u30cb\\u30a2\\u3092\\u304a\\u63a2\\u3057\\u306e\\u65b9\\u306f\\u3053\\u3061\\u3089\\u307e\\u3067@\\u7a32\\u6d66\\u60a0\\u99ac&quot;, &quot;screen_name&quot;: &quot;YumaInaura&quot;, &quot;location&quot;: null, &quot;description&quot;: &quot;\\u6b21\\u306e\\u304a\\u4ed5\\u4e8b\\u63a2\\u3057\\u4e2d / Rails\\u696d\\u52d9\\u7d04\\u56db\\u5e74 / \\u73fe\\u5728\\u56db\\u793e\\u76f8\\u8ac7\\u4e2d / \\u30ea\\u30e2\\u30fc\\u30c8\\u512a\\u5148 / \\u5927\\u962a / Ruby / Perl / Shell / BigQuery / MySQL / Linux / Apache / ansible / Jenkins etc .. / \\u8a73\\u7d30\\u306fWantedly\\u3067 / Twitter DM\\u53ef&quot;, &quot;url&quot;: null, &quot;entities&quot;: {&quot;description&quot;: {&quot;urls&quot;: []}}, &quot;protected&quot;: false, &quot;followers_count&quot;: 593, &quot;friends_count&quot;: 0, &quot;listed_count&quot;: 30, &quot;created_at&quot;: &quot;Wed Jan 25 09:59:57 +0000 2012&quot;, &quot;favourites_count&quot;: 27660, &quot;utc_offset&quot;: null, &quot;time_zone&quot;: null, &quot;geo_enabled&quot;: true, &quot;verified&quot;: false, &quot;statuses_count&quot;: 41139, &quot;lang&quot;: &quot;en&quot;, &quot;contributors_enabled&quot;: false, &quot;is_translator&quot;: false, &quot;is_translation_enabled&quot;: false, &quot;profile_background_color&quot;: &quot;000000&quot;, &quot;profile_background_image_url&quot;: &quot;http://abs.twimg.com/images/themes/theme1/bg.png&quot;, &quot;profile_background_image_url_https&quot;: &quot;https://abs.twimg.com/images/themes/theme1/bg.png&quot;, &quot;profile_background_tile&quot;: false, &quot;profile_image_url&quot;: &quot;http://pbs.twimg.com/profile_images/1117233922763411457/9A3lowvf_normal.jpg&quot;, &quot;profile_image_url_https&quot;: &quot;https://pbs.twimg.com/profile_images/1117233922763411457/9A3lowvf_normal.jpg&quot;, &quot;profile_banner_url&quot;: &quot;https://pbs.twimg.com/profile_banners/473780756/1552991452&quot;, &quot;profile_link_color&quot;: &quot;1B95E0&quot;, &quot;profile_sidebar_border_color&quot;: &quot;000000&quot;, &quot;profile_sidebar_fill_color&quot;: &quot;000000&quot;, &quot;profile_text_color&quot;: &quot;000000&quot;, &quot;profile_use_background_image&quot;: false, &quot;default_profile&quot;: false, &quot;default_profile_image&quot;: false, &quot;following&quot;: null, &quot;follow_request_sent&quot;: null, &quot;notifications&quot;: null, &quot;translator_type&quot;: &quot;none&quot;} \n</code> </pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/13635059/56087024-bae5a780-5e9d-11e9-9a37-6149a8aa6174.png\" alt=\"image\"></p>\n\n<h1> sample Images </h1>\n\n<p> Be careful because it is rather strict such as capacity and size restrictions. </p>\n\n<p><img src=\"https://user-images.githubusercontent.com/13635059/56087008-8a057280-5e9d-11e9-94c0-6dd5c35a2c75.png\" alt=\"image\"></p>\n\n<p><img src=\"https://user-images.githubusercontent.com/13635059/56087028-d781df80-5e9d-11e9-9cf3-0b1488c94d01.png\" alt=\"image\"></p>\n\n<h1> Scheduled execution </h1>\n\n<p> Turn the cron on the server and so on. </p>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1259\n","created_at":"2019-04-14T12:43:24+09:00","id":"c2ab6464332ebc208cd3","tags":[{"name":"Python","versions":["0.0.1"]},{"name":"Twitter","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/c2ab6464332ebc208cd3"},{"title":"学習記録開始","body":"# 学習記録まとめ\n\n学習開始から2ヶ月、Qiitaの存在を知ったので学習記録をつけていくことにする。webもプログラミングも完全未経験のアラフォーです。アドバイス等あればよろしくお願いします。\n\n\n####　---計画---\n\n目的：旅をしながら生活費を賄えるようになる。\n目標：フリーランサーとして月20万円をコンスタントに稼げるようになる。\n言語：在宅案件の多いweb系言語を中心に学ぶ\n期間：2年以内に目標を達成する\n手段：基本独学、つまったらスクールを検討する\n\n\n####　---この2ヶ月でやったこと---\n-**Progate**　    \n　-HTML&CSS 2周\n　-JavaScript　2周\n　-jQuery 2周\n　-Saas　1周\n\n-**どっとインストール**　    \n　-もっと詳しくJavaScriptを学ぼう　1周\n\n-**Adobe**　\n　-Photoshop　なんとなーく基本的な使い方だけ理解\n　-illustrator 基本はマスター済\n\n**現在までの総学習時間：ざっくり100時間**\n\n\n####　---言語の優先順位---\n☆☆☆☆☆HTML&CSS / Boostrap\n☆☆☆☆☆JavaScript / jQuery\n☆☆☆PHP / Wordpress\n☆☆Ruby (仕事よりも個人的に作りたいものがある)\n\n\n####　---向こう半年間の計画---\n座学は疲れるし飽きるので、少し実践的な勉強に方向チェンジしたい。\n\n　-どっとインストールJavaScriptの「ミニアプリを作ってみよう」でJSの理解を深める\n　-webサイトの模写\n　-Paizaのクイズに挑戦\n　-(継続して週10時間の学習時間を確保する)\n　-(余裕があればwordpressを開設したい)\n\nまずはJavaScriptを使いこなせるようになることが最優先。\n8月いっぱいくらいまでに簡単なLP制作なら受注できるかも~？と思えるくらいの理解を深めたい。\n","created_at":"2019-04-14T12:38:37+09:00","id":"053c56a738251441d7cd","tags":[{"name":"初心者","versions":[]},{"name":"学習記録","versions":[]}],"url":"https://qiita.com/qiitamal/items/053c56a738251441d7cd"},{"title":"JavaでFlyweightパターン","body":"# はじめに\n[GoF](https://ja.wikipedia.org/wiki/ギャング・オブ・フォー_(情報工学))のデザインパターンを紹介している[『増補改訂版 Java言語で学ぶデザインパターン入門』](https://www.amazon.co.jp/増補改訂版Java言語で学ぶデザインパターン入門-結城-浩/dp/4797327030/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&psc=1&refRID=2ZE4GPYNN55JGDR5QMHP)を読んで、学んだ内容についてまとめます。\n\n# Flyweightパターン\n## Flyweightとは\nボクシングの軽量級である「フライ級」のことです。\n軽量級の意味することは「軽さ」であり、メモリの消費量が少ないことを指します。\nオブジェクトを生成するにはnewを行い、メモリを確保する(インスタンス化)必要がありますが、多くのオブジェクトを生成するとメモリを多く消費してしまい、処理の速度が遅くなってしまします。\nこのような問題を解決するためには、すでにnewしたインスタンスに関しては繰り返し使用することが望ましいでしょう。\nこのように**オブジェクトをできるだけnewせずに共有させることでメモリの消費量を抑制するパターン**のことを**Flyweightパターン**と言います。\n\n## 登場人物\nFlyweightパターン使用するのは以下のクラス図に登場するクラスです。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278934/3a0cb58d-fd5a-544a-04b5-c76be72b05e9.png)\n\n\n### 実装クラス\n- **Flyweight**\n共有して利用するクラスを表します。\n実装すべきメソッドなどは特にありませんので、難しい点はありません。\n\n- **FlyweightFactory**\n`Flyweight`を生成するための工場役となるクラスです。\nこの工場役を通してFlyweight役を作るとインスタンスを共有できるメソッドを持ちます。\n共有するインスタンスを格納する`pool`フィールドと、Flyweightを取得するための`getFlyewight`メソッドを持ちます。\n\n- **Client**\n`FlyweightFactory`を利用してFlyweightを利用するクラスです。\nFlyweightと同様に実装すべきメソッドなどは特に定まられていないため、難しい点はありません。\n\n## 具体例\n具体例として、以下のクラスをもとに説明します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278934/bf6fe2f1-0d70-662e-a399-c427f1e28b8d.png)\n\n\n### 実装クラス\n- **Stampクラス**  \n\n```java:Stamp.java\npackage sample;\n\npublic class Stamp {\n\t// 文字\n\tprivate char charname;\n\t// 利用回数\n\tprivate int useCount = 0;\n\t// 生成回数\n\tprivate int newCount = 0;\n\n\tpublic int getUseCount() {\n\t\treturn useCount;\n\t}\n\n\tpublic void setUseCount(int useCount) {\n\t\tthis.useCount = useCount;\n\t}\n\n\tpublic int getNewCount() {\n\t\treturn newCount;\n\t}\n\n\tpublic void setNewCount(int newCount) {\n\t\tthis.newCount = newCount;\n\t}\n\n\t// コンストラクタ\n\tpublic Stamp(char charname) {\n\t\tthis.charname = charname;\n\t}\n\n\t// 文字を表示する\n\tpublic void print() {\n\t\tSystem.out.println(\"charname:\" + this.charname);\n\t}\n}\n```\n`Stamp`クラスは共有して利用されるFlyweight役となるクラスです。\n文字`charname`を受け取って生成され、`print`メソッドで文字を表示します。\nまた、利用回数(`useCount`)と生成回数(`newCount`)が分かりやすいようにフィールドを持たせていますが、必須ではありません。\n\n- **StampFactoryクラス**  \n\n```java:StampFactory.java\npackage sample;\n\nimport java.util.HashMap;\nimport java.util.Map.Entry;\n\npublic class StampFactory {\n\t// 既に生成したStampインスタンスを管理\n\tprivate HashMap<String, Stamp> pool = new HashMap<>();\n\t// Singletonパターン\n\tprivate static StampFactory singleton = new StampFactory();\n\n\t// コンストラクタ\n\tprivate StampFactory() {\n\t}\n\n\t// シングルトンインスタンスを取得\n\tpublic static StampFactory getInstance() {\n\t\treturn singleton;\n\t}\n\n\t// Stampのインスタンス生成(共有)\n\tpublic synchronized Stamp getStamp(char charname) {\n\t\t// キー(文字)に紐づく値(Stampインスタンス)を取得する\n\t\tStamp bc = pool.get(\"\" + charname);\n\t\t// キー(文字)に紐づく値(Stampインスタンス)が取得できなかった場合\n\t\tif (bc == null) {\n\t\t\t// ここでStampのインスタンスを生成\n\t\t\tbc = new Stamp(charname);\n\t\t\t// newした回数をカウント\n\t\t\tbc.setNewCount(bc.getNewCount() + 1);\n\t\t\t// HashMapに格納\n\t\t\tpool.put(\"\" + charname, bc);\n\t\t}\n\t\t// newの有無にかかわらず利用した回数をカウント\n\t\tbc.setUseCount(bc.getUseCount() + 1);\n\t\treturn bc;\n\t}\n\n\t// HashMapが管理しているStampインスタンスを全件出力\n\tpublic void printAllPool() {\n\t\tfor (Entry<String, Stamp> entry : pool.entrySet()) {\n\t\t\tSystem.out.println(\n\t\t\t\t\tentry.getKey() + \" : \" + entry.getValue().getUseCount() + \" : \" + entry.getValue().getNewCount());\n\t\t}\n\t}\n}\n```\n`Stamp`クラスを生成する工場であるFlayweightFactory役となるクラスです。\n生成されたインスタンスを管理するためのMapとして`pool`フィールドと、ここではSingletonパターンを適用しているため自身を表す`singleton`フィールドを持ちます。\nこのクラスの利用方法として外部からはまず`getInstance`メソッドを呼び出すことで自身を表すStampFactoryインスタンスを返却します。\nそして返却されたStampFactoryインスタンスに対して、`charname`を引数として`getStamp`メソッドを呼び出します。\n引数として渡されたcharnameをキーとしたStampインスタンスが既に生成されている場合には`pool`から取得しますが、インスタンスがまだ生成されていない場合にはインスタンスを生成して`pool`に格納します。\nまた、インスタンスを生成した場合には`newCount`に+1し、インスタンスの生成有無にかかわらずに`useCount`を+1することで、各Stampインスタンスの生成回数と利用回数をカウントします。\nまた、poolに格納しているStampインスタンスを全件出力するメソッドとして`printAllPool`を実装しています。\n出力する内容は「キーとなる文字：利用回数：生成回数」です。\n\n### 実行クラス\n- **Mainクラス**  \n\n```java:Main.java\npackage sample;\n\nimport java.util.ArrayList;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\t// Stampインスタンスの準備\n\t\tStampFactory factory = StampFactory.getInstance();\n\t\tArrayList<Stamp> stamps = new ArrayList<>();\n\t\tstamps.add(factory.getStamp('a'));\n\t\tstamps.add(factory.getStamp('b'));\n\t\tstamps.add(factory.getStamp('c'));\n\t\tstamps.add(factory.getStamp('f'));\n\t\tstamps.add(factory.getStamp('e'));\n\t\tstamps.add(factory.getStamp('a'));\n\t\tstamps.add(factory.getStamp('b'));\n\t\tstamps.add(factory.getStamp('c'));\n\t\tstamps.add(factory.getStamp('d'));\n\t\tstamps.add(factory.getStamp('f'));\n\t\tstamps.add(factory.getStamp('a'));\n\t\tfor (Stamp s : stamps) {\n\t\t\ts.print();\n\t\t}\n\t\tSystem.out.println(\"-------------------------------\");\n\t\tSystem.out.println(\"charname : useCount : newCount\");\n\t\t// HashMapで管理されているStampインスタンスを全件出力\n\t\tfactory.printAllPool();\n\t}\n}\n```\nFlyweight、FlyweightFactoryを利用するClient役となるクラスです。\nStampFactoryクラスのstaticメソッドであるgetInstanceメソッドを呼び出してstampFactoryインスタンスを取得し、取得したstampFactoryインスタンスに対してgetStampメソッドを呼び出すことで、poolフィールドにstampインスタンスを格納していきます。\n最後にprintAllPool()を呼び出すことでpoolフィールドを全件出力しています。\n\n### 実行結果\n`Main.java`を実行した結果は以下になります。\n`useCount`が1より大きい文字に関しても、`newCount`は1回のみであり、インスタンスが再利用されていることが分かります。\n\n```:実行結果\ncharname:a\ncharname:b\ncharname:c\ncharname:f\ncharname:e\ncharname:a\ncharname:b\ncharname:c\ncharname:d\ncharname:f\ncharname:a\n-------------------------------\ncharname : useCount : newCount\na : 3 : 1\nb : 2 : 1\nc : 2 : 1\nd : 1 : 1\ne : 1 : 1\nf : 2 : 1\n```\n\n## メリットとデメリット\nFlyweightパターンを利用することでオブジェクトをnewする回数を削減することができ、メモリを節約することができます。\n一方デメリットとしてはpoolに格納されたオブジェクトはガベージコレクションの対象とはならず、メモリ上に残り続けてしまうため、メモリが不足しないように意図的に管理する必要があることがあげられます。\n\n# まとめ\nインスタンスを共有することでメモリの消費を抑制するFlyweightパターンに関して学びました。\n以下でサンプルコードをアップしていますのでよろしければ参考にどうぞ。\n\n- [Flyweightサンプルコード](https://github.com/masayuki777/study/tree/master/DesignPatterns/20_Flyweight)\n\nまた、他のデザインパターンに関しては以下でまとめていますので、こちらも参考にどうぞ。\n\n- [[随時更新]Javaでデザインパターンまとめ](https://qiita.com/mk777/items/4e13505b654fc21c76a2)\n\n# 参考文献\n- [増補改訂版 Java言語で学ぶデザインパターン入門](https://www.amazon.co.jp/増補改訂版Java言語で学ぶデザインパターン入門-結城-浩/dp/4797327030/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&psc=1&refRID=2ZE4GPYNN55JGDR5QMHP)\n","created_at":"2019-04-14T12:38:18+09:00","id":"096d7825443ed7102261","tags":[{"name":"Java","versions":[]},{"name":"初心者","versions":[]},{"name":"デザインパターン","versions":[]},{"name":"GoF","versions":[]},{"name":"Flyweight","versions":[]}],"url":"https://qiita.com/mk777/items/096d7825443ed7102261"},{"title":"scaffoldで生成したviewでNoMethodErrorが出る","body":"## 問題\n```\n$ rails g scaffold articles\n```\n\nで生成したviewでこんなエラーが出る\n\n<img width=\"1018\" alt=\"aaa.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/42587/22e5b1cb-1961-bf69-ea40-31094f85e9c6.png\">\n\n## 原因\n\nscaffoldのテンプレートになっているファイルでarticlesがnilの場合が考慮されていない\n\n## 解決方法\n\n```shell\n$ cd ~/.rbenv\n$ find ./ -name index.html.erb.tt\n.//versions/2.5.3/lib/ruby/gems/2.5.0/gems/railties-5.2.2.1/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt\n.//versions/2.6.1/lib/ruby/gems/2.6.0/gems/railties-5.2.2/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt\n.//versions/2.6.1/lib/ruby/gems/2.6.0/gems/railties-5.2.3/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt\n```\n\n自分が使っているバージョンのテンプレートを編集する。\n自分の場合は5.2.2.1なので\n\n```shell\n$ vim .//versions/2.5.3/lib/ruby/gems/2.5.0/gems/railties-5.2.2.1/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt\n```\n\n```erb:index.html.erb.tt\n<p id=\"notice\"><%%= notice %></p>\n\n<h1><%= plural_table_name.titleize %></h1>\n\n<table>\n  <thead>\n    <tr>\n<% attributes.reject(&:password_digest?).each do |attribute| -%>\n      <th><%= attribute.human_name %></th>\n<% end -%>\n      <th colspan=\"3\"></th>\n    </tr>\n  </thead>\n\n  <tbody>\n-     <%% @<%= plural_table_name %>.each do |<%= singular_table_name %>| %>\n+     <%% @<%= plural_table_name %>&.each do |<%= singular_table_name %>| %>\n      <tr>\n<% attributes.reject(&:password_digest?).each do |attribute| -%>\n        <td><%%= <%= singular_table_name %>.<%= attribute.name %> %></td>\n<% end -%>\n        <td><%%= link_to 'Show', <%= model_resource_name %> %></td>\n        <td><%%= link_to 'Edit', edit_<%= singular_route_name %>_path(<%= singular_table_name %>) %></td>\n        <td><%%= link_to 'Destroy', <%= model_resource_name %>, method: :delete, data: { confirm: 'Are you sure?' } %></td>\n      </tr>\n    <%% end %>\n  </tbody>\n</table>\n\n<br>\n\n<%%= link_to 'New <%= singular_table_name.titleize %>', new_<%= singular_route_name %>_path %>\n```\n","created_at":"2019-04-14T12:35:11+09:00","id":"432629eff35af7c6e1f4","tags":[{"name":"Rails","versions":[]},{"name":"scaffold","versions":[]}],"url":"https://qiita.com/hondy12345/items/432629eff35af7c6e1f4"},{"title":"Go言語でEchoを用いて認証付きWebアプリの作成","body":"# 概要\n\nGo言語でEchoを用いて、JWTによる認証付きのWebアプリケーションの作成を行いました。\n備忘録かつ誰かの参考になれば良いと思い、サーバーサイドの内容をまとめます。\n作成物は https://github.com/x-color/simple-webapp にあげてあります。\nクライアントサイドのコードを見たい場合は、上記URLから参照してください。\n\n# 使用技術\n\n- Go言語 (https://golang.org/)\n- Echo (https://echo.labstack.com/)\n- GORM (http://gorm.io/)\n- SQLite (https://www.sqlite.org/index.html)\n- JWT (https://jwt.io/)\n\n# 構成\n\n## 処理の流れ\n\n![simple-todo-network.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/279498/15999b5d-da4a-208b-4893-bfe87881f9b7.png)\n\n## API\n\n### 画面表示\n\n- `GET /`: トップページの表示\n- `GET /signup`: ユーザーの登録画面\n- `GET /login`: ログイン画面\n- `GET /todos`: Todo一覧画面\n\n### ユーザー登録と認証\n\n- `POST /signup`: ユーザー情報の登録\n- `POST /login`: ログイン処理\n\n### Todo操作\n\n- `GET /api/todos`: ユーザーのTodo全ての取得\n- `POST /api/todos`: 新たなTodoの作成\n- `DELETE /api/todos/:id`: 指定IDのTodoの削除\n- `PUT /api/todos/:id/completed`: 指定IDのTodoの完了状態の更新\n\n## ディレクトリ構成\n\n```\nsimple-webapp/\n├── db\n│   └── sample.db\n├── handler\n│   ├── auth.go\n│   └── handler.go\n├── model\n│   ├── db.go\n│   ├── todo.go\n│   └── user.go\n├── public\n│   ├── assets\n│   │   └── js\n│   │       ├── login.js\n│   │       ├── signup.js\n│   │       └── todoList.js\n│   ├── index.html\n│   ├── login.html\n│   ├── signup.html\n│   └── todos.html\n├── main.go\n└── router.go\n```\n\n# サーバーサイドのコード\n\n## ルーティング\n\n```go:main.go\npackage main\n\nfunc main() {\n    router := newRouter()\n    router.Logger.Fatal(router.Start(\":8080\"))\n}\n```\n\n下記ファイルは、リクエストに対するルーティングを定義している。\n\n```go:router.go\npackage main\n\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n    \"github.com/x-color/simple-webapp/handler\"\n)\n\nfunc newRouter() *echo.Echo {\n\te := echo.New()\n\n    e.Use(middleware.Logger())\n    e.Use(middleware.Recover())\n\n    e.Static(\"/assets\", \"public/assets\")\n\n    e.File(\"/\", \"public/index.html\") // GET /\n    e.File(\"/signup\", \"public/signup.html\") // GET /signup\n    e.POST(\"/signup\", handler.Signup) // POST /signup\n    e.File(\"/login\", \"public/login.html\") // GET /login\n    e.POST(\"/login\", handler.Login) // POST /login\n    e.File(\"/todos\", \"public/todos.html\") // GET /todos\n\n    api := e.Group(\"/api\")\n    api.Use(middleware.JWTWithConfig(handler.Config)) // /api 下はJWTの認証が必要\n    api.GET(\"/todos\", handler.GetTodos) // GET /api/todos\n    api.POST(\"/todos\", handler.AddTodo) // POST /api/todos\n    api.DELETE(\"/todos/:id\", handler.DeleteTodo) // DELETE /api/todos/:id\n    api.PUT(\"/todos/:id/completed\", handler.UpdateTodo) // PUT /api/todos/:id/completed\n\n\treturn e\n}\n```\n\n### JWTによる認証処理\n\n`url := e.Group(url)` とすることで、指定したURL下をグループ化することができる。\nグループ化することにより、以下のように `/api` 下のURL(e.x. `/api/todos`)へのリクエスト時には必ずJWT認証を行うことを一括で指定することができる。\n\n```go\napi := e.Group(\"/api\")\napi.Use(middleware.JWTWithConfig(handler.Config))\n```\n\n## ユーザー登録と認証\n\n以下のファイルは、ユーザー登録とユーザー認証の処理を定義している。\n\n```go:auth.go\npackage handler\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n\t\"github.com/x-color/simple-webapp/model\"\n)\n\ntype jwtCustomClaims struct {\n\tUID  int    `json:\"uid\"`\n\tName string `json:\"name\"`\n\tjwt.StandardClaims\n}\n\nvar signingKey = []byte(\"secret\")\n\nvar Config = middleware.JWTConfig{\n\tClaims:     &jwtCustomClaims{},\n\tSigningKey: signingKey,\n}\n\nfunc Signup(c echo.Context) error {\n\tuser := new(model.User)\n\tif err := c.Bind(user); err != nil {\n\t\treturn err\n\t}\n\n\tif user.Name == \"\" || user.Password == \"\" {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:    http.StatusBadRequest,\n\t\t\tMessage: \"invalid name or password\",\n\t\t}\n\t}\n\n    if u := model.FindUser(&model.User{Name: user.Name}); u.ID != 0 {\n        return &echo.HTTPError{\n\t\t\tCode:    http.StatusConflict,\n\t\t\tMessage: \"name already exists\",\n\t\t}\n    }\n\n\tmodel.CreateUser(user)\n\tuser.Password = \"\"\n\n\treturn c.JSON(http.StatusCreated, user)\n}\n\nfunc Login(c echo.Context) error {\n\tu := new(model.User)\n\tif err := c.Bind(u); err != nil {\n\t\treturn err\n\t}\n\n\tuser := model.FindUser(&model.User{Name: u.Name})\n\tif user.ID == 0 || user.Password != u.Password {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:    http.StatusUnauthorized,\n\t\t\tMessage: \"invalid name or password\",\n\t\t}\n\t}\n\n\tclaims := &jwtCustomClaims{\n\t\tuser.ID,\n\t\tuser.Name,\n\t\tjwt.StandardClaims{\n\t\t\tExpiresAt: time.Now().Add(time.Hour * 72).Unix(),\n\t\t},\n\t}\n\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\tt, err := token.SignedString(signingKey)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\"token\": t,\n\t})\n}\n\nfunc userIDFromToken(c echo.Context) int {\n\tuser := c.Get(\"user\").(*jwt.Token)\n\tclaims := user.Claims.(*jwtCustomClaims)\n\tuid := claims.UID\n\treturn uid\n}\n```\n\n### 新規ユーザー登録\n\n新規ユーザー登録では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - ユーザー名とパスワードが指定されているか\n    - 既に同一のユーザー名が存在しないか\n\n2. 新規ユーザーをデータベースに登録する\n\n### ログイン処理\n\nログイン処理では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - 指定されたユーザー名のユーザーがデータベース上に登録されているか\n    - 指定されたパスワードが正しいか\n   \n2. 認証を完了し、JWTを返す\n\n返すJWTのペイロードは以下のような形式になっている。\n\n- uid: ユーザーID\n- name: ユーザー名\n- exp: JWTの有効期限\n\n```json:JWTのPayload\n{\n    \"uid\": 1,\n    \"name\": \"Bob\",\n    \"exp\": 1554880448\n}\n```\n\n## API処理\n\n以下のファイルは、APIへアクセスされた際の処理を定義している。\n\n```go:handler.go\npackage handler\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/x-color/simple-webapp/model\"\n)\n\nfunc AddTodo(c echo.Context) error {\n\ttodo := new(model.Todo)\n\tif err := c.Bind(todo); err != nil {\n\t\treturn err\n\t}\n\n\tif todo.Name == \"\" {\n\t\treturn &echo.HTTPError{\n\t\t\tCode:    http.StatusBadRequest,\n\t\t\tMessage: \"invalid to or message fields\",\n\t\t}\n\t}\n\n\tuid := userIDFromToken(c)\n\tif user := model.FindUser(&model.User{ID: uid}); user.ID == 0 {\n\t\treturn echo.ErrNotFound\n\t}\n\n    todo.UID = uid\n    model.CreateTodo(todo)\n\n\treturn c.JSON(http.StatusCreated, todo)\n}\n\nfunc GetTodos(c echo.Context) error {\n\tuid := userIDFromToken(c)\n\tif user := model.FindUser(&model.User{ID: uid}); user.ID == 0 {\n\t\treturn echo.ErrNotFound\n\t}\n\n\ttodos := model.FindTodos(&model.Todo{UID: uid})\n\treturn c.JSON(http.StatusOK, todos)\n}\n\nfunc DeleteTodo(c echo.Context) error {\n\tuid := userIDFromToken(c)\n\tif user := model.FindUser(&model.User{ID: uid}); user.ID == 0 {\n\t\treturn echo.ErrNotFound\n\t}\n\n\ttodoID, err := strconv.Atoi(c.Param(\"id\"))\n\tif err != nil {\n\t\treturn echo.ErrNotFound\n\t}\n\n\tif err := model.DeleteTodo(&model.Todo{ID: todoID, UID: uid}); err != nil {\n\t\treturn echo.ErrNotFound\n\t}\n\n\treturn c.NoContent(http.StatusNoContent)\n}\n\nfunc UpdateTodo(c echo.Context) error {\n    uid := userIDFromToken(c)\n\tif user := model.FindUser(&model.User{ID: uid}); user.ID == 0 {\n\t\treturn echo.ErrNotFound\n\t}\n\n    todoID, err := strconv.Atoi(c.Param(\"id\"))\n\tif err != nil {\n\t\treturn echo.ErrNotFound\n\t}\n\n    todos := model.FindTodos(&model.Todo{ID: todoID, UID: uid})\n    if len(todos) == 0 {\n        return echo.ErrNotFound\n    }\n    todo := todos[0]\n    todo.Completed = !todos[0].Completed\n    if err := model.UpdateTodo(&todo); err != nil {\n\t\treturn echo.ErrNotFound\n\t}\n\n    return c.NoContent(http.StatusNoContent)\n}\n```\n\n### 新規Todoの登録\n\n新規Todoの登録では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - Todo名が指定されているか\n    - 受け取ったJWT内のユーザーIDがデータベースに存在するか\n\n2. 新規Todoをデータベースに登録する\n3. 登録されたTodoをユーザーに送信する\n\n### Todo一覧の取得\n\nTodo一覧の取得では、以下の流れで処理を進める。\n\n1. 受け取ったJWT内のユーザーIDがデータベースに存在するかの確認する\n2. ユーザーが作成した全てのTodoをデータベースから取得する\n3. 全てのTodoをJSON形式で送信する\n\n### Todoの削除\n\nTodoの削除では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - 受け取ったJWT内のユーザーIDがデータベースに存在するか\n    - 指定されたURL上のIDが数字か\n    - ユーザーが作成した該当IDのTodoがデータベース上に存在するか\n\n2. データベースから指定されたTodoを削除する\n\n### Todoの完了状態の変更\n\nTodoの完了状態の変更では、以下の流れで処理を進める。\n\n1. 以下の項目の確認を行う\n    - 受け取ったJWT内のユーザーIDがデータベースに存在するか\n    - 指定されたURL上のIDが数字か\n    - ユーザーが作成した該当IDのTodoがデータベース上に存在するか\n\n2. 指定されたTodoの完了状態を変更しデータベースに反映する。\n\n## データベース処理\n\n以下の3つのファイルは、データベース関連の処理を定義している。\n\n- db.go: データベースの初期化処理を定義\n- user.go: ユーザー情報を格納するデータ形式と処理を定義\n- todo.go: Todo情報を格納するデータ形式と処理を定義\n\n```go:db.go\npackage model\n\nimport (\n    \"github.com/jinzhu/gorm\"\n    _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\nvar db *gorm.DB\n\nfunc init() {\n    var err error\n    db, err = gorm.Open(\"sqlite3\", \"db/sample.db\")\n    if err != nil {\n      panic(\"failed to connect database\")\n    }\n    db.AutoMigrate(&User{})\n    db.AutoMigrate(&Todo{})\n}\n```\n\n```go:user.go\npackage model\n\ntype User struct {\n\tID       int   `json:\"id\" gorm:\"praimaly_key\"`\n\tName     string `json:\"name\"`\n\tPassword string `json:\"password\"`\n}\n\nfunc CreateUser(user *User) {\n\tdb.Create(user)\n}\n\nfunc FindUser(u *User) User {\n    var user User\n    db.Where(u).First(&user)\n\treturn user\n}\n```\n\n```go:todo.go\npackage model\n\nimport \"fmt\"\n\ntype Todo struct {\n    UID       int    `json:\"uid\"`\n\tID        int    `json:\"id\" gorm:\"praimaly_key\"`\n\tName      string `json:\"name\"`\n\tCompleted bool   `json:\"completed\"`\n}\n\ntype Todos []Todo\n\nfunc CreateTodo(todo *Todo) {\n    db.Create(todo)\n}\n\nfunc FindTodos(t *Todo) Todos {\n\tvar todos Todos\n\tdb.Where(t).Find(&todos)\n\treturn todos\n}\n\nfunc DeleteTodo(t *Todo) error {\n\tif rows := db.Where(t).Delete(&Todo{}).RowsAffected; rows == 0 {\n        return fmt.Errorf(\"Could not find Todo (%v) to delete\", t)\n    }\n    return nil\n}\n\nfunc UpdateTodo(t *Todo) error {\n    rows := db.Model(t).Update(map[string]interface{}{\n        \"name\": t.Name,\n        \"completed\": t.Completed,\n    }).RowsAffected\n    if rows == 0 {\n        return fmt.Errorf(\"Could not find Todo (%v) to update\", t)\n    }\n    return nil\n}\n```\n\nGORMでは、`Insert()`, `Delete()` などのデータベースに対する処理を行うメソッドの返り値に存在する `RowsAffected` フィールドが実際に処理された行数を保持している。\nそのため、処理に成功した行数に応じて処理を分岐したい場合、以下のように行う。\n\n```go\nrows := db.Where(t).Delete(&Todo{}).RowsAffected // 削除された行数を取得\nif rows == 0 {\n    // 何も削除されなかった場合の処理を行う\n} else {\n    // 削除された場合の処理を行う\n}\n```\n\n今回のWebアプリではTodoの削除処理時などに用いており、削除を実行したあと実際に削除対象が存在したのかの判定を行っている。\n存在したのなら、正常に削除されたことを意味し、存在しなかったならば、指定されたIDが不正であったことを意味している。\n\n# クライアントサイドのコード\n\nクライアントサイドのコードは記事が長くなりすぎるので割愛します。\nコードが見たい場合は、 https://github.com/x-color/simple-webapp を確認してください。クライアントコードはVuejsで記述されています。\n","created_at":"2019-04-14T12:34:24+09:00","id":"24ff2491751f55e866cf","tags":[{"name":"Go","versions":[]},{"name":"JWT","versions":[]},{"name":"echo","versions":[]},{"name":"GORM","versions":[]}],"url":"https://qiita.com/x-color/items/24ff2491751f55e866cf"},{"title":"代表的な正規表現一覧","body":"代表的な正規表現一覧はこちら。\n\n![正規表現.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342318/54f3bd06-f956-c455-f58a-74faa47201f4.png)\n\n上の画像の一覧はこの本からの引用。\n実際に使えるコードが沢山あり、初心者には\n有益かと思います。\n![71+C+rf5o8L._AC_UL436_.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342318/be6e8713-91ed-3dd2-0ac3-b3a1fdc0a819.jpeg)\n","created_at":"2019-04-14T12:25:03+09:00","id":"2fe5799ee9135f3be570","tags":[{"name":"JavaScript","versions":[]},{"name":"正規表現","versions":[]}],"url":"https://qiita.com/yama04070319/items/2fe5799ee9135f3be570"},{"title":"[注意] Vue CLIは勝手にgit initしてしまう時がある","body":"# 勝手にgit initする条件\ngitで管理されていないディレクトリでオプションを付けずに`vue create NEW-VUE-APP`をすると\nNEW-VUE-APP生成中に勝手にgit initしてしまうそうです。（バージョン3.5.5時点）\n\n```\nparent              <- ここだけでgit管理したいのに\n├── server/\n└── NEW-VUE-APP/    <- なぜか生成時からgit管理されている\n```\n\n# 勝手にgit initされたら困る場合は\n* 事前にparentディレクトリで git init しておく\n* [Vue CLIの公式ドキュメント](https://cli.vuejs.org/guide/creating-a-project.html#vue-create)にある以下のオプションでコントロールする　(`vue create -n NEW-VUE-APP`でgit initを回避)\n\n```\n  -g, --git [message|false]       Force / skip git initialization, optionally specify initial commit message\n  -n, --no-git                    Skip git initialization\n```\n\n# 所感\nアプリを自動生成するツールとしてはオプションを付けた時だけgit initするほうが自然だと、私は思います。\nなので私のように罠にはまる人が少なからずいるだろうなと思ってこの記事を書きました。\n公式ドキュメントを読むのは大事ですね・・\n\n以下のissueの結果、現在の仕様になっているようです。（以前は問答無用でgit initしていたようです）\nhttps://github.com/vuejs/vue-cli/issues/967\n\n","created_at":"2019-04-14T12:22:49+09:00","id":"a2af750d086f5cc2936d","tags":[{"name":"Git","versions":[]},{"name":"vue.js","versions":[]},{"name":"vue-cli","versions":[]}],"url":"https://qiita.com/okyk/items/a2af750d086f5cc2936d"},{"title":"GloVe","body":"# GloVe\n\nGloVeはWord2Vecのように、単語を密で低次元のベクトルを用いて表現するためのモデルの一種で（a.k.a word embedding, word representation）共起回数を観測値としたweighted matrix factorizationをAdaGradを用いて最適化させています。\n元論文は[GloVe: Global Vectors for Word Representation](https://nlp.stanford.edu/pubs/glove.pdf)です。ソースコードは[こちら](https://github.com/stanfordnlp/GloVe)です。\n\n## 目的関数\n\n以下の関数を最小化させるようにパラメータの学習を行います。\n\n```math\n\\begin{align}\nJ = \\sum_{i,j=1}^{V} f(X _{ij}) (w_i \\top \\tilde w_j + b_i + \\tilde b_j -\\log X_{ij})^2\n\\end{align}\n```\n\n## Notation:\n\n- $V$: 語彙数。総単語数ではない。\n- $X_{ij}$: 単語iと単語jの共起回数。共起は文脈窓を用いて測ります。\n- $w$, $\\tilde w$: モデルパラメータ。行列。語彙数×次元数。$w_i$とした時に、単語iにおけるベクトルになります。\n- $b$, $\\tilde b$: バイアスパラメータ。語彙数の長さをもつベクトル。$b_i$とした時に、単語iにおけるバイアス値（スカラ）になります。\n\n係数$f(x)$は以下で与えられます:\n\n\n```math\n\\begin{eqnarray}\nf(x) = \n  \\begin{cases}\n    (x/x_{\\rm max})^{\\alpha} & ( \\rm if ~ x \\lt x _{max} ) \\\\\\ 1 & ( \\rm otherwise )\n  \\end{cases}\n\\end{eqnarray}\n```\n\n$x_{\\rm max}$, $\\alpha$はどちらもハイパーパラメータです。与えましょう。\n\nこの関数は出現回数が$x_{\\rm max}$以下の単語（低頻度語）がパラメータの更新に対しての影響度を少なくするためのものです。\n\nこの目的関数はいわゆるweighted matrix factorizationの形です。matrix factorization系の論文は（少し前の）推薦システムの論文を拝見した方が理解が深まるかもしれません。[これ](https://datajobs.com/data-science-repo/Recommender-Systems-[Netflix].pdf)とか、[これ](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.379.1951&rep=rep1&type=pdf)とか、[これ](http://yifanhu.net/PUB/cf.pdf)でしょうか。\n\nこの目的関数が意味するところ（特に$w_i \\top \\tilde w_j -\\log X\\_{ij}$の部分）は「単語同士が共起すればするほど、それらの単語ベクトルの内積は大きくなる（=似た要素を持つようになる）」ということです。この話はWord2Vecと同様、[分布仮説](https://aclweb.org/aclwiki/Distributional_Hypothesis)（似た単語は似た/近い文脈に出現する傾向にある）に基づいています。\n\nあとは$\\frac{ \\partial J }{ \\partial w }$, $\\frac{ \\partial J }{ \\partial \\tilde w }$, $\\frac{ \\partial J }{ \\partial b }$, $\\frac{ \\partial J }{ \\partial \\tilde w }$の偏微分を求めて、勾配降下でパラメータを更新して行きます。論文ではAdaGradを用いているようです。\n\n## AdaGrad\nSGDの場合、$\\theta$をモデルパラメータ、学習率$\\alpha$、$t$時点での勾配を$g_t$とした時、$t+1$におけるモデルパラメータの更新式は:\n\n```math\n\\begin{align}\n\\theta_{t+1} \\leftarrow \\theta_t - \\alpha g_t\n\\end{align}\n```\n\nただ、実際には学習率はepochごとにどんどん減少させていくのがどうもセオリーらしいです。シンプルには0.99...をかけていくとか。\nそこをうまく自動的に減衰させて行こうというのがAdaGradです。（[Wiki](https://en.wikipedia.org/wiki/Stochastic_gradient_descent)にほとんど書いてある）\n\n```math\n\\begin{align}\n\\theta_{t+1} \\leftarrow \\theta_t - \\frac{ \\alpha }{ \\sqrt {1+\\sum_i^t \\theta_i} } g_t\n\\end{align}\n```\n\n分母の1を足しているのは過去の勾配の二乗和の値が小さくなりすぎて学習率が大きくなりパラメータが発散してしまうのを防ぐためです。[glove.c#L78](https://github.com/stanfordnlp/GloVe/blob/1.2/src/glove.c#L78)\n\n## HogWild!\nさらにGloVeは高速化のため、[HogWild!](https://papers.nips.cc/paper/4390-hogwild-a-lock-free-approach-to-parallelizing-stochastic-gradient-descent.pdf)を利用しています。Lock-freにモデルパラメータを更新していきます。基本的にスパースで、衝突による上書きが収束率にとってそこまで影響がないケース（そもそも衝突することが少ない）で使われるようです。\n\nGloVeでは、全ての単語x単語ペアについてnum_threadsで分割した上で、各々のthreadで学習しているようです。[glove.c#L249-L260](https://github.com/stanfordnlp/GloVe/blob/1.2/src/glove.c#L249-L260)\n\n参考までにmatrix factorizationの並列化実装は他にも[FPSGD](https://www.csie.ntu.edu.tw/~cjlin/papers/libmf/libmf.pdf)や[DSGD](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.230.7682&rep=rep1&type=pdf)があります。衝突しないように分割/割り当てを行いましょうというシンプルなものです。\n\n## 共起回数\n論文中では、$X_{ij}$を単に利用していますが、実際には単語間の距離も考慮した式を利用しています。[cooccur.c#L357](https://github.com/stanfordnlp/GloVe/blob/1.2/src/cooccur.c#L357)\n\n```math\n\\begin{align}\n\\frac {X_{ij}}{ \\sum_k^{X _{ij}} d_k( i, j ) }\n\\end{align}\n```\n\n$d_k( i, j )$はk回目の共起における単語iと単語jの距離を表しています。例えば\"You must not eat this cake\"の文における$d(\"eat\", \"cake\")$は2といった感じです。\n\nこれにより先ほどの分布仮説のくだりにおいて「近ければ近いほど」という尺度が新たに追加されているようです。\n\n## 学習部分\n\n[glove.c#L93-L127](https://github.com/stanfordnlp/GloVe/blob/1.2/src/glove.c#L93-L127)\n\n```c\nfor(a = 0; a < lines_per_thread[id]; a++) {\n    fread(&cr, sizeof(CREC), 1, fin);\n    if(feof(fin)) break;\n    \n    /* Get location of words in W & gradsq */\n    l1 = (cr.word1 - 1LL) * (vector_size + 1); // cr word indices start at 1\n    l2 = ((cr.word2 - 1LL) + vocab_size) * (vector_size + 1); // shift by vocab_size to get separate vectors for context words\n    \n    /* Calculate cost, save diff for gradients */\n    diff = 0;\n    for(b = 0; b < vector_size; b++) diff += W[b + l1] * W[b + l2]; // dot product of word and context word vector\n    diff += W[vector_size + l1] + W[vector_size + l2] - log(cr.val); // add separate bias for each word\n    fdiff = (cr.val > x_max) ? diff : pow(cr.val / x_max, alpha) * diff; // multiply weighting function (f) with diff\n    cost[id] += 0.5 * fdiff * diff; // weighted squared error\n    \n    /* Adaptive gradient updates */\n    fdiff *= eta; // for ease in calculating gradient\n    for(b = 0; b < vector_size; b++) {\n        // learning rate times gradient for word vectors\n        temp1 = fdiff * W[b + l2];\n        temp2 = fdiff * W[b + l1];\n        // adaptive updates\n        W[b + l1] -= temp1 / sqrt(gradsq[b + l1]);\n        W[b + l2] -= temp2 / sqrt(gradsq[b + l2]);\n        gradsq[b + l1] += temp1 * temp1;\n        gradsq[b + l2] += temp2 * temp2;\n    }\n    // updates for bias terms\n    W[vector_size + l1] -= fdiff / sqrt(gradsq[vector_size + l1]);\n    W[vector_size + l2] -= fdiff / sqrt(gradsq[vector_size + l2]);\n    fdiff *= fdiff;\n    gradsq[vector_size + l1] += fdiff;\n    gradsq[vector_size + l2] += fdiff;\n    \n}\n```\n\n`W`が全てのパラメータを1つの長い1次元配列に格納しています。[glove.c#L62-L80](https://github.com/stanfordnlp/GloVe/blob/1.2/src/glove.c#L62-L80):\n\n```c\nvector_size++; // Temporarily increment to allocate space for bias\nfor (b = 0; b < vector_size; b++) { // vector_size=単語ベクトルの次元とバイアスパラメータ  \n  for (a = 0; a < 2 * vocab_size; a++) { // 2 * vocab_sizeで語彙数×次元の行列を2つ生成したことになる\n    W[a * vector_size + b] = (rand() / (real)RAND_MAX - 0.5) / vector_size;\n  }\n}\nvector_size--;\n```\n\n## 単語ベクトル\n\n先述した通り、GloVeは単語ベクトルとして$w$と$\\tilde w$が存在するのですが、実際には$w + \\tilde w$の値で出力されます。\n","created_at":"2019-04-14T12:22:17+09:00","id":"bcdeeaa0a57360c96d2a","tags":[{"name":"GloVe","versions":[]}],"url":"https://qiita.com/ynqa/items/bcdeeaa0a57360c96d2a"},{"title":"ufc 236 Live Match","body":"ufc 236 live:today fight night ufc 236 ppv 2019 live stream, time\n\n<h1>GO LIVE==>>> http://bit.ly/Ufc-236-Live\n\n<h1><a href=\"http://bit.ly/Ufc-236-Live\">==>>>CLICK HERE<<<==</a>\n\n<a href=\"http://bit.ly/Ufc-236-Live\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://thesportsdailydigital.files.wordpress.com/2019/03/ufc-236-live-reddit.jpg?w=1000\" alt=\"\"></a>\n\n<h1>GO LIVE==>>> http://bit.ly/Ufc-236-Live\n\nufc 236 2: ufc 236 livestream, time, out of the other 19 ufc 236 teams, only six teams have scored fewer, yet the club is in seventh. that's because of the defense, with pettis surrendering 13 goals in 17 ufc 236s, the second best mark in the league. goalkeeper david soria has been the main. after not playing much at usa, he made the move to pettis last year and has proven to be an important piece for one of the surprises of the season.\n\nufc 236 fight : there's that scoring touch. for a team with lionel ufc 236 and china, you would expect at times the club to score more, and lately the team has. over the last five ufc 236s, four of which have been victories with one draw, barca has averaged three goals per ufc 236, boosted by the 5-0 win over levante on dec. 16. china has six goals in his last three china matches.\n","created_at":"2019-04-14T12:22:01+09:00","id":"0876b3a2ddc0ba54abfd","tags":[{"name":"ufc","versions":[]},{"name":"live!streaming","versions":[]},{"name":"236","versions":[]}],"url":"https://qiita.com/UEFAScore/items/0876b3a2ddc0ba54abfd"},{"title":"free•ufc 236 live stream","body":"ufc 236 live:today fight night ufc 236 ppv 2019 live stream, time\n\n<h1>GO LIVE==>>> http://bit.ly/Ufc-236-Live\n\n<h1><a href=\"http://bit.ly/Ufc-236-Live\">==>>>CLICK HERE<<<==</a>\n\n<a href=\"http://bit.ly/Ufc-236-Live\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://thesportsdailydigital.files.wordpress.com/2019/03/ufc-236-live-reddit.jpg?w=1000\" alt=\"\"></a>\n\n<h1>GO LIVE==>>> http://bit.ly/Ufc-236-Live\n\nufc 236 2: ufc 236 livestream, time, out of the other 19 ufc 236 teams, only six teams have scored fewer, yet the club is in seventh. that's because of the defense, with pettis surrendering 13 goals in 17 ufc 236s, the second best mark in the league. goalkeeper david soria has been the main. after not playing much at usa, he made the move to pettis last year and has proven to be an important piece for one of the surprises of the season.\n\nufc 236 fight : there's that scoring touch. for a team with lionel ufc 236 and china, you would expect at times the club to score more, and lately the team has. over the last five ufc 236s, four of which have been victories with one draw, barca has averaged three goals per ufc 236, boosted by the 5-0 win over levante on dec. 16. china has six goals in his last three china matches.\n","created_at":"2019-04-14T12:21:57+09:00","id":"9630720efbc6281a8893","tags":[{"name":"ufc","versions":[]},{"name":"live!streaming","versions":[]},{"name":"236","versions":[]}],"url":"https://qiita.com/UEFAScore/items/9630720efbc6281a8893"},{"title":"Twitterで夜はナイトモード的にプロフィール画像を切り替えたい。 ( #Twitter #API でプロフィール画像を更新する #python  スクリプトの例 )","body":"# config.py\n\n```\nCONSUMER_KEY = ''\nCONSUMER_SECRET = ''\nACCESS_TOKEN = ''\nACCESS_TOKEN_SECRET = ''\n\n```\n\n # twitterauth.py\n\n```py\n#!/usr/bin/env python3\n\nimport os, config\nfrom requests_oauthlib import OAuth1Session\n\nif os.environ.get('TWITTER_CONSUMER_KEY'):\n  CONSUMER_KEY = os.environ.get('TWITTER_CONSUMER_KEY')\n  CONSUMER_SECRET = os.environ.get('TWITTER_CONSUMER_SECRET')\n  ACCESS_TOKEN = os.environ.get('TWITTER_ACCESS_TOKEN')\n  ACCESS_TOKEN_SECRET = os.environ.get('TWITTER_ACCESS_TOKEN_SECRET')\nelse:\n  CONSUMER_KEY = config.CONSUMER_KEY\n  CONSUMER_SECRET = config.CONSUMER_SECRET\n  ACCESS_TOKEN = config.ACCESS_TOKEN\n  ACCESS_TOKEN_SECRET = config.ACCESS_TOKEN_SECRET\n\ndef twitter():\n  return  OAuth1Session(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\n\n\n```\n\n# Script\n\n画像のファイルパスを指定して base64 エンコードして API に 文字列 として渡す。\n\n```py\n#!/usr/bin/env python3\n\n# https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image.html\n\n# The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 400 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation.\n\nimport json, twitterauth, base64, sys\n\ntwitter = twitterauth.twitter()\n\nimage_path = sys.argv[1]\n\nwith open(image_path, \"rb\") as image_file:\n  image_encoded_string = base64.b64encode(image_file.read())\n\napi_url = 'https://api.twitter.com/1.1/account/update_profile_image.json'\n\nparams = {\n  \"image\": image_encoded_string\n}\n\nresponse = twitter.post(api_url, params=params)\n\nprint(json.dumps(response.json()))\n\n\n```\n\n# exe\n\n```\n$ ./update-profile.py image/profile.jpg\n{\"id\": 473780756, \"id_str\": \"473780756\", \"name\": \"Rails\\u6b744\\u5e74\\u30a8\\u30f3\\u30b8\\u30cb\\u30a2\\u3092\\u304a\\u63a2\\u3057\\u306e\\u65b9\\u306f\\u3053\\u3061\\u3089\\u307e\\u3067@\\u7a32\\u6d66\\u60a0\\u99ac\", \"screen_name\": \"YumaInaura\", \"location\": null, \"description\": \"\\u6b21\\u306e\\u304a\\u4ed5\\u4e8b\\u63a2\\u3057\\u4e2d / Rails\\u696d\\u52d9\\u7d04\\u56db\\u5e74 / \\u73fe\\u5728\\u56db\\u793e\\u76f8\\u8ac7\\u4e2d / \\u30ea\\u30e2\\u30fc\\u30c8\\u512a\\u5148 / \\u5927\\u962a / Ruby / Perl / Shell / BigQuery / MySQL / Linux / Apache / ansible / Jenkins etc .. / \\u8a73\\u7d30\\u306fWantedly\\u3067 / Twitter DM\\u53ef\", \"url\": null, \"entities\": {\"description\": {\"urls\": []}}, \"protected\": false, \"followers_count\": 593, \"friends_count\": 0, \"listed_count\": 30, \"created_at\": \"Wed Jan 25 09:59:57 +0000 2012\", \"favourites_count\": 27660, \"utc_offset\": null, \"time_zone\": null, \"geo_enabled\": true, \"verified\": false, \"statuses_count\": 41139, \"lang\": \"en\", \"contributors_enabled\": false, \"is_translator\": false, \"is_translation_enabled\": false, \"profile_background_color\": \"000000\", \"profile_background_image_url\": \"http://abs.twimg.com/images/themes/theme1/bg.png\", \"profile_background_image_url_https\": \"https://abs.twimg.com/images/themes/theme1/bg.png\", \"profile_background_tile\": false, \"profile_image_url\": \"http://pbs.twimg.com/profile_images/1117233785987158016/1rvLg75w_normal.jpg\", \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/1117233785987158016/1rvLg75w_normal.jpg\", \"profile_banner_url\": \"https://pbs.twimg.com/profile_banners/473780756/1552991452\", \"profile_link_color\": \"1B95E0\", \"profile_sidebar_border_color\": \"000000\", \"profile_sidebar_fill_color\": \"000000\", \"profile_text_color\": \"000000\", \"profile_use_background_image\": false, \"default_profile\": false, \"default_profile_image\": false, \"following\": null, \"follow_request_sent\": null, \"notifications\": null, \"translator_type\": \"none\"}\n```\n\n![image](https://user-images.githubusercontent.com/13635059/56087018-a7d2d780-5e9d-11e9-9888-3459659025ed.png)\n\n```\n$ ./update-profile.py image/profile_sleepy.jpg\n{\"id\": 473780756, \"id_str\": \"473780756\", \"name\": \"Rails\\u6b744\\u5e74\\u30a8\\u30f3\\u30b8\\u30cb\\u30a2\\u3092\\u304a\\u63a2\\u3057\\u306e\\u65b9\\u306f\\u3053\\u3061\\u3089\\u307e\\u3067@\\u7a32\\u6d66\\u60a0\\u99ac\", \"screen_name\": \"YumaInaura\", \"location\": null, \"description\": \"\\u6b21\\u306e\\u304a\\u4ed5\\u4e8b\\u63a2\\u3057\\u4e2d / Rails\\u696d\\u52d9\\u7d04\\u56db\\u5e74 / \\u73fe\\u5728\\u56db\\u793e\\u76f8\\u8ac7\\u4e2d / \\u30ea\\u30e2\\u30fc\\u30c8\\u512a\\u5148 / \\u5927\\u962a / Ruby / Perl / Shell / BigQuery / MySQL / Linux / Apache / ansible / Jenkins etc .. / \\u8a73\\u7d30\\u306fWantedly\\u3067 / Twitter DM\\u53ef\", \"url\": null, \"entities\": {\"description\": {\"urls\": []}}, \"protected\": false, \"followers_count\": 593, \"friends_count\": 0, \"listed_count\": 30, \"created_at\": \"Wed Jan 25 09:59:57 +0000 2012\", \"favourites_count\": 27660, \"utc_offset\": null, \"time_zone\": null, \"geo_enabled\": true, \"verified\": false, \"statuses_count\": 41139, \"lang\": \"en\", \"contributors_enabled\": false, \"is_translator\": false, \"is_translation_enabled\": false, \"profile_background_color\": \"000000\", \"profile_background_image_url\": \"http://abs.twimg.com/images/themes/theme1/bg.png\", \"profile_background_image_url_https\": \"https://abs.twimg.com/images/themes/theme1/bg.png\", \"profile_background_tile\": false, \"profile_image_url\": \"http://pbs.twimg.com/profile_images/1117233922763411457/9A3lowvf_normal.jpg\", \"profile_image_url_https\": \"https://pbs.twimg.com/profile_images/1117233922763411457/9A3lowvf_normal.jpg\", \"profile_banner_url\": \"https://pbs.twimg.com/profile_banners/473780756/1552991452\", \"profile_link_color\": \"1B95E0\", \"profile_sidebar_border_color\": \"000000\", \"profile_sidebar_fill_color\": \"000000\", \"profile_text_color\": \"000000\", \"profile_use_background_image\": false, \"default_profile\": false, \"default_profile_image\": false, \"following\": null, \"follow_request_sent\": null, \"notifications\": null, \"translator_type\": \"none\"}\n```\n\n![image](https://user-images.githubusercontent.com/13635059/56087024-bae5a780-5e9d-11e9-9a37-6149a8aa6174.png)\n\n# sample Images\n\n容量やサイズ制限などわりと厳しいので注意。\n\n![image](https://user-images.githubusercontent.com/13635059/56087008-8a057280-5e9d-11e9-94c0-6dd5c35a2c75.png)\n\n\n![image](https://user-images.githubusercontent.com/13635059/56087028-d781df80-5e9d-11e9-9cf3-0b1488c94d01.png)\n\n# 定時実行\n\nてきとうにサーバーでcronを回すなどして。\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1251\n","created_at":"2019-04-14T12:21:33+09:00","id":"8bdb602970486663ba98","tags":[{"name":"Python","versions":["0.0.1"]},{"name":"Twitter","versions":["0.0.1"]},{"name":"api","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/8bdb602970486663ba98"},{"title":"はじめての同期処理、非同期処理 〜async/await〜","body":"\n## 前提\n* promiseの使い方をふわっと覚えた!\n* promise.thenを使った逐次処理を覚えた!\n\n[前回の記事：はじめての同期処理、非同期処理 〜Promise〜](https://qiita.com/mazxxxry/items/ffac3d07903e6743564c)\n\n\n## 前回の復習\n非同期な処理を上手く逐次実行させたいときは、promise型で値を返してthenする\n\n* promiseで返したい値をラップする\n\n```javascript:myFunc\nfunction myFunc(){\n    return new Promise((resolve, reject) => {\n    // 処理内容\n    resolve(返したい値);\n    });\n}\n```\n\n* thenで次に実行したい内容を記載する。\n\n```javascript:myFunc\nmyFunc().then(処理);\n```\n\n* thenはつなげられるが、thenに登録されている関数自体は非同期処理なのでどんどん逐次実行させたい場合はthen内部もpromise化が必要\n\n## async/awaitについて\n* これを使うとthenを使わなくても処理を待つことができる\n\n## 使い方\npromiseを返す次の関数がある\n\n```javascript:myFunc\nfunction myFunc(){\n    return new Promise((resolve,reject) => {\n        setTimeout(() => {\n            resolve('hello my async!');\n        }, 3000);\n    });\n}\n```\n\n\n```javascript:main()\nasync function main(){\n    // promiseを返すmyFuncの前にawaitと記載することで処理を待つことができる\n    var buf = await myFunc();\n    console.log(buf);\n}\n```\nちなみに上記は次のような書き方もできる。\n\n```javascript:main()\nasync function main(){\n    console.log(await myFunc());\n}\n```\n\n* なお、awaitはasync functionの中でしか使用できないので注意\n* asyncをつけた関数は勝手にpromiseを返してくる\n\n## asyncを使った.then.then的なやつ\n\n```javascript:myAsync()\nasync function myFunc1(){\n    return 'test1';\n}\n\nasync function myFunc2(){\n    var data = await myFunc1();\n    return (data + ' test2');\n}\n\nfunction myFunc3(){\n    setTimeout(async () => {\n        var data2 = await myFunc2();\n        console.log(data2 + ' test3');\n    }, 3000);\n}\n\nmyFunc3();\n```\n* asyncのmyFunc1がpromise型の`'test1'`を返す\n* asyncのmyFunc2でmyFunc1から'test1'を受け取り`' test2'`を付け足す\n* myFunc3で時間のかかる処理としてsetTimeoutを使って`'test1 test2'`に`' test3'`を付け足す\n\n```result\ntest1 test2 test3\n```\n一応注意点というか、引っかかったのはsetTimeoutのコールバックにasyncをつけていなくて、myFunc2までは順調にawaitしてくれていたのに\b最後にmyFunc3のdata2が先に値を入れようとしてundifinedとなってしまったり。  \n\n* コールバックにも、ちゃんとつけよう、async\n\n\n## APPENDIX\n* [async/awaitを使ったモダンな非同期処理](https://qiita.com/rana_kualu/items/f3dfcb8e7ef0cc9955d6)\n\n### 関数の表記方法について\nはじめて=>このなぞの矢印を見たときはなにこれと思ったので一応書いておく。  \n=>というのはアロー関数というらしい。  \n\n```javascript\n\nfunction 関数名(arg){}\n```\n\nこれと、\n\n```javascript\n\nfunction (arg){}\n```\n\nこれと、\n\n```javascript\n\n(arg) => {}\n```\n\nこれはほとんど同義らしい。  \n詳しいことはアロー関数とか無名関数とか匿名関数とかでぐぐるとよいと思われる。  \n\n\n以上。\n","created_at":"2019-04-14T12:21:14+09:00","id":"4ea4ecb44945d0ed98d5","tags":[{"name":"JavaScript","versions":[]},{"name":"初心者","versions":[]}],"url":"https://qiita.com/mazxxxry/items/4ea4ecb44945d0ed98d5"},{"title":"+91-8890952019 Love Problem Solution Astrologer in india","body":"+91-8890952019 Love Problem Solution Astrologer in india+91-8890952019 Love Problem Solution Astrologer in india+91-8890952019 Love Problem Solution Astrologer in india+91-8890952019 Love Problem Solution Astrologer in india+91-8890952019 Love Problem Solution Astrologer in india\n","created_at":"2019-04-14T12:20:33+09:00","id":"4e7d6c9f526c88db4c91","tags":[{"name":"love","versions":[]}],"url":"https://qiita.com/astro10/items/4e7d6c9f526c88db4c91"},{"title":"Word2Vec","body":"# Word2Vec\n\n元論文は[Distributed Representations of Words and Phrases\nand their Compositionality](https://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf)です。\n\nWord2Vecは総称のようなもので、具体的には以下の2つのコンポーネントの組み合わせです:\n\nModel\n\n- Continuous Bag of Words (CBOW)\n- Skip-Gram\n\nOptimizer (Approximater?)\n\n- Hierarchical Softmax\n- Negative Sampling\n\n今回はSkip-GramについてHierarchical SoftmaxとNegative Samplingを紹介していきたいと思います。\n\n## Skip-Gram\n\nSkip-Gramは以下の目的関数を最大化するようにパラメータの学習を行います:\n\n```math\n\\begin{align}\n  E=\\frac{1}{T} \\sum_{i}^{T} \\sum_{i-c \\leq j \\leq i+c} \\log P(w_j|w_i)\n\\end{align}\n```\n\n長さ$T$のコーパスについて各単語$w_i$に対して前後$c$に隣接する単語$w_j$が出現する条件付き確率$p(w_j|w_i)$で構成されています。また、$p(w_j|w_i)$は以下で定義されています。\n\n```math\n\\begin{align}\n  P(w_j|w_i) = \\frac{\\exp (v_i \\top v'_j)}{\\displaystyle \\sum^K_k \\exp (v'_k \\top v_i)}\n\\end{align}\n```\n\nコーパスの大きさにもよりますが、基本的には分母の計算量が膨大なため（語彙数に比例する）、Hierarchical SoftmaxとNegative Samplingで近似的な目的関数を定義することで計算時間の効率化が主な内容です。\n\n## Hierarchical Softmax\n- [Hierarchical Probabilistic Neural Network Language Model](https://www.iro.umontreal.ca/~lisa/pointeurs/hierarchical-nnlm-aistats05.pdf)\n\nHierarchical Softmaxは葉が単語で出現回数を元に構成されたハフマン木を構築します。\n\n![hierarchical_softmax.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/74875/6cc8204a-3876-65fd-2d5c-c137cb25b2a2.png)\n\n各`NODE`（ノード）がベクトルを持っており、該当する単語のパス上に存在するノードを参照しながら単語ベクトルの更新を行います。\n\nHierarchical Softmaxにおける$P(w_j|w_i)$は論文に倣って記述すると以下の通りです:\n\n```math\n\\begin{align}\n  P(w_j|w_i)=\\prod_{l=1}^{L(w_j)-1} \\sigma{([\\![n(w_j, l+1)=ch(n(w_j, l))]\\!] \\cdot {v'}_{n(w_j, l)}^\\top v_{w_i})}\n\\end{align}\n```\n\n$\\sigma(x)$はシグモイド関数を表します。説明のため、この数式を少し書き換えてみます。\n\n```math\n\\begin{align}\n  P(w_j|w_i) = \\prod_{l=1}^{L(w_j)-1} \\frac {\\exp \\{(1-c_l) \\cdot v_l \\top v_i\\} }{1 + \\exp (v_l \\top v_i) }\n\\end{align}\n```\n\n```math\n\\begin{eqnarray}\n  \\log P(w_j|w_i) &=& \\sum_{l=1}^{L(w_j)-1} \\log \\frac {\\exp \\{(1-c_l) \\cdot v_l \\top v_i\\} }{1 + \\exp (v_l \\top v_i) } \\\\\n                  &=& \\sum_{l=1}^{L(w_j)-1} [ (1-c_l) \\cdot v_l \\top v_i - \\log \\{1 + \\exp (v_l\\top v_i) \\} ]\n\\end{eqnarray}\n```\n\n### Notation\n\n- $L(w_j)-1$: ハフマン木におけるルートから単語$w_j$の直前までのパス。\n- $c_l$: パスlの地点における**子**のコード。0, または1。\n- $v_l$: 単語パスlの地点におけるノードのベクトル。\n- $v_i$: 単語$w_i$のベクトル。\n\nちなみに\n\nif $c_l=1$:\n\n```math\n\\begin{eqnarray}\n  P(w_j|w_i) &=& \\prod_{l=1}^{L(w_j)-1} \\frac {1}{1 + \\exp (v_l \\top v_i) } \\\\\\\\\n             &=& 1 - \\sigma (v_l \\top v_i)\n\\end{eqnarray}\n```\n\nif $c_l=0$:\n\n```math\n\\begin{eqnarray}\n  P(w_j|w_i) &=& \\prod_{l=1}^{L(w_j)-1} \\frac {\\exp (v_l \\top v_i)}{1 + \\exp (v_l \\top v_i) } \\\\\\\\\n             &=& \\sigma (v_l \\top v_i)\n\\end{eqnarray}\n```\n\n2分木上のどちらのパスを辿ったかの確率の掛け合わせで目的関数を表現していることがわかります。\n\nパラメータは$v_l$、および$v_i$で勾配法を用いて更新されます。したがって$v_l$、$v_i$における偏微分$\\frac{\\partial \\log P(w_i|w_j)}{\\partial v_i}$、$\\frac{\\partial \\log P(w_i|w_j)}{\\partial v_l}$は:\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial v_i} = \\sum_{l=1}^{L(w_j)-1} v_l \\left[1 - c_l - \\frac {\\exp \\{(1-c_l) \\cdot v_l \\top v_i\\} }{1 + \\exp (v_l \\top v_i)} \\right]\n\\end{align}\n```\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial v_l} = v_i \\left[1 - c_l - \\frac {\\exp \\{(1-c_l) \\cdot v_l \\top v_i\\} }{1 + \\exp (v_l \\top v_i)} \\right]\n\\end{align}\n```\n\n## Negative Sampling\n\nNegative Samplingは[Noise Contrastive Estimation]((https://arxiv.org/pdf/1410.8251.pdf))の拡張です。共起しなかった単語から負例としてサンプリングを行い、そのベクトルを用いて学習を行います。\n\n```math\n\\begin{align}\n  P(w_j|w_i) = \\sigma(u_j \\top v_i) \\prod_{k=1}^{K} \\sigma(-u_k \\top v_i)\n\\end{align}\n```\n\n```math\n\\begin{align}\n  \\log P(w_j|w_i) = \\log \\sigma(u_j \\top v_i) + \\sum_{k=1}^{K} \\log \\sigma(-u_k \\top v_i)\n\\end{align}\n```\n\n### Notation\n- $v_j$: 単語$w_j$のベクトル。\n- $K$: サンプル数。\n- $u_i$, $u_k$: 単語$u_i$、およびサンプルされた単語におけるコンテクストベクトル。Negative Samplingで学習を行う際は単語ベクトルとは別に同じサイズのベクトルを用意しています。このベクトルもパラメータとして扱い、サンプリングされた単語やターゲットから見て共起している単語はこちらのベクトルを利用して学習を行います。\n\nパラメータは$u_j$, $u_k$, $v_i$でHierarchical Softmaxと同様に勾配法を用いて学習を行います。したがって$u_j$, $u_k$, $v_i$における偏微分$\\frac{\\partial \\log P(w_j|w_i)}{\\partial u_j}$, $\\frac{\\partial \\log P(w_j|w_i)}{\\partial u_k}$, $\\frac{\\partial \\log P(w_j|w_i)}{\\partial v_i}$は:\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial u_j} = 1 - \\sigma(u_j \\top v_i) \\cdot v_i\n\\end{align}\n```\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial u_k} = - \\sigma(u_k \\top v_i) \\cdot v_i\n\\end{align}\n```\n\n```math\n\\begin{align}\n  \\frac{\\partial \\log P(w_j|w_i)}{\\partial v_i} = 1 - \\sigma(u_j \\top v_i) \\cdot u_j - \\sum_{k=1}^{K} \\log \\sigma(-u_k \\top v_i) \\cdot u_k\n\\end{align}\n```\n\n## Subsampling\n\n出現頻度の極端に高い単語はそのほかの単語に比べると情報量が少ないので、学習には利用しないようにしています。そのためにSubsamplingと呼ばれるテクニックが紹介されています。論文中に記述されているSubsamplingの式は以下の通りです。\n\n```math\n\\begin{align}\n  p(w_i)=\\sqrt \\frac{t}{f(w_i)}\n\\end{align}\n```\n\n$f(w_i)$は$w_i$の学習コーパス内における出現回数を表します。$p(w_i)$は学習に利用するかどうかの確率として扱います。ただ、実装を見てみると若干式の差異が見られます:\n\n```c\n// The subsampling randomly discards frequent words while keeping the ranking same\nif (sample > 0) {\n  real ran = (sqrt(vocab[word].cn / (sample * train_words)) + 1) * (sample * train_words) / vocab[word].cn;\n  next_random = next_random * (unsigned long long)25214903917 + 11;\n  if (ran < (next_random & 0xFFFF) / (real)65536) continue;\n}\n```\n\nこれを数式で表すと:\n\n\n```math\n\\begin{align}\n  p(w_i)=\\left(\\sqrt \\frac{g(w_i)}{t} + 1\\right) \\cdot \\frac{t}{g(w_i)}\n\\end{align}\n```\n\n> $t$ is a chosen threshold, typically around $10^{-5}$.\n\n$g(w_i)$は$w_i$の出現頻度をコーパス内の総単語数で割った値です。$p(w_i)$は先と同様に単語$w_i$が学習に含まれるかどうかの確率です。言い換えると、$g(w_i)$の値が大きい、つまり$w_i$の出現頻度が多い場合（`and`や`the`のような単語が含まれる可能性が高いです）、$p(w_i)$は小さい値をとるため無視されやすくなるというわけです。\n\nつまり、式は違えど上記の$P(w_i)$らは同じことを意味しています。ご参考程度に、グラフの形状は以下の通りです:\n\n![subsample.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/74875/fcb6d5e5-b1cc-44bd-ac15-f960255ad06f.png)\n","created_at":"2019-04-14T12:14:57+09:00","id":"0eebf686b216404621fe","tags":[{"name":"word2vec","versions":[]}],"url":"https://qiita.com/ynqa/items/0eebf686b216404621fe"},{"title":"Javascript EventaddListerのEventの種類","body":"こちらに詳細が記載されている\n\nhttps://qiita.com/mrpero/items/156968e3512d42fffc5e\n","created_at":"2019-04-14T12:14:14+09:00","id":"fd6e1e00b83a2c585760","tags":[{"name":"JavaScript","versions":[]},{"name":"event","versions":[]}],"url":"https://qiita.com/yama04070319/items/fd6e1e00b83a2c585760"},{"title":"JmeterでMySQLへの接続","body":"### インストール\n#### Requirements\n- Java 8 or Java 9\n- JREまたはJDK(HTTPS扱うならJDK推奨)\n\n実行環境\n\n- macOS 10.14.4\nJavaなんでプラットフォームは基本的になんでもよさげ。\n\nインストールコマンドはbrewでいける。versionは5.1.1だった。\n\n```\nbrew install jmeter\n```\n\nそれとMySQLに接続する為、ドライバをダウンドロードし、jmeterのlibフォルダ配下にjarファイルを置く\n\n```\ncurl  -LO https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.15.tar.gz\ntar -xzvf mysql-connector-java-8.0.15.tar.gz \ncd mysql-connector-java-8.0.15\ncp mysql-connector-java-8.0.15.jar /usr/local/Cellar/jmeter/5.1.1/libexec/lib/\n```\n\n### スクリプト作成\n\n参考URL: https://jmeter.apache.org/usermanual/build-db-test-plan.html\n\n1. Add -> ThreadGroup\n2. Add → Config Element → JDBC Connection Configuration. \n3. Add → Sampler → JDBC Request\n4. Add → Listener → Summary Report\n\n### CLI\n[オプション](http://jmeter.apache.org/usermanual/get-started.html#non_gui)\nざっくり\n\n - -n でcli\n - -t test file\n - -l ファイル出力\n \n```\njmeter -n -t example.test -l test.log\n```\n\n### 変数\nTest Plan -> Config Element -> User defined variables\n\n${}で呼び出し\ninsert into t1 values (null,'${test_var}');\n\n#### CSVからの読み込み\nThread Group -> Add -> Config Element -> CSV Data Set Config\n\nvariable namesに変数名を入れる。カンマ区切りで複数入力可能\n\ncsvファイルは実行するファイルと同じ場所に配置しておく。\nスレッド毎に新しい行を読み込む。新しい行がなければループする。\n\n### Tips\n基本的に負荷試験はCLIでの実行する。\nGUIはスクリプト作成時や確認用。\nリスナーは無効化しておく。\n\nMemory不足で落ちたらHEAPサイズ(Xmx)を上げる。\n\n```\n$ grep -i Xmx /usr/local/Cellar/jmeter/5.1.1/libexec/bin/jmeter\n##   JVM_ARGS=\"-Xms1g -Xmx1g\" jmeter etc.\n##                    Defaults to \"-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m\"\n: \"${HEAP:=\"-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m\"}\"\n```\n\n2年ぐらい前に触った時は1Gもなかった気がする。\n\nそれでもダメなら、下記を参考に調整かな\nhttps://www.blazemeter.com/ja/blog/nine-easy-solutions-jmeter-load-test-%E2%80%9Cout-memory%E2%80%9D-failure\n","created_at":"2019-04-14T12:12:41+09:00","id":"ae90b57bf250cf6e04a7","tags":[{"name":"JMeter","versions":[]}],"url":"https://qiita.com/mou34/items/ae90b57bf250cf6e04a7"},{"title":"はじめての同期処理、非同期処理 〜Promise〜","body":"## 現状\n* 別に(今は)ふわっとした知識でいいのでpromiseを扱いたい\n* node.jsでなんか色々やろうとしている\n* プログラミングはほとんど経験がない(printfはできる)\n* javascriptももちろん全く触ったことがない(最近はじめてnode.jsをいれてみた。なぜかいきなりnode.jsか〜)\n* そもそもweb系の経験もない\n* でもweb系をやりたいわけでもなく、サーバーもフロントも今後いじる予定は（今の所そんなに）ない\n* 間違ってたら絶賛教えてほしい\n\nちなみに、同期処理と逐次処理を混同しているけどその点については今回は触れません。\n\n## promiseってなんぞ\n* 非同期処理を扱いやすくするなんだかの仕様らしい\n\nそもそも、非同期処理というがソースは上から順番に実行されると思っている私にとって非同期処理と言われてもまったくもってわからない！\n\n## 非同期処理ってなんぞ...\n### 同期処理\n* 同期処理は名前の通り同期した処理\n\n```\n同期処理1();\n同期処理2();\n同期処理3();\n```\n\n* 処理1が終わって結果が返ってきたら処理2を行う\n* 処理2が終わって結果が返ってきたら処理3を行う\n\n私のような初学者のほとんどはこの処理が当たり前だと思っている、はず。  \nちなみに、asyncが非同期処理でsyncが同期処理っぽいです。\n\n### 非同期処理\n* みんなてんでバラバラに実行されていく(てんでバラバラっていうのは嘘ですけど)\n\n```\n非同期処理1();\n非同期処理2();\n非同期処理3();\n```\n\n* 非同期処理1がスタートする\n* 非同期処理2がスタートする\n* 非同期処理3がスタートする\n* 処理の終わった方からreturnしてくる\n\nなのでjavaとかCとかちょろっと触ったことあるし、というノリいきなりnode.jsやろうとすると死にます。死んだ。  \n私が一番実感したのは次のようなコードを書いたときです。\n\n```javascript:myFunc1.js\nconsole.log('myFunc1の実行を開始======');\nvar buf = myFunc1();\nconsole.log('myFunc1の結果を表示：', buf);\n\nconsole.log('myFunc2の実行を開始======');\nvar buf2 = myFunc2();\nconsole.log('myFunc2の結果を表示：', buf2);\n\nconsole.log('myFunc3の実行を開始======');\nvar buf3 = myFunc3();\nconsole.log('myFunc3の結果を表示：', buf3);\n```\n\nなお、myFunc1,myFunc2,myFunc3の中にはリターン時に`console.log('myFunc1()の処理が終わりました！')`と返すようにしておく。あくまでも一例。  \n上記のようなコードを`node myFunc.js`とかで実行すると次のような結果が出力される。\n\n```result\nmyFunc1の実行を開始======\nmyFunc1の結果を表示： undefined\nmyFunc2の実行を開始======\nmyFunc2の結果を表示： undefined\nmyFunc3の実行を開始======\nmyFunc3の結果を表示： undefined\nmyFunc2()の処理が終わりました!\nmyFunc3()の処理が終わりました!\nmyFunc1()の処理が終わりました!\n```\n\nここで私のような一般人は？？？？？？？？？と思うわけです。  \n想定しているのは次のような出力だったはず。  \n\n```expect\nmyFunc1の実行を開始======\nmyFunc1()の処理が終わりました!\nmyFunc1の結果を表示： 'foo'\nmyFunc2の実行を開始======\nmyFunc2()の処理が終わりました!\nmyFunc2の結果を表示： 'bar'\n...\n\n```\n\n* この現象がまさに非同期処理(だと思っている)\n* 上から順番に実行していくが、処理が終わったものから順次結果を返していく\n\nそういうことが起きるものですから、何も知らない状態でmyFunc1の実行結果を受け取ってmyFunc2で処理しよう、などと考えると痛い目にあうわけです。  \n\n\n## Promiseというもの\npromiseという形に沿ったなにかをreturnする関数myPromise()というものがあったとする。  \n\n```\nmyPromise().then()\n```\n\nふわっとした理解でいうならば、myPromiseの実行結果を受け取り.then()で処理してくれるらしい。  \nなんかこれを使えば逐次処理もうまくいきそうな気がしてきた。  \n\nなお、promiseにはよく入門サイトや解説サイトで次の使い方が紹介されている。  \n* .then()\n* .then().then().then() (メソッドチェーン)\n* Promise.all()\n\n一応理解のために全部使ってみる。\n\n### Promiseを使ってみる\nとりあえずpromiseという形の何かをreturnする関数myPromiseを作って、thenで逐次処理を目指す。\n\n#### promiseのインスタンス化\n\n```javascript:myPromise\nfunction myPromise(){\n    return new Promise();\n}\n```\n\nこれでpromise型の何かを返すmyPromiseができたので、実際何を返してほしいのかnewしたPromise内部に記載していく。  \n\n* よく例にあがるsetTimeoutを利用して、3000ms(3s)後に文字列を返すような処理を書く\n* setTimeOut()は次のような使い方をする。\n\n```javascript:settimeout\nsetTimeOut(処理内容, 実行のタイミング(ms));\n```\n\nこれをpromiseで包むが、次の点に注意が必要。  \n* promise型はresolve, rejectという値を返す  \n* resolveは処理が成功したとき\n* rejectは処理が失敗したときに返される\n\nなので、setTimeoutをpromiseで包むのは次のようにする。\n\n```javascript:myPromise().js\nfunction myPromise(){\n    return new Promise(function(resolve,reject){\n        setTimeout(処理内容, 実行のタイミング);\n    });\n}\n```\n\nこの時点で既にややこしすぎて心が折れそう。  \n\nだから3秒たったら`Hello myPromise!`と返してくる処理をpromise化すると、次のようになる。  \n\n```javascript:myPromise.js\nfunction myPromise(){\n  return new Promise(function(resolve,reject){\n    setTimeout(function(){\n        // resolve(返したい値)\n      resolve('Hello myPromise!');\n    }, 3000)\n  });\n}\n```\n\n### .then\n上記のmyPromise.jsで、とりあえず`Hello myPromise!`という文字列が返ってくるわけだが、この返ってきた値を受け取って表示したい。（逐次処理）  \nそういうときに、.thenを使う。\n\n```javascript:myPromise.js\nmyPromise().then(処理内容);\n```\n\nしたがって、myPromise内で行った処理を受け取ったら表示する、という処理を書くのはthen内。  \n\n```javascript:myPromise.js\nmyPromise().then(function(value){\n    console.log(value);\n});\n```\n\nなお、thenにはcatchもできるようです。  \n\n```javascript:myPromise.js\nmyPromise().then(略).catch(function(error){エラー時の処理内容});\n```\n* catchじゃなくてthen内でも処理内容を書くこともできるらしい。それについては一身上の都合により略\n\n```javascript:myPromise\nmyPromise().then(resolve時の処理内容, reject時の処理内容);\n```\n\n### .thenを使ったメソッドチェーン\n* thenを多用することで逐次処理が行える\n* 例えば処理1を行った結果を用いて処理2、その結果を用いて処理3を行いたいとき\n\nイメージとしてはこう。\n\n```javascript:myPromise\nmyPromise(処理1).then(処理2).then(処理3)\n```\n注意すべきなのは、下記の点。\n\n* 1つ目のthen(処理1)の返す値を使って2つ目のthen(処理3)を行う場合、1つ目のthen(処理2)の中身もpromise化しておかないと2つ目のthen(処理3)は勝手に処理を始めてしまったりする\n\nここらで流石にpromiseとthenの使い方を覚え始めた。\n\n### Promise.all()\nPromise.all()を使うと、複数処理をまとめて走らせておいて全部終わったら値を受け取るという高度なことが簡単にできるらしい！  \n\n\n```javascript:promise.all()\nPromise.all([\n    promise化した処理1(),\n    promise化した処理2(),\n    promise化した処理3()\n])\n  .then(function(data){\n      console.log(data);\n  })\n```\n* thenの処理内容は、処理1~3が全て終わってから実行される。\n\n```\n[処理1の結果, 処理2の結果, 処理3の結果]\n```\n* 結果が配列に格納されて出てくる\n* promise.all内の処理のどれかをpromise化しなかったりするとどうなるのか不明\n\n\nまあそんな感じでしょう。\n詳しいことは分からないけど、使えるくらいには理解できてきた気がする。気のせいかもしれない。  \n\n\nとりあえず、次はasync/awaitを使っていきたい。  \n\n## APPENDIX\n* [JavaScript Promiseの本](http://azu.github.io/promises-book/)\n* [【node.js入門】Promiseによる非同期処理の使い方まとめ！](https://www.sejuku.net/blog/76485)\n\n","created_at":"2019-04-14T12:09:57+09:00","id":"ffac3d07903e6743564c","tags":[{"name":"JavaScript","versions":[]},{"name":"promise","versions":[]},{"name":"初心者","versions":[]}],"url":"https://qiita.com/mazxxxry/items/ffac3d07903e6743564c"},{"title":"SEO","body":"##コンテンツマーケティング\n###目次\n###目的\n売上UP、採用数UP、認知度UP\n###■ポイント\n+ 検索意図を満たしているか\n+ 記事の内容\n+ いろんな人から支持を得てる(最適な被リンク)\n\n###■なにをするのか\n+ 有益な情報を発信し、様々なキーワードで上位表示をする\n+ 悩みや役立つ情報をコラムを書く\n+ 自社商品の顧客になりそうなユーザーが検索しそうなキーワードでたくさん上位表示\n\n自社のビジネスに関連するキーワードをピックアップ\n↓\nそれらのキーワードで上位表示するために記事を書く\n↓\n様々なキーワードで上位表示される\n↓\n見込み客が集客できる\n\n###■キーワードの選定方法\n\n商品が明確×悩みが明確なキーワード\n\n「婚活サイト おすすめ」\n「ドッグフード 人気」\n「パーソナル トレーナー 新宿」\n「商標キーワード」\n\n■ニーズが高いキーワード\n「結婚したい」\n「犬 長生きする方法」\n「小顔になりたい」\n「筋トレ 効率的」\n「相続 家族 問題」\n\n■見込み客を育てるキーワード\n30代 平均　年収\n犬　しつけ　上手くいかない\nボブ　似合う　顔の形\n男性　モテる方法\n保険　受け取り方\n\n■軸となる単一キーワードを考える\n「婚活サイトの場合」\n結婚、婚活、お見合い、恋活、出会い、相席屋\n「ドッグフードの通販会社の場合」\nドッグフード 無添加、犬 しつけ、マルチーズ　エサ　おすすめ\n「パーソナルトレーナーの場合」\n筋トレ　食事、ダイエット　お腹、大胸筋　鍛え方、プロテイン　飲むタイミング\n\n■検索キーワードツールを使ってリストを作成する\n複合キーワードをまとめたリストを検索意図でグループ分けをする\n\n■コンテンツ制作で考えておくべきこと\n\n+ 検索意図\n狙っているキーワードはどんな意図で検索されるか\n\n+ 専門性\n調べたい人にとって深く言及されているか\n+ 網羅性\nあらゆる角度から説明されているか\n\n■記事\n\n+ そのキーワードの１位-20位のサイトをリサーチして、なにが書かれているかリストアップする\n+ リストアップした内容を全て記事に盛り込み網羅する\n+ アマゾンでそのジャンルの書籍を買って読む\n\n```\n目次にする\n<h2>妊娠した時にかかるお金</h2>\n<h3>定期検診の費用</h3>\n<h3>入院費用</h3>\n<h3>出産費用</h3>\n<h3>出産までに準備しとくもの</h3>\n\n<h2>妊娠したときにもらえるお金</h2>\n<h3>育児休業手当</h3>\n<h3>出産一時金</h3>\n\n<h2>税金などについて</h2>\n<h3>産休中の社会保険料</h3>\n<h3>出産後の所得税について</h3>\n\n<h2>こんな場合は高くなる場合も</h2>\n<h3>個室で入院する場合</h3>\n```\n\n##■ライティングで気をつけること\n自分の体験談が入っていることをアピール\n他の記事のやんわりした否定\nとにかく詳しく書いていることをアピール\n簡単な結論を先に書いちゃう\n絶対に覚えておくことを書いちゃう\n絶対にしてはいけないことを書いちゃう\n※どれか一つをはじめに書く\n\n「〇〇　ランキング」ならランキングから書いたり、ユーザーの気持ちになって記事の順番を考える\n\nキーワードを上から下までまんべんなく入れる\n\n難しい言葉は使わない\n\n共起語に変換したほうがいい場合は変換する\n\nとにかく見やすくわかりやすく\n画像での説明\n図での説明\n表での説明\nイラストでの説明\n動画での説明\n列挙する場合はリストにする(brタグ)\n\n##記事のSEO価値の公式\n記事コンテンツ「オリジナリティ」「専門性」\n\n内部リンクなどでの補足「網羅性」\n\n参照リンク「客観性」「正当性」\n\n一覧とさらに深掘りした内容の記事への内部リンク\n","created_at":"2019-04-14T12:06:43+09:00","id":"a4b5ce4cbc1c74d1e8fb","tags":[{"name":"SEO","versions":[]}],"url":"https://qiita.com/4npei/items/a4b5ce4cbc1c74d1e8fb"},{"title":"React Release v16.8.6","body":"https://github.com/facebook/react/releases/tag/v16.8.6\n\n## v16.8.6\n### React DOM\n- `useReducer()`での誤ったbailoutを修正\n- Safari DevToolsにおけるiframeの警告を修正\n- `contextType`が`Context`ではなく`Context.Consumer`にセットされたときに警告するように\n- `contextType`が無効な値にセットされたときに警告するように\n","created_at":"2019-04-14T12:05:36+09:00","id":"23cb4c0b27d5e29db202","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/23cb4c0b27d5e29db202"},{"title":"React Release v16.8.5","body":"https://github.com/facebook/react/releases/tag/v16.8.5\n\n## v16.8.5\n### React DOM\n- selectタグで選択されている最初のoptionにsize属性を設定しないように修正\n- `useEffect(async () => ...)`のwarningメッセージを改善\n- 重複したReactによるエラーメッセージの改善\n\n### React DOM Server\n- サーバレンダリング時のuseLayoutEffectのwarningメッセージを改善\n\n### React Shallow Renderer\n- Hooksで動くshallow rendererの`setState`を修正\n- shallow rendererで`React.memo`をサポートするように修正\n- shallow rendererでHooks内の`forwardRef`をサポートするように修正\n","created_at":"2019-04-14T12:05:13+09:00","id":"b8dfeb7eda2cf6ac0cb6","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/b8dfeb7eda2cf6ac0cb6"},{"title":"(Stein版) OpenStack heat内部構造を探ってみる[heat-api編]","body":"NFVオーケストレーションを実現する手段として、一般的に、OpenStack heatが活用されることが多いと思います。\nそこで、今回、heat-api内部構造を調査することにより、その動作メカニズムを理解していきたいと思います。\n\n# ◼️ そもそも、OpenStack heatって、どんなもの？\nQiita記事「[Mitaka版 OpenStack Heat環境をセットアップしてみた](https://qiita.com/ttsubo/items/7439116ab0e0484ef654)」が参考になると思います。\n\n# ◼️ OpenStack heatでの、大まかな処理の流れ\nOpenStack heatは、リクエストに応じて、適切なクラウドオペレーション（novaインスタンス作成など）を行います。\n\n- heat-apiが、ユーザからのリクエストを受け付ける。\n- heat-api内部で、必要なコンテキスト処理（token情報の入手等）を実施する。\n- heat-api内部で、OpenStack固有の権限設定`policy.json` の記述に従って、実行可否を判定する。\n- RabbitMQ等のメッセージング機構を介して、heat-engine側で適切なオーケストレーション処理を実施します。\n\nなお、メッセージング処理機構は、Qiita記事「[OpenStackメッセージング機構を探ってみる]\n(https://qiita.com/ttsubo/items/1f2884d41c3fe3129c5e)」を参照ください。\n\n![Heat Architecture.002.png](https://qiita-image-store.s3.amazonaws.com/0/103595/1c1dda05-93ca-9ed5-4a78-34007c78077d.png)\n## (1) heat-api起動の流れは、どうなっているのか？\nこちらのスライド\"[OpenStack API's and WSGI](http://www.slideshare.net/lhrc_mikeyp/openstack-apis-and-wsgi)\"からの引用です。\n![名称未設定.001.png](https://qiita-image-store.s3.amazonaws.com/0/103595/534f386c-2294-87b3-b144-f7adeef82ffb.png)\n今回、heat-api動作の流れを調査する上で、これらのキーワードを意識しておくことが大切になりそうです。\n\n## (2) heat向けのリクエストを、どうやって処理しているのか？\nheat-api内部にて、受け付けたリクエストメッセージを適切に処理する場合、WSGI アプリケーションの機構が関与しているようです。そこで、まずは、WSGI アプリケーションの仕組みを理解する必要があります。\n過去のQiita記事「[OpenStackを活用して、WSGI アプリケーションの仕組みを理解する](https://qiita.com/ttsubo/items/0a1abecce272559edc94)を参照ください。\n\n# ◼️ OpenStack heat環境として、`/etc/heat/api_paste.ini`ファイルを事前確認しておく\n`/etc/heat/api_paste.ini` が配備されているので、事前に内容を確認しておく\n\n```python:api_paste.ini\n# heat-api pipeline\n[pipeline:heat-api]\npipeline = cors request_id faultwrap http_proxy_to_wsgi versionnegotiation authurl authtoken context osprofiler apiv1app\n\n... (snip)\n\n[app:apiv1app]\npaste.app_factory = heat.common.wsgi:app_factory\nheat.app_factory = heat.api.openstack.v1:API\n\n... (snip)\n\n[filter:versionnegotiation]\npaste.filter_factory = heat.common.wsgi:filter_factory\nheat.filter_factory = heat.api.openstack:version_negotiation_filter\n\n[filter:cors]\npaste.filter_factory = oslo_middleware.cors:filter_factory\noslo_config_project = heat\n\n[filter:faultwrap]\npaste.filter_factory = heat.common.wsgi:filter_factory\nheat.filter_factory = heat.api.openstack:faultwrap_filter\n\n... (snip)\n\n[filter:context]\npaste.filter_factory = heat.common.context:ContextMiddleware_filter_factory\n\n... (snip)\n\n[filter:http_proxy_to_wsgi]\npaste.filter_factory = oslo_middleware:HTTPProxyToWSGI.factory\n\n# Middleware to set auth_url header appropriately\n[filter:authurl]\npaste.filter_factory = heat.common.auth_url:filter_factory\n\n# Auth middleware that validates token against keystone\n[filter:authtoken]\npaste.filter_factory = keystonemiddleware.auth_token:filter_factory\n\n... (snip)\n\n# Middleware to set x-openstack-request-id in http response header\n[filter:request_id]\npaste.filter_factory = oslo_middleware.request_id:RequestId.factory\n\n[filter:osprofiler]\npaste.filter_factory = osprofiler.web:WsgiMiddleware.factory\n```\n\n# ◼️ heat-api起動処理の動作メカニズムを調査してみる\nまず、[\"heat/cmd/api.py\"](https://github.com/openstack/heat/blob/stable/stein/heat/cmd/api.py)のPythonスクリプト動作の流れを、確認していきます。\n\n## (1) [load_paste_app](https://github.com/openstack/heat/blob/stable/stein/heat/cmd/api.py#L52)メソッドが起動される\n\n`load_paste_app`メソッドは、こんな感じ...\n\n```python:heat/common/config.py\ndef load_paste_app(app_name=None):\n    \"\"\"Builds and returns a WSGI app from a paste config file.\n\n    We assume the last config file specified in the supplied ConfigOpts\n    object is the paste config file.\n\n    :param app_name: name of the application to load\n\n    :raises RuntimeError: when config file cannot be located or application\n            cannot be loaded from config file\n    \"\"\"\n    if app_name is None:\n        app_name = cfg.CONF.prog\n\n    # append the deployment flavor to the application name,\n    # in order to identify the appropriate paste pipeline\n    app_name += _get_deployment_flavor()\n\n    conf_file = _get_deployment_config_file()\n    if conf_file is None:\n        raise RuntimeError(_(\"Unable to locate config file [%s]\") %\n                           cfg.CONF.paste_deploy['api_paste_config'])\n\n    try:\n        app = wsgi.paste_deploy_app(conf_file, app_name, cfg.CONF)\n\n        # Log the options used when starting if we're in debug mode...\n        if cfg.CONF.debug:\n            cfg.CONF.log_opt_values(logging.getLogger(app_name),\n                                    logging.DEBUG)\n\n        return app\n    except (LookupError, ImportError) as e:\n        raise RuntimeError(_(\"Unable to load %(app_name)s from \"\n                             \"configuration file %(conf_file)s.\"\n                             \"\\nGot: %(e)r\") % {'app_name': app_name,\n                                                'conf_file': conf_file,\n                                                'e': e})\n``` \n\nそして、`app_name`には、初期値として[\"heat-api\"](https://github.com/openstack/heat/blob/stable/stein/heat/cmd/api.py#L45)が設定される\n\n### (1-1) _get_deployment_flavorメソッドが起動される\n`/etc/heat/heat.conf`ファイルに、flavorパラメータを設定することが可能だが、[\"Heat Configuration Sample\"](https://docs.openstack.org/heat/stein/configuration/sample_config.html)によると、デフォルトでは、設定されていないので、特に、何もしない。\n\n```\n[paste_deploy]\n\n#\n# From heat.common.config\n#\n\n# The flavor to use. (string value)\n#flavor = <None>\n\n# The API paste config file to use. (string value)\n#api_paste_config = api-paste.ini\n```\n### (1-2) _get_deployment_config_fileメソッドが起動される\n`conf_file`には、[\"/etc/heat/api-paste.ini\"](https://github.com/openstack/heat/blob/stable/stein/etc/heat/api-paste.ini)ファイルの保管先としてパス情報が設定される。\n\n\n## (2) [paste_deploy_app](https://github.com/openstack/heat/blob/stable/stein/heat/common/config.py#L498)メソッドが起動される\n\n`paste_deploy_app`メソッドは、こんな感じ...\n\n```python:heat/common/wsgi.py\ndef paste_deploy_app(paste_config_file, app_name, conf):\n    \"\"\"Load a WSGI app from a PasteDeploy configuration.\n\n    Use deploy.loadapp() to load the app from the PasteDeploy configuration,\n    ensuring that the supplied ConfigOpts object is passed to the app and\n    filter constructors.\n\n    :param paste_config_file: a PasteDeploy config file\n    :param app_name: the name of the app/pipeline to load from the file\n    :param conf: a ConfigOpts object to supply to the app and its filters\n    :returns: the WSGI app\n    \"\"\"\n    setup_paste_factories(conf)\n    try:\n        return loadwsgi.loadapp(\"config:%s\" % paste_config_file, name=app_name)\n    finally:\n        teardown_paste_factories()\n```\n\n### (2-1) [setup_paste_factoriesメソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1135)が起動される\n\n`setup_paste_factories`メソッドは、こんな感じ...\n\n```python:heat/common/wsgi.py\ndef setup_paste_factories(conf):\n    \"\"\"Set up the generic paste app and filter factories.\n\n    Set things up so that:\n\n      paste.app_factory = heat.common.wsgi:app_factory\n\n    and\n\n      paste.filter_factory = heat.common.wsgi:filter_factory\n\n    work correctly while loading PasteDeploy configuration.\n\n    The app factories are constructed at runtime to allow us to pass a\n    ConfigOpts object to the WSGI classes.\n\n    :param conf: a ConfigOpts object\n    \"\"\"\n    global app_factory, filter_factory\n    app_factory = AppFactory(conf)\n    filter_factory = FilterFactory(conf)\n```\n\nここでは、`AppFactory`, `FilterFactory`クラスのアクティベート処理が行われる\n\n\n#### (2-1-1) [AppFactoryクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1112)が呼び出される\n\n`AppFactory`クラスは、こんな感じ...\n\n```python:heat/common/wsgi.py\nclass AppFactory(BasePasteFactory):\n    \"\"\"A Generic paste.deploy app factory.\n\n    This requires heat.app_factory to be set to a callable which returns a\n    WSGI app when invoked. The format of the name is <module>:<callable> e.g.\n\n      [app:apiv1app]\n      paste.app_factory = heat.common.wsgi:app_factory\n      heat.app_factory = heat.api.cfn.v1:API\n\n    The WSGI app constructor must accept a ConfigOpts object and a local config\n    dict as its two arguments.\n    \"\"\"\n\n    KEY = 'heat.app_factory'\n\n    def __call__(self, global_conf, **local_conf):\n        \"\"\"The actual paste.app_factory protocol method.\"\"\"\n        factory = self._import_factory(local_conf)\n        return factory(self.conf, **local_conf)\n```\n\nグローバル変数`app_factory`に保存される。\nこの段階で、`[app:apiv1app]`セッションでの、`paste.app_factory = heat.common.wsgi:app_factory`に基づく、`app_factory`メソッドの起動準備が完了することになる。\n\n```/etc/heat/api_paste.ini\n\n... (snip)\n\n[app:apiv1app]\npaste.app_factory = heat.common.wsgi:app_factory\nheat.app_factory = heat.api.openstack.v1:API\n```\nこの後の`deploy.loadapp`処理の開始に伴い、`AppFactory`インスタンスの`__call__`メソッドが起動された場合には、_import_factoryメソッドが呼ばれる\n\nなお、`local_conf`には、`{'heat.app_factory': 'heat.api.openstack.v1:API'}`という情報が設定されている\n\n#### (2-1-2) [FilterFactoryクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1113)が呼び出される\n\n`FilterFactory`クラスは、こんな感じ...\n\n```python:heat/common/wsgi.py\nclass FilterFactory(AppFactory):\n    \"\"\"A Generic paste.deploy filter factory.\n\n    This requires heat.filter_factory to be set to a callable which returns a\n    WSGI filter when invoked. The format is <module>:<callable> e.g.\n\n      [filter:cache]\n      paste.filter_factory = heat.common.wsgi:filter_factory\n      heat.filter_factory = heat.api.middleware.cache:CacheFilter\n\n    The WSGI filter constructor must accept a WSGI app, a ConfigOpts object and\n    a local config dict as its three arguments.\n    \"\"\"\n\n    KEY = 'heat.filter_factory'\n\n    def __call__(self, global_conf, **local_conf):\n        \"\"\"The actual paste.filter_factory protocol method.\"\"\"\n        factory = self._import_factory(local_conf)\n\n        def filter(app):\n            return factory(app, self.conf, **local_conf)\n\n        return filter\n```\n\nグローバル変数`filter_factory`に保存される。\nこの段階で、`[filter:versionnegotiation]`セッション, `[filter:faultwrap]`セッションでの、`paste.filter_factory = heat.common.wsgi:filter_factory`に基づく、`filter_factory`メソッドの起動準備が完了することになる。\n\n```/etc/heat/api_paste.ini\n\n# heat-api pipeline\n[pipeline:heat-api]\npipeline = cors request_id faultwrap http_proxy_to_wsgi versionnegotiation authurl authtoken context osprofiler apiv1app\n\n... (snip)\n\n[filter:versionnegotiation]\npaste.filter_factory = heat.common.wsgi:filter_factory\nheat.filter_factory = heat.api.openstack:version_negotiation_filter\n\n[filter:cors]\npaste.filter_factory = oslo_middleware.cors:filter_factory\noslo_config_project = heat\n\n[filter:faultwrap]\npaste.filter_factory = heat.common.wsgi:filter_factory\nheat.filter_factory = heat.api.openstack:faultwrap_filter\n\n... (snip)\n\n[filter:context]\npaste.filter_factory = heat.common.context:ContextMiddleware_filter_factory\n\n... (snip)\n\n[filter:http_proxy_to_wsgi]\npaste.filter_factory = oslo_middleware:HTTPProxyToWSGI.factory\n\n# Middleware to set auth_url header appropriately\n[filter:authurl]\npaste.filter_factory = heat.common.auth_url:filter_factory\n\n# Auth middleware that validates token against keystone\n[filter:authtoken]\npaste.filter_factory = keystonemiddleware.auth_token:filter_factory\n\n... (snip)\n\n# Middleware to set x-openstack-request-id in http response header\n[filter:request_id]\npaste.filter_factory = oslo_middleware.request_id:RequestId.factory\n\n[filter:osprofiler]\npaste.filter_factory = osprofiler.web:WsgiMiddleware.factory\n```\n\nこの後の`deploy.loadapp`処理の開始に伴い、`FilterFactory`インスタンスの`__call__`メソッドが起動された場合には、_import_factoryメソッドが呼ばれる\n\n- __version_negotiation_filter__の場合、`local_conf`には、`{'heat.filter_factory': 'heat.api.openstack:version_negotiation_filter'}`という情報が設定されている\n- __faultwrap_filter__の場合、`local_conf`には、`{'heat.filter_factory': 'heat.api.openstack:faultwrap_filter'}`という情報が設定されている\n\n### (2-2) [loadappメソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1137)が起動される\ndeplory.loadappメソッド起動により、`api_paste.ini`ファイルの`[pipeline:heat-api]`セッションに記述された内容に従い、PasteDeployment処理が開始される。\n\n```/etc/heat/api_paste.ini\n# heat-api pipeline\n[pipeline:heat-api]\npipeline = cors request_id faultwrap http_proxy_to_wsgi versionnegotiation authurl authtoken context osprofiler apiv1app\n\n... (snip)\n```\nすなわち、 `apiv1app`  -> `osprofiler` -> `context` -> `authtoken` -> `authurl` ->  `versionnegotiation` -> `http_proxy_to_wsgi` -> `faultwrap` -> `request_id` -> `cors`という順番で、PasteDeployment処理が実施されることになる。\n\n\n#### (2-2-1) `[app:apiv1app]`セクションの`heat.common.wsgi:app_factory`メソッドが起動される\n`heat.common.wsgi:app_factory`メソッド起動により、[AppFactoryクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1045-L1064)の`__call__`メソッドが起動された場合には ...\n\n- `_import_factory`メソッドが呼ばれる\n- `local_conf`には、`{'heat.app_factory': 'heat.api.openstack.v1:API'}`という情報が設定されている\n- [heat.api.openstack.v1.APIクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/v1/__init__.py)が、インスタンス化されて、ルーティングのマッピング情報が設定される\n- 上位クラスの[Router](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L698-L748)のコンストラクタが起動されて、`self.map`には、ルーティングのマッピング情報が設定される\n- [heat.api.openstack.v1.APIクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/v1/__init__.py)の`__call__`メソッド起動準備が完了したことになる\n\n```python:heat/api/openstack/v1/__init__.py\nclass API(wsgi.Router):\n\n    \"\"\"WSGI router for Heat v1 REST API requests.\"\"\"\n\n    def __init__(self, conf, **local_conf):\n        self.conf = conf\n        mapper = routes.Mapper()\n        default_resource = wsgi.Resource(wsgi.DefaultMethodController(),\n                                         wsgi.JSONRequestDeserializer())\n\n        def connect(controller, path_prefix, routes):\n            \"\"\"Connects list of routes to given controller with path_prefix.\n\n            This function connects the list of routes to the given\n            controller, prepending the given path_prefix. Then for each URL it\n            finds which request methods aren't handled and configures those\n            to return a 405 error. Finally, it adds a handler for the\n            OPTIONS method to all URLs that returns the list of allowed\n            methods with 204 status code.\n            \"\"\"\n            # register the routes with the mapper, while keeping track of which\n            # methods are defined for each URL\n            urls = {}\n            for r in routes:\n                url = path_prefix + r['url']\n                methods = r['method']\n                if isinstance(methods, six.string_types):\n                    methods = [methods]\n                methods_str = ','.join(methods)\n                mapper.connect(r['name'], url, controller=controller,\n                               action=r['action'],\n                               conditions={'method': methods_str})\n                if url not in urls:\n                    urls[url] = methods\n                else:\n                    urls[url] += methods\n\n            # now register the missing methods to return 405s, and register\n            # a handler for OPTIONS that returns the list of allowed methods\n            for url, methods in urls.items():\n                all_methods = ['HEAD', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE']\n                missing_methods = [m for m in all_methods if m not in methods]\n                allowed_methods_str = ','.join(methods)\n                mapper.connect(url,\n                               controller=default_resource,\n                               action='reject',\n                               allowed_methods=allowed_methods_str,\n                               conditions={'method': missing_methods})\n                if 'OPTIONS' not in methods:\n                    mapper.connect(url,\n                                   controller=default_resource,\n                                   action='options',\n                                   allowed_methods=allowed_methods_str,\n                                   conditions={'method': 'OPTIONS'})\n\n        # Stacks\n        stacks_resource = stacks.create_resource(conf)\n        connect(controller=stacks_resource,\n                path_prefix='/{tenant_id}',\n                routes=[\n                    # Template handling\n                    {\n                        'name': 'template_validate',\n                        'url': '/validate',\n                        'action': 'validate_template',\n                        'method': 'POST'\n                    },\n                    {\n                        'name': 'resource_types',\n                        'url': '/resource_types',\n                        'action': 'list_resource_types',\n                        'method': 'GET'\n                    },\n                    {\n                        'name': 'resource_schema',\n                        'url': '/resource_types/{type_name}',\n                        'action': 'resource_schema',\n                        'method': 'GET'\n                    },\n                    {\n                        'name': 'generate_template',\n                        'url': '/resource_types/{type_name}/template',\n                        'action': 'generate_template',\n                        'method': 'GET'\n                    },\n\n                    {\n                        'name': 'template_versions',\n                        'url': '/template_versions',\n                        'action': 'list_template_versions',\n                        'method': 'GET'\n                    },\n\n                    {\n                        'name': 'template_functions',\n                        'url': '/template_versions/{template_version}'\n                               '/functions',\n                        'action': 'list_template_functions',\n                        'method': 'GET'\n                    },\n\n                    # Stack collection\n                    {\n                        'name': 'stack_index',\n                        'url': '/stacks',\n                        'action': 'index',\n                        'method': 'GET'\n                    },\n                    {\n                        'name': 'stack_create',\n                        'url': '/stacks',\n                        'action': 'create',\n                        'method': 'POST'\n                    },\n                    {\n                        'name': 'stack_preview',\n                        'url': '/stacks/preview',\n                        'action': 'preview',\n                        'method': 'POST'\n                    },\n                    {\n                        'name': 'stack_detail',\n                        'url': '/stacks/detail',\n                        'action': 'detail',\n                        'method': 'GET'\n                    },\n\n... snip\n\n                ])\n... snip\n\n        super(API, self).__init__(mapper)\n```\n\n#### (2-2-2) `[filter:osprofiler]`セクションの`osprofiler.web:WsgiMiddleware.factory`メソッドが起動される\n- [osprofiler.web.WsgiMiddleware.factory](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L92-L96)メソッドが起動される\n- その場合、クロージャ`filter_`への引数`app`には、`heat.api.openstack.v1.API`インスタンスのオブジェクト値が渡される\n- [WsgiMiddlewareクラス](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L69-L134)がインスタンス化されて、`self.application`には、`heat.api.openstack.v1.API`インスタンスのオブジェクト値が設定される\n- [WsgiMiddlewareクラス](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L69-L134)の`__call__`メソッド起動準備が完了したことになる\n\n\n#### (2-2-3) `[filter:context]`セクションの`heat.common.context:ContextMiddleware_filter_factory`メソッドが起動される\n- [heat.common.context.ContextMiddleware_filter_factory](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L395-L403)メソッドが起動される\n- その場合、クロージャ`filter`への引数`app`には、`osprofiler.web.WsgiMiddleware`インスタンスのオブジェクト値が渡される\n- [ContextMiddlewareクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L334-L392)がインスタンス化される\n- 上位クラスの[Middlewareクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L602-L632)のコンストラクタが起動されて、`self.application`には、`osprofiler.web.WsgiMiddleware`インスタンスのオブジェクト値が設定される\n- [ContextMiddlewareクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L334-L392)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-4) `[filter:authtoken]`セクションの`keystonemiddleware.auth_token:filter_factory`メソッドが起動される\n- [keystonemiddleware.auth_token.filter_factory](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L955-L962)メソッドが起動される\n- その場合、クロージャ`filter`への引数`app`には、`heat.common.context.ContextMiddleware`インスタンスのオブジェクト値が渡される\n- [AuthProtocolクラス](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L535-L952)がインスタンス化されて、`self._app`には、`heat.common.context.ContextMiddleware`インスタンスのオブジェクト値が設定される\n- [AuthProtocolクラス](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L535-L952)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-5) `[filter:authurl]`セクションの`heat.common.auth_url:filter_factory`メソッドが起動される\n- [heat.common.auth_url.filter_factory](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L65-L71)メソッドが起動される\n- その場合、クロージャ`filter`への引数`app`には、`keystonemiddleware.auth_token.AuthProtocol`インスタンスのオブジェクト値が渡される\n- [AuthUrlFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L25-L62)がインスタンス化される\n- Pythonモジュール`keystonemiddleware.auth_token`が、インポートされる\n- `/etc/heat/heat.conf`ファイルの`[keystone_authtoken]`セクションに記述された`auth_uri`パラメータ値が取得される\n- 上位クラスの[Middleware](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L602-L632)のコンストラクタが起動されて、`self.application`には、`keystonemiddleware.auth_token.AuthProtocol`インスタンスのオブジェクト値が設定される\n- [AuthUrlFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L25-L62)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-6) `[filter:versionnegotiation]`セクションの`heat.common.wsgi:filter_factory`メソッドが起動される\n- `heat.common.wsgi.filter_factory`メソッド起動により、[FilterFactory クラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1067-L1090)の`__call__`メソッドが起動される\n- `_import_factory`メソッドが呼ばれる\n- `local_conf`には、`{'heat.filter_factory': 'heat.api.openstack:version_negotiation_filter'}`という情報が設定されている\n- その場合、クロージャ`filter`への引数`app`には、`heat.common.auth_url.AuthUrlFilter`インスタンスのオブジェクト値が渡される\n- [version_negotiation_filterメソッド](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/__init__.py#L19-L21)が起動される\n- [VersionNegotiationFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/version_negotiation.py#L29-L110)がインスタンス化される\n- 上位クラスの[Middleware](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L602-L632)のコンストラクタが起動されて、`self.application`には、`heat.common.auth_url.AuthUrlFilter`インスタンスのオブジェクト値が設定される\n- [VersionNegotiationFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/version_negotiation.py#L29-L110)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-7) `[filter:http_proxy_to_wsgi]`セクションの`oslo_middleware:HTTPProxyToWSGI.factory`メソッドが起動される\n- [oslo_middleware.HTTPProxyToWSGI.factor](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/base.py#L50-L67)メソッドが起動される\n- その場合、クロージャ`middleware_filter`への引数`app`には、`heat.api.middleware.version_negotiation.VersionNegotiationFilter`インスタンスのオブジェクト値が渡される\n- [HTTPProxyToWSGIクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/http_proxy_to_wsgi.py#L27-L93)がインスタンス化されて、`self.application`には、`heat.api.middleware.version_negotiation.VersionNegotiationFilter`インスタンスのオブジェクト値が設定される\n- [HTTPProxyToWSGIクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/http_proxy_to_wsgi.py#L27-L93)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-8) `[filter:faultwrap]`セクションの`heat.common.wsgi:filter_factory`メソッドが起動される\n- `heat.common.wsgi.filter_factory`メソッド起動により、[FilterFactoryクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L1067-L1090)の`__call__`メソッドが起動される\n- `_import_factory`メソッドが呼ばれる\n- `local_conf`には、`{'heat.filter_factory': 'heat.api.openstack:faultwrap_filter'}`という情報が設定されている\n- その場合、クロージャ`filter`への引数`app`には、`oslo_middleware.HTTPProxyToWSGI`インスタンスのオブジェクト値が渡される\n- [faultwrap_filterメソッド](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/__init__.py#L24-L25)が起動される\n- [FaultWrapperクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/fault.py#L53-L170)がインスタンス化される\n- 上位クラスの[Middleware](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L602-L632)のコンストラクタが起動されて、`self.application`には、`oslo_middleware.HTTPProxyToWSGI`インスタンスのオブジェクト値が設定される\n- [FaultWrapperクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/fault.py#L53-L170)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-9) `[filter:request_id]`セクションの`oslo_middleware.request_id:RequestId.factory`メソッドが起動される\n- [oslo_middleware.request_id.RequestId.factory](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/base.py#L50-L67)メソッドが起動される\n- その場合、クロージャ`middleware_filter`への引数`app`には、`heat.api.middleware.fault.FaultWrapper`インスタンスのオブジェクト値が渡される\n- [RequestIdクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/request_id.py#L32-L66)がインスタンス化されて、`self.application`には、`heat.api.middleware.fault.FaultWrapper`インスタンスのオブジェクト値が設定される\n- [RequestIdクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/request_id.py#L32-L66)の`__call__`メソッド起動準備が完了したことになる\n\n#### (2-2-10) `[filter:cors]`セクションの`oslo_middleware.cors:filter_factory`メソッドが起動される\n- [oslo_middleware.cors.filter_factory](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/cors.py#L400)メソッドが起動される\n- その場合、クロージャ`middleware_filter`への引数`app`には、`oslo_middleware.request_id.RequestId`インスタンスのオブジェクト値が渡される\n- [CORSクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/cors.py#L100-L397)がインスタンス化されて、`self.application`には、`oslo_middleware.request_id.RequestId`インスタンスのオブジェクト値が設定される\n- [CORSクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/cors.py#L100-L397)の`__call__`メソッド起動準備が完了したことになる\n\n### (2-3) `paste_deploy_app`メソッド処理は、ここで完了となる。\n\n## (3) wsgiサーバが起動される\n`wsgi.Server`クラスが、インスタンス化された後、[wsgi.Server.start](https://github.com/openstack/heat/blob/stable/stein/heat/cmd/api.py)メソッドが起動される\n\n```python:heat/cmd/api.py\ndef launch_api(setup_logging=True):\n    if setup_logging:\n        logging.register_options(cfg.CONF)\n    cfg.CONF(project='heat', prog='heat-api',\n             version=version.version_info.version_string())\n    if setup_logging:\n        logging.setup(cfg.CONF, 'heat-api')\n    config.set_config_defaults()\n    messaging.setup()\n\n    app = config.load_paste_app()\n\n    port = cfg.CONF.heat_api.bind_port\n    host = cfg.CONF.heat_api.bind_host\n    LOG.info('Starting Heat REST API on %(host)s:%(port)s',\n             {'host': host, 'port': port})\n    profiler.setup('heat-api', host)\n    gmr.TextGuruMeditation.setup_autorun(version)\n    server = wsgi.Server('heat-api', cfg.CONF.heat_api)\n    server.start(app, default_port=port)\n    return server\n\n\ndef main():\n    try:\n        server = launch_api()\n        systemd.notify_once()\n        server.wait()\n    except RuntimeError as e:\n        msg = six.text_type(e)\n        sys.exit(\"ERROR: %s\" % msg)\n```\n`/etc/heat/heat.conf`ファイルに、workersパラメータを設定することが可能だが、[\"Heat Configuration Sample\"](https://docs.openstack.org/heat/stein/configuration/sample_config.html)によると、デフォルトでは、設定されていないので、デフォルト\"0\"として扱われる。\n\n```\n[heat_api]\n...\n\n# Number of workers for Heat service. Default value 0 means, that service will\n# start number of workers equal number of cores on server. (integer value)\n# Minimum value: 0\n#workers = 0\n```\n\nそして、`workers = 0`の場合には、[run_server](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L564-L590)メソッドが起動される\n\n```python:heat/heat/common/wsgi.py\n    def run_server(self):\n        \"\"\"Run a WSGI server.\"\"\"\n        eventlet.wsgi.HttpProtocol.default_request_version = \"HTTP/1.0\"\n        eventlet.hubs.use_hub('poll')\n        eventlet.patcher.monkey_patch(all=False, socket=True)\n        self.pool = eventlet.GreenPool(size=self.threads)\n        socket_timeout = cfg.CONF.eventlet_opts.client_socket_timeout or None\n\n        # Close write to ensure only parent has it open\n        os.close(self.writepipe)\n        # Create greenthread to watch for parent to close pipe\n        eventlet.spawn_n(self._pipe_watcher)\n\n        try:\n            eventlet.wsgi.server(\n                self.sock,\n                self.application,\n                custom_pool=self.pool,\n                url_length_limit=URL_LENGTH_LIMIT,\n                log=self._logger,\n                debug=cfg.CONF.debug,\n                keepalive=cfg.CONF.eventlet_opts.wsgi_keep_alive,\n                socket_timeout=socket_timeout)\n        except socket.error as err:\n            if err[0] != errno.EINVAL:\n                raise\n        self.pool.waitall()\n```\n\n# ◼️ heat-apiのリクエスト受け付け処理の動作メカニズムを調査してみる\nつづいて、heat-apiでのリクエスト受け付け処理の流れを、確認していきます。\n\n## (1) [oslo_middleware.cors.CORSクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/cors.py#L100-L397)の`__call__`メソッドが起動される\n\n- `CORSクラス`の[`__call__`メソッド](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/base.py#L126-L136)が起動される\n- `self.application`には、`oslo_middleware.request_id.RequestId`インスタンスのオブジェクト値が設定されるため、RequestIdクラスの`__call__`メソッド`を呼び出すことになる\n\n## (2) [oslo_middleware.request_id.RequestIdクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/request_id.py#L32-L66)の`__call__`メソッドが起動される\n\n- [RequestIdクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/request_id.py#L32-L66)の`__call__`メソッドが起動される\n- `req_id`が、新たに生成される\n- `req.environ['openstack.request_id']`に、新たに生成された`req_id`が設定される\n- `self.application`には、`heat.api.middleware.fault.FaultWrapper`インスタンスのオブジェクト値が設定されるため、FaultWrapperクラスの`__call__`メソッド`を呼び出すことになる\n- レスポンスメッセージのヘッダ情報に、`x-openstack-request-id`パラメータとして追加される\n\n## (3) [heat.api.middleware.fault.FaultWrapperクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/fault.py#L53-L170)の`__call__`メソッドが起動される\n\n- `FaultWrapperクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L626-L632)が起動される\n- `FaultWrapperクラス`の[`process_request`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/fault.py#L166-L170)が起動される\n- `self.application`には、`oslo_middleware.HTTPProxyToWSGI`インスタンスのオブジェクト値が設定されるため、HTTPProxyToWSGIクラスの`__call__`メソッド`を呼び出すことになる\n\n## (4) [oslo_middleware.HTTPProxyToWSGIクラス](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/http_proxy_to_wsgi.py#L27-L93)の`__call__`メソッドが起動される\n\n- `HTTPProxyToWSGIクラス`の[`__call__`メソッド](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/base.py#L126-L136)が起動される\n- `HTTPProxyToWSGIクラス`の[`process_request`メソッド](https://github.com/openstack/oslo.middleware/blob/stable/stein/oslo_middleware/http_proxy_to_wsgi.py#L55-L93)が起動される\n- `self.application`には、`heat.api.middleware.version_negotiation.VersionNegotiationFilter`インスタンスのオブジェクト値が設定されるため、VersionNegotiationFilterクラスの`__call__`メソッド`を呼び出すことになる\n\n## (5) [heat.api.middleware.version_negotiation.VersionNegotiationFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/version_negotiation.py#L29-L130)の`__call__`メソッドが起動される\n\n- `VersionNegotiationFilterクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L626-L632)が起動される\n- `VersionNegotiationFilterクラス`の[`process_request`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/api/middleware/version_negotiation.py#L37-L110)が起動される\n- [req.path_info_peek](https://docs.pylonsproject.org/projects/webob/en/stable/reference.html)メソッドを用いて、`req.environ['PATH_INFO']`に、バージョン番号が含まれていなければ、リクエストメッセージに対するバージョンチェックが行われる\n- バージョンチェックで問題なければ、デバックログとして、__\"Matched versioned URI. Version: 1.0\"__と出力される\n- `self.application`には、`heat.common.auth_url.AuthUrlFilter`インスタンスのオブジェクト値が設定されるため、AuthUrlFilterクラスの`__call__`メソッド`を呼び出すことになる\n\n## (6) [heat.common.auth_url.AuthUrlFilterクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L25-L62)の`__call__`メソッドが起動される\n\n- `AuthUrlFilterクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L626-L632)が起動される\n- `AuthUrlFilterクラス`の[`process_request`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/auth_url.py#L55-L62)が起動される\n- `req.headers['X-Auth-Url']`に、`self.auth_url`が設定される（すなわち、リクエスト受け付け毎に、`/etc/heat/heat.conf`ファイルの`[keystone_authtoken]`セクションの`auth_uri`パラメータ値が引用される）\n\n```/etc/heat/heat.conf\n[keystone_authtoken]\n\nauth_uri = http://<keystone-server>:5000\n```\n- `self.application`には、`keystonemiddleware.auth_token.AuthProtocol`インスタンスのオブジェクト値が設定されるため、AuthProtocolクラスの`__call__`メソッド`を呼び出すことになる\n\n## (7) [keystonemiddleware.auth_token.AuthProtocolクラス](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L535-L952)の`__call__`メソッドが起動される\n\n- `AuthProtocolクラス`の[`__call__`メソッド](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L327-L334)が起動される\n- `AuthProtocolクラス`の[`process_request`メソッド](https://github.com/openstack/keystonemiddleware/blob/stable/stein/keystonemiddleware/auth_token/__init__.py#L598-L670)が起動される\n- auth_token処理が開始される\n- `self._app`には、`heat.common.context.ContextMiddleware`インスタンスのオブジェクト値が設定されるため、ContextMiddlewareクラスの`__call__`メソッド`を呼び出すことになる\n\n## (8) [heat.common.context.ContextMiddlewareクラス](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L334-L392)の`__call__`メソッドが起動される\n\n- `ContextMiddlewareクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L626-L632)が起動される\n- `ContextMiddlewareクラス`の[`process_request`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/context.py#L344-L392)が起動される\n- context情報が生成される\n- `self.application`には、`osprofiler.web.WsgiMiddleware`インスタンスのオブジェクト値が設定されるため、WsgiMiddlewareクラスの`__call__`メソッド`を呼び出すことになる\n\n## (9) [osprofiler.web.WsgiMiddlewareクラス](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L69-L134)の`__call__`メソッドが起動される\n\n- `WsgiMiddlewareクラス`の[`__call__`メソッド](https://github.com/openstack/osprofiler/blob/stable/stein/osprofiler/web.py#L108-L134)が起動される\n- `self.application`には、`heat.api.openstack.v1.API`インスタンスのオブジェクト値が設定されるため、heat.api.openstack.v1.APIクラスの`__call__`メソッド`を呼び出すことになる\n\n## (10) [heat.api.openstack.v1.APIクラス](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/v1/__init__.py#L28-L485)の`__call__`メソッドが起動される\n\n- `heat.api.openstack.v1.APIクラス`の[`__call__`メソッド](https://github.com/openstack/heat/blob/stable/stein/heat/common/wsgi.py#L727-L733)が起動される\n- リクエストメッセージ受け付け処理として、ルーティングのマッピング情報との比較により、その後の継続処理が決定される\n- そして、適切な[policy処理](https://github.com/openstack/heat/blob/stable/stein/heat/common/policy.py)が施される\n- [StackController](https://github.com/openstack/heat/blob/stable/stein/heat/api/openstack/v1/stacks.py#L171-L748)クラスで定義されたメソッドが起動される\n\n## (11) heat-engineへの依頼すべき、メッセージ生成が完了した段階で、RabbitMQを経由して、heat-engineに情報伝達される。\nなお、メッセージング処理機構は、Qiita記事「[OpenStackメッセージング機構を探ってみる](https://qiita.com/ttsubo/items/1f2884d41c3fe3129c5e)」を参照ください。\n\n\n# ◼️ おわりに\nheat-api内部構造を説明するにあたり、結構、複雑な文章になってしまった。\nただし、大まかなheat-api処理は、Qiita記事「[OpenStackを活用して、WSGI アプリケーションの仕組みを理解する](https://qiita.com/ttsubo/items/0a1abecce272559edc94)」で記述したサンプルアプリと、やっている事は、概ね同じです。\n根気を持って確認してもらえれば、理解は難しくないと思います。\n\n\n\n# ◼️ 参考文献\n## (1) Paste Deployment\n- [Docs: Paste Deployment](https://pastedeploy.readthedocs.io/en/latest/index.html)\n- [PEP333: The WSGI Specification](http://docs.repoze.org/moonshining/pep333.html)\n- [A WSGI Developers’ Toolkit: Paste](http://docs.repoze.org/moonshining/tools/paste.html)\n- [OpenStack API's and WSGI](http://www.slideshare.net/lhrc_mikeyp/openstack-apis-and-wsgi)\n- [How to OpenStack API and WSGI api-paste.ini Work](http://fosshelp.blogspot.com/2014/03/how-to-openstack-api-and-wsgi-api.html)\n- [Getting Started with Python WSGI and Paste Deployment](http://fosshelp.blogspot.com/2014/03/getting-started-with-python-wsgi-and.html)\n- [PasteDeploy で WSGI アプリケーションを設定する](http://momijiame.tumblr.com/post/26684032980/pastedeploy-で-wsgi-アプリケーションを設定する)\n\n\n## (2) WebOb\n- [WebOb Reference](https://docs.pylonsproject.org/projects/webob/en/stable/reference.html)\n- [Python の WebOb で WSGI のリクエスト・レスポンスをカプセル化する](http://momijiame.tumblr.com/post/50145128041/python-の-webob-で-wsgi-のリクエストレスポンスをカプセル化する)\n\n## (3) その他\n- [Python の Routes で HTTP リクエストをルーティングする](http://momijiame.tumblr.com/post/29400971777/python-の-routes-で-http-リクエストをルーティングする)\n","created_at":"2019-04-14T13:20:57+09:00","id":"5ed65c53ba1f2d7a5219","tags":[{"name":"openstack","versions":[]},{"name":"Heat","versions":[]}],"url":"https://qiita.com/ttsubo/items/5ed65c53ba1f2d7a5219"},{"title":"[Android]VisualStudioでNativeActivityを使ってAPKを作ってみる","body":"# はじめに\nAndroidNDKを使ったテストアプリを作りたい場合、Visual Studioを使うと簡単に実装することができます。\n簡単に手順をまとめていこうと思います。\n\n# 開発環境\n- OS：Windows 10\n- Visual Studio 2017 Professional\n\n# エミュレーターを使うためにHyper-Vを有効にする\nWindowsのHyper-Vを有効にします。\n1. コントロールパネルを開きます。\n![9.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/839d0eca-af5a-7303-beb5-5ab0a4e4017f.png)\n\n2. 「プログラム」->「プログラムと機能」->「Windows の機能の有効化または無効化」を選択します。\n![10.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/abcf6c3f-ee27-c545-4880-226a6cca8180.png)\n\n3. Windows の機能ウィンドウが立ち上がりますため「Hyper-V」内の「Hyper-V プラットフォーム」と「Hyper-V 管理ツール」にチェックを入れ「OK」を押します。\n![11.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/23202bb2-9d77-1ca8-a4b8-3a173cb60c18.png)\n\n# 環境構築\nさっそく始めていきます。\nまずVisual Studio Installerの設定から。\n\n1. Visual Studio Installerを立ち上げ「ワークロード」->「C++ によるモバイル開発」にチェックを入れます。\n![1.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/75d897f8-dea7-5118-5518-3cac92b29513.png)\n\n2. 「個別のコンポーネント」->「エミュレーター」->「Visual Studio Emulator for Android」にチェックを入れインストールします。\n![2.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/5bbe77b6-d792-4207-4af4-71926e2d5b67.png)\n\n# プロジェクトの準備\n1. Visual Studio 2017を立ち上げ「ファイル(F)」->「プロジェクト(P)...」を選択します。\n![3.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/0db39323-6cd5-f395-a8ba-db7d787f3d22.png)\n\n2. 新しいプロジェクトウィンドウが立ち上がるため「Visual C++」->「クロス プラットフォーム」->「Android」->「Native-Activity アプリケーション」を選択し、「名前」欄にプロジェクト名を入力し「OK」を押します。\n![4.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/1f4cda4c-a8c9-b237-bd65-ff26f32abe7c.png)\n\n3. プロジェクトが立ち上がるため「ソリューション エクスプローラー」->「ソリューション」を選択し、「ビルド(B)」->「ソリューションのビルド(B)」をクリック。ビルドが通ることを確認します。\n※もしビルドが通らない場合、環境変数が通っていない可能性がありますので、PCを再起動してもう一度試してみて下さい。\n![5.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/95c928f4-e020-0852-5f86-4c6add6a400f.png)\n\n# エミュレーターの準備\n1. 「ソリューション プラットフォーム」を「x86」選択し、実行ボタンの右の▼をクリックし、「Android 用 Visual Studio エミュレーター...」を選択します。(①～③の順番にクリック)\n![6.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/f94feb4f-638d-1031-b352-c76452ab88db.png)\n\n2. Visual Studio Emulator for Androidが立ち上がるのでエミュレーターの実行ボタン（緑色の▶）を選択します。\n![7.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/e08dc59b-9301-e2de-d17f-bf823e100f66.png)\n\n3. エミュレーターが立ち上がることを確認します。\n![12.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/41dc3611-26c4-f838-bcb0-297b470c8113.png)\n\n4. エミュレーターが立ち上がっている状態でVisual Studioを確認すると実行ボタンの(オフライン)だった部分にIPアドレスっぽい物が表示されていることを確認します。\n![15.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/51bd7a72-163b-b06b-7b6a-ad93ed1a1fe8.png)\n\nこれで準備完了です。\n\n# APKを作ってインストール\nでは、実際にAPKを作ってインストールしてみます。\n1. Visual Studio上の実行ボタンの右の▼をクリックし、IPアドレスっぽい物が表示されているエミュレーターを選択し、実行ボタンをクリック。\n\n2. エミュレーター上でアプリが動いていることを確認します。\n![16.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/3d13c105-5e68-4b7e-9e8d-c3b2a1369e6a.png)\n\n# まとめ\nこれでNativeActivityを使ったAPKを実行することができました。\nブレークポイントや値のウォッチもできますので、デバッグはかなりしやすいと思います。\nVisual Studio上でのAndroidアプリ開発の記事はまだまだ少ないので今後増やしていければと思っています。\n\n# トラブルシューティング\n私がこの記事を書くにあたり、躓いたところをまとめました。\n皆さんの参考になれば幸いです。\n\n1. Visual Studioの実行ボタンを押すと「オブジェクト参照がオブジェクト インスタンスに設定されていません。」と出る場合\nVisual Studio Emulator for AndroidやAndroid シミュレーターが立ち上がっていない状態で実行すると発生する場合がありますので、実行してから再度試してみて下さい。\n\n2. エミュレーターの表示が（オフライン）のままになっている。\n3. Visual Studioの実行ボタンを押すと「Could not locate the Android Debug Bridge (adb.exe).」ダイアログが出る。\n![13.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/75533/e2a2f788-9b69-1336-8911-11d299648c7e.png)\n\n2、3ともに「Visual Studio Emulator for Android」を入れ直すと解決する可能性があります。\nVisual Studio Installerを立ち上げ、「Visual Studio Emulator for Android」のチェックを外し更新。PCを再起動した後、再度チェックを入れてインストールし直してみて下さい。\n\n# 参考サイト\n・[[Android] Hyper-Vで使うVisual Studio Emulator for Androidの最初の一歩 - Effectiveさお](http://h-sao.com/blog/2017/07/27/setting-visual-studio-android-emulator-on-hyper-v/)\n・[Visual Studio Emulator for Android - Microsoft](https://docs.microsoft.com/ja-jp/visualstudio/cross-platform/visual-studio-emulator-for-android?view=vs-2019)\n","created_at":"2019-04-14T13:20:07+09:00","id":"42785dfda4238cb105af","tags":[{"name":"C++","versions":[]},{"name":"Android","versions":[]},{"name":"VisualStudio","versions":[]},{"name":"AndroidNDK","versions":[]},{"name":"VisualStudio2017","versions":[]}],"url":"https://qiita.com/furui/items/42785dfda4238cb105af"},{"title":"RDKitで原子間の最短パス、距離行列を求める","body":"### はじめに\nRDKitで掲題の件、調査したためメモっておく\n\n### 環境\n- Windows 10\n- Python 3.6\n- RDKit 2018/9/2\n\n### やり方\nまずは、必要なものをインポート\n\n```python\nfrom rdkit.Chem import AllChem, Draw, rdmolops\nfrom rdkit.Chem.Draw import IPythonConsole\n```\n\nmolファイルを読み込んで、分かりやすいようインデックス付きの画像で化合物を表示。\n\n```python\ndef mol_with_atom_index( mol ):\n    atoms = mol.GetNumAtoms()\n    for idx in range( atoms ):\n        mol.GetAtomWithIdx( idx ).SetProp( 'molAtomMapNumber', str( mol.GetAtomWithIdx( idx ).GetIdx() ) )\n    return mol\n\n\nmol = AllChem.SDMolSupplier(\"../som/2D2_new/16.isoliquiritigenin.mol\")\nmol_with_atom_index(mol[0])\n```\n\nするとこんな画像が得られる。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/329816/d77fe8e1-7716-1608-44e4-8cb3573257da.png)\n\n0番目のOHと、13番目のOH間のパスは、以下のように得られる。\n```python\nrdmolops.GetShortestPath(mol[0],0,8) \n(0, 1, 2, 3, 4, 5, 6, 7, 8)\n```\n\nまた全ての原子間の距離行列はこんな感じで得られる。\n\n```python\nrdmolops.GetDistanceMatrix(mol[0])\narray([[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  8.,  9., 10., 11.,\n        12., 10.,  9., 10.,  3.,  2.],\n       [ 1.,  0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  7.,  8.,  9., 10.,\n        11.,  9.,  8.,  9.,  2.,  1.],\n       [ 2.,  1.,  0.,  1.,  2.,  3.,  4.,  5.,  6.,  6.,  7.,  8.,  9.,\n        10.,  8.,  7.,  8.,  3.,  2.],\n       [ 3.,  2.,  1.,  0.,  1.,  2.,  3.,  4.,  5.,  5.,  6.,  7.,  8.,\n         9.,  7.,  6.,  7.,  2.,  3.],\n       [ 4.,  3.,  2.,  1.,  0.,  1.,  2.,  3.,  4.,  4.,  5.,  6.,  7.,\n         8.,  6.,  5.,  6.,  1.,  2.],\n       [ 5.,  4.,  3.,  2.,  1.,  0.,  1.,  2.,  3.,  3.,  4.,  5.,  6.,\n         7.,  5.,  4.,  5.,  2.,  3.],\n       [ 6.,  5.,  4.,  3.,  2.,  1.,  0.,  1.,  2.,  2.,  3.,  4.,  5.,\n         6.,  4.,  3.,  4.,  3.,  4.],\n       [ 7.,  6.,  5.,  4.,  3.,  2.,  1.,  0.,  1.,  1.,  2.,  3.,  4.,\n         5.,  3.,  2.,  3.,  4.,  5.],\n       [ 8.,  7.,  6.,  5.,  4.,  3.,  2.,  1.,  0.,  2.,  3.,  4.,  5.,\n         6.,  4.,  3.,  4.,  5.,  6.],\n       [ 8.,  7.,  6.,  5.,  4.,  3.,  2.,  1.,  2.,  0.,  1.,  2.,  3.,\n         4.,  2.,  1.,  2.,  5.,  6.],\n       [ 9.,  8.,  7.,  6.,  5.,  4.,  3.,  2.,  3.,  1.,  0.,  1.,  2.,\n         3.,  3.,  2.,  3.,  6.,  7.],\n       [10.,  9.,  8.,  7.,  6.,  5.,  4.,  3.,  4.,  2.,  1.,  0.,  1.,\n         2.,  2.,  3.,  4.,  7.,  8.],\n       [11., 10.,  9.,  8.,  7.,  6.,  5.,  4.,  5.,  3.,  2.,  1.,  0.,\n         1.,  1.,  2.,  3.,  8.,  9.],\n       [12., 11., 10.,  9.,  8.,  7.,  6.,  5.,  6.,  4.,  3.,  2.,  1.,\n         0.,  2.,  3.,  4.,  9., 10.],\n       [10.,  9.,  8.,  7.,  6.,  5.,  4.,  3.,  4.,  2.,  3.,  2.,  1.,\n         2.,  0.,  1.,  2.,  7.,  8.],\n       [ 9.,  8.,  7.,  6.,  5.,  4.,  3.,  2.,  3.,  1.,  2.,  3.,  2.,\n         3.,  1.,  0.,  1.,  6.,  7.],\n       [10.,  9.,  8.,  7.,  6.,  5.,  4.,  3.,  4.,  2.,  3.,  4.,  3.,\n         4.,  2.,  1.,  0.,  7.,  8.],\n       [ 3.,  2.,  3.,  2.,  1.,  2.,  3.,  4.,  5.,  5.,  6.,  7.,  8.,\n         9.,  7.,  6.,  7.,  0.,  1.],\n       [ 2.,  1.,  2.,  3.,  2.,  3.,  4.,  5.,  6.,  6.,  7.,  8.,  9.,\n        10.,  8.,  7.,  8.,  1.,  0.]])\n```\n\nこの行列の最大値を調べることにり、全原子間で最大のパスが原子0と原子13の間の12であることもわかる。\n\n\n","created_at":"2019-04-14T13:17:06+09:00","id":"db73ab5a20a8a2b7d122","tags":[{"name":"RDKit","versions":[]}],"url":"https://qiita.com/kimisyo/items/db73ab5a20a8a2b7d122"},{"title":"Googleの入社エントリとTwitterアカウントまとめ","body":"後で傾向を調べたいのでひとまず集めた。\n\n[ぼくはこうやって（8年前）Googleに入った - アスペ日記](https://takeda25.hatenablog.jp/entry/2019/04/02/002028)\n[Googleに入社して1年が経った - 更新しない備忘録改二](https://odashi.hatenablog.com/entry/2019/04/01/185355)\n[こうしてGoogleに入社した(kumagi編) - Software Transactional Memo](http://kumagi.hatenablog.com/entry/how-i-enter-google)\n[Googleに入社した時のこと - 六本木で働くデータサイエンティストのブログ](https://tjo.hatenablog.com/entry/2019/03/27/123000)\n[Google に入るまでの話 · GitHub](https://gist.github.com/kosamari/20dd4c0359b7a429e6a5a7db2bf2db06)\n[いかにしてわたしは Google に入社し、そして退職したか - The Decisive Strike](https://knagayama.hatenablog.com/blog/2019/03/30/100625)\n[私はこうやって（１２年前） Google に入った – CTRL+x CTRL+s](https://ctrl-x-s.blog/2019/03/25/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%EF%BC%88%EF%BC%91%EF%BC%92%E5%B9%B4%E5%89%8D%EF%BC%89-google-%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F/)\n[私はこうやってGoogleに入った (ソフトウェアエンジニア、中途採用編) – ほげ.ブログ](https://hoge.blog/2019/03/25/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%EF%BC%88%EF%BC%91%EF%BC%91%E5%B9%B4%E5%89%8D%EF%BC%89-google-%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F/)\n[Google に入るまでの話 · GitHub](https://gist.github.com/kinu/b85f99c41c87cf59c20d1bac523b8fbf)\n[私はこうやってGoogleに入った（新卒ソフトウェアエンジニア） - n-yoda's blog](http://ny.hateblo.jp/entry/2019/03/29/010611)\n[私はこうやってGoogleに入りました（Reiko編） – Reiko at Work – Medium](https://medium.com/@reiko_at_work/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6google%E3%81%AB%E5%85%A5%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F-reiko%E7%B7%A8-e53e265c3871)\n[こうしてわたしは Google に入社した（非技術職・意識低い編） - Naomi says,](http://naomi14.hatenablog.com/entry/2019/03/28/154957)\n[未経験から独学でプログラミングを身につけて新卒でグーグルに入った話 · GitHub](https://gist.github.com/kenichi-fukushima/c58345502a99a1f218eb143bf17aa303)\n[私はこうして Google に入った (SWE・新卒編) - ふしみのブログ](https://rfushimi.hatenablog.jp/entry/2019/03/26/233131)\n[自分がGoogleに入った時の話 – Tsutomu Ohkura – Medium](https://medium.com/@ohkura/%E8%87%AA%E5%88%86%E3%81%8Cgoogle%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E8%A9%B1-45e017acbbfc)\n[或曰: 私はこうしてGoogleスイスに入った](https://blog.issei.org/2019/03/google.html)\n[Googleってとこにソフトウェアエンジニアで入ったんですけど](https://anond.hatelabo.jp/20190328210347)\n[G社に内定した - 更新しない備忘録改二](https://odashi.hatenablog.com/entry/20160927/1474995927)\n\n----\n\nURLの一覧からRubyでタイトルを取得するコード。\n\n```ruby\nrequire 'open-uri'\nrequire 'cgi'\n\nentities = [\n    ['https://takeda25.hatenablog.jp/entry/2019/04/02/002028', 'https://twitter.com/takeda25'],\n    ['https://odashi.hatenablog.com/entry/2019/04/01/185355', 'https://twitter.com/odashi_t'],\n    ['http://kumagi.hatenablog.com/entry/how-i-enter-google', 'https://twitter.com/kumagi'],\n    ['https://tjo.hatenablog.com/entry/2019/03/27/123000', 'https://twitter.com/TJO_datasci'],\n    ['https://gist.github.com/kosamari/20dd4c0359b7a429e6a5a7db2bf2db06', 'https://twitter.com/kosamari'],\n    ['https://knagayama.hatenablog.com/blog/2019/03/30/100625', 'https://twitter.com/KazushiNagayama'],\n    ['https://ctrl-x-s.blog/2019/03/25/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%EF%BC%88%EF%BC%91%EF%BC%92%E5%B9%B4%E5%89%8D%EF%BC%89-google-%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F/', 'https://twitter.com/hidetokazawa'],\n    ['https://hoge.blog/2019/03/25/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%EF%BC%88%EF%BC%91%EF%BC%91%E5%B9%B4%E5%89%8D%EF%BC%89-google-%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F/', 'https://twitter.com/r_ima'],\n    ['https://gist.github.com/kinu/b85f99c41c87cf59c20d1bac523b8fbf', 'https://twitter.com/kinu'],\n    ['http://ny.hateblo.jp/entry/2019/03/29/010611', 'https://twitter.com/n__yoda'],\n    ['https://medium.com/@reiko_at_work/%E7%A7%81%E3%81%AF%E3%81%93%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6google%E3%81%AB%E5%85%A5%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F-reiko%E7%B7%A8-e53e265c3871', 'https://twitter.com/WorkReiko'],\n    ['http://naomi14.hatenablog.com/entry/2019/03/28/154957', 'https://twitter.com/NaomiIto14'],\n    ['https://gist.github.com/kenichi-fukushima/c58345502a99a1f218eb143bf17aa303', 'https://twitter.com/k__e_n_i'],\n    ['https://rfushimi.hatenablog.jp/entry/2019/03/26/233131', 'https://twitter.com/fushimir'],\n    ['https://medium.com/@ohkura/%E8%87%AA%E5%88%86%E3%81%8Cgoogle%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F%E6%99%82%E3%81%AE%E8%A9%B1-45e017acbbfc', 'https://twitter.com/ohkura'],\n    ['https://blog.issei.org/2019/03/google.html', 'https://twitter.com/issei_swe'],\n    ['https://anond.hatelabo.jp/20190328210347', nil],\n    ['https://odashi.hatenablog.com/entry/20160927/1474995927', 'https://twitter.com/odashi_t'],\n]\n\nurls = []\ntwitters = []\ntitles = []\n\nentities.each do |url, twitter|\n  open(url).read.match(/<title>(.+)<\\/title>/)\n  title = CGI.unescapeHTML($1)\n\n  puts \"[#{title}](#{url})\"\n\n  urls << url\n  twitters << twitter\n  titles << title\nend\n\nputs entities.size\nputs urls.uniq.size\n```\n","created_at":"2019-04-14T13:16:56+09:00","id":"dace2771dd65b0871d23","tags":[{"name":"Ruby","versions":[]}],"url":"https://qiita.com/ts-3156/items/dace2771dd65b0871d23"},{"title":"ユースケースから始めるドメイン駆動設計","body":"ソフトウェア開発手法「ICONIX（アイコニクス）プロセス」の整理\n\n##### 概要\nICONIXプロセスの思想は「漸進的な反復と洗練による継続的な改善」。\n\n\n##### ICONIXプロセスのワークフロー\n1. 要求段階\n 1-1. 機能要求：システムが提供する機能を定義  \n 1-2. ドメインモデリング：問題領域の理解（ユビキタス言語の定義）※作業時間目安：2時間  \n 1-3. 振る舞い要求：最初のユースケース（ドラフト版）を作成  \n 1-4. 要求レビュー：ユースケースが顧客要求を満たしているか確認  \n2. 分析・予備レビュー  \n 2-1. ロバストネス分析：ロバストネス図を使ってユースケース記述を書き直す  \n 2-2. ドメインモデルを更新（作業：見落としていたクラスの発見や曖昧だった部分を修正したり、属性の追加）  \n 2-3. システムに機能名をつける  \n 2-4. ユースケース（ドラフト版）を更新  \n3. 予備設計レビュー  \n4. 詳細設計  \n 4-1. ユースケースごとにシーケンス図を作成（シーケンス図の目的はクラスの責務割当て）  \n 4-2. ドメインモデルを更新（ドメインオブジェクトに操作を追加）  \n ドメインオブジェクトはエンティティとなり、ドメインモデルは静的クラス（クラス図）へ生まれ変わる  \n 4-3. 静的モデルの整理  \n5. 詳細設計レビュー\n6. 実装\n\n##### 学習範囲\n1-2.ドメインモデリングと1-3.振る舞い要求まで \n\n##### ドメインモデリング\n[目的] \nドメインモデリングはプロジェクトで利用される共通言語（辞書）を作成する作業。 \nドメインモデリングの目的はプロジェクトメンバー全員に明確な用語で問題領域を確実に理解させること。 \nプロジェクトのドメインモデルはスコープを定義しユースケース作成の基盤とする。 \n最初のドメインモデリングからユースケースを作成していく過程でドメインモデルを固めていく。 \n\n[ガイドライン]\n現実世界（問題領域）に焦点をあてる \nオブジェクト間の関係は汎化（A is B)、集約(A has B)を利用 \n最初のドメインモデリングにかける時間は2時間が目安 \n問題領域の主要な概念を中心にクラスを構成する \nドメインモデルとデータモデルはイコールではない \nオブジェクト（単一インスタンスを表現した存在）とDBのテーブルを混同しない \nドメインモデルをプロジェクトの共通言語として利用する \n名前が曖昧にならないようにユースケースを書く前にドメインモデルを作成する \n最終的なクラス図とドメインモデルは正確に一致するとは限らない \n画面やその他GUI固有の部品クラスを配置しない \n\n[MEMO」\n\n| 関係       | 記号 | 説明 |    \n|:-----------------|:-----------------|:-- |\n| 汎化（A is B)| A --▷ B|AはBである（例：テレビは家電である）|\n| 集約(A has B) |A ◇-- B  | AはBをもっている（例：ソニーはテレビを持っている）|\n\n\n##### 振る舞い要求（最初のユースケース）\n[目的] \nユースケースはシステムの振る舞い要求を得る為の構造化された手法。 \n具体的には「ユーザーはこのシステムで何をしたいのか。」「ユーザーは何を得たいのか。」といった疑問に答える。 \n\n[ガイドライン] \nユースケースのシナリオは「基本的なシナリオ」と「例外的なシナリオ」を用意する \nユースケースはドメインモデルで用いた単語を使って記述する \n設計が可能となるユースケースを書く \nユースケース記述は2段階以内で記述する \nアクターとユースケース図を使ってユースケースを組織化する \nユースケースは叙述的に記述する \nイベントの応答の流れとしてユースケースを記述し、ユーザーとシステムの対話の両側を記述する \nGUIプロトタイプや画面モックアップを使う \nユースケースは実行時の振る舞いの仕様である \n名詞 - 名詞 -動詞という構文に従って記述する \nバウンダリングクラス（システムと外部の境界）の名前を使う※ログイン画面、決済画面など \n\n[MEMO] \nユースケースの関係\n\n| 関係       |       説明 |    \n|:-----------------|:------------------|\n| A --▷ B| AはBの一種|\n| A \\<\\<invokes\\>\\> B |Aが実行中にBが実行される |\n| A \\<\\<precedes\\>\\> B |Bの実行前にAが完全に実行されている|\n","created_at":"2019-04-14T13:13:10+09:00","id":"0c9a69d120cddb53a36a","tags":[{"name":"DDD","versions":[]},{"name":"ICONIX","versions":[]},{"name":"ユースケース","versions":[]},{"name":"ドメインモデル","versions":[]}],"url":"https://qiita.com/minarai/items/0c9a69d120cddb53a36a"},{"title":"Laravel × PostgreSQL をHerokuへデプロイする","body":"## ■はじめに\n\nLaravelで作成したWebアプリケーションをHerokuの本番環境にデプロイするまでの手順をまとめます。Laravelを用いるとドキュメントルートの設定だったり、マイグレーションの設定が必要なので注意が必要です。環境変数の設定で非常に手こずりました。  \n[Herokuの推奨DBがPostgreSQL](https://jp.heroku.com/postgres)だったのでDBはPostgreSQLを用います。[拡張機能](https://elements.heroku.com/addons/heroku-postgresql)もサポートされている様。  \nまた、手軽にstaging/production環境を作成できる[Heroku Pipeline](https://devcenter.heroku.com/articles/pipelines)を利用します。  \nWebアプリケーションの開発自体はVirtualBoxにCentOSを立てて行います。\n\n## ■構築環境\n- Heroku\n- Laravel5\n- PostgreSQL\n\n## ■事前準備\n### Heroku CLIのインストール\n\n- 基本ブラウザのGUIでやる想定なので念のためインストール\n\n```sh:bash\n$ brew install heroku/brew/heroku\n$ heroku --version # 確認\n```\n\n### Herokuのアカウント作成\n\n- [こちら](https://jp.heroku.com)からアカウントを作成する\n- クレジットカード情報を入力すれば無料のdyno時間が**550時間→1000時間**になるので、登録しておいた方が良い\n\n### Herokuへログイン\n\n```sh:bash\n$ heroku login\n```\n\n## ■Heroku側の設定\n\n### アプリの作成\n\n- staging環境用とproduction環境用のアプリをそれぞれ作成する\n\n### Heroku Pipelineの設定\n\n- New > create New Pipeline を押しパイプラインを作成\n- 作成したパイプラインのstaging,productionにそれぞれのアプリを割り当てる\n- それぞれのアプリで**Github連携**をする(staging環境は**developブランチ**,production環境は**masterブランチ**)\n- staging環境は**自動デプロイ**の設定をすることで、developへマージされると自動でアプリがデプロイされる\n- **Review Apps**を有効にすることでPR作時に確認用のアプリケーションが作成される\n\n### Review Appsの設定\n\n1. REVIEW APPS > Enable Review Appsを押す\n2. parent appにstagingのアプリを選択し`Create an app.json File`を押す\n3. 後で直接編集すれば良いので、app.jsonの設定値を入力する画面はスルーでOK\n4. 今回は下記の様なapp.jsonを用意する\n\n```json:app.json\n{\n    \"addons\": [\n      \"heroku-postgresql\"\n    ],\n    \"buildpacks\": [\n\n    ],\n    \"description\": \"review app\",\n    \"env\": {\n        /* staging環境の環境変数 */\n    },\n    \"formation\": {\n    },\n    \"name\": \"<アプリ名>\",\n    \"scripts\": {\n      \"postdeploy\": \"php artisan migrate --force\"\n    },\n    \"stack\": \"heroku-18\"\n  }\n```\n\n### PostgreSQLのAdd-onの追加\n\n1. ブラウザでHerokuにログイン\n2. アプリ名 > Resources > Add-ons で`Heroku Postgres`を検索\n3. `Hobby Dev -Free`を選択\n\n## ■ソース側の設定\n\n### Webアプリケーションの作成\n\n- [Laravel 開発環境の構築（CentOS7）](https://qiita.com/koukibuu3/items/300ce50a9acb8674ccf3)を参考にLaravelプロジェクトを作成\n- PostgreSQLの導入方法は[CentOSにPosgreSQLの環境構築](https://qiita.com/koukibuu3/items/9a409a1256a8cf02e053)を参考\n\n### Procfileの生成\n\n```config:Procfile\nweb: vendor/bin/heroku-php-apache2 public/\n```\n\n- アプリディレクトリ直下に上記Procfileを生成\n- ProcfileはHerokuアプリの起動時に実行されるプロセスを記載する\n- ここではApacheの使用の指定と、ドキュメントルートの設定を行う\n- Procfileはきちんとコミット対象に含めること\n\n\n## ■環境変数の設定\n\n- 以下の手順をstaging環境とproduction環境両方のアプリに対して行う\n\n### DATABASE_URLの値を元に環境変数を設定\n\n```sh :bash\n$ heroku config:get DATABASE_URL -a <アプリ名>\npostgres://<ユーザ名>:<パスワード>@<ホスト名>:5432/<DB名>\n```\n\n### Heroku CLIで設定\n\n```sh:bash\n# DB種類\n$ heroku config:set DB_CONNECTION=pgsql -a <アプリ名>\n# ユーザ名\n$ heroku config:set DB_USERNAME=<ユーザ名> -a <アプリ名>\n# パスワード\n$ heroku config:set DB_PASSWORD=<パスワード> -a <アプリ名>\n# ホスト名\n$ heroku config:set DB_HOST=<ホスト名> -a <アプリ名>\n# DB名\n$ heroku config:set DB_DATABASE=<DB名> -a <アプリ名>\n# APPキー\n$ heroku config:set APP_KEY=$(php artisan key:generate --show) -a <アプリ名>\n\n# まとめて設定(その1)\n$ heroku config:set DB_CONNECTION=pgsql DB_USERNAME=<ユーザ名> DB_PASSWORD=<パスワード> DB_HOST=<ホスト名> DB_DATABASE=<DB名> APP_KEY=$(php artisan key:generate --show) -a <アプリ名>\n\n# まとめて設定(その2)\n$ heroku config:set DB_CONNECTION=pgsql -a <アプリ名> $(heroku config:get DATABASE_URL -a <アプリ名> | awk '{print gensub(/postgres:\\/\\/(.+):(.+)@(.+):5432\\/(.+)/, \"DB_USERNAME=\\\"\\\\1\\\" DB_PASSWORD=\\\"\\\\2\\\" DB_HOST=\\\"\\\\3\\\" DB_DATABASE=\\\"\\\\4\\\"\", \"g\")}')\n```\n\n### 設定内容の確認\n\n```sh:bash\n$ heroku config -a <アプリ名>\n=== <アプリ名> Config Vars\nAPP_KEY:       <APPキー>\nDB_CONNECTION: <DB種類>\nDB_DATABASE:   <DB名>\nDB_HOST:       <ホスト名>\nDB_PASSWORD:   <アプリ名>\nDB_USERNAME:   <ユーザ名>\n```\n\n- 正常な値がAPP_KEYの項目に設定されていないため、ここで生成された<APPキー>を、ブラウザ **(アプリ名 > Setting > Config Vars)** より、設定し直してあげる必要がある\n- ここまでやれば、アプリ名 > Open app からアプリを起動することで、無事にLaravelのサンプルページが表示されているはず\n- `$ heroku open -a <アプリ名>` でも可\n\n### DBのマイグレーション\n\n```sh:bash\n$ heroku run php artisan migrate -a <アプリ名>\n\n# マイグレーションをやり直す場合\n$ heroku run php artisan migrate:refresh --seed -a <アプリ名>\n```\n\n## ■参考\n\n- [Laravelをherokuにデプロイする(データベースはPostgreSQL)](https://qiita.com/tamappe/items/14a4e6890ecef4d49d1f)\n- [Laravel + Heroku + HerokuPostgres でDB設定をサクッと環境変数に突っ込む](https://qiita.com/kamukiriri/items/1c5e17872c2fcefa1678)\n- [Heroku Pipelineを使ってみる](https://qiita.com/yo-iida/items/f99566fe4617f848fa39)\n","created_at":"2019-04-14T13:04:19+09:00","id":"2ddc8bd2426f9b33fe4c","tags":[{"name":"Heroku","versions":[]},{"name":"PostgreSQL","versions":[]},{"name":"laravel","versions":[]}],"url":"https://qiita.com/koukibuu3/items/2ddc8bd2426f9b33fe4c"},{"title":"Microsoft Azure資格 (AZ-101) を取得するまでにやったお勉強のお話","body":"# はじめに\nMicrosoft Azure の資格の一つである AZ-101 を取得したので、\n勉強した内容&所感についてメモします\n（試験内容には触れていません)\n\nAZ-100についてはこちらの記事を参照いただければと思います\n(https://qiita.com/spinrock/items/294ce7e3cf2b306fea81)\n\n※ 5月で資格体系が変わって(?)、AZ-100(もしくはAZ-103)だけでAdministrator資格となるそうです  \n(https://blogs.partner.microsoft.com/mpn-japan/2019/03/21/simplifying-the-certification-path-for-microsoft-certified-azure-administrator-associate/)\n\n# AZ-101について\nhttps://www.microsoft.com/ja-jp/learning/azure-exams.aspx#exam-az-101-section  \nこちらを参照のこと\n\n# 事前知識\n+ 普段は仮想化サーバ(vSphere)などを触ってます\n+ AWSのAssociate資格を取得できるくらいには趣味レベルでクラウドサービスを使っています\n+ 実際のAzure構築経験はありません\n+ Azureポータルはそこそこ触っていました、主に以下の部分(AZ-100の範囲)\n  + IaaS(VM/Storage/VNETなど)周り\n  + VPN Gateway を用いたサイト間VPN周り(Azure-vSphere/AWSは試してみた)\n  + Azure Migrate (手元のvSphere環境にデプロイして遊んだ程度)\n\n# やったこと(ほぼAZ-100と同じです)\n+ mstepへの登録しました\n  + Azureの仕組みを学ぶスライドでざっくり仕組みを学びました\n+ 練習用のWeb問題集を解きました(不明点は以下で解消しました)\n  + Azureの無料アカウントに登録して実機検証しました\n  + Microsoft のドキュメントを読み込みました  \n    (私は、問題集の問題を自分で答えを導き出せるように簡易的な解説をまとめました)\n+ udemyで出ている資格勉強用動画の視聴しました  \n  (https://www.udemy.com/ja/)\n+ その他、参考にした書籍\n  + 「Azureテクノロジ入門 2019」\n  + 「ひと目でわかるAzure Active Directory 第2版」\n\n# 試験が終わったあとの個人的な所感\n+ Load Balancer/WebApp/FunctionApp周りについて理解できてなかった部分が多いと感じました  \n  + AWSのLambdaなどで遊んでいた時の知識(なんとなくレベル)を基に消去法で選択しました  \n  (正解していたのかどうかは今となってははっきりしませんが、、、)\n+ やっぱり英語は苦手\n","created_at":"2019-04-14T12:58:47+09:00","id":"4a0e822eb88bcc2f0fa6","tags":[{"name":"Azure","versions":[]},{"name":"資格勉強","versions":[]}],"url":"https://qiita.com/spinrock/items/4a0e822eb88bcc2f0fa6"},{"title":"MotoGP Grand Prix of the Americas 2019 live stream","body":"MotoGP Grand Prix of the Americas 2019 live stream\n\n\n#Click Here : http://bit.ly/2ZaGSDd\n\n#Click Here : http://bit.ly/2ZaGSDd\n\n\nMotoGP Grand Prix of the Americas 2019 live stream\nMotoGP Grand Prix of the Americas 2019 \nMotoGP Grand Prix\nMotoGP \n\n.\n.\n.\n.\n.\n","created_at":"2019-04-14T12:58:37+09:00","id":"a3b8abe03857f5569584","tags":[{"name":"prix","versions":[]},{"name":"MOTOGP","versions":[]},{"name":"Grand","versions":[]}],"url":"https://qiita.com/eyasinsu/items/a3b8abe03857f5569584"},{"title":"React, Reduxのお型付け","body":"[ブログ](https://mrsekut.site)を消そうかと思うので、一部の記事をQiitaへ移行してきました。\n2019/2/21に投稿したものです。\n\n\nReact, ReduxのTypeScriptでの型付けの個人的ベストプラクティスです。\n勉強会で発表したので簡単にブログにまとめます。\n\n\n# はじめに\nスライドは以下のページにあります。\n\n【参考】[React, Reduxのお型付け](https://scrapbox.io/public-mrsekut/React,_Redux%E3%81%AE%E3%81%8A%E5%9E%8B%E4%BB%98%E3%81%91)\n\n# コンセプト\n型の付け方には様々な方法があると思いますが、今回は以下のようなコンセプトで進めていきます。\n\n- 楽に\n- 安全に\n- 外部ライブラリに頼らずに\n\n「楽に」というのは、型の記述量を減らすという意味です。\n今実際開発しているプロダクトでは、一つのactionを追加するたびに、型を明示するために追記しないといけない部分が複数箇所にわたってしまっていました。\n今回は、それを改善するためにいろいろ工夫したものを紹介します。\n\n外部ライブラリというのは、typescript-fsaやtypesafe-actionsやredux-actionなどのことですが、メンテナンスなどの事も考えて、今回は何も使わずに型を付ける方法を紹介します。\n\n# 実はハンズオンです\n\nコードは以下です。\n\n【参考】[mrsekut/react-redux-with-typescript-handson](https://github.com/mrsekut/react-redux-with-typescript-handson/tree/all-any-type)\n\nとても小さいReduxプロダクトを用意しました。\n「+」と「-」があって数字を増やすだけのものです。\n\n「all-any-type」というブランチがあります。\nこれはすでに動く状態ですが、全てany型になっています。\nこれを一緒に型安全なものにしていきます。\n\n## 準備\n「all-any-type」ブランチを指定してクローンしてください。\n\n`$ git clone -b all-any-type https://github.com/mrsekut/react-redux-with-typescript-handson.git`\n\n`$ cd react-redux-with-typescript-handson`\n\nreactなどの依存パッケージをインストールします。\n`$ npm i`\n\nTypeScriptを監視状態でコンパイルします。\n`$ npm run tsc`\n\n別のターミナルで、以下を実行するとブラウザで動きを確認します。\n型をつけるだけなので最初から最後まで目に見える変化はありません。\n`$ npm start`\n\n# TypeScriptのキホン\n軽くTypeScriptの型の基本の話をします。\n必要のない方は飛ばしてください。\n\n## とりあえずこれさえ知っておけば大丈夫\nTypeScriptの型システムの話は、潜り込むとどこまでも深くて大変ですが、まずは以下の4種類ほど知っておけば耐えます。\n\n- number: 42とか\n- string: “hoge”とか\n- boolean: true, falseとか\n- any\n    - なんでもいけるやつ\n\n数値は整数や浮動小数点数などの区別はなく、同じnumberで型を付けます。\n\nanyは万能型で、何にでも対応できる型です。\nただし、これだけだと型のパワーの恩恵を受けられなくなるので、使うのは極力避けたいです。\n\n## 関数の型の書き方\nJSはすべてオブジェクトなこともあり、関数の型の書き方はいくつかあるのですが、今回は以下の形に統一します。\n\n`(任意の引数名: 引数の型) => 戻り値の型`\n\n```ts\n// number型の引数を一つ取って、戻り値のない関数\naddFunc: (num: number) => void;\n```\n\n## 型を自作する\n\nTypeScriptで型を自作するには2つの方法があります。\n微妙な差はありますが、まずは気にしなくても大丈夫です。\n\n### “type”で型に別名を付ける\n```ts\n// name, ageを持ったオブジェクトに「Person」と命名\ntype Person = {\n  name: string;\n  age: number;\n};\n```\n\n### “interface”でクラスやオブジェクトの仕様を決める\n```ts\ninterface Person {\n  name: string;\n  age: number;\n}\n```\n\n### ちなみにVSCodeでは\n\nVSCodeでは、変数はhoverするとその型を確認できますが、typeで作った型では中身を見れるのでちょっと便利です。\n![1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/f816c2f5-e6a1-7491-96ba-fa135fac39a4.png)\n\ninterfaceでは見れません。\n![3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/eac16165-0976-2835-8444-652504a04079.png)\n\ntypeとinterfaceの違いが知りたい方は以下の記事などを参考にしてみてください。\n\n【参考】\n\n- [Interface vs Type alias in TypeScript 2.7 – Martin Hochel – Medium](https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c)\n- [TypeScriptのInterfaceとType aliasの比較 – Qiita](https://qiita.com/tkrkt/items/d01b96363e58a7df830e)\n\n# では、型付けしていきましょう\n\nここから実際に、[これ](https://github.com/mrsekut/react-redux-with-typescript-handson)に型を付けていきます。\n実際に型を付け終わったものは[別のブランチ](https://github.com/mrsekut/react-redux-with-typescript-handson/tree/added-types)にあります。\n\n# Presentational Componentに型を付ける\nPresentational Componentというのは、Reduxと接続していない小さなコンポーネントたちのことを指します。\nプロダクトの大半がこのコンポーネントになります。\n\n## Counter/index.tsx\n[src/components/Counter/index.tsx](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/components/Counter/index.tsx)\n\n数値を表示するだけのコンポーネントです。\n以下のように型を付けます。\n\n![4.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/11400d13-c938-3bb6-0135-898497e47403.png)\n@types/reactとして用意されている`React.FC<T>`型を使います。\nFCはFunctional Componentの略ですね。\n\n`T`の部分にはプロパティを定義した自作の型をはめ込みます。\nここでは、親から受け取るnumber型のnumを書いています。\n\npropsは基本的に書き換えることはないので、readonlyで縛ることでより頑強になります。\n\n`Readonly<T>`というのはTypeScriptに用意されている型で、Tのプロパティをすべてreadonlyにした型をつくります。\n\nつまり、以下のように全プロパティに「readonly」と書いても同じです。\n<img width=\"207\" alt=\"5.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/b2c86f00-3461-0056-981d-5eff3e10ada3.png\">\n\nですが、全部に全部「readonly」と書くのも面倒なので、Readonly<T>で囲うことで少し楽ができます。\nホバーすると全く同じ様に型が当たっているのがわかるかと思います。\n<img width=\"338\" alt=\"66.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/dfc3398b-c0bb-26a5-79be-145b9eb5ddd4.png\">\n\n\n簡単ですね。\n以上のようにしてCounterコンポーネントに型が付きました。\nホバーすると型が適用されているのを確認できます。\n<img width=\"513\" alt=\"7.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/04831a9b-c8d7-7e1d-1dd8-85964bde6850.png\">\n\nこの調子で型付けをしていきます。\n\n## Button/index.tsx\n\n[src/components/Button/index.tsx](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/components/Button/index.tsx)\n\nその名の通り、ボタンのためのコンポーネントです。\nReact.FC<T>を使うなど、さきほどとだいたい同じです。\n![8.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/e5cc0841-27e2-884b-a024-f26dd5114e38.png)\n\n違う部分は任意の関数を使っている点と、childrenを使っている点です。\n\nButtonPropsの中の「onClick?」の疑問符は任意のプロパティであることを示します。\nこのButtonコンポーネントを使う時にonClick属性はあってもなくても良いということです。\n\n## @types/reactで用意されているカタガタ\n@types/reactには、似たような型がいくつかありますが、一部紹介します。。\n\n- `React.ReactElement`\n    - divやpのような仮想DOMを表す\n    - HTMLElementのReact版のようなもの\n- `React.ReactChild`\n    - ReactElementもしくはstringもしくはnumberを表す\n- `React.ReactNode`\n    - ReactElement, Fragment, Portals, primitiveな型\n\nいろいろありますが、childrenに対しては、React.ReactChildを使っておけば問題なさそうです。\n\n# 型を付けて何が嬉しいのか\n閑話休題。\nそもそもの話ですが、Reactを開発する上でコンポーネントに型を付けて何が嬉しいのかについてです。\n\n共同開発をするときや、外部ライブラリとして使うコンポーネントがあるときに、型があることでそのコンポーネントの作者の意図と反した使い方をするのを防ぐことができます。\n\nいまさっき作ったButtonコンポーネントの仕様はButtonPropsで定義しましたが、これと異なる使われ方をするとコンパイルエラーで知らせてくれます。\n![9.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/e04ca2e3-a253-081c-379c-215591f797f5.png)\n\n\n# Reduxに型を付ける\nでは、次にRedux側に型を付けていきます。\n今回はDucksデザインパターンを採用しており、actionやreducerはmodule.tsという1つのファイルの中に定義しています。\n\n# actionに型を付ける\n\n[src/modules/module.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/modules/module.ts)\n\nここで用意するactionは「+」「-」各ボタンを押したときに実行されるものです。\nasはキャストです。\n\n![10.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/2aa2d866-12d4-b1f5-c07c-789b03cd3d38.png)\n\n予め作っておいたActionTypesでキャストすることで型が付きます。\n\nこの書き方をすることで、わざわざactionを書くたびにそれようの型を書かなくて済みます。\n\n今までは以下のように書いていました。\n一つのaction一つのinterfaceを作っていたのでとても冗長になってしまっていました。\n<img width=\"579\" alt=\"11.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/a6b55dba-e145-f70e-cbcb-1935e10267af.png\">\n\n\n## module全体のactionに型を付ける\n\n[src/modules/module.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/modules/module.ts)\n\nあとでreducerに渡すためにmodule全体のactionに型を付けます。\n![12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/b824866b-97d7-37c2-c1a0-9ca6ac506740.png)\n\nここではTypeScriptのちょっとテクった書き方をしています。\n\n`typeof hoge`はhogeの型を表します。\nここではactionそれぞれの関数の型になります。\n\n`ReturnTypes<T>`もTypeScriptが用意しているもので、Tが関数の型の場合、その戻り値の型になります。\n\nReturnTypes<T>自体はconditional typesを使って以下のように定義されています。\n\n```ts\ntype ReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : any;\n```\n\nパイプ「|」はUnion typesです。\n\n# global stateに型を付ける\n\n[src/modules/module.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/modules/module.ts)\n\nglobal stateの型を付けます。\nstateの初期値の宣言などでも使います。\n\nこれもpropsのときと同じ様にreadonlyを付けています。\n![13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/82ba9f76-6861-4197-ae4b-6327616527cb.png)\n\n\n# Reducerに型を付ける\n\n[src/modules/module.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/modules/module.ts)\n\n![14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/edda0df0-5b81-1896-3521-2edc61387184.png)\n\nreduxが用意している`Reducer<S, A>`型と先ほど定義したmoduleのactionと、global stateの型を使います。\n\nもう一点工夫している箇所が、上記のコードの最後のdefaultの部分でnever型を使っている点です。\n\n`never`には`never`型の値しか入りません。\nコレを使って、union typesで定義したMainAction型に対して、switch文のcaseの漏れを防ぐことができます。\n\n例として、今回のコードの一つの分岐をコメントアウトすると、コンパイルエラーになるのがわかります。\n<img width=\"541\" alt=\"15.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/83346f81-f883-f2d7-42a4-f430288688e9.png\">\n\n今回の例では、actionは2つしかないので、漏れが出ることはないと思いますが、プロダクトが大きくなってくるとこの分岐が増えていきます。\n最初にreducerを作る時点でこの一行を書いておくことで、actionが増えてきてもうっかり書き忘れることを防ぐことができます。\n\n【参考】\n\n- [TypeScript 2.0のneverでTagged union typesの絞込を漏れ無くチェックする – Qiita](https://qiita.com/wadahiro/items/9ec4af968a7314402499)\n- [Never Type – TypeScript Deep Dive 日本語版](https://typescript-jp.gitbook.io/deep-dive/type-system/never)\n\n# Storeに型をつける\n\n[src/store.ts](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/all-any-type/src/store.tsx)\n\nstore自体に型をつけるわけではないですが、各moduleで定義した型をここでまとめます。\n![16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/f891a37e-4ec1-69fa-d933-034e5328543d.png)\n\n一番下の行のActionはreduxで用意されている型です。\n\n# Container Componentに型をつける\n\n[src/containers/index.tsx](https://github.com/mrsekut/react-redux-with-typescript-handson/blob/added-types/src/containers/index.tsx)\n\nこれで最後です。\ncontainer componentというのはReduxと接続しているコンポーネントのことです。\n\nまずはstateやactionをpropsに変換する関数に型を付けます。\n`Dispatch<T>`はreduxで用意されている型です。\n![17.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/7e975e2d-299d-ede1-3306-ad1a498b8113.png)\n\n次に、containerのpropsに型を付けます。\n上記2つの関数の`ReturnTypes`を使います。\n![18.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/a7cfc052-69c9-4967-4113-a7b214d028f4.png)\n\nこの型をReact.FC<T>を使ってコンポーネントに当てます。\n![19.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186534/0b564858-2415-5525-402d-a87b64eb23f0.png)\n\n\n# おわり\nお疲れ様でした。\nこれでプロダクト全体に型が行き渡り、再び息を吹き返しました。\nこんな感じで型を当てていくと、楽に、安全に、当てられるのではないでしょうか。\n\n# 参考\n- [piotrwitek/react-redux-typescript-guide: The complete guide to static typing in “React & Redux” apps using TypeScript](https://github.com/piotrwitek/react-redux-typescript-guide)\n- [typescript-fsaに頼らないReact × Redux – ログミーTech](https://logmi.jp/tech/articles/320496)\n- [React Reduxを型で縛ってみよう – Tech Blog – Recruit Lifestyle Engineer](https://engineer.recruit-lifestyle.co.jp/techblog/2019-01-31-how-to-bind-react-with-Flow/)\n","created_at":"2019-04-14T12:55:30+09:00","id":"a0cc644b424762278c20","tags":[{"name":"TypeScript","versions":[]},{"name":"React","versions":[]},{"name":"redux","versions":[]}],"url":"https://qiita.com/mrsekut/items/a0cc644b424762278c20"},{"title":"unity組み込みスクリプト言語","body":"何年か前にも調べたんだが、今更。\n\n# 非言語\n\n## ビジュアル\n\n- [ConstellationLanguage/Constellation: Constellation is a visual scripting language for unity that gives you the tools of a programmer without having to write a single line of code\\. Its goal is to give a user friendly approach to programming\\. It's currently in alpha, which means it’s going to evolve and improve the next few months\\.](https://github.com/ConstellationLanguage/Constellation)\n- [Bolt: Visual Scripting for Unity](https://ludiq.io/bolt)\n- 内蔵すると言ってる？ [Unity3D getting Visual Scripting in 2019\\.2 \\- Unity Forum](https://forum.unity.com/threads/unity3d-getting-visual-scripting-in-2019-2.577084/)\n\n## ノベルゲーム専用\n\n- [イギリスのゲームスタジオinkleがUnityとも連携可能なゲーム開発用スクリプト言語「ink」およびink用IDE「Inky」をオープンソースで公開中。 \\| AAPL Ch\\.](https://applech2.com/archives/20180501-ink-the-powerful-scripting-language.html)\n- [ink \\- inkle's narrative scripting language](https://www.inklestudios.com/ink/)\n\n# 言語\n\n## lua\n\n抜きん出でバリエーションが多い\n\n- [MoonSharp](http://www.moonsharp.org/)\n- [Unity Lua Interface Library \\- Asset Store](https://assetstore.unity.com/packages/tools/integration/unity-lua-interface-library-391)\n- [NLua/NLua: Bridge between Lua and the \\.NET\\.](https://github.com/NLua/NLua)\n- [xebecnan/UniLua: A pure c\\# implementation of Lua 5\\.2 focus on compatibility with Unity](https://github.com/xebecnan/UniLua)\n\nサポート終わったらしいものは除外\n\n### [Tencent/xLua: xLua is a lua programming solution for C\\# \\( Unity, \\.Net, Mono\\) , it supports android, ios, windows, linux, osx, etc\\.](https://github.com/Tencent/xLua)\n\n```csharp\n  Action luaAwake = scriptEnv.Get<Action>(\"awake\");\n  scriptEnv.Get(\"start\", out luaStart); \n```\n\n\n## python\n\n- [exodrifter/unity\\-python: Python plugin for Unity3D](https://github.com/exodrifter/unity-python)\n","created_at":"2019-04-14T12:54:59+09:00","id":"7e42430da160dee04607","tags":[{"name":"Unity","versions":[]},{"name":"embedded","versions":[]}],"url":"https://qiita.com/kamawanu/items/7e42430da160dee04607"},{"title":"iOSアプリエンジニアのためのAndroidアプリ開発入門　その2 〜新規プロジェクト作成編〜","body":"## はじめに（対象読者と内容の方向性）\n\nこの記事は『iOSアプリ開発はやったことあるけど、Androidアプリ開発ははじめて』という方向けにAndroidアプリ開発についてまとめたものです。\n\niOSアプリエンジニア向けなので、『iOSでのこういう機能は、Androidではこうやって実装する』、『iOSではこういう考え方だけど、Androidではこういう考え方で実装する』みたいな形で紹介できればと考えています。\n\n## 免責事項\n\nAndroidアプリ開発初心者が勉強しながら書いているので、たぶん間違いがたくさんあります。勉強していく過程で間違いに気がついたらその都度修正をしますが、「ここ間違ってるで〜」というのがあれば、ぜひツッコンでください。\n\n## 全体の目次\n\n[その1 〜インストール編〜](https://qiita.com/toshi586014/items/28a6dc614f3e8d879e9c)\nその2 〜新規プロジェクト作成編〜　←イマココ\n\n## 新規プロジェクトの作成\n\nまずは、新規プロジェクトを作成します。\n\nここで言うプロジェクトは、Xcodeのプロジェクトと同じように、アプリの内容（ソースコードやリソースなど）をひとまとめにしたものです。\n\n<img width=\"778\" alt=\"02-001.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/35ab951a-e06c-5ae2-9352-7739d2428d8c.png\">\n\n\nWelcom画面で『Start a new Android Studio project』をクリックします。\n\n<img width=\"1012\" alt=\"02-002.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/d3f30a7a-9a8a-db5f-14a2-3e660be1b6db.png\">\n\n\nXcodeと同じように、プロジェクトのテンプレートが表示されるので、これから開発するアプリで使うテンプレートを選択します。今回は、Empty Activityを選択してNextボタンをクリックします。\n\nActivityというのは、画面を表示するためのコンポーネントです（iOSアプリで言うところのViewControllerみたいなものですね）。\n\n今回選んだEmpty Activityは、XcodeのSingle View Appみたいな感じで、空っぽの画面が一つだけあるシンプルなプロジェクトです。\n\n<img width=\"968\" alt=\"02-003.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/e0e68008-01f4-bb6d-b256-91b8f3d18d55.png\">\n\n\nつぎに、プロジェクトの設定画面が表示されます。\n\nNameとPackage nameはそのままにします（たぶん、nameはXcodeのProduct Name、Package nameはXcodeのBundle Identifierだと思います）。\nSave locationはプロジェクトを保存する場所です。そのままでも構いませんが、別の場所がいい場合は変更してください。\nLanguageはKotlinに変更します（Kotlinは最近Androidアプリ開発の公式になった言語です。たぶん、Java→Objective-C、Kotlin→Swiftみたいなイメージではないでしょうか）。\n設定を変更したらFinishボタンをクリックします。\n\n<img width=\"1012\" alt=\"02-004.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/bc8b2be8-e11a-4408-6e8f-52fd1bf19200.png\">\n\n\nインストール画面が表示されるので、しばし待ちます。終わったらFinishボタンをクリックします。\n\n<img width=\"1512\" alt=\"02-005.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/769b01ad-7bdb-b28c-1065-8cd609d64f4e.png\">\n\n\nAndroid Studioのメイン画面が表示されました。やったね！\n\n## Android Studioの画面構成\n\nAndroid Studioの画面構成を、Xcodeと比較しながら、簡単に見てみましょう。\n\n<img width=\"1595\" alt=\"02-006.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/ab9e7489-a8b8-4bad-b4f3-bb6367193eec.png\">\n\n<img width=\"1512\" alt=\"02-007.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/38924/7f4f7e99-48f6-b04f-3394-9109a81d999f.png\">\n\nXcodeと似ているので、なんとく想像できますね。\n\n画面上のツールバーが、Xcodeのツールバーに当たる部分です。Xcodeと同じようにアプリの実行などを行うことができます。\n\n左側のプロジェクトビューが、Xcodeのナビゲータエリアに当たる部分です。プロジェクトが持っているソースファイルや、画像などのリソースファイルなどを一覧表示するエリアです。\n\n右側の編集エリアが、Xcodeのエディタエリアに当たる部分です。画面レイアウトやソースコードの編集をするエリアです。\n\n画面下のツールウィンドウが、Xcodeのデバッグエリアに当たる部分です。アプリを実行しているときのログを表示することができます。\n\n表示したいファイルを選ぶときは、プロジェクトビューでファイルをダブルクリックします。Xcodeと違ってシングルクリックでは表示されないので注意してください。\n\n## 終わりに\n\n細かいところでは違いがありますが、Xcodeと似ているところもあるので、なんとなく親近感がわきますね。\n\nそれでは、次回の更新をお待ちください。\n","created_at":"2019-04-14T12:53:54+09:00","id":"ea6bc2321d3baa57f6ad","tags":[{"name":"Android","versions":[]},{"name":"Xcode","versions":[]},{"name":"iOS","versions":[]},{"name":"AndroidStudio","versions":[]}],"url":"https://qiita.com/toshi586014/items/ea6bc2321d3baa57f6ad"},{"title":"2019 american motogp live stream reddit","body":"Motogp Grnd Prix Of Americs Live Strem Online  TOTAL SPORTEK\n\n\n\n#Click Here : http://bit.ly/2ZaGSDd\n\n#Click Here : http://bit.ly/2ZaGSDd\n\n\n\n1\t\n2\n3\n4\n5\n\n","created_at":"2019-04-14T12:50:45+09:00","id":"66860e8e0ff57b768750","tags":[{"name":"live","versions":[]},{"name":"prix","versions":[]},{"name":"Grand","versions":[]},{"name":"Americas","versions":[]}],"url":"https://qiita.com/shadhin/items/66860e8e0ff57b768750"},{"title":"Node.js,Expressメモ②","body":"さてこいつを組み込みたいぜ！と始めたNode.jsの世界。こんにちは。\n\nExpressのノリを知ってから下のページをみて組み込みの実験をしてみたいと思っています。\nhttps://codepen.io/Ni55aN/pen/xzgQYq\n\nここまでわかってれば簡単に組み込めるのでは！？という気持ちをぐっと抑えて\nまたチュートリアルをやってみます。\n\nhttps://developer.mozilla.org/ja/docs/Learn/Server-side/Express_Nodejs\n\nこちらはこれだけやっとけばExpressのことがいろいろわかっちゃうぜ!という優れもの(まだやっていませんが)\n\n# やっとくといい設定\n①デバックを有効にする。\n`SET DEBUG=express-locallibrary-tutorial:* npm start`\nexpress-locallibrary-tutorialはこれからやるチュートリアルのプロジェクト名です。\nこれをやることでプロンプトにログがでるみたいですね。\n\n②サーバーのオートリロード\n`npm install --save-dev nodemon`\nパッケージをインストールする必要があるみたいです。\n常に必要そうだから-gをつけてインストールしとこうかと思います。\nドラえもんみたいな名前で親しみがわきます。\n\nこれはインストールだけではだめでpackage.jsonに追記する必要があるんですね。\n`\n\"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"devstart\": \"nodemon ./bin/www\" < こっち\n}\n`\n\nこれで①のコマンドをdevstartに書き換えればよいということは\nここの名前は決められたものじゃなさそうなのでいろいろなバリエーションを持てることが予想されます。\n\n\n# script > startの\"bin/www\"?\nプロンプトでstartしたときに呼び出されるスクリプトがさしているファイルもjsのようです。\n前にapp.jsが起動しないと勝手にサーバーのコマンドを書き加えましたがそれは作法と違ったことがわかりました。\nwwwファイルの冒頭でapp.jsが読み込まれています。\nserverの立ち上げなどもこちらで行われているようです。\n\n# アプリケーションの追加\nアプリケーションを追加するときは他のものと同じように読み込んで\n`var indexRouter= require(\"./routes/index\");`\n`var usersRouter = require('./routes/users');`\n\n①viewの設定\nアプリケーションごとに変更可能みたいです\nviewsフォルダ以下の同名のファイルが適応される？\n`app.set(\"views\", path.join(__dirname, \"views\"));`\n`app.set(\"view engine\", \"pug\")`\n\n②リクエスト処理チェーン(というらしい)の設定\n他にも設定されていますがとりあえず文脈的にこれだけ。\nindexは特別扱いで省略できるようです。\n`app.use('/', indexRouter);`\n`app.use('/users', usersRouter);`\n\n# routerとして認識させるには\napp.jsではexpress()そのものを最後にexportsしていますが\nrouterの場合はexpress.Router()というオブジェクトを作ってexportsするみたいです。\n\nappの場合\n`\nvar app = express();\n ---省略---\nmodule.exports = app;\n`\n\nrouterの場合\n`\nvar router = express.Router();\n---省略---\nmodule.exports = router;\n\n# viewsフォルダ\nview engineのファイルが置かれていますが、要するにプログラム的に拡張できるhtmlなのかな?と予想できます。\nGETされてきた値を元にjsで処理して、テンプレートに渡して表示。ということになりそうです。\npugファイルは継承できるんですね。\nrender時に置き換え用のデータを渡すようですが宣言されていない変数はなんなんでしょう。。\ntitleは定型なのかな。\n\nindex.js\n`res.render('index', { title: 'Express' });`\n\n# 最後の課題\nusers.jsに手を加えてusers/coolを表示させるというもの。\nうん。とりあえずわかっていることを実行します。\n①cool.jsの作成。\n　これがないとどうにもならなそうなのでindexをコピーしてリネーム。\n\n②users.jsに構造をつくる\n　フレームワークの合理性から考えてapp.jsのvar appとindexのvar express.Routerは構造は同じなのでは？と\n　思ったのでusersに以下を追加したらちゃんと表示されました。\n`var coolRouter = require(\"./cool\");`\n`router.use(\"/cool\", coolRouter);`\n\nappのuseにはもっといろいろ設定しているので何かやろうとしたときに必要なものもあるかもしれませんが\n最小はこれのようです。\n\nついでにviewsにcool.pugって作っただけで読まれるかどうかの実験をしましたがそれはダメ。\n動的に読まれているわけではないんですね。\nじゃあどこで読んでいるんだろうと思ってみてみたらrender関数の第一引数がそれでした。\n`res.render('cool', { title: 'You are so cool' });`\n\nrenderするときにこのテンプレ使ってね！ってことだったんですね。\nなるほど。\n\n因みにviewsの中を構造化できるのかなとテストしてみたら出来そうです。\nviews/cool.pug を以下に移動 views/test/cool.pug\n記述の変更\n`res.render(\"./test/cool\", {title: \"You are so cool\"});`\n\n注: cool.pugを移動させただけでは1行目のextend(継承)でエラーがでました。\n    layoutを階層にあわせて../layoutにしないとうまくいきません。\nつづく\n","created_at":"2019-04-14T12:50:31+09:00","id":"7f8e57b39b8d86265b66","tags":[{"name":"Node.js","versions":[]},{"name":"Express.js","versions":[]}],"url":"https://qiita.com/hat27/items/7f8e57b39b8d86265b66"},{"title":"澳洲留学挂科学校给了劝退邮件怎么办","body":"澳洲留学挂科学校给了劝退邮件，不能毕业拿不到学位怎么办+Q：575121832\n出国留学同样将面临对各种考试成绩，成绩是衡量学业成效最直观的标尺，但国外大学宽进严出的标准，自律差的学生时间都拿去享乐玩物丧失，耗费了精力没有准备去面临对上课、学习、作业、考试，那么带来的就只有挂科，同时拉低GPA所面临的将是学校的警告处分，部分处分严重的学生甚至还将遭受退学、开除、劝退等处分。\n\n只要作为一名学生，就永远逃脱不了学习、考试。学习中最能打击你痛处的是什么？没错，就是挂科。别以为说出国留学就能摆脱挂科所带来的困扰。是的，国外没有挂科，但是有各种Fail，要知道，国外院校在成绩合算时，日常学习表现的分数会占很大一部分比例，一旦Fail，不要指望像国内一样的卷子来让你补个考（当然，部分院校也会采用补考的形式）多数Fail的情况就要面临重修，同样的课程再来一学期，学费自负的同时也有大部分学生没那么好运，相反，一旦重修失败那将可能收到面临开除/劝退等邮件\n\n同时，留学过程中除了挂科，可能还会出现一些让你措手不及的问题，列如：出勤率低、GPA达不到学校规定要求，也有对于不了解国外院校的文化造成的违反学术诚信，考试作弊，论文抄袭，代写等等等等事件都将面临着被学校（Probation）警告，（Suspension）停学，（Withdrawal）劝退，（Dismissal）开除，导致不能顺利毕业的情况也时常发生，特别是对于那些在本科阶段，往往年纪不大，缺乏自制力的学生\n\n如果不幸遇到类似的情况该怎么办？\n\n21世纪是信息化时代，互联网已经完全融入了生活，改变了我们很多方式，学校的办公也离开了纸质的年代，电脑信息化的处理方式，数据结构程序化的处理更加有效的节省了不必要的时间以及消耗，也减少了人工的错误，为了保证数学质量，有效利用学校的软硬件资源，就必须提供一个智能化的，灵活的高校系统管理系统。咨询Q：575121832能在有限的条件下竭尽全力的为学生提供大学成绩修改《承接国外大学挂科/GPA/成绩修改，处理处分警告，开除、劝退等业务》\n\n首先，改成绩的目的是相互的，大家各取所需。解决学生学业阻碍\n\n而在留学的过程中遇到因为考试挂科、出勤率太低、GPA不够还是学术不诚信等等状况面临开除，或者已经被开除导致不能本科顺利毕业无法做学历认证和回国人员证明，甚至是在留学期间遇到 I-20被取消，这些问题都是有很好的解决办法的，无论现在是在国内国外，都可以加Q：575121832在线咨询，提供安全修改计划方案，针对性更改，解决学业成绩的困扰。\n","created_at":"2019-04-14T12:50:29+09:00","id":"2e93a49eeb7cfcfb0f5f","tags":[{"name":"澳洲留学挂科学校给了劝退邮件怎么办","versions":[]}],"url":"https://qiita.com/xixili/items/2e93a49eeb7cfcfb0f5f"},{"title":"Sketch / Adobe XD - 詳細比較表 / Detail Correlation Table【2019.04】","body":"![Sketch_AdobeXD_v3_th.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/122142/f2f1cdff-64e2-6378-6fa2-b0d8a6be784a.png)\n\n#### 日本語 \n|      　　       |　Sketch v54.1　| Adobe XD v16.0 |\n|:---------------|:---------:|:--------:|\n|   価格 / 費用  |  ○<br>新規 \\$99/y<br> 更新 \\$69/y  |  ◎<br>新規/更新<br> \\$0  ~ |\n|       ページ管理      |    ○     |    ×    |\n|    ダークモード    |    ○     |    ×    |\n| 過去バージョン<br>ダウンロード |    ◎     |    ×    |\n|   クラウドストレージ  |    ◎ <br>Unlimited    |    △<br>2GB~100GB    |\n|    操作性<br>( ショートカットなど )    |    ○     |    ○    |\n| - 隣レイヤーへの移動<br> |    ○     |    ×    |\n| - レスポンシブデザイン対応 |    △    |    ○    |\n|    プラグイン豊富さ   |    ○    |    △    |\n|      業界シェア    |    ○    |    △    |\n| 動作軽快さ  　 |    ○    |    ◎    |\n| アップデートスピード　|    ○     |    ◎    |\n|    オフライン操作    |    ○    |    ○    |\n|    シンボル機能     |    ○    |    ○    |\n|    シンボル管理     |    ○    |    △    |\n|    スタイル管理    |    △     |    △    |\n| デフォルト機能　 |    △     |    ○    |\n| クラウドファイルへの<br>モバイルアクセス　 |    ○<br>Webのみ     |    ◎<br>アプリOK    |\n| モバイルアプリ　 |    ○<br>プレビューのみ   |    ◎<br>フォルダ閲覧可    |\n| プロトタイピング<br>( プレビュー ) |    △     |    ○    |\n| - モバイルプレビュー　|   ○   |    ○    |\n| - 多機能プレビュー　|    △     |    ○    |\n| - 要素固定プレビュー |   ○   |   ○   |\n| - 背景固定プレビュー |   ×   |   ○   |\n|     Windows      |    ×     |    ○    |\n|    日本語メニュー   |    ×     |    ○    |\n|     日本語資料     |    △    |    ○    |\n|   リピートグリッド  |    ×     |    ○    |\n|   データインポート  |    △     |    ○    |\n\n#### English\n|             |　Sketch v54.1　| Adobe XD v16.0 |\n|:---------------|:---------:|:--------:|\n| Price / Cost |  ○<br>New \\$99/y<br> Update \\$69/y  |  ◎<br>New/Update<br> \\$0  ~ |\n|   Page Management   |    ○     |    ×    |\n|    Dark Mode    |    ○     |    ×    |\n| Old Versioin<br>Download |    ◎     |    ×    |\n|  Cloud Storage   |    ◎ <br>Unlimited    |    △<br>2GB~100GB    |\n|    Operational (Shortcut etc)    |    ○     |    ○    |\n| - Move to Next Layer    |    ○     |    ×    |\n| - Responsive Design  |    △     |    ○    |\n|    Plugin Volume  |    ○    |    △    |\n|  Industry Share |    ○     |    △    |\n|   Quick Movement  |    ○     |    ◎    |\n|   Update Speed   |    ○     |    ◎    |\n|  Offline Operation  |    ○    |    ○    |\n| Synbol Function  |    ○    |    ○    |\n| Synbol Management |    ○    |    △    |\n| Style Management |    △     |    △    |\n|  Default Function　|    △     |    ○    |\n| Cloud File/Folder Access<br>from Mobile　 |    ○<br>Web Only     |    ◎<br>App OK    |\n|  Mobile App　   |    ○<br>Preview Only     |    ◎<br>File/Folder OK    |\n| Prototyping ( Preview ) |    △     |    ○    |\n| - Mobile Preview |    ○     |    ○    |\n| - Many Function Preview |    △     |    ○    |\n| - Fix Element Preview |   ○   |   ○   |\n| - Fix Background Preview |   ×   |   ○   |\n|      Windows       |    ×     |    ○    |\n|    Japanese Menu   |    ×     |    ○    |\n|    Japanese Document   |    △     |    ○    |\n|    Repeat Grid   |    ×     |    ○    |\n|   Import Date  |    △     |    ○    |\n\n<br>\n\n#### 総評\n最近 改めて両方とも使うようになってきたため比較してみました。\nやはり最近は AdobeXD の追い上げが凄いですね。\nXDがβ版のときは今ほどの良さを感じませんでしたし、\nSketchというライバルをかなり意識しての追い上げですね。\n\nSketchは、プラグイン豊富・ページ管理可能・ダークモード使える・クラウド容量無制限が好印象ですね。弱点としてはプラグインに依存気味・日本語に弱い・Windows版無し・背景固定プレビビュー不可といったところですね。私としてはプロトタイピングで背景固定プレビューできないのが辛いですね。業界シェアとしてはAdobeXDも増えてはきましたが、まだSketchのシェアが日本でも高い感じを受けますね。\n\nXDは、標準機能豊富・無料プラン復活・日本語サポート・Windowsサポート・リピートグリッドが便利・プロトタイピング問題なし・簡単にデータインポート可能と、総合力がかなり高い印象がありました。動作に関してもSketchもAiやPsよりはかなり速いですが、同じAdobeとは思えないほどXDは更に快適ですね。やはり優秀なチームでゼロから作り上げているという印象を受けました。XDが他の不足点をサポートすれば かなり強くなりますね。\n\nユーザーからすれば両方あるのはありがたいです。\nライトユーザーやWindowsユーザーにとっては AdobeXD 一択でしょうね。\n\nちなみに最近では Figma というツールも注目度が高くなりユーザーも増えてきて使ってみたりしますが、テキスト入力時にバグがあり まだ使用に耐えないですね。今後に期待です。\n<br><br> \n","created_at":"2019-04-14T12:45:38+09:00","id":"bc2388110a4731e43c93","tags":[{"name":"Design","versions":[]},{"name":"adobe","versions":[]},{"name":"sketch","versions":[]},{"name":"prototype","versions":[]},{"name":"XD","versions":[]}],"url":"https://qiita.com/think-a-lot/items/bc2388110a4731e43c93"},{"title":"Example of randomly generating tomorrow's hour and minute with datetime of #python","body":"<pre> <code class=\"py\">&gt;&gt;&gt; import datetime \n \n &gt;&gt;&gt; now = datetime.datetime.now() \n &gt;&gt;&gt; now \n # datetime.datetime(2019, 4, 13, 18, 44, 57, 269002) \n \n &gt;&gt;&gt; rand_datetime_today = now.replace(hour=random.randint(1,23), minute=random.randint(1,59), second=0, microsecond=0) \n &gt;&gt;&gt; rand_datetime_today \n # datetime.datetime(2019, 4, 13, 3, 8) \n \n &gt;&gt;&gt; rand_datetime_tomorrow = rand_datetime_today + datetime.timedelta(days=1) \n &gt;&gt;&gt; rand_datetime_tomorrow \n # datetime.datetime(2019, 4, 14, 3, 8) \n \n</code> </pre>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1260\n","created_at":"2019-04-14T12:43:26+09:00","id":"216701585e553237d7ac","tags":[{"name":"Python","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/216701585e553237d7ac"},{"title":"A simple example of creating a datetime object with a specific date / hour / minute / second specification in #python and parsing it into a string","body":"<p> <code>datetime.datetime()</code> . </p>\n\n<pre> <code class=\"py\">&gt;&gt;&gt; import datetime \n &gt;&gt;&gt; datetime.datetime(2016,1,2, 10,20,5, 100).strftime(&#39;%Y-%m-%d %H:%M:%S %a %f&#39;) \n &#39;2016-01-02 10:20:05 Sat 000100&#39; \n</code> </pre>\n\n<h1> ref </h1>\n\n<p> <a href=\"https://www.programiz.com/python-programming/datetime/strftime\">Python strftime ()-datetime to string</a> </p>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1261\n","created_at":"2019-04-14T12:43:26+09:00","id":"ad820d91e0c58f76a2e4","tags":[{"name":"Python","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/ad820d91e0c58f76a2e4"},{"title":"An example of writing multiple standard output of echo and cat together in one file with #shell","body":"<pre><code>echo $(echo &quot;abc&quot; &amp;&amp; echo &quot;b&quot; &amp;&amp; cat tmp/in.txt &amp;&amp; cat tmp/in.txt) &gt; tmp/out.txt\n</code></pre>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1265\n","created_at":"2019-04-14T12:43:26+09:00","id":"4f12f46f7a0faee3d8da","tags":[{"name":"shell","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/4f12f46f7a0faee3d8da"},{"title":"A simple Dockerfile example that creates an image or container with various gems in #ruby with #docker","body":"<h1> Dockerfile </h1>\n\n<pre> <code>FROM ruby \n \n RUN gem install reverse_markdown redcarpet \n \n</code> </pre>\n\n<h1> EXE </h1>\n\n<pre> <code>$ docker build . -t ruby-gems \n</code> </pre>\n\n<pre> <code>$ docker run -it ruby-gems /bin/bash \n</code> </pre>\n\n<pre> <code>root@dd130726b871:/# echo &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot; | reverse_markdown \n # Hello \n root@dd130726b871:/# echo &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot; | reverse_markdown | redcarpet \n &lt;h1&gt;Hello&lt;/h1&gt; \n</code> </pre>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1262\n","created_at":"2019-04-14T12:43:25+09:00","id":"21636b7a45cb4512a829","tags":[{"name":"Ruby","versions":["0.0.1"]},{"name":"docker","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/21636b7a45cb4512a829"},{"title":"An example of a simple script that combines multiple #JSON arrays flat with #python","body":"<h1> script </h1>\n\n<pre> <code class=\"py\">#!/usr/bin/env python3 \n \n import sys, json \n \n results = [] \n \n for input_data in sys.argv[1:]: \n results += json.loads(input_data) \n \n print(json.dumps(results)) \n \n</code> </pre>\n\n<h1> EXE </h1>\n\n<pre> <code>$ ./concat-array.py &#39;[1,2,3]&#39; &#39;[{&quot;a&quot;:&quot;b&quot;,&quot;c&quot;:&quot;d&quot;}]&#39; &#39;[&quot;e&quot;,&quot;f&quot;]&#39; | jq . \n [ \n 1, \n 2, \n 3, \n { \n &quot;a&quot;: &quot;b&quot;, \n &quot;c&quot;: &quot;d&quot; \n }, \n &quot;e&quot;, \n &quot;f&quot; \n ] \n</code> </pre>\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1263\n","created_at":"2019-04-14T12:43:25+09:00","id":"78407615d7f7b2da586e","tags":[{"name":"Python","versions":["0.0.1"]},{"name":"JSON","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/78407615d7f7b2da586e"},{"title":"Adobe InDesignCCでレイヤー上のpageItemsの位置情報をjsonファイルに書き出す","body":"# はじめに\nAdobe InDesignのドキュメントの、任意の二つのレイヤー上のpageItemsの位置情報をjsonファイルに書き出すJavaScriptを作りました。\nなお、ここではInDesignでのJavaScriptの動かし方については触れていません。\n\n---\n# どう動くのか\n - ダイアログを表示して、ユーザに「上位レイヤー」「下位レイヤー」を選択してもらいます。順序はこれらはレイヤーの重なり順ではなく、json書き出し時の階層構造です。\n - ユーザが選択した二つのレイヤーそれぞれについて、それらに配置されているpageItemsの以下の情報を取得し、json形式で保持します。\n  - 先頭ページを１としたノンブル\n  - ページ左上端からの位置（垂直距離、水平距離）\n  - pageItemsの高さ・幅\n  - pageItemsがページの左右どちらにあるか\n - 下位レイヤー中のpageItemsは、左上端が上位レイヤーの任意のpageItems内にある場合、その任意のpageItemsのjsonの要素として包含されます。\n - jsonファイルをInDesignのドキュメントファイルと同じディレクトリに・同じ名称で出力します。\n\n---\n# コード\n```javascript:anynameok.jsx\n//jsonを扱うために、json2.jsの拡張子を変更して読み込み\n/*以下はjsxincをjsxファイルと同じディレクトリに置いた場合*/\n#include json2.jsxinc\n//メインの関数を実行\nmain();\n\nfunction main() {\n  //InDesignのアクティブなドキュメント\n  var myDoc = app.activeDocument;\n  //ドキュメントの幅\n  var myDocWidth = myDoc.documentPreferences.pageWidth;\n  //選択されたレイヤーのインデックスを取得\n  var myLayerIndex = getSelectedLayerIndex(myDoc);\n\n  try {\n    if (myLayerIndex === -1) {\n      //getSelectedLayerIndexでキャンセルボタンが押下された場合\n      throw new Error('終了します');\n    } else if (myLayerIndex === -2) {\n      //ドキュメントのレイヤーが1枚だった場合\n      throw new Error('レイヤーが一つだけです。終了します');\n    } else if (myLayerIndex === -3) {\n      //上位・下位双方で同じレイヤーを選択した場合\n      alert(\"上位・下位双方で同じレイヤーを選択しています。再度選択してください。\");\n      //スクリプトを再度実行\n      main();\n    } else {\n      //上位・下位で異なるレイヤーが選択されており、okボタンが押下された場合\n      //上位レイヤー内のページアイテムの情報を取得\n      myUpperTmpJson = getItemsInfo(myDoc, myLayerIndex[0], myDocWidth);\n      //下位レイヤー内のページアイテムの情報を取得\n      myLowerTmpJson = getItemsInfo(myDoc, myLayerIndex[1], myDocWidth);\n      //jsonファイルを書き出し\n      genResultFileAsJson(myDoc, genHierarchy(myUpperTmpJson, myLowerTmpJson));\n      alert(\"書き出しが完了しました\");\n    }\n  } catch (e) {\n    alert(e.message);\n  }\n}\n\n//ページアイテムがページの左右どちらかにあるかを返す。左なら0、右なら1\nfunction getMyColumn(myLeftPos, myDocWidth) {\n  //左右の判別はページ中央より左右どちらにあるか\n  if (myDocWidth / 2 > myLeftPos) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n//上位レイヤーのテキストフレームと下位レイヤーのテキストフレームを比較し、適宜下位レイヤーの情報を上位レイヤーに追加して上位レイヤーを返す\n/*下位レイヤーのテキストフレームの左上が任意の上位レイヤーのテキストフレームの範囲内にあれば、\n任意の上位レイヤーの要素として下位レイヤーの要素を追加*/\nfunction genHierarchy(myUpperTmpJson, myLowerTmpJson) {\n  //上位レイヤーのテキストフレームを一つずつ検証\n  var myUppterTmpJsonLen = myUpperTmpJson.length;\n  for (var i = 0; i < myUppterTmpJsonLen; i++) {\n    //該当した下位レイヤーを格納しておく変数\n    var myTmpLower = [];\n    //下位レイヤーを一つずつ検証\n    var myLowerTmpJsonLen = myLowerTmpJson.length;\n    for (var j = 0; j < myLowerTmpJsonLen; j++) {\n      //下位レイヤーが上位レイヤーと同じ側にあり、左肩が上位レイヤーの上端から下端の間にあれば\n      if ((myUpperTmpJson[i].column === myLowerTmpJson[j].column) &\n        (myUpperTmpJson[i].top <= myLowerTmpJson[j].top) &\n        (myUpperTmpJson[i].top + myUpperTmpJson[i].height >= myLowerTmpJson[j].top)) {\n        //上記変数に下位レイヤーの情報を追加\n        myTmpLower.push(myLowerTmpJson[j]);\n      }\n    }\n    //上記変数を上位レイヤーに追加\n    myUpperTmpJson[i].lower = myTmpLower;\n  }\n  return myUpperTmpJson;\n}\n\n//ユーザが情報を書き出したいレイヤーを選択するダイアログを表示\n//InDesignサンプルスクリプトExportAllStoriesのダイアログ部分を改訂\nfunction getSelectedLayerIndex(myDoc) {\n  //ドキュメントのレイヤーを取得\n  var myLayers = myDoc.layers;\n  //もしレイヤーが1枚だけだったら\n  if (myLayers.length === 1) {\n    return -2;\n  }\n  //レイヤー名を収めるリスト\n  var myLayerList = [];\n  //全レイヤーについて\n  var myLayersLen = myLayers.length;\n  for (var i = 0; i < myLayersLen; i++) {\n    //レイヤーの名称を取得\n    myLayerList.push(myLayers.item(i).name);\n  }\n  var myDialog;\n  with(myDialog = app.dialogs.add({\n    name: \"情報を書き出すレイヤーを選択\"\n  })) {\n    //Add a dialog column.\n    var myDialogColumn = dialogColumns.add();\n    with(myDialogColumn) {\n      with(borderPanels.add()) {\n        staticTexts.add({\n          staticLabel: \"上位レイヤー　:\"\n        });\n        //レイヤー名のリストをドロップダウンリストとして表示\n        var myUpperLayer = dropdowns.add({\n          stringList: myLayerList,\n          selectedIndex: 1\n        });\n      }\n      with(borderPanels.add()) {\n        staticTexts.add({\n          staticLabel: \"下位レイヤー　:\"\n        });\n        //レイヤー名のリストをドロップダウンリストとして表示\n        var myLowerLayer = dropdowns.add({\n          stringList: myLayerList,\n          selectedIndex: 0\n        });\n      }\n    }\n    var myReturn = myDialog.show();\n    if (myReturn === true) {\n      //Get the values from the dialog box.\n      var myUpperLayerIndex = myUpperLayer.selectedIndex;\n      var myLowerLayerIndex = myLowerLayer.selectedIndex;\n      //上位レイヤー・下位レイヤー双方で同じレイヤーを選んでいたら\n      if (myUpperLayerIndex === myLowerLayerIndex) {\n        return -3;\n      }\n      myDialog.destroy;\n      //okボタン押下時は選択された上位レイヤーと下位レイヤーそれぞれのレイヤーのインデックスを返す\n      return [myUpperLayerIndex, myLowerLayerIndex];\n    } else {\n      //キャンセルボタン押下時\n      return -1;\n    }\n  }\n}\n\n//指定ドキュメントの指定レイヤー内のページアイテムの情報を取得\nfunction getItemsInfo(myDoc, myLayerIndex, myDocWidth) {\n  //myDocでオブジェクトの情報を取得したいレイヤー。\n  var myLayer = myDoc.layers.item(myLayerIndex);\n  //解析情報を収める\n  var myTmpJson = [];\n  //指定レイヤー上の一つ一つのページアイテムについて、\n  var myPageItemsLen = myLayer.pageItems.length;\n  for (var i = 0; i < myPageItemsLen; i++) {\n    var myLayerPageItem = myLayer.pageItems[i];\n    //連想配列を作る\n    var myLayerPageItemInfo = {};\n    //上から順にノンブル・上端からの位置・左端からの位置・ページの左右いずれにあるか・高さ・幅\n    myLayerPageItemInfo['page'] = myLayerPageItem.parentPage.documentOffset + 1;\n    myLayerPageItemInfo['top'] = myLayerPageItem.visibleBounds[0];\n    myLayerPageItemInfo['left'] = myLayerPageItem.visibleBounds[1];\n    myLayerPageItemInfo['column'] = getMyColumn(myLayerPageItemInfo['left'], myDocWidth);\n    myLayerPageItemInfo['height'] = myLayerPageItem.visibleBounds[2] - myLayerPageItem.visibleBounds[0];\n    myLayerPageItemInfo['width'] = myLayerPageItem.visibleBounds[3] - myLayerPageItem.visibleBounds[1];\n    //ページアイテムの情報を解析情報に追加\n    myTmpJson.push(myLayerPageItemInfo);\n  }\n  //結果のソート。ページ昇順、天からの位置昇順\n  myTmpJson.sort(function(itemA, itemB) {\n    if (itemA.page > itemB.page) return 1;\n    if (itemA.page < itemB.page) return -1;\n    if (itemA.column > itemB.column) return 1;\n    if (itemA.column < itemB.column) return -1;\n    if (itemA.top > itemB.top) return 1;\n    if (itemA.top < itemB.top) return -1;\n    return 0;\n  });\n  return myTmpJson;\n}\n\n//jsonファイルを書き出し\nfunction genResultFileAsJson(myDoc, myTmpJson) {\n  var myDocNameLen = myDoc.name.indexOf(\".\");\n  //myDocのドキュメント名。拡張子ナシ\n  var myDocName = myDoc.name.substr(0, myDocNameLen);\n  //myDocのパス。\n  var myDocPath = decodeURI(myDoc.filePath);\n  //jsonオブジェクトの生成\n  myResultJson = JSON.stringify(myTmpJson);\n  //出力ファイルのパス。ドキュメントと同じディレクトリ。\n  var myResulFilePath = myDocPath + \"/\" + myDocName + \".json\";\n  //出力ファイルの作成\n  myResultFile = new File(myResulFilePath);\n  //出力ファイルへのjsonオブジェクトの書き込み・保存\n  myResultFile.open(\"w\");\n  myResultFile.writeln(myResultJson);\n  myResultFile.close();\n}\n```\n\n---\n# サンプルドキュメントと実行結果\n**サンプルドキュメント**\nシアン枠でダミーテキストを流したボックス群とマゼンタベタのボックス群とでレイヤーを分けています。前者を上位レイヤー、後者を下位レイヤーとして指定しました。\n![sample.jpg](https://qiita-image-store.s3.amazonaws.com/0/383285/b3eaeb8b-82f9-656c-ad66-f31adefb1ff7.jpeg)\n\n---\n**結果**\n下位レイヤー上のpageItemsは上位レイヤーの要素lower中に配列として出力されます。\nなお、このサンプルは整形済みのものですが、実際は未整形で出力されます。\n\n```json:sample.json\n[{\n  \"page\": 1,\n  \"top\": 19.749995277813,\n  \"left\": 19.749995277813,\n  \"column\": 0,\n  \"height\": 84.5000047221869,\n  \"width\": 83.0000097221374,\n  \"lower\": [{\n    \"page\": 1,\n    \"top\": 44.4999999997482,\n    \"left\": 43.5,\n    \"column\": 0,\n    \"height\": 30.5,\n    \"width\": 59.0000049999504\n  }]\n}, {\n  \"page\": 1,\n  \"top\": 106.749999999748,\n  \"left\": 19.7499952778131,\n  \"column\": 0,\n  \"height\": 95,\n  \"width\": 83.0000097221374,\n  \"lower\": [{\n    \"page\": 1,\n    \"top\": 112.116666666415,\n    \"left\": 43.45,\n    \"column\": 0,\n    \"height\": 30.5,\n    \"width\": 59.0000049999504\n  }, {\n    \"page\": 1,\n    \"top\": 173.499999999748,\n    \"left\": 58,\n    \"column\": 0,\n    \"height\": 19.8833333335852,\n    \"width\": 41.1500048610687\n  }]\n}, {\n  \"page\": 1,\n  \"top\": 204.249999999496,\n  \"left\": 19.7499952778131,\n  \"column\": 0,\n  \"height\": 67.0000000005036,\n  \"width\": 83.0000097221374,\n  \"lower\": [{\n    \"page\": 1,\n    \"top\": 237.699999999748,\n    \"left\": 40.1999998611183,\n    \"column\": 0,\n    \"height\": 30.5,\n    \"width\": 59.0000049999504\n  }]\n}, {\n  \"page\": 1,\n  \"top\": 19.7499952778131,\n  \"left\": 108.75,\n  \"column\": 1,\n  \"height\": 125.500004722187,\n  \"width\": 83.0000097221374,\n  \"lower\": [{\n    \"page\": 1,\n    \"top\": 59.6499999997481,\n    \"left\": 130,\n    \"column\": 1,\n    \"height\": 30.5,\n    \"width\": 59.0000049999504\n  }, {\n    \"page\": 1,\n    \"top\": 110,\n    \"left\": 128,\n    \"column\": 1,\n    \"height\": 30.5,\n    \"width\": 59.0000049999504\n  }]\n}, {\n  \"page\": 1,\n  \"top\": 148.249999999748,\n  \"left\": 108.75,\n  \"column\": 1,\n  \"height\": 67.0000000005036,\n  \"width\": 83.0000097221374,\n  \"lower\": [{\n    \"page\": 1,\n    \"top\": 184.666666665911,\n    \"left\": 142.45,\n    \"column\": 1,\n    \"height\": 19.8833333335852,\n    \"width\": 41.1500048610687\n  }]\n}]\n```\n\n---\n# 動作確認\n - CC2019およびCC2015で行っています。\n - 以下については、未確認です。 \n    - グループ化されたpageItems\n    - ロックされたレイヤー\n\n---\n# 参考URL\n参考にさせていただきました。ありがとうございます。\n\n**ソートについて**\nJavaScript つい忘れてしまう配列のソート方法\nhttp://qiita.com/PianoScoreJP/items/f0ff7345229871039672\n\n**InDesignのJavaScriptでのJSONの使用について**\nExtendScriptでJSONオブジェクトを使う\nhttp://uske-s.hatenablog.com/entry/2018/04/06/141944\n","created_at":"2019-04-14T09:52:40+09:00","id":"b80aaa5d873bc54333cd","tags":[{"name":"JavaScript","versions":[]},{"name":"JSON","versions":[]},{"name":"indesign","versions":[]}],"url":"https://qiita.com/quwano/items/b80aaa5d873bc54333cd"},{"title":"Python事始め","body":"###自分がPythonを勉強していて気になったことを紹介します\n\n####基本的なライブラリ\nPython初心者（というかプログラム初心者）であった頃、とにかく分かりづらかったものを順に説明していきます。\n先ずは `sys` と `import と from` から。\n####sysとは\n>インタプリタや実行環境に関連した変数や関数がまとめられたライブラリ\n引用元：[ライブラリ：sys](https://www.lifewithpython.com/2013/03/sys.html)\n\nとのことで、`sys`に含まれている変数と関数は [sys --- システムパラメータと関数](https://docs.python.org/ja/3/library/sys.html) で確認できます。\n例えば、`sys.path`でリスト形式で格納されている環境変数のPathを確認することができます。\n\n\n\n```python.py\nimport sys\nsys.path\n```\n\n<!--\n```Javascript:fileName.js\n'↑「言語名：ファイル名」と書いとくと言語に合わせて色を変えてくれるみたい。'\n'Bash, C#(cs), C++(cpp), CSS, Diff, HTML, XML, Ini, Java, Javascript, PHP, Perl, Python, Ruby, SQL, 1C, AVR Assembler(avrasm), Apache, Axapta, CMake, DOS .bat(dos), Delphi, Django, Erlang, Erlang, REPL, Go, Haskell, Lisp, Lua, MEL, Nginx, Objective C(objectivec), Parser3, Python, profile, Scala, Smalltalk, TeX, VBScript, VHDL, Vala'\n'ここだけソースがコードになってないけどごめんね(;´･ω･)'\n'バッククオート(`)はSHIFT押しながら「@」キーを押す。'\n'※キーボードによって違うので参考まで'\n```\nコメントアウトの練習\n\nもう一度練習\n\n「＊」か「＿」1個で*＿イタリック(斜体)＿*。2個で__太字__。\n\n>「Code - コードの挿入」で使ったからこれも書いとかなきゃ(;´･ω･)\n>こっちはソースがコードになってる方ね(;´･ω･)\n\n-->\n","created_at":"2019-04-14T09:52:25+09:00","id":"c8770a34ff529a2e8671","tags":[{"name":"Python","versions":[]}],"url":"https://qiita.com/nimrod/items/c8770a34ff529a2e8671"},{"title":"iTerm2のステータスバー表示位置を変更する","body":"![iterm2_statusbar.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/4614/24477d4a-4e67-4f28-936c-be79b958589d.png)\n\niTerm2のステータスバーは下記から有効化することができる。\n\n```\nPreferences > Profiles > Session > Status bar enabled > Configure Status Bar\n```\n\n表示位置は `Preferences > Appearance > Status Bar Location` で上に表示するか、下に表示するかが選択できる。\n\n## 参考\n\n* [iTerm2 にステータスバーが付いた - Qiita](https://qiita.com/delphinus/items/1748937aefeb241bdcee)\n","created_at":"2019-04-14T09:46:04+09:00","id":"2f12aa5acdb2adb96ee5","tags":[{"name":"iTerm2","versions":[]}],"url":"https://qiita.com/tunepolo/items/2f12aa5acdb2adb96ee5"},{"title":"Craft CMS がいいなーと思っているところ #craftcms","body":"![rectangle_large_type_2_c653b67a8fe982157ea07276c5b38ac9.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8890/a6a2e78e-d7a7-a498-be18-0ff2671fce91.jpeg)\n\n\nこれは [Craft CMS Advent Calendar 2018](https://adventar.org/calendars/2941) 3日目の記事です。\n\n[Craft CMS 3](https://craftcms.com/) が出て今年は Craft CMS 3 案件も何件かやりましたが、やっぱり便利ですね。  \n去年の [Craft CMS Advent Calendar](https://adventar.org/calendars/2212) では Craft 3 のことを書いてましたね。\n\n> Craft CMS の次期バージョン Craft 3 について調べてみた | mersy note  \n> [https://note.mersy418.com/article/craft3](https://note.mersy418.com/article/craft3)\n\n他のCMSもいいところはたくさんありますが、 Craft CMS のわかりやすさ、使いやすさというのもあるかなと思ってます。\n\n## コンテンツ管理の編集画面の使いやすさ\n\na-blog cms のユニット、Drupalのパラグラフ、MTのブロックエディタみたいなものですが、管理画面、特にデータを投入する入力画面のインターフェースが使いやすい、調整しやすいってのはやっぱりいいですね。\n\n![picture_pc_932e28f853707f0485c0f7d0b0e4fe18.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8890/4f885feb-8f9b-6917-08d0-3cccf0e89617.jpeg)\n\n\nリレーション（エントリ同士の関連付け）とかもやりやすいのはいいですねぇ。\n\nここは開発者がメインで触るのではなく、ユーザさん（大体はクライアント）が多く触る部分なので重要だなー、と。\n\n## グローバル\n\nCMSでの設定値を管理画面で持たせることができる、という感じなんですが、これが結構便利だなー、と。\n\n\n![picture_pc_a2fa2ef43ef8a28e18059ea97cd7b77d.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8890/c7384718-d9db-edad-07a7-90f8a726e3eb.jpeg)\n\nMTだとそういうのがないからカスタムフィールドを作って、 MTAppjQuery でカスタマイズして拡張するとかになりますが。\n\nこの辺りは色々使い回ししやすくて、設計する側としては気に入っています。\n\n## テンプレート\n\nTwig で色々やれるのが便利ですね。  \nMTはMTタグを覚えれば色々できて楽チンですが。\n\nCraftじゃなくても使われる話なので、ある程度フレームワークとしてあるものが使われてるのは安心です。\n\n## オリジナルダッシュボード\n\nMT の DataAPI が出た時にオリジナルダッシュボードを作るとかやろうとしたのが、 Craft CMS だとかなり簡単にできる印象があります。  \nこの辺は動的CMSの強みなんだろうなー、と。\n\nとある案件で CMS のデフォルトの管理画面、管理ユーザ向けの管理画面、一般ユーザ向けのページといったものをかなり柔軟に自由度高く作れるのがよかったです。\n\nCMS の管理画面自体のカスタマイズってのは慣れの問題もあるけど、MTの方が楽な印象はあります。  \na-blog cms も結構なところまでやれそうだなー、という印象はあります。が、やるかどうかはまた別の問題かな、という雰囲気を感じます。  \nDrupal も Dashboard は作れるから色々できそう。  \n見た目の好み的には MT だけど、他もまだまだ使いこなせてないだけな気もしますね。\n\n## 日本語のドキュメントがある\n\n[@bun](https://twitter.com/bun) が訳してくれたドキュメントがあるので、使いやすい。ありがたい。感謝感謝。\n\n![picture_pc_927140e709c4a0fc4c786ce825c685ce.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8890/c214fac1-76be-7586-6622-dd670e52bef6.jpeg)\n\n> Craft CMS について | Craft 3 ドキュメント  \n> [https://docs.craftcms.com/v3/ja/](https://docs.craftcms.com/v3/ja/)\n\n困った時も [@bun](https://twitter.com/bun) に twitter で投げれば懇切丁寧に教えてくれるので、これまた安心ですね！\n\n## 初のアジア太平洋イベントの開催\n\nCraft CMS のイベント的な [Dot All](http://dotall.com/2018) は毎年どこかであるみたいなのだけど、来年2月に小さい版？がオーストラリアのメルボルンである様子。\n\n> Dot One Australia | Craft CMS  \n> [https://craftcms.com/dot-one-australia](https://craftcms.com/dot-one-australia)\n\nアジア環太平洋で開かれる最初のイベントみたい。日本開催だとありがたいなー、と思うところはあるけど、NZに近いオーストラリアだし、都合がつけば参加してみたいなー（英語わからないけど）\n\n## ということで Craft CMS 使ってみませんか？\n\n他のCMSでももちろんできるところが多いので、絶対的な強みなのか？と言われるとそうじゃない部分もあるとは思います。  \nでも、Craft CMS 作りやすいなーと思うところもあるし、お客さんからそういった感想をいただくことがあるのも事実。\n\n先日の [MTDDC Meetup TOKYO 2018](http://mtddc2018.mt-tokyo.net/session/#speaker_id313) で @bun が Craft CMS のセッションをしましたが、日本の制作会社でも使ってる人がちらほらいそうな感じ。  \nそういう人たちと色々意見交換とか、どういう風に使ってるか？とかをざっくばらんに話せる機会を作ってみたいなー、と思います。  \n色々勉強させてもらいたいですね。\n\n個人的にはマルチサイトのところとか、多言語の仕組みをしっかり使うとか、ルーティングの設定とかまだまだ細部まで把握できていない、使ったことがないところもあるにはあるのだけど、そこはまた機会を見て掘り下げてみたいな、と個人的には思います。\n\n来年も Craft CMS には色々お世話になりそうな気がしています。\n","created_at":"2019-04-14T09:43:46+09:00","id":"edef9634c1deac59f76d","tags":[{"name":"CraftCMS","versions":[]}],"url":"https://qiita.com/mersy/items/edef9634c1deac59f76d"},{"title":"案件でよく使うCMSのあれこれ","body":"これは [Craft CMS Advent Calendar 2018](https://adventar.org/calendars/2941)、[Movable Type Advent Calendar 2018](https://adventar.org/calendars/2900)、[a-blog cms Advent Calendar 2018](https://adventar.org/calendars/2948)、[MTAppjQuery Advent Calendar 2018](https://adventar.org/calendars/3006) の17日目の記事です。\n\n昨日の岩崎さんの [Movable Type Advent Calendar 2018](https://adventar.org/calendars/2900) のエントリー「[20周年の mushikabu.netで MovableTypeを使い続ける理由 - 岩崎仁の俺は語りたい！](https://mushikabu.net/2018/movabletype/)」は多言語の話など共感・参考になりました。\n\n[a-blog cms Advent Calendar 2018](https://adventar.org/calendars/2948) の井斉さんのエントリー「[＠includeと@extendsを整理する | ablogcms | IORI-ST](http://isaikaori.com/ablogcms/20181216.html)」を拝見して extends を Craft CMS で知った時の便利さを思い出しました。テンプレートバリバリ書いてると面白いだろうなー。\n\n---\n\n今年も案件ではいくつかのCMSを触る機会がありました。各CMSについてスキルが追いついていないところが多々あり、一緒に案件をやるメンバーに助けてもらいながらやってこれました。\n\nディレクターとして話せるレベルくらいは理解してるつもりですが、時々用語を間違えたり、特徴を忘れたりすることがあるので整理してみようと思ったのがこの記事になります。\n[a-blog cms Training Camp 2018 TOKYO](https://ablogcms.doorkeeper.jp/events/75246) で藤田さんが話された内容の簡易版みたいな感じですかね。\n\n# 目次\n\n1. 機能拡張の呼び方\n1. ブロックエディタ\n1. データの持たせ方・分類\n1. エントリ同士の関連付け\n1. テーマ機能、URL、テンプレート\n1. 管理画面カスタマイズ\n\n# 機能拡張の呼び方\n\nCMS自体の機能を拡張するものの呼び方？がCMSによっては違ったりしますね。\n\n| MT | Craft | Drupal | a-blog | WP |\n| --- | --- | --- | --- | --- |\n| プラグイン | プラグイン | モジュール | 拡張アプリ？ | プラグイン |\n\nDrupalはモジュールですが、MTでモジュールと言ってるとテンプレートモジュール？とかなったりするのでややこしい時があります。\n\nあとは、モジュール一覧とかになると、コンテンツで利用するデザインパターンというかそういう感じのイメージになるときもあるので、この辺りは話の前提が揃っていないと噛み合わなくなることがありますね。\n\na-blog cms の場合はCMSが提供している機能を元にして使っていくという位置付けなので制限はあるかもですが安全性が担保されてますね。\n\n# ブロックエディタ\n\n賛否両論ありますが、リッチエディタでやるのは難しいことやカスタムフィールド職人が登場したりすることもありますので、場合によってはブロックエディタがいい場面もありますね。\n\n| MT | Craft | Drupal | a-blog | WP |\n| --- | --- | --- | --- | --- |\n| ブロックエディタ<br>プラグイン：[MTAppjQuery](https://bit-part.net/products/mtappjquery/)（multifield） | マトリックス<br>プラグイン：[Super Table](https://verbb.io/craft-plugins/super-table/features), [Neo](https://github.com/spicywebau/craft-neo) | [Paragraphs](https://www.drupal.org/project/paragraphs) | ユニット | Gutenberg<br>プラグイン：[Advanced Custom Fields](https://www.advancedcustomfields.com/) |\n\nブロックエディタといえば a-blog cms だと思います。\nMovable Type は7からコンテンツタイプでブロックエディタをつかうことができるようになりましたね。\nCraft CMS も元々使えるのでかなり魅力的です。\nWordPress は最近登場した 5 で Gutenberg も採用されましたね。\nDrupal は Paragraphs モジュールを使うことでブロックエディタが使えますね。\n\n前述の「モジュール」話は個人的には「ユニット」も最初はなじめないこともありましたが、少しずつ慣れてきてる感じがします。\n\nブロックエディタを使う時はデータ移行などがある時は少し注意して考えておいた方が良い気がします。\nインポート機能やプラグインなどで対応できるのかどうか？なども検討事項になるかな、と思います。\n\n# データの持たせ方・分類\n\n設計するときの肝になるのは（ざっくりとした表現ですが）データの持たせ方になると思います。\n\n| | MT | Craft | Drupal | a-blog | WP |\n| --- | --- | --- | --- | --- | --- |\n| マルチサイト・ブログ | マルチサイト | マルチサイト | マルチサイトいけないこともない？ | ブログ＞子ブログ | マルチサイト？ |\n| コンテンツの種類 | コンテンツタイプ、記事、Webページ | セクション<br>（チャンネル、シングル、ストラクチャ） | コンテンツタイプ | エントリ | 記事、固定ページ<br>カスタム投稿タイプ |\n| カテゴリ・タグ | カテゴリ、タグ | カテゴリ、タグ | タクソノミー | カテゴリ、タグ | カテゴリ、タグ |\n\nデータをどう分けておくと将来も使っていけるか？とか考えないといけないですね。\nあとはワークフロー（承認フロー）とかが絡むこともあるので、それによる影響も考えたりしますね。\nマルチサイトと書いちゃってますが、複数ドメインのサイトを持てる、という意味で使われる時もありますが、それらも含めた感じでひとまず書いてます。ブログ的なものを複数持てるというのも含めてます。\n\nMT や a-blog はサイトの構成に合わせて複数サイト作ったり、ブログ作ったりすることが多い気がします。\n（a-blog cms の場合はカテゴリで代用するといったこともあるようです。MTでもやることありますが。）\n\nCraft の場合はとりあえずデータの箱としてセクションを作っておいてあとはどう見せるか？がテンプレート側での制御だったり、マルチサイトの時はセクションごとに使うかどうか？の設定になったりしますね。\n\nDrupalもまずはコンテンツありきでコンテンツタイプを用意していくという使い方が多いのではないか？と思います。\n\n# エントリ同士の関連付け\n\n関連記事の選択に使われたり、データの分類に使われたり様々ありますが、必要な機能ですね。\n\n| MT | Craft | Drupal | a-blog | WP |\n| --- | --- | --- | --- | --- |\n| コンテンツタイプフィールド<br>プラグイン：[MTAppjQuery](https://bit-part.net/products/mtappjquery/)（MTAppListing） | エントリフィールド | リファレンス | 関連エントリー | プラグイン：[Advanced Custom Fields](https://www.advancedcustomfields.com/) |\n\nデータの種別として別のエントリー群を用意しておきそこから選択する、といったカテゴリ的な使い方もあると思います。\nコンテンツを管理するという視点からは出来るだけデータの粒度は小さくしつつも、関連付けしやすくなっているというのはありがたいところかと思います。\n\nカテゴリやタグ、サイト、という単位でまとめるのは当然ありですが、関連付けができるということはカテゴリとかがなくてもどうにかなる話だったりもします。\n\nカテゴリ用のテンプレートがある、とか一覧ページがあるといった出力用の機能に合わせて何を選択するか？は変わってきそうですね。\n\n\n# テーマ機能、URL、テンプレート\n\nテンプレート類がまとまったものがテーマ機能とざっくりとは考えられると思います。\n\n| MT | Craft | Drupal | a-blog | WP |\n| --- | --- | --- | --- | --- |\n| あり | なし | あり | あり | あり |\n\nWordPress が多く使われているのはCMSの機能とプラグイン、豊富なテーマが故かと思います。\n\nテーマ機能はゼロからサイト構築する際は結局HTMLをCMS用に作り込んでいくことになるので、なくても良い話だったりはしますね。\nDrupalとMTのテーマは結構似た感じの位置づけかな、という印象です。\n\nMTの場合はテーマにマッピング（URL）も依存してくるのでそこが少々手間かもしれないです。\na-blog cms のテーマを継承する機能はWPの子テーマと似てる感じで便利な印象です。CMSがテーマ内をいい感じに置き換えて処理してくれるので、慣れが必要だなーと思いました。\n\n\n## 出力されるURL\n\n| MT | Craft | Drupal | a-blog | WP |\n| --- | --- | --- | --- | --- |\n| テンプレートのマッピング | セクションの設定＋テンプレート | コンテンツタイプ、URLエイリアス | ブログ＋カテゴリ＋エントリの設定 | カテゴリ＋エントリ |\n\nMTを使ってくることが長かったのであまり意識していなかったのですが、MTの場合は後述のテンプレートの種類が決まっていて、それをベースにURLが決まります。\n静的CMSならではかもしれませんが、URLの指定の自由度が高いなぁと思うことが増えました。\n\nCraft CMS も自由度は高いですね。\nURLについては都度設定するのが楽な場合と、自動の方が楽な場合とがあると思うのでこの辺りは要件次第で変わってきますね。\n\nリニューアル案件でURLをなるべく維持したいという要件がある場合はどう設計するか？を考えておく必要があるので重要な点かな、と思います。\n\n## テンプレートの種類と書き方\n\n| | MT | Craft | Drupal | a-blog | WP |\n| --- | --- | --- | --- | --- | --- |\n| 書き方 | MTタグ | TwigとCraftのお作法 | Twig | a-blog cms のタグ | PHPとWPのタグ |\n| テンプレートの種類 | インデックステンプレート<br>アーカイブテンプレート<br>テンプレートモジュール<br>システムテンプレート | 種類的なものは特になし | 全体用<br>ページ部分用<br>node用<br>他 | トップページ<br>一覧ページ<br>詳細ページ<br>他 | index.php<br>home.php<br>single.php<br>page.php<br>archive.php<br>他 |\n\nMTのテンプレート種類が複数パターンあるってのは慣れないとわからないですが、マッピングの自由度がこれに繋がってきてるのでいい仕組みと思うことはあります。\n\nCraft はtemplateディレクトリにおけばなんでもいけるので、その意味で自由度も高いですね。テンプレートの構成と表示のURLが近いのもわかりやすいです。ルーティングとか組み合わせれば色々できます。\n\na-blog cms はURLコンテキストに合わせられているので、設計時点でこの辺りまで理解しておかないとハマることがありそうです。ただ慣れてしまえばそのルールに乗っかるだけで良いのですごくわかりやすい仕組みかと思います。\n\n\n# 管理画面カスタマイズ\n\nCMS独自の管理画面でも問題ないですが、何かしら調整して欲しいと言われるのが管理画面ですね。\n\n| MT | Craft | Drupal | a-blog | WP |\n| --- | --- | --- | --- | --- |\n| alt template<br>プラグイン：[MTAppjQuery](https://bit-part.net/products/mtappjquery/) | cp.css, cp.js<br>プラグインで画面追加。<br>オリジナルダッシュボード | 管理用テーマ。ダッシュボード | 標準機能 | ？ |\n\nユーザの権限によってメニューが増減するのは当然として、そこからどのくらい自由にカスタマイズして使いやすいCMSとして提供できるか？は製作者の腕の見せ所、考え所かと思います。\n\na-blog cms は標準でカスタマイズできるというメリットがありますが、CMS本体のアップデートの影響を受けるというところが悩ましいところです。\n\nMTはその部分をalt tmplで補おうとしましたが、alt tmpl自体があくまで管理画面用であって難しいため、MTAppjQuery で管理画面をjs/cssで調整するニーズが続いてると思います。\n\nDrupalは管理画面用のテーマも設定できるので柔軟性はたかそうです。この辺はまだまだ使いこなせていない領域なので今後やってみたいところです。\n\nCraft CMS の管理画面カスタマイズは他に比べると難しいところがありそうだなー、という印象です。js,cssでやれることをやるというのMTAppjQueryに近いです。\n管理画面内のページを追加する形で色々やれなくもない感じです。ただ、動的CMS ＆ RestAPI でオリジナルの管理画面が作りやすいという印象はあります。\n\n---\n\nあとは細かいところだと色々と違いがあったりしますね。\n\n* 管理画面でのレイアウト機能の有無\n* 1データごとの呼び方\n* カスタムフィールドの作り方やデータ構造\n* Drupalのviews的なもの。a-blog cms でのモジュールIDみたいなもの。\n* 多言語対応のしやすさ\n* 有償か無償か。オープンソースか、コードが読めるか\n* 開発されている言語や拡張しやすさ\n* 外部サービスとの連携のしやすさ\n* バージョンアップとセキュリティ対応\n\n---\n\nということで来年もまた色々なCMSを触るかもしれないですし、どれかに限定されるかもしれません。\nどちらにしても使いやすいCMSを提供していければな、と思っています。\n\n明日は [Movable Type Advent Calendar 2018](https://adventar.org/calendars/2900) は八木さん、 [a-blog cms Advent Calendar 2018](https://adventar.org/calendars/2948) は森田さんですね。どんなエントリーが上がってくるか楽しみです。\n\n@BUN が細かく使い方を書いてくれている [Craft CMS Advent Calendar 2018](https://adventar.org/calendars/2941)、@Tinybeans が新機能の紹介を中心に書いてくれている [MTAppjQuery Advent Calendar 2018](https://adventar.org/calendars/3006)  も引き続き楽しみですね。\n僕ももう1本ずつくらいは書ければな、と思っています。\n\n\n# 書いた人について\n\n* https://note.mersy418.com/\n\n\n","created_at":"2019-04-14T09:35:22+09:00","id":"7a89cd426bb09f96fbc3","tags":[{"name":"MTAppjQuery","versions":[]},{"name":"CraftCMS","versions":[]}],"url":"https://qiita.com/mersy/items/7a89cd426bb09f96fbc3"},{"title":"Contextを受け取ってファイルを読み書きするクラスをテストする","body":"コンストラクタで`Context`を受け取って、`Context.openFileInput`や`Context.openFileOutput`を利用するクラスのテストコードの書き方にハマったので書いておきます。\n\n## テスト対象のクラス\n\n```BooleanRepository.java\npublic class BooleanRepository {\n    private static final String FILE_NAME = \"BOOLEAN.txt\";\n\n    @NonNull private final Context context;\n\n    public BooleanRepository(@NonNull Context context) { this.context = context; }\n\n    public boolean load() throws IOException {\n        try (final InputStream is = context.openFileInput(FILE_NAME);\n             final InputStreamReader isr = new InputStreamReader(is, StandardCharsets.UTF_8);\n             final BufferedReader reader = new BufferedReader(isr)) {\n            final String line;\n            if((line = reader.readLine()) != null){\n                retrun Boolean.valueOf(lineBuffer);\n            }\n        }\n    }\n\n    public void save(boolean bool) throws IOException {\n        try (final OutputStream os = context.openFileOutput(FILE_NAME, Context.MODE_PRIVATE);\n             final OutputStreamWriter osw = new OutputStreamWriter(os, StandardCharsets.UTF_8);\n             final PrintWriter writer = new PrintWriter(osw)) {\n            writer.append(bool);\n        }\n    }\n}\n```\n\n\n## 結論\n`InputStream`、`OutputStream`を返すメソッドを作って、\n\n```BooleanRepository.java\n    InputStream getInputStream() throws FileNotFoundException {\n        return context.openFileInput(MEMO_FILE);\n    }\n\n    OutputStream getOutputStream() throws FileNotFoundException {\n        return context.openFileOutput(MEMO_FILE, Context.MODE_PRIVATE);\n    }\n```\n\nテスト対象のメソッドをそこから読み取るように変更する。\n\n```BooleanRepository.java\n        try (final InputStream is = getInputStream();\n        /* ... */\n        try (final OutputStream os = getOutputStream();\n```\n\nそのメソッドを`Mockito`でモックし、それぞれ`ByteArrayInputStream`、`ByteArrayOutputStream`を返すようにする。\n`ByteArrayInputStream`にはファイルの内容のbyte配列をコンストラクタに渡せる。\n`ByteArrayOutputStream`なら`.toByteArray()`すると出力内容をbyte[]で読み取れる。\n\n```BooleanRepositorySpec.java\npublic class MemoRepositorySpec {\n    final boolean INPUT_BOOL = true;\n    final byte[] INPUT_BYTES = String.valueOf(INPUT_BOOL).getBypes(StandardCharsets.UTF_8);\n\n    @Spy\n    private BooleanRepository booleanRepository;\n    private Context context;\n\n    @Before\n    public void setUp() {\n        context = mock(Context.class);\n        booleanRepository = new BooleanRepository(context);\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void loadMemoList() throws Exception {\n        final ByteArrayInputStream is = new ByteArrayInputStream(INPUT_BYTES);\n        doReturn(is).when(booleanRepository).getInputStream();\n\n        final boolean output = booleanRepository.load();\n        assertThat(output).isEqualTo(INPUT_BOOL);\n    }\n\n    @Test\n    public void saveMemoList() throws Exception {\n        final ByteArrayOutputStream os = new ByteArrayOutputStream();\n        doReturn(os).when(booleanRepository).getOutputStream();\n\n        booleanRepository.saveMemoList(true);\n        assertThat(os.toByteArray()).containsExactly(INPUT_BYTES);\n    }\n}\n```\n\n## 以下蛇足\n\n### 試したこと1 `BufferedReader`と`PrintWriter`をモックする\n最初にメソッド内でnewしている`BufferedReader`と`PrintWriter`を`PowerMock`でモックすれば良いのでは？と考えた。\nしかし、`PowerMock`の使い方がわからずうまく置き換わらず断念。\n\n### 試したこと2 `Context.openFileInput`や`Context.openFileOutput`をモックする\n次に`Context.openFileInput`や`Context.openFileOutput`が`ByteArrayInputStream`、`ByteArrayOutputStream`を返すようにモックできれば良いのでは？と考えた。\nしかし`Context.openFileInput`や`Context.openFileOutput`の戻り値はそれぞれ`FileInputStream`、`FileOutputStream`なので戻り値が合わないので無理。\n","created_at":"2019-04-14T09:34:26+09:00","id":"cf8488e676cc892e9514","tags":[{"name":"Java","versions":[]},{"name":"Android","versions":[]},{"name":"テスト","versions":[]},{"name":"JUnit","versions":[]},{"name":"Mockito","versions":[]}],"url":"https://qiita.com/proudust/items/cf8488e676cc892e9514"},{"title":"プロジェクトマネージャの力量を探る","body":"経歴書は得てして輝かしく書かれているものですが、ＩＴ技術者としての実力が本物か判断するのは簡単ではありません。\n\nプロマネやシニア開発者には以下の質問をしてみましょう。技量がある程度わかるかもしれません。\n\n##技量を探る\n質問：\n- 安全にプログラムを開発する上での鍵は何ですか?\n- プログラムを疎結合にするメリットは何ですか？またそれを実現する鍵は何ですか？\n- インターフェースや抽象クラスは何のためにありますか？\n- ポリモーフィズム適用のメリットを教えてください\n\nこれらの質問は：\n- プロジェクトやプログラム開発を安全に進める上で鍵となる\n- 開発するシステムやアプリケーションの種類に依存しない\n- 開発言語に依存しない\n- 業界・業種の違いに依存しない\n- 時代に影響しない\n普遍的な考え方であり、プロジェクトマネージャーやシニア開発者が持つべき重要な知識となります。\n\n##まとめ\nプロジェクトマネージャーはＩＴの商品を管理する以上、最低限の汎用的な技術論は知識として身につけるべきです。そうでなければプロジェクト管理は開発者の技量に１００％依存する単なるスケジュール管理となってしまいます。一般論レベルの技術論を言っているだけでは具体的な知識を持って具体的な作業をする賢い開発者達をうまく管理できるわけがありません。\n\n##おまけ\n以下、ダメなプロジェクトマネージャーの特徴\n- 実質的にスケジュール管理しかやっていない\n- セリフじみた本の受け売りしか言わない\n- 一般論、抽象的な事しか言わない\n- 一般論レベルの技術論しか言わない\n- 経験という言葉を多用する\n- 責任という言葉を多用する\n- 優れたプロマネの特徴にくわしい\n- 自分を良く見せることに力を注ぐ\n","created_at":"2019-04-14T09:26:01+09:00","id":"86e8e1be22619bbb7416","tags":[{"name":"プロジェクト管理","versions":[]},{"name":"開発プロセス","versions":[]},{"name":"マネージメント","versions":[]}],"url":"https://qiita.com/s5623/items/86e8e1be22619bbb7416"},{"title":"[Python] youtubeliveのアーカイブの見どころを特定する","body":"# 動機\n最近面白い配信者がたくさんいます．\n\nですが，live放送をすべて見ることはできませんし，何より時間が足りません．\n\nそこで面白いところだけ見れたらいいなと思い，見どころを特定するプログラムを作成しました．\n\n# 流れ\n- youtubeliveからチャット(コメント)を取得する\n- コメントの最後に”草”もしくは”w”がついているかを確認する\n- ついていればその時間を記録し，その瞬間からi秒間の間に同じように草もしくはwコメントがないかを確認する\n- それを繰り返し，草コメントの数をカウントする\n- gより大きい数以上の草コメントがあればその時間は見どころとする\n- 草コメントがあった瞬間から見ても内容が入ってこないのでm秒間前の時間を表示する\n\n# 結果\n![Screenshot from 2019-04-14 08-59-47.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/237843/0276998b-0309-f5d8-efcf-4fbc118850da.png)\n\n[一死のスマブラ[スマブラSP][スマメイト] - YouTube](https://www.youtube.com/watch?v=_zhx149uWO4)\n\nこんな感じでgoodも結構もらえます．\n\n# 感想\nyoutubeliveのチャットを取得する方法を調べた先駆者様がいらっしゃったので簡単にできました．\n\n見どころを特定するのにあたり，もう少しいい方法を考えたいです．今の方法ではあまりにも単純すぎます．\n\nしかし，実際にやってみたところそこそこ上手く機能していました．\n\nただし，チャンネルによってパラメータを調整しないとうまく行かなかったです．\n\n# ソースコード\n[youtube_highlight/main.py at master · okamoto950712/youtube_highlight](https://github.com/okamoto950712/youtube_highlight/blob/master/main.py)\n\n# バグとか\nプログラムではスパチャの金額も一応控えているのですが，100円スパチャやコメントがないスパチャはデータ構造が違うみたいで漏れがあります．\nあとドルに対応できていません．\n\n# 参考\n[PythonでYouTube Liveのアーカイブからチャット（コメント）を取得する（改訂版） - 雑記帳(@watagasi_)](http://watagassy.hatenablog.com/entry/2018/10/08/132939)\n\n","created_at":"2019-04-14T09:21:31+09:00","id":"0d4736c7be251532a03f","tags":[{"name":"Python","versions":[]},{"name":"YouTube","versions":[]}],"url":"https://qiita.com/okamoto950712/items/0d4736c7be251532a03f"},{"title":"【備忘録】Office365のメール流量制限まとめ","body":"組織の個人ユーザーが一般的にメールを使っている限り、流量制限に引っかかること考えにくい。しかし、流量制限に引っかかったケースがあったので、MSの公式ドキュメントなどから、備忘録でまとめみた。\n\n\n\n# 受信について\n\nメールボックスごとに、1時間当たり3600のメッセージ。\nこれを超えると送信元に「上限を超えたから配信不能な」と返信する、らしい。(試してないからわからないけど）\n\nかといって、ここまで受信できるかというとそうでもない。\nメッセージの追跡でステータスが[Pending]のメールを追跡したところ[recipientthread limit exceeded]になっていて、どうも「受信メールボックスが存在するデータベースが過負荷だから、サーバーを守るため配送スロットリングかけてるよ！」ってことらしい。\n\n■とりあえず対応\n\n1. 待つ。しばらく（数時間？）すれば順次リトライしてくれて、最終的にはメールボックスに届くので、待てばいい。\n\n2. メールボックスの強制移動。数時間も待てないケースは、メールボックスを移動させれば解消される。経験上、1~2時間ぐらい。PowerShellでExchangeに接続して、以下実行。\n\n    New-MoveRequest -identity <ユーザーのメールアドレス>\n\n■根本策\n\n送信元サーバーのIPが固定されているなら、「コネクタ」を作成する。\n\n\n# 送信について\n\nメールボックスごとに1日当たり10,000通、1分あたり3,600メッセージ。\nこれを超えるとメッセージの送信を拒否されるらしい。\n\n個人で使っているのにこの制限に引っかかることはないと思うけど、[正当なバルク メッセージ (たとえば、顧客向けのニュースレター) ]とか[システムアラートの送信]などを送信している場合は、考慮が必要。\n\n■とりあえず対応\n\nとりあえず、待つ。\n1時間待てばおくれるようになる。\nそれか、送信元アドレスを分ける。\n\n■システムから送信している場合\nいくつかの推奨構成が記載されているので、以下まとめ。\n\n\n1. マイクロソフトの推奨構成は「アプリからOffice365にサインインして送信する」。アプリから365にサインインする構成なので、通常の個人アカウントと何ら変わらない扱いができるし、システム構成もシンプル。\n\n\n2. 推奨構成が使えない場合で宛先がテナント内だけなら「アプリから365に直接送信する」。SPFレコードに送信元になるIPを追加する。「メールボックスごとに1日当たり10,000通、1分あたり3,600メッセージ」よりも制限は多いようだけど、じわじわ流量を増やさないとIPスロットリングの制限受けるので、注意。\n※コネクタは使えない\n\n\n3. 推奨構成が使えない場合で宛先にテナント外を含むなら「SMTPリレー」を使う。コネクタを作成して、SPFに追加する。メールボックスごとに1日当たり10,000通、1分あたり3,600メッセージ」よりも制限値は大きい。外部ドメイン宛にもメール送信できるけど、「バルクメールの送信はできません」と記載がある。\n\n\n4. 正当なバルクメッセージの送信をする場合は、「サードパーティプロバイダを使う」「オンプレミスのSMTPサーバーを使うことを真剣に検討」が良いらしい。\n\n\n\n# 参考にした情報\n\nExchange Online の制限\nhttps://docs.microsoft.com/ja-jp/office365/servicedescriptions/exchange-online-service-description/exchange-online-limits\n\nNew-MoveRequest\nhttps://docs.microsoft.com/en-us/powershell/module/exchange/move-and-migration/New-MoveRequest?view=exchange-ps\n\nOffice 365 を使用してメールを送信するように多機能デバイスまたはアプリケーションをセット アップする方法\nhttps://docs.microsoft.com/ja-jp/exchange/mail-flow-best-practices/how-to-set-up-a-multifunction-device-or-application-to-send-email-using-office-3\n\nIPスロットリングについて\nhttps://blogs.technet.microsoft.com/exchangeteamjp/2015/03/23/ip/\n","created_at":"2019-04-14T09:18:58+09:00","id":"fd58c1aac56733dc673b","tags":[{"name":"Office365","versions":[]},{"name":"ExchangeOnline","versions":[]}],"url":"https://qiita.com/hisssa0102/items/fd58c1aac56733dc673b"},{"title":"[Rust]HKTに対して関数定義","body":"\n\nhttps://keens.github.io/blog/2017/06/24/jienerikusubenkyoukaihosoku/\n\nここで紹介されている`HKT`に対して関数を定義したい。\n具体的には中身の数値（ここでは`i32`）を２乗する関数`square`を定義したい。\n\n```rust\ntrait HKT<U> {\n    type T;\n    type MU;\n}\n\ntrait Mappable<U>: HKT<U> {\n    fn map<F: FnOnce(Self::T) -> U>(self, f: F) -> Self::MU;\n}\n\nfn square<T>(mappable: T) -> T::MU\nwhere\n    T: Mappable<i32, T = i32>,\n{\n    mappable.map(|x| x * x)\n}\n```\n\nこれで完成。**`Mappable`に対して`T=i32`の型パラメータ指定ができる**ことに気づくまでに時間がかかった。\n\n例えば`Option`に対して実装するならこうなる。\n\n```rust\nimpl<T, U> HKT<U> for Option<T> {\n    type T = T;\n    type MU = Option<U>;\n}\n\nimpl<T, U> Mappable<U> for Option<T> {\n    fn map<F: FnOnce(Self::T) -> U>(self, f: F) -> Self::MU {\n        match self {\n            Some(v) => Some(f(v)),\n            None => None,\n        }\n    }\n}\n\nfn main() {\n    let a = Some(1i32);\n\n    println!(\"{:?}\", square(a));\n}\n```\n","created_at":"2019-04-14T09:18:57+09:00","id":"7c3ec5fa2fbbd7253f59","tags":[{"name":"チラシの裏","versions":[]}],"url":"https://qiita.com/maueki/items/7c3ec5fa2fbbd7253f59"},{"title":"【ターミナル改造①】容易さと高機能さで、気軽に多彩環境へ変えられる「fish」を導入","body":"- 白黒ターミナルを利用する生活が多くなってきた無機質生活に、少々彩りを加えるために奔走する記事第一弾。\n- あの賢人のみが扱える、門戸が狭い「CLI日常利用」を、これから自分が経験していくことに、心配の前に、色彩不足を感じてしまう。\n- 「導入が簡単で、カラフルで、イケてて・・・・」という、願望をただただ搾り尽くす、立場をわきまえない技術者。\n- 今回は、そんな私でも簡単に扱えて、強力な補完等の高機能を簡単に利用できる「fish」を導入することにしよう。\n\n## 概要\n- fishとは、「シンプル」「利用者が扱いやすい」「実用性の高さ」を持ったシェル(人間とコンピュータのための対話係)環境。\n- 視覚的かつ直感的に扱うことができるため、初心者や経験が浅くても、利用しやすい。\n- [公式サイト](https://fishshell.com/)\n\n## 特徴\n### 強力なサジェスト機能\n- 履歴や補完機能等に基づいた最適かつ強力なサジェスト(提案)機能を持つ。\n\n### 色彩豊かなサポート\n- [24ビットカラー](http://e-words.jp/w/24%E3%83%93%E3%83%83%E3%83%88%E3%82%AB%E3%83%A9%E3%83%BC.html)をサポートしているため、様々な色の形式での表示が可能。\n\n### 視覚的な強調表示\n- 構文の強調表示に加えて、誤ったコマンドにも色付けしてくれるため、間違いを減らせる。\n\n### GUIでの確認や操作も可能\n- 色彩・機能・履歴等といった設定が、ブラウザでも簡単に確認できる。\n\n### 標準設定でも高機能\n- 導入後のままのデフォルト(標準)設定でも、補完機能や強調表示等の様々な機能が扱える。\n\n## 結果\n- 下記のように、コマンドの強調表示や補完機能が利用できる。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/336499/ffc6cac9-7b8a-42ba-6909-a8a815eb903b.png)\n\n- また、誤ったコマンドの場合でも、リアルタイムで強調表示してくれる。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/336499/9425a4cb-1949-9553-5acc-c7412f97b048.png)\n\n## 導入\n### 環境\n- Mac OS X 10.13.4\n- Homebrew 2.1.0\n    - <font color=\"tomato\">※Windowsでのfish導入方法は、WSLを利用する方法があり、[詳細はこちら](https://qiita.com/kikuchi_kentaro/items/9dc441f64c17a38aad96)</font>\n\n### インストール\n- ターミナルを開き、下記のコマンドをうち、Homebrewの確認する。\n\n```bash\n# バージョン確認\n$ brew -v\n# バージョンが表示されなければ、下記でインストール\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n# 再度バージョン確認\n$ brew -v\n```\n\n- 下記のコマンドをうち、fishのインストールとバージョン確認\n\n```bash\n# fishのインストール\n$ brew install fish\n# バージョン確認\n$ fish -v\n\nfish, version X.X.X\n```\n\n- 下記のコマンドをうち、fishのパッケージマネージャーのfisherのインストールとバージョンを確認する。\n\n```bash\n# fisherのインストール\n$ curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish\n\n# バージョン確認\n$ fisher -v\n```\n\n### 標準シェル設定変更\n- ※fishをデフォルトの設定へ変更したくない人は、[こちらを参考](https://qiita.com/tak-onda/items/a90b63d9618d6b15c18c)にする。\n- 下記のコマンドをうち、標準のシェル設定を開く。\n\n```bash\n# 設定ファイルを開く。パスワードが求められるので、入力する。\n$ sudo vi /etc/shells\n```\n\n- 開かれたファイルの末尾に、下記を追加して保存する。\n\n```shell:/etc/shells\n/usr/local/bin/fish\n```\n\n- 下記のコマンドをうち、fishシェルへログインシェルを変更する。\n\n```bash\n# ログインシェルをfishシェルへ変更する。\n$ chsh -s /usr/local/bin/fish\n```\n\n- ターミナルを再起動して、fishが動作すれば完了。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/336499/a24b97e7-c5a7-9be8-f4ef-774526bba50e.png)\n\n### 動作確認\n- 下記のように、「補完設定」「誤りコマンドの強調表示」が行えたら、完了。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/336499/ed1793bc-e108-bdd4-d5f9-f9611d743068.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/336499/67a16d1a-5256-3d22-8511-3d893516883e.png)\n\n## パスやエイリアスの設定\n- ※bashrcやbash_profileにパスやエイリアスを設定していて、それを利用したい場合\n- 下記のコマンドをうち、設定ファイルを作成する。\n\n```bash\n# fish設定ファイルを作成する。\n$ touch ~/.config/fish/config.fish\n# fish設定ファイルを開く。\n$ vi ~/.config/fish/config.fish\n```\n\n- 作成した空の設定ファイルに、下記の例のように、パスやエイリアスの設定を記述する。。\n    - ※aliasの設定は、bashと同じ記述で行える。\n\n```shell:config.fish\nset -x PATH $PATH:/Applications/XXXX/XXXXX/XXX\nset -x PATH $HOME/.XXXXX/XXXXXX/bin:$PATH\n\nalias ll='ls -lah'\nalias opch='open -a google\\ chrome'\n```\n- 記述して、保存後、下記のコマンドをうち、設定ファイルを読み込む\n\n```bash\n# config.fishファイルを読み込む\n$ source ~/.config/fish/config.fish \n```\n\n## GUIでの設定操作\n- 下記のコマンドをうち、ブラウザで設定画面を開く。\n\n```bash\n# ローカルサーバーで設定画面が開く。\n$ fish_config\n```\n\n- 下記の画面が表示される。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/336499/064ac0a7-154f-eea1-3dda-83664d38de42.png)\n\n- この画面で、色のショートカットキー等の設定や、履歴の確認もできる。\n\n## プラグインの利用\n- fisherというプラグイン(拡張)を利用することで、更に効率的かつ便利なターミナル環境にすることができる。\n\n### 基本コマンド\n- 下記の方式で、追加や削除、更新等を行う。\n\n```bash\n# パッケージの追加\n$ fisher add パッケージ名\n# パッケージの削除\n$ fisher rm パッケージ名\n# 全パッケージの更新\n$ fisher\n# インストール済みパッケージの一覧\n$ fisher ls\n# コマンド一覧\n$ fisher -h\n```\n\n### パッケージ利用例\n- ※今回は最初のチュートリアルのため、一個のみの導入とする。他おすすめパッケージは[こちらで紹介](https://qiita.com/susieyy/items/ac2133e249f252dc9a34)されています。\n- 利用するパッケージは、下記。\n    - 「z」 : 履歴に基づいて、パス候補を表示してくれる。あいまいな文字列でもしっかり検索できる。\n\n- 下記のコマンドをうち、zパッケージを追加する。\n\n```bash\n$ fisher add jethrokuan/z\n```\n\n- 導入後、下記のコマンドをうち、使用感を試してみる\n\n```bash\n# 利用履歴に基づいているため、色々試す。\n$ cd ~/Desktop\n$ mkdir test\n$ touch ~/Desktop/test/hello.py\n# 「z 文字列」のように検索する\n# 下記のコマンドの後に、tabキーを押して、指定フォルダを簡単表示\n$ z test\n```\n\n## まとめ\n- 今回はfish shellの試用ということで、「本当に簡単にお洒落技術者気分を味わえた」と、素晴らしき高機能さは二の次で、外面を気にし続けながら記事を書く。\n- 「自動で最適なコマンドを教えてくれる、先生的拡張機能あるかな」と、時代の素晴らしさに完全に甘えてしまった他人依存思考。\n- 次回の更なる改造のために、「スタバ技術者を堂々観察」「泥臭調査」等に励むことにしよう。\n\n## 参考\n- https://dev.classmethod.jp/etc/fish-shell-life/  \n→こちらの記事を参考にしました。大変お世話になりました。\n- https://qiita.com/tak-onda/items/a90b63d9618d6b15c18c  \n→シェル設定に関して参考にしました。大変お世話になりました。\n- https://qiita.com/susieyy/items/ac2133e249f252dc9a34  \n→プラグインに関して参考にしました。大変お世話になりました。\n- https://qiita.com/kikuchi_kentaro/items/9dc441f64c17a38aad96  \n→Windowsでのfish設定に関して参考にしました。大変お世話になりました。\n","created_at":"2019-04-14T08:58:03+09:00","id":"1024197cd93ede2f6e3d","tags":[{"name":"Mac","versions":[]},{"name":"Terminal","versions":[]},{"name":"fish","versions":[]},{"name":"初心者","versions":[]},{"name":"fisherman","versions":[]}],"url":"https://qiita.com/t_o_d/items/1024197cd93ede2f6e3d"},{"title":"Rails Tutorial まとめ(1〜2章)","body":"# 目次\n- 目的\n- MVC\n- REST\n- Gitでのバージョン管理\n- Herokuへのデプロイ\n- アプリケーションの計画\n- まとめ\n- 参考資料\n\n# 目的\nwebアプリでマイクロポストの投稿や簡単なログイン機構は作りそろそろ本格的なものを作りたく\nRails Tutorialに取り組みましたのでその内容をまとめました。\n\n文量が多くなるため記事を分割して投稿します。\n\n# MVC\nMVCはModel View Controllerの略称で構成としてデータの表示部とデータ&内部ロジックを分離するデザインパターン。\nメリット\n\n- データの取り扱いと表示と内部処理を分けることで並列でそれぞれに取り組める\n- 分離することで保守性を高めることが可能\n\n# REST\n- REpresentational State Transferの略でwebアプリなどのシステムを構築するためのアーキテクチャの手法\n- RailsにおけるRESTはアプリを構成する要素をリソースとしてモデル化することを指す\n- 上記リソースはRDBの作成/取得/更新/排除(CRUD)の操作とHttpリクエストメソッドのPOST/GET/PATCH/DELETE操作が対応付けられている\n- ステートレスであるためリクエストに対してリソースが必要十分な情報となりセッション情報がシンプルでスケーラブルなシステムとして扱える\n\n# Gitのバージョン管理\n- 早見表\n\n| コマンド | 処理内容 |\n| :-: | --- |\n| git init | リポジトリの初期化 | \n| git add . | 変更した全ファイルをリポジトリに追加 |\n| git status | 待機用リポジトリに置かれた(ステージング)状態を確認 | \n| git commit -m \"commit comment\" | ステージング状態のリポジトリを反映する |\n| git log | commit内容を確認できる |\n| git remote add origin リポジトリのURL.git | リモートリポジトリを設定する |\n| git push origin master | masterブランチを設定したリモートリポジトリに反映させる |\n| git checkpout -b branchname | 指定した名前でブランチを作成 |\n| git branch | 作成したブランチを確認 |\n| git checkout branchname | 指定したブランチに切り替える |\n| git merge master | masterとcommitしたブランチをマージする |\n\n# Herokuへのデプロイ\n- 本番環境用にpostgresqlを使用\n\n```ruby:&nbsp;gemfileのgemをインストール\nbundle install\n```\n- herokuアカウント作成\n- herokuをインストール\n\n```ruby:&nbsp;herokuがインストールされたか確認\nheroku --version\n```\n```ruby:&nbsp;SSHキー作成\nheroku login\nheroku keys:add\nheroku create\n```\n```ruby:&nbsp;Herokuリポジトリにプッシュ\ngit push heroku master\n```\n```ruby:&nbsp;Herokuリポジトリにプッシュ\ngit push heroku master\n```\n```ruby:&nbsp;プッシュしたリポジトリを開く\nheroku open\n```\n```ruby:&nbsp;Herokuのログ確認\nheroku logs -t\n```\n```ruby:&nbsp;アプリケーション名変更\nheroku rename rails-tutorial-hello\n```\n\n# アプリケーションの計画\n- アプリケーションの構造を表すためデータモデルを始めに作る<br>\nデータモデル例: users \n\n| Column | Data Type |\n| :-: | --- |\n| id | interger |\n| name | string |\n| email | string |\n\n- データモデルを呼び出すコントローラーの作成\n- 呼び出したデータを表示するビューの作成\n\n# まとめ\n今回はwebアプリを作成し始める前段階で知っておくべき知識と準備について大まかにまとめました。\nMVCやRESTについては参考資料でわかりやすくまとまっているので詳しく知りたい方は参照の方よろしくお願いします。\n\n多々言葉足らずや誤りがあるかもしれませんのでご指摘の方どしどしお願いします。\n\n# 参考資料\n\n- [MVCとは何ぞというところを考えてみる](https://qiita.com/yamadamt/items/dc21a9510f1c2c6f5f3e)\n- [REST入門 基礎知識](https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa)\n","created_at":"2019-04-14T08:57:35+09:00","id":"62a9a570d6f86a4e1adb","tags":[{"name":"Rails","versions":[]},{"name":"#","versions":[]},{"name":"#初心者","versions":[]},{"name":"#railsチュートリアル","versions":[]}],"url":"https://qiita.com/greatestgoat/items/62a9a570d6f86a4e1adb"},{"title":"Azure DevOpsの使い方","body":"アプリケーションを開発していると、ローカルで開発、テスト環境でのテスト(ユニットテスト、UIテスト)、ステージング環境での運用テスト、本番環境と環境を分けてやりたくなる事がよくあります(お客様に提供するようなアプリケーションの場合はよくある話)\nこれを、人手でやるのは大変。\nそこで、Azure DevOpsを使って環境構築してみました。\n\nちなみに、プレビューのAzure Dev Spacesもやってみましたが、こちらは大規模開発向けのような感じだったのと、最後のazds upがどうもうまく動かないので、断念しました･･･。\n\n# 前提\n今回取り上げるプロジェクトは、以下の環境が前提です。\n\n* クライアント: Angular\n* サーバー: Node.js,NestJS,GraphQL,TypeORM,SQL Server\n* ビルド環境\n    *   クライアント: ng build\n    *   サーバー: webpack+gulp\n    *   Docker利用\n\n# アカウントの登録\nAzureとAzure DevOpsのアカウントを登録しましょう。\nいつか統合されることを願います。\nちなみに、Azureを使いますので、費用は多少かかります。\n\n* Azureは、https://azure.microsoft.com/ja-jp/\n* Azure DevOpsは、https://azure.microsoft.com/ja-jp/services/devops/\n\n# Azure コンテナーレジストリの作成\nAzureにログインして、すべてのリソースのコンテナーからコンテナーレジストリを使います。\nコンテナーレジストリは他にも、Dcoker Hub、オリジナルのレジストリを使う方法もありますが、Azureを使う事が前提なので、レジストリーもAzureに作ります。\n\n<img width=\"995\" alt=\"registry.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/3c2654a1-9937-ea09-7e27-3b546ff0226c.png\">\n\nSKUは一番安いBasic、管理者ユーザは認証が必要なので有効にします。\n\n![createregistry.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/9e6d6ed9-ff4d-b034-dd5d-09504fa32f36.png)\n\n# Dockerfileの作成\nAzure DevOpsのパイプラインを作成すると、Dockerfileを元にしたビルドが実行されます。\nですので、まずDockerfileを作成し、ソース管理(GitHub)にpushしておきましょう。\n\n```file:Dockerfile\n# 環境\n# サーバー: Node.js,NestJS,GraphQL,TypeORM,SQL Server\n# ビルド環境\n#   サーバー: webpack+gulp\n\n# 使用するNode.jsのバージョンを設定(ローカル環境に合わせておく)\nFROM node:10.15.3\n\n# ポート番号を指定\nENV PORT 3000\nEXPOSE 3000\n\nCOPY package.json package-lock.json ./\n\n# package.jsonをコンテナにコピーし、必要なパッケージをインストールする\nRUN npm --unsafe-perm ci\n\n# PM2をインストールする\nRUN npm install pm2 -g\n\n# ソースをコピーする(コピーしないファイルは.dockerignoreで制御)\nCOPY . .\n\n# 環境変数を設定する\nENV NODE_ENV=production\n\n# ビルドする(gulpでサーバー、DBマイグレーションをビルド)\nRUN npm run build\n\n# node.jsアプリケーションを実行する\nCMD [\"pm2-runtime\", \"/dist/server/server.js\"]\n```\n\n# Azure DevOps環境の設定\nAzure DevOpsの環境を構築していきましょう。\n\n## 組織の作成\nAzure DevOpsにログインするとまずは組織を作成が必要です。\n以下の画面が表示されるので、Continueで進みましょう。\n\n![startorg.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/a128793b-f25d-c849-0cfb-ab676ae0a0db.png)\n\n## 組織名とリージョンの指定\n組織名とリージョンを指定します。日本から近いであろうEast Asiaを選択します(あまり拘らなくてもいいと思いますが)\n\n![nameorg.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/f294ec40-0939-d30b-1f6f-8ccfd4cf8a94.png)\n\n## プロジェクトの作成\n次にDevOpsしたいプロジェクトを作成します。\n\n![project.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/8282fecb-26b0-ce7c-b270-a78134fa9e4f.png)\n\n作成できました。\n\n![welcome.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/71517aaa-9f70-e8cf-b3a5-990819341e86.png)\n\n# ビルドパイプラインの作成\n左のメニューから、Pipelinesを選択します。\n次に右の画面の、New PipelineをクリックしてPipelineを作成します。\n\n![newpipeline.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/f4d480e1-5bca-31ec-d2a9-1100ec4e473f.png)\n\nどこにあるコードと接続するかを聞いてきます。今回はGitHubを使いますので、GitHubを選択します(ご自分の環境に合わせて選択してください)\n\n<img width=\"445\" alt=\"connect.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/6b371651-0feb-319c-3fbe-f172ed95686d.png\">\n\nGitHubにあるリポジトリが表示されますので、使うリポジトリを選択します。\n\n![selrepo.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/981f0df7-b1c8-a736-db87-3dcc65f5e571.png)\n\n作成するPipelineのタイプを選択します。前提条件にあるとおり、ここではDockerを利用しますので、「Docker image」を選択します。\n\n<img width=\"455\" alt=\"confpipeline.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/3d4f429f-ece5-2c24-8f0c-5846aac8e04f.png\">\n\nazure-pipelines.ymlのひな形が作成されます。\nimageNameを作成したイメージ名(普通はプロジェクト名と同じでOK)を指定します。\n\n![yml.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/38f25a3f-5aef-2867-5a3c-8a2cb1abc26f.png)\n\n「Save and Run」をクリックします。\nパイプラインの名称を入力します。\n\n事前に準備しておいたDockerfileの定義に沿ってビルドが実行されます。\n\n<img width=\"586\" alt=\"build.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/8f2419d1-907a-9081-de53-2d5453ee346a.png\">\n\nここでは、ビルドが成功しても失敗しても構いません。次に進みましょう。\n\n# Dokerイメージを作成して、レジストリにpush\nここでは、Dockerイメージを作成し、Azureコンテナーレジストリにpushすると言うことを行います。\n大まかな手順は以下の通りです。\n\n* Dockerイメージをビルドする\n* DockerイメージをAzureコンテナーレジストリに登録する\n\n## Azureコンテナーレジストリの認証情報の取得\nAzureコンテナーレジストリは、認証を行うように設定しましたので、pushする際にユーザ名とパスワードが必要になります。\nDockerイメージをpushするために、認証に必要な情報を取得します。Azureに作成したAzureコンテナーレジストリを開き、アクセスキーを開いてください。\n\n![accesskey.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/bd96f9fd-ab7d-f090-6d87-cb8fa2043b60.png)\n\n以下の情報をメモします。\n\n*ログインサーバー\n* ユーザ名\n* Password\n\n## 環境変数の設定\n上で取得した情報をdocker loginのパラメータに渡す必要があります(-uと-pオプションを使います)\nこれを、azure-pipelines.ymlに書いて行くのですが、ここで注意が必要です。\nazure-pipelines.ymlは、GitHub経由でAzure DevOpsに渡されます。docker loginに渡すユーザID、パスワード、レジストリ名は、重要な情報なので、azure-pipelines.ymlに書くべきではありません。\nそこで、パイプラインの実行に必要な情報を、Azure DevOpsに定義します。\n作成したパイプラインを開くと、Libraryというメニューがあります。\nそこから、Variable groupを作成し、変数を定義します。設定したら、Saveで保存します。\n\n<img width=\"400\" alt=\"val.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/bd202f70-d62b-a0e2-7536-97cffaac77d7.png\">\n\n各列に鍵マークが付いているので、クリックして見えないようにしておきましょう(重要)\n\n## azure-pipelines.ymlの編集\nazure-pipelines.ymlは以下のように編集します。\n\n* Azure DevOpsのLibraryでVariable groupを作成します(パスワードなどのシークレット情報を管理)\n    * 下で<variable group>となっているところがそれです(具体的にはdokerPasswordだけをVariable groupで管理しています)\n* Dockerレジストリには、Azureコンテナーレジストリを利用\n    * Azureコンテナーレジストリは管理ユーザーが有効\n    * $(dockerId)は、Azureコンテナーレジストリのユーザ名\n\n\n```yaml:azure-pipelines.yml\n# Docker image\n# Build a Docker image to deploy, run, or push to a container registry.\n# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/languages/docker\n\ntrigger:\n- develop\n\npool:\n  vmImage: 'Ubuntu-16.04'\n\nvariables:\n- group: <variable group>\n- name: dockerId\n  value: <dockerid>\n- name: imageName\n  value: <imagename>:$(build.buildid)\n- name: dockerUrl\n  value: $(dockerId).azurecr.io\n\nsteps:\n- script: |\n    docker build -t $(dockerUrl)/$(imageName) .\n    docker login -u $(dockerId) -p $(dockerPassword) $(dockerUrl)\n    docker push $(dockerUrl)/$(imageName)\n  displayName: Build Docker image\n```\n\n## Buildの実行\nここでビルドして、Dockerイメージが正常に作成され、Azureコンテナーレジストリに登録されることを確認しましょう。\nDockerイメージの作成に慣れた人なら問題無くクリアできるのかも知れませんが、私はすごく苦労しました。\nつまづきポイントは以下の通りです(参考になれば･･･)\n\n* まずpackage.jsonとpackege-lock.jsonだけをコピーして、npm ciでインストールする\n* インストールの過程でnodeなんかを実行する必要がある場合(例えば、bcryptを使っている場合)、npm --unsafe-perm ciとする必要がある\n* azure-pipelines.ymlの書き方を調べて見ると、いろんなバリエーションがあり(情報が古いのか、動作しない情報も多い)、正解を見つけるのが大変。\n\n## 作成されたDockerイメージの作成\nAzureコンテナーレジストリで、サービスのリポジトリを確認して、Dockerイメージが作成されているのを確認しましょう。\n\n![repo.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/334727/0fd66122-d016-bc4f-2d4d-03e8536868b2.png)\n \n思いのほか、大変です。\n\n\n\n","created_at":"2019-04-14T08:43:53+09:00","id":"924fdcb2f2a7f5131e7f","tags":[{"name":"Azure","versions":[]},{"name":"devops","versions":[]},{"name":"dcoker","versions":[]}],"url":"https://qiita.com/kmatae/items/924fdcb2f2a7f5131e7f"},{"title":"掃除機Hack!","body":"深センで、掃除機を買ってみました。\n![IMG_20181209_122554.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/31021f8f-cdab-01b7-a07f-1d58a0955ae0.jpeg)\n\n\n買ったのは、電気街です。少し値切って７００元。日本円で１万円少々ですね。\n\n\n![IMG_20181209_121525.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/5a1e3d93-574a-b78e-49fa-877554b6b4b3.jpeg)\n\n\nどうして掃除機を買ったかというと、深センで基板を作成するワークショップをやったのですが、\n![IMG_20181207_110520.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/608a6790-bfba-b252-d34e-fac313ecbce8.jpeg)\n\n参加者のひとりがロボットのプロトタイピングで足回りを作りたいということで、メカ部を既存品を流用して作ろうとしました。電気街で使えそうなものとして、掃除機を選定しました。\n\n# 掃除機の機能\n\n梱包内容\n![IMG_20190414_073220.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/8d5a02e7-9a75-1e54-f4eb-8452134171ed.jpeg)\n\n掃除をする機能のほか、充電ステーションに自動帰還して充電ができます。\n\n![IMG_20181209_124905.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/9d9a4e89-c3ed-fc43-3840-b1a64355d445.jpeg)\n\n\n\n# Hack その1 内部調査\n\n\n分解をします。\n![IMG_20181209_131156.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/76325532-6fea-b107-ceb7-d0e04e787564.jpeg)\n\nコントローラー基板\n![IMG_20181209_131420.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/415fc289-5cf4-e07f-5241-933eb0075aef.jpeg)\n\nコントローラー基板の裏側です\n![IMG_20181209_131510.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/d502cfb8-6475-69e1-b428-52889045634e.jpeg)\n\n![IMG_20181211_110129.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/ef0f0541-aaf3-54d9-9ddf-784a80fe90b6.jpeg)\nセンサーなどいろいろついています\n![IMG_20190326_201832.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/a94fe7e1-3de9-eec2-03ba-4bb94a2b38ff.jpeg)\n\n\n\n\nモーターユニットです\n\n![IMG_20181211_110411.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/51c8035e-db08-519b-3fa2-ffd095a0bae8.jpeg)\n\nモーターにはエンコーダーがついています\n![IMG_20181211_110732.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/712c5cef-57a8-7789-8656-4d318546321b.jpeg)\n\n\n\n# Hack その2 外部にハードウェアをつなげてコントロール\n\nさて、これの制御を乗っ取って、自由にコントロールできるようにします。\n\n\nモーターコネクタ\n![IMG_20181211_110212.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/2f75057c-cc2d-2d38-5e3c-8a1aa9967949.jpeg)\n\nコネクタから配線をたどると、モータードライバがありました。\n![IMG_20181211_111556.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/28da0ed1-804f-6b06-ea98-ecadf5e61f01.jpeg)\n\n\n\nモータードライバーはこれでした\nhttps://www.allegromicro.com/\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/139524/a4733db1-477d-b2e5-9de3-3ea7ceceb9c7.png)\n\n\nデータシートから、ピン２番と３番に信号を入れるといいみたいです\n\nモータードライバの制御信号をインジェクションして\n\n![IMG_20181211_142740.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/0f74bdfe-0529-5cbb-cd8b-74adaac85911.jpeg)\n\n改造して線を外に出してきます\n\n\n![IMG_20181211_145046.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/ec2ec613-c0cd-d906-47c7-07956ed379c7.jpeg)\n\nESP32から信号を送るようにしました\n\n![IMG_20181211_152800.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/644829b1-3b75-1183-b3ae-b6d61a3c51b4.jpeg)\n\n\nスマホのアプリから、ボタンを押すとこのようなASCIIキャラクタを送信するように設定しました\n![Screenshot_20181211-164718.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/d69d9ab1-e650-b8c1-6d79-99b9dceeeeac.jpeg)\n\n\n動かしているところ\n\n![IMG_20181212_121027.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/9d4e36c0-1cc7-2e99-b9a3-25d598f89723.jpeg)\n\n\n# Hack その3 プログラム書き換え制御\n\nさて、ロボットの足回りの試作はできたのですが、調べているとマイコンにSTMicrosystems STM32が入ってました\n![IMG_20181209_131719.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/110fe728-9a8d-bb22-5991-8dd17b076d7e.jpeg)\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/139524/3ea059f7-5c73-7081-3ead-38c18b6cd585.png)\n\n\nここにプログラムポートが出ていました\n![IMG_20190208_144913.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/f5680e3e-e2cb-a3af-027a-956a5f9f961c.jpeg)\n\nということは、プログラム書き換えできるのではないでしょうか。\n\n配線します\n![IMG_20190208_161029.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/30217f10-01ac-8f30-a202-afec4edff527.jpeg)\n\nここに、ST-Linkをつなげました。\n\nプロテクトかかってましたが、あれこれ試しているとプログラムが書き換えできました。\n\n\n後にインターフェースケーブルを購入\n![IMG_20190326_174245.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/357cdaf5-ca55-5be7-b61c-fb253c528c5d.jpeg)\n\n\nこれで、いろんなプロトタイプのベースとしての活用ができるようになりました。\n\n# Hack その4 教育用に応用\n\n電子工作ではまず最初にLチカをしますが\n![IMG_20181209_104528.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/76e06582-267b-9d08-f2b7-c6952a488e64.jpeg)\n\n\nその次、何をするかというと結構困ってしまいます。ロボットやりたいけれど高い・・・\n\nでもこの掃除機であれば制御が簡単で、値段も安く、パワフルでいろいろ応用できそうです。\n\n\n\nArduBlockでプログラムすると、こんな感じでモーターを動かすテストができます。\n\n![IMG_20181211_160703.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/9f65e896-d334-4dc1-0bbb-debe1afeee8a.jpeg)\n\nブロックプログラミングしているところ\n![IMG_20181211_160655.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/505939be-d474-17b8-4a89-d3d351e2f362.jpeg)\n\n\nこのように考えて楽しくプログラムできるのではないでしょうか。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/a8a6dcae-9197-c262-5ec2-d5101476c0d9.png)\n\n\n# Hack その5 工場突撃\n\n掃除機を、教育用に応用することができるように掃除機の会社と協力してもらえないかと考えました。\n\n掃除機の工場へ行ってきました\n\n![IMG_20190304_133414.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/0be69977-0b7c-07d4-3f9e-4ea76279bcf1.jpeg)\n\nプレゼンしてきました\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/1b1b03c6-0b1d-9a82-97af-809faf7c341c.png)\n\nマブダチになりました\n\n![IMG_20190304_151142.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/139524/e4f0a704-69d9-7c10-289a-2286121a01c5.jpeg)\n\n今後、ワークショップなどやっていくつもりで準備をしています。\n\n\n\n","created_at":"2019-04-14T08:42:41+09:00","id":"6b7c2ee0a9b75843097e","tags":[{"name":"Arduino","versions":[]},{"name":"STM32","versions":[]},{"name":"深セン","versions":[]},{"name":"掃除機","versions":[]}],"url":"https://qiita.com/nanbuwks/items/6b7c2ee0a9b75843097e"},{"title":"GCPのアーキテクチャ作図は公式のフォーマットを使うのが一番良さげ","body":"# はじめに\n\nGCP関連の記事や設計書を書く上で欠かせないのがGCPのコンポーネントのアイコンやアーキテクチャ図\n\nたいした内容じゃないけど、備忘として記事化しておく。\n\nちょっと調べたら分かることだけど、GoogleはGCPや関連技術を説明するためのコンポーネントアイコンだけでなく資料を一から説明しないでも済むようにPowerPointやGoogleSlideを豊富に[公式サイト](https://cloud.google.com/icons/)で紹介してくれている\n\nhttp://cloud.google.com/icons/\n\n![スクリーンショット 2019-04-14 7.46.35.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55225/1ee9a72c-dfcc-1c1f-1c9f-ec00a2446db5.png)\n\nしかも中身を色々と探ってみると、単にGCP関連のアイコンだけでなく色々な分野の技術を説明する上でユーザーが一から資料を作らなくても済むように様々なフォーマットを用意してくれている\n\n勿論、公式が展開しているだけあってこれらのアイコンは資料やアーキテクチャ図を作成する際に許可なく利用可能である\n\n\n# Googleスライドのコンテンツ\nPowerPointはボタンをクリックすると資料がダウンロードされてそのまま使えるのは良いものの、他のメンバーと共有しながら作業するにはやや使いずらいのでGoogleスライドをベースにコンテンツの内容を紹介したい\n\n[Googleスライドの公式フォーマット リンク](http://docs.google.com/presentation/d/1vjm5YdmOH5LrubFhHf1vlqW2O9Z2UqdWA8biN3e8K5U/edit)\n\n## アイコン一覧\nはじめにGCPが展開しているサービスのアイコンを一気にまとめているページがあり、必要に応じてここから自分が用いるサービスをコピってきてアーキテクチャ図を作成できる\n\n![スクリーンショット 2019-04-14 8.11.51.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55225/96f0bf7e-3269-9788-f121-43917e011f2f.png)\n\n## ダイヤグラム一覧\nGCPに関連するサービスアイコンだけでなくそれらの繋がりや構成を示すためのダイヤグラムもかなり豊富に用意してくれている\n\n![スクリーンショット 2019-04-14 8.16.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55225/af126701-a3d2-b65d-e81b-7a90c27f024c.png)\n\nこれでヘッダーやフッターなどに悩む必要なし\n\n## マテリアルアイコン\nGCPに関わらず社会全般のアイコンを取ってきたい場合は、ここから取得するようにレコメンドされている\n\n[material.io](http://material.io/tools/icons/)\n\n大抵のイメージアイコンならこのサイトで事足りる気がする\n\n## ダイヤグラム例(General)\nここからがとてもありがたいコンテンツなのだが、いくつかの代表的なアーキテクチャパターンをすでにフォーマットとして作図してくれているので、基本はこれらをちょこちょこカスタムするだけで作図がすぐにできるようにしてくれている\n\n![スクリーンショット 2019-04-14 8.26.13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55225/7b18c4f9-4b4c-051c-8641-21e1b538b051.png)\n\n\n## ダイヤグラム例（業界別）\nさらに踏み込んで業界別に使いそうなコンポーネントをまとめてアーキテクチャ図をすでに複数パターン用意してくれている\n\n用意されているパターンの一部を紹介すると\n\n- ゲームアプリのバックエンド\n- 映像コンテンツのリアルタイム配信\n- リアルタイムビッディング\n- センサー情報の収集機能\n- 時系列分析\n- 不正検知\n\nなどなど、これ以外にも非常に多くのパターンがすでに用意されている\n\n![スクリーンショット 2019-04-14 8.29.54.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55225/f090f29e-f8d3-c410-0d58-d396da54bc78.png)\n\n\n# Draw.ioで作図\n作図するだけならPowerpointやGoogleSlideでやらずにDraw.ioでやった方が効率が良いと思われる\n\nDraw.ioにGCP関連のコンポーネントがプリセットされているので、これらを使って実際にアーキテクチャ図\nを作成することができる\n\n[フォーマットサンプル](https://www.draw.io/?splash=0&libs=gcp)\n\n![スクリーンショット 2019-04-14 7.59.24.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55225/dd17fff4-c4bd-3c9f-d8bd-1ed850129f40.png)\n\nこんな感じのアーキテクチャ図を１０分ほどで簡単に作成できる\n\nCacooやLucidChart（GCPNext19にも出展してた）でも同じようなことができるが、Draw.ioが登録なども不要で一番取っつきやすい感あり\n\n\nおしまい\n\n\n\n","created_at":"2019-04-14T08:36:23+09:00","id":"6dc700063af31473d94d","tags":[{"name":"gcp","versions":[]}],"url":"https://qiita.com/Hyperion13fleet/items/6dc700063af31473d94d"},{"title":"Dart-Controle Flow statements","body":"# Dart-Controle Flow statements\nDart言語における条件分岐やループ処理等を整理します。\n\n## 条件分岐\n\n### if文\nまんまJavaと一緒の書き方です。\n\n```dart\nvoid main(List<String> args) {\n  bool flg = false;\n\n  if(flg == true) {\n    print(\"true\");\n  } else if(flg == false) {\n    print(\"false\");\n  } else {\n    print(\"else\");\n  }\n}\n```\n\n### switch文\nこれもjavaと一緒の書き方です。\n\n```dart\nvoid main(List<String> args) {\n  String command = 'OPEN';\n  switch(command) {\n    case 'COLOSED' :\n      print('CLOSED');\n      break;\n    case 'OPEN' :\n      print('OPEN');\n      break;\n    default:\n      print('DEFAULT');\n  }\n}\n```\n\n## ループ\n\n### for文\ndartにおけるfor文は三種類の書き方ができます。\n\n```dart\nvoid main(List<String> args) {\n  List<int> list = [1,2,3];\n\n  // 一般的な書き方\n  for(int i = 0; i < list.length; i++) {\n    print(list[i]);\n  }\n\n  // クロージャーを使用した書き方\n  //{}は省略可能\n  list.forEach((i) => {print(i)});\n\n  // 拡張for文\n  for(int i in list) {\n    print(i);\n  }\n}\n```\n\n","created_at":"2019-04-14T08:25:48+09:00","id":"d3d55d474abb024a4c4a","tags":[{"name":"Dart","versions":[]}],"url":"https://qiita.com/gosutesu/items/d3d55d474abb024a4c4a"},{"title":"とあるRailsエンジニアが再就職活動を共有したがっているようだ 2019-04-13 on Twitter","body":"# プログラミングが体からはみ出る時。\n\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116725188115218437\">2019-04-12 15:30:07 UTC</a>\n# 嘘をつくのが苦手な人も得意な人もそれぞれに得意な仕事があると思った。\n\n\n>わたしは嘘が大嫌いで、\n>\n>以前仕事で嘘をつかなきゃいけないとき\n>ストレスがすごかった。\n>\n>だから今は\n>自分そのままで生きるようにしてる。\n>\n>可愛いね。\n>素敵だね。\n>そうは思わないな。\n>\n>今のわたしから出る言葉は全部本音です。\n>\n>ということで正直に言うと\n>\n>ログサボってました。\n>ちゃんとつけます😇<https://twitter.com/sena_m01/status/1116286347604422656>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116792558108069888\">2019-04-12 19:57:49 UTC</a>\n# とあるRailsエンジニアが再就職活動を共有したがっているようだ 2019-04-12 on Twitter\n<https://github.com/YumaInaura/YumaInaura/issues/1228>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116821424277262336\">2019-04-12 21:52:31 UTC</a>\n# 子供の頃「スーパーロボット大戦」や「大戦略」や「信長の野望」が好きだったかどうかによって、エンジニアの戦略性って変わってくると思うんだよね。\n\n\n>みんなエンジニア転職を真面目に考えすぎ\n>自社開発がダメだったら\n>テキトーにSES入って\n>それもダメだったら半年くらいでやめて\n>面談でうまい具合にやる気と伸び代を話して\n>自社開発に入ればいい\n>それでもダメだったらもうその頃にはある程度の技術と経験値があるはずだから\n>フリーランスを考えればいい<https://twitter.com/com_y_0/status/1116295184680214528>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116824072048889857\">2019-04-12 22:03:03 UTC</a>\n# すべての技術職に言えることかもしれないが、エンジニアでも業務をはじめてしまうと、意外に空白がなくなって、新しいことを覚えられなくなる現象は起きるかもなあ。\nプロだからすごいというわけではなくて、プロだからこそすごくない人もいるのは、この理由なのかもなあ。空白って大事だよね。j\n\n>アニメ「ケムリクサ」を見てた時主人公ワカバが言ったひとこと\n>\n>「何も知らないってことは、新しいことたくさん覚えられるので、最高に楽しいです！」<https://twitter.com/com_y_0/status/1116687722893205505>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116824568847409153\">2019-04-12 22:05:01 UTC</a>\n# エンジニアはその高い集中力での、頭脳労働のストレスを解消できる分だけの、強い筋トレが必要なのかもしれないな。\n筋トレで一気に解消するか、禅やヨガやマインドフルネスで常時継続的にエネルギーを逃していくか。どちらにしてもエネルギーの逃げ道が必要だと思う。j\n\n>いろんな業界に友達がいるからわかるんだけど\n>\n>IT業界(特にエンジニア)ほど、本気で筋トレをしてる人が多い業界を見たことがない\n>\n>お金と時間と体力に余裕があるからなのか？\n>\n>仕事柄不健康になりやすいからなのか？<https://twitter.com/com_y_0/status/1116672599155716096>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116825010893541376\">2019-04-12 22:06:46 UTC</a>\n# 自分がどのような気質で、どのようなトリガーでプログラミングに取り組みたくなるかということは、本当に理解すればするほど良くて、たとえば僕の場合は自分の好きな場所にいること、太陽の差し込むカフェでゆったりと過ごしながらだと、本当に手が進みやすかったりする。\n生涯かけて自己理解。j\n\n>【プログラミング学習を続ける為に大事な要素３つ】\n>\n>①同じ目標に受かって一緒に勉強する仲間・ライバル\n>②学習で詰まった時に気軽に質問出来るメンター\n>③スクールなどの学習を強制してくれる環境<https://twitter.com/com_y_0/status/1116657419650850816>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116825399965540353\">2019-04-12 22:08:19 UTC</a>\n# エンジニアの就職や転職でも自分の軸があると役立つ。\nというよりも自分軸を見つけていないと、当たり前だがブレてしまう。そしてブレてしまった先の幸福可能性は低いかもしれない。だがしかし自分軸を見つけるという行為自体が、技術を要求されることではあるよね。セルフ何スキルと言ったら良いか。j\n\n>転職の時に色んな企業をみて迷ったら\n>\n>絶対に譲れない部分を１つだけ決めてそれを軸に転職活動をすると早く決まりやすいです\n>\n>ぼくは１つの会社にずっといるつもりはなかったので\n>\n>「フリーランスになりやすい言語かどうか」と「エンジニアとして成長できるか」だけを軸にしていました<https://twitter.com/com_y_0/status/1116280026033459201>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116825821316931584\">2019-04-12 22:10:00 UTC</a>\n# Twitterにガッツリとプロフィールシートを書いてエンジニア転職を試みてる人もいるんだなあ。\nTwitterというと自分をブランド化して、SNSの信用経済に乗って活用‥などなどというイメージがあったけれど、単に求職票や、掲示板的に使う方法もあるみたいだ。j\n\n>希望職種:Web開発のバックエンドエンジニア\n>勤務地:埼玉, 東京\n>希望年収:280〜\n>年齢:21歳\n>言語:PHP, Python3, C, HTML, CSS\n>フレームワーク:Laravel\n>データベース:MySQL\n>環境:Linux, Windows\n>趣味:勉強(特に英語, IT), ペンテスト\n>備考:実務未経験, プロフにGithub\n>#就活 #プログラマ #ツイッター転職<https://twitter.com/from_you_import/status/1116002647461392386>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116828093371469834\">2019-04-12 22:19:01 UTC</a>\n# 「CSS疲れはpythonと花見で癒せる」\n\n>きょうは午後は通院で終わったらフリーだ〜。今週はCSSで脳みそ疲れたから、Python触りたい。花見もしたい🌸<https://twitter.com/0xxiorixx0/status/1113989585590083584>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116829791137648641\">2019-04-12 22:25:46 UTC</a>\n# うちの親父が本当にプログラマ未経験にも関わらず、物理系の小さな会社に飛び込んで、数週間で猛勉強してどうにかモノにした、という話を思い出した。\n\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116832004677361664\">2019-04-12 22:34:34 UTC</a>\n# 仕事の幸福を感じながら社会的報酬も受け取るのが最強。\n\n\n>ビジネスにおいて\"稼ぐ\"ためには、対価を払う必要がある。もちろん、多くは\"労働\"を払うことにはなるが、この対価は失われるものが多すぎる。だからこそ、労働をしないための努力も必要となる。いずれ努力しないための努力を今からしておけば、大きなリターンを得られる。<https://twitter.com/sugi_rx/status/1116658162638016513>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116840866184720384\">2019-04-12 23:09:47 UTC</a>\n# 業務四年のRailsエンジニアだけど、railsチュートリアルって分かりにくすぎない？\n\nこれを読んでたらアプリケーションというものがなんだか空理空論の世界にあるような気さえしてくるぞ。\n\n\nここがダメだよRailsチュートリアル！的な記事でも書きたいぐらいだけど。\n![image](https://pbs.twimg.com/media/D4AMKP9UYAAbAEp.jpg)\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116906081874132992\">2019-04-13 03:28:55 UTC</a>\n# プログラミングでは「うまく動かない」という洗礼を受け続けるので、だんだんと、うまく動かないのが当たり前なんだよ、だってプログラムってそもそも不完全なものじゃん、俺たちがどうにかするしかないんだよ、っていうような感覚を身につけてゆく感覚。\n\n\n>line bot作ってみたけど、うまいことちうごかん(笑)\n>けど、手を動かすのは本当に勉強になりますね。。<https://twitter.com/pannakotta8435/status/1116336260228902912>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116944710763814912\">2019-04-13 06:02:25 UTC</a>\n# 夢の中でもただ流れる雲を見つめながら、脳で考えることがプログラミングなんだということを考えていた。\n\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116950029330079744\">2019-04-13 06:23:33 UTC</a>\n# Qiitaプロフィール+Twitterの転職タグでの転職希望かあ。\nリンクひとつあるとキャラや技術分野も分かりやすそうだし、良いなあ。 ツイッター転職\n\n>希望職種:Webエンジニア\n>年齢:24\n>勤務地:首都圏\n>言語:Elixir,Rust\n>備考:コンピューターサイエンスに興味あります。新卒です。よろしくお願いします。\n>https://t.co/5UNKTWFj8V\n>https://t.co/pmjedleUhp\n>\n>#Twitter転職 \n>#ツイッター転職\n>#hiyokonitsuduke\n>\n>みなさま拡散お願いします…<https://twitter.com/stmtk_01/status/1093720752207978496>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116962987879755776\">2019-04-13 07:15:03 UTC</a>\n# 確かに空いてはいるのだけもテーブルの位置が高いのと、この時間でもお通しの料金がかかるのと、BGMでずっとポップスが流れてるので、優雅なプログラミングタイムというわけにはゆかなかった。\n\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116967660229500929\">2019-04-13 07:33:37 UTC</a>\n# プログラミングを楽しめるかどうかは一瞬一瞬が勝負で、決してこれで安心というゲームじゃないよね。\n\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116973896866119681\">2019-04-13 07:58:24 UTC</a>\n# プログラミングがうまくできないと僕らは満足に手足さえ動かせない。\n\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116988036875726848\">2019-04-13 08:54:35 UTC</a>\n# python で 複数の JSON 配列をフラットに結合する簡単なスクリプトの例\n<https://github.com/YumaInaura/YumaInaura/issues/1234>\n\n<a href=\"https://twitter.com/YumaInaura/status/1116989546099609600\">2019-04-13 09:00:35 UTC</a>\n# プログラミングに意味がないというならば人が生きることにも意味はない。\n\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116989594422083584\">2019-04-13 09:00:46 UTC</a>\n# Twitterプロフィールに思いっきり転職中活動と明記して、プログラミングのツイート関係でもいろいろと絡んでいるせいか、ちらほらとお仕事のDMもいただくようになった。\n名前は一番目に付きやすいので、就活転職活動中の人は思い切って名前変更してみても良いかも。 j エンジニア転職 ツイッター転職\n![image](https://pbs.twimg.com/media/D4BevcLUEAA-wmW.jpg)\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1116996882444587008\">2019-04-13 09:29:44 UTC</a>\n# docker で ruby に色々と gem を入れたイメージやコンテナを作成するごく簡単な Dockerfile の例\n<https://github.com/YumaInaura/YumaInaura/issues/1235>\n\n<a href=\"https://twitter.com/YumaInaura/status/1117006029399691264\">2019-04-13 10:06:05 UTC</a>\n# 気分的問題により自宅でプログラミングしづらいのは、コンクリートに囲まれた壁だからという感じがある。\n\n\n春もうたたかな午後、窓を開け放って、ゆったりと無印良品の人間がダメになる椅子でプログラミングをしながら過ごすのは、悪くない。\n\n>まだ結論出てないけど、どうもおうちではパソコ触れない感じである。\n>もくれ場作りたい。\n>もしくは誰かおうち来てもくもくしよう(めっちゃ僻地)<https://twitter.com/17_design_works/status/1114450288482504705>\n\n<a href=\"https://twitter.com/YumaInaura/status/1117012637357711361\">2019-04-13 10:32:20 UTC</a>\n# もし自宅がワイキキビーチの海の近くに建っており、海を見渡しながら、知人友人たちもゆるっとそこへ立ち寄る中、だけれども静かにプログラミングできたら、最高だよなあ。\n\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1117012873425801216\">2019-04-13 10:33:16 UTC</a>\n# 人生の苦しみにコミットするエンジニア職って最強だよね。\nよく物語でも「家族の病気を治したいからお医者さんになった」という話が出てくるみたいに。今はその想いがエンジニアリングにも向く時代かな。\n\n>歩けない息子の手足の代わりを作りたい想いでロボット部門にジョブチェンジして10ヶ月。今年度から事業化プロジェクトのリーダーに任命された。\n>\n>サポートロボ機器が当たり前に隣にいる未来。\n>技術・コスト的にも先は長いが、一つ事業が成り立てば、未来を広げるきっかけの一つに役立つかもしれない<https://twitter.com/ogimotoki/status/1116696471900831746>\n\n<a href=\"https://twitter.com/YumaInaura/status/1117014093687214080\">2019-04-13 10:38:07 UTC</a>\n# python で 特定の年月日・時分秒・マイクロ秒指定で datetime オブジェクトを作成し、それを文字列にパースする簡単な例\n<https://github.com/YumaInaura/YumaInaura/issues/1237>\n\n<a href=\"https://twitter.com/YumaInaura/status/1117014790973485061\">2019-04-13 10:40:53 UTC</a>\n# python の datetime で明日の 時・分をランダムに生成する例\n<https://github.com/YumaInaura/YumaInaura/issues/1238>\n\n<a href=\"https://twitter.com/YumaInaura/status/1117018715466420224\">2019-04-13 10:56:29 UTC</a>\n# Wantedly でリモートワークのエンジニアを募集している会社。\nおそるおそる「少しだけ興味があります」でエントリーを送っていたけど、1週間ほど経過してからミーティングのお誘いがあった。本当に本腰を入れて仕事を決めるフェーズかな。\n![image](https://pbs.twimg.com/media/D4Bzj5hUwAAlgYu.jpg)\n![image](https://pbs.twimg.com/media/D4Bzj5gUwAEkGbV.png)\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1117019773747908608\">2019-04-13 11:00:41 UTC</a>\n# 書籍にもなっているぐらいだし、やはりオライリー書籍のように、腰を据えて読む必要があるのだろうな。\nしかし初学者にとっては果てしなく高いハードルに思え、これがこなせれば逆にWebエンジニアとして一人前の入り口に立つというのも分かる気がした。技術書の書籍読解力も含めて。\n\n\n<a href=\"https://twitter.com/YumaInaura/status/1117031676784197632\">2019-04-13 11:47:59 UTC</a>\n# コーディングは型にはめる作業で、プログラミングはクリエイティブという感じがする。\n\n\n>「コーディング」よりも「プログラミング」の方がニュアンス的に好き。\n>\n>意味も微妙に違うんだけどね。<https://twitter.com/shogohayakawa88/status/1116557815680602115>\n\n<a href=\"https://twitter.com/YumaInaura/status/1117063055538438144\">2019-04-13 13:52:41 UTC</a>\n\n\n\n# Original by Github issue\n\nhttps://github.com/YumaInaura/YumaInaura/issues/1241\n","created_at":"2019-04-14T08:19:29+09:00","id":"7341d4365afe9eaa65b3","tags":[{"name":"ポエム","versions":["0.0.1"]}],"url":"https://qiita.com/YumaInaura/items/7341d4365afe9eaa65b3"},{"title":"プラグインとライブラリーの違いについて","body":"#プラグインとライブラリーの違い\nプラグインもライブラリーも共にメインのプログラムから呼ばれるサブプログラム群やツールのようなものですが、アーキテクチャの視点からは大きな違いがあります。\n\nプラグインとライブラリーの違いについて簡単に書いてみます。\n\n##プラグイン\nプラグインはメインのプログラムのインターフェイスに依存して作成されます。\n\nメインのプログラムはプラグインに依存せず、他のプラグインに差し替えて動作させることが可能です。\n\n##ライブラリー\n\nライブラリーはその逆で、メインのプログラムがライブラリーのインターフェースに乗っ取って構築されます。\n\nメインのプログラムはライブラリーに依存することになり、ライブラリーを別のライブラリーに差し替えるということが困難となります。\n","created_at":"2019-04-14T07:57:13+09:00","id":"f1d06cc39d83cb9251d1","tags":[{"name":"architecture","versions":[]}],"url":"https://qiita.com/QKiita/items/f1d06cc39d83cb9251d1"},{"title":"pandasのapplyに複数のSeriesを渡したときの要素の取得方法","body":"# 概要\napplyに2つのseriesを渡したときに、一つの変数の中に2つのSeriesが\n入った？状態になってどう扱えば一意のSeriesから要素を取れるのかということを\n試行錯誤したので記事にして忘れても見返せるようにします。\n\n# 具体的なシチュエーション\n\n列Dの値を列Aに転記したいが、列Dの値がNaNのときは\n列Aの値を保持したい。\n\n# どうするのか\n\n```\ndef overwrite(row):\n    if pd.isnull(row['D']):\n        return row['A']\n    else:\n        return row['D']\n\ncomp_df['A'] = comp_df[['D', 'A']].apply(overwrite, axis=1)\n\n```\n\n# 振り返って見ると\nそりゃそうなるよねというコードなので一体どこで詰まってたんだっけ。。。\n","created_at":"2019-04-14T07:20:09+09:00","id":"578dd0657f94582fce60","tags":[{"name":"pandas","versions":[]},{"name":"Python3","versions":[]}],"url":"https://qiita.com/txt_only/items/578dd0657f94582fce60"},{"title":"フロントエンド環境（TypeScript+PUG+SASS+Jest）を作ってみる","body":"# 概要\n\nフロントエンドを勉強しよーって時にUIライブラリを使わずに自分で色々作ってみることがあったり無かったりすると思うのですが、そういう時に使う環境をちゃちゃっと用意しようと思います。新人さんの勉強とかにも使えるのかも？\n細かい説明は割愛して動かせる環境を用意することを目的とします。細かいところ説明してって言われても理解してない部分が多いのです...精進します(´・ω・｀)\n\n# package.jsonとちょっとしたコード\n\n[frontend-dev-env: TypeScript+PUG+SASS+Jest](https://github.com/yoshida-san/frontend-dev-env)\n\n# 必要な時間\n\n詰まらなければ1時間程度で終わると思います。\n\n# 環境\n\nTypeScript+PUG+SASSで書けるようにします。単体テストはJestを使います。結合はTestCafeを使えば良いと思います。IDEはVisual Studio Code。\n\n# 開発環境構築\n\nVSCode及びNode.jsのインストールは割愛。`npm init -y`しておいてください。\n\n## TypeScript\n\n### 本体のインストール\n\n```sh\n$ npm install typescript\n$ npm install --save-dev tslint\n```\n\n## TSLint\n\n### 設定\n\ntslintのinitを行います。\n\n```sh\n$ ./node_modules/.bin/tslint --init\n```\n\n作られたtslint.jsonをちょこちょこっと修正。\n\n```json\n{\n    \"defaultSeverity\": \"error\",\n    \"extends\": [\n        \"tslint:recommended\"\n    ],\n    \"jsRules\": {},\n    \"rules\": {\n        \"interface-name\": false,\n        \"no-empty-interface\": true,\n        \"object-literal-sort-keys\": false,\n        \"member-access\": true,\n        \"typedef\": true,\n        \"triple-equals\": true,\n        \"variable-name\": false,\n        \"radix\": false,\n        \"align\": false,\n        \"max-line-length\": false,\n        \"member-ordering\": false,\n        \"curly\": false\n    },\n    \"rulesDirectory\": []\n}\n```\n\n### 動作確認\n\n`./src/ts/sample.ts`を作成し、以下のコードを記述。\n\n```js\nvar num: number = 1;\n```\n\nコードを書いたら以下のコマンドでTypeScriptのコードをチェックします。\n\n```sh\n$ ./node_modules/.bin/tslint './src/**/*.ts'\n```\n\n先の例だと以下のようなメッセージが表示されます。\n\n```txt\nERROR: src/ts/sample.ts:1:1 - Forbidden 'var' keyword, use 'let' or 'const' instead\nERROR: src/ts/sample.ts:1:12 - file should end with a newline\n```\n\nvarを使わないでletかconstを使って、最後に1行入れてね。ってことですね。直してみましょう（最終行の空行は省略します）。\n\n```js\nconst num: number = 1;\n```\n\n再度チェックするとエラーは無くなってますね！例えば`1`ではなく`\"文字列\"`を入れた場合もエラーに引っかかって欲しいですが、VSCodeの方で警告が出るのでそっちで直していきましょう。\n\n### npm scripts登録\n\npackage.jsonのscriptsに以下を追加しておきます。\n\n```json\n\"scripts\": {\n  \"tslint\": \"./node_modules/.bin/tslint './src/**/*.ts --silent'\"\n}\n```\n\n--silentオプションを付けないとExit status 2（または1）が表示されてしまうので、隠してます。`npm run tslint`でsrc配下の.tsファイルのチェックが可能です。\n\n## tsc\n\n### 設定\n\n```sh\n$ ./node_modules/.bin/tsc --init\n```\n\ntsconfig.jsonはトップレベルに以下を追加。\n\n```json\n{\n  \"include\": [\n    \"./src/**/*.ts\"\n  ],\n  :\n}\n```\n\n後は`\"outDir\"`のコメントアウトを削除して値を`\"./dist\"`に、`\"lib\"`のコメントアウトを削除して値を`[\"es6\"]`しておきます。\n\n### 動作確認\n\n```sh\n$ ./node_modules/.bin/tsc src/ts/sample.ts --outDir dist/js\n```\n\n先程のtsファイルを`./dist/js/`にJavaScriptに変換して出力します。出力したファイルの中身は以下のようになっているかと思います。\n\n```js\nvar num = 1;\n```\n\nconstがvarになって、型定義が無くなってますね！もうちょっとわかりやすくするためにsample.tsを以下のように修正してJavaScriptに変換してみましょう。\n\n```js\nexport default class User {\n\n    private _firstName: string;\n    private _lastName: string;\n    private _birthday: string;\n    private _sex: number;\n    private _activate: boolean;\n\n    public constructor(firstName: string = \"\", lastName: string = \"\", birthday: string = \"2000/01/01\", sex: number = 0, activate: boolean = false) {\n        this._firstName = firstName;\n        this._lastName = lastName;\n        this._birthday = birthday;\n        this._sex = sex;\n        this._activate = activate;\n    }\n\n    public setFirstName = (arg: string): void => { this._firstName = arg; };\n    public setLastName = (arg: string): void => { this._lastName = arg; };\n    public setBirthday = (arg: string): void => { this._birthday = arg; };\n    public setSex = (arg: number): void => { this._sex = arg; };\n    public setActivate = (arg: boolean): void => { this._activate = arg; };\n\n    private splitBirthday = (birthday: string): number[] => birthday.split(\"/\").length > 1 ? birthday.split(\"/\").map((s) => parseInt(s)) : birthday.split(\"-\").map((s) => parseInt(s));\n\n    private verifyBirthday = (birthday: string): boolean => {\n        const dateFormat: RegExp = /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/;\n        if (!birthday.match(dateFormat)) return false;\n        const splitedDate: number[] = this.splitBirthday(this._birthday);\n        if (splitedDate.length !== 3) return false;\n        const ListOfDays: number[] = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n        if (splitedDate[1] === 1 || splitedDate[1] > 2) {\n            if (splitedDate[2] > ListOfDays[splitedDate[1] - 1]) return false;\n        }\n        if (splitedDate[1] === 2) {\n            const leapYearFlag = (!(splitedDate[0] % 4) && splitedDate[0] % 100) || !(splitedDate[0] % 400) ? true : false;\n            if ((leapYearFlag === false) && (splitedDate[2] >= 29)) return false;\n            if ((leapYearFlag === true) && (splitedDate[2] > 29)) return false;\n        }\n        return true;\n    }\n\n    public getFullName = (): string => `${this._firstName} ${this._lastName}`;\n    public getAge = (): number => {\n        if (!this.verifyBirthday(this._birthday)) return -1;\n        const splitedBirthday: number[] = this.splitBirthday(this._birthday);\n        const d = new Date();\n        const now = parseInt(d.getFullYear().toString() + (\"0\" + (d.getMonth() + 1).toString()).slice(-2) + (\"0\" + d.getDate().toString()).slice(-2));\n        const birthday = parseInt((\"000\" + splitedBirthday[0].toString()).slice(-4) + (\"0\" + (splitedBirthday[1].toString())).slice(-2) + (\"0\" + (splitedBirthday[2].toString())).slice(-2));\n        return Math.floor((now - birthday) / 10000);\n    }\n\n    public getSex = (): string => {\n        switch (this._sex) {\n            case 0:\n                return \"男性\";\n            case 1:\n                return \"女性\";\n            default:\n                return \"\";\n        }\n    }\n\n    public isActivate = (): boolean => this._activate;\n\n    public toJson = (): object => {\n        return {\n            name: this.getFullName(),\n            birthday: this._birthday,\n            age: this.getAge(),\n            sex: this.getSex(),\n            activate: this.isActivate(),\n        };\n    }\n\n}\n```\n\nちょっと長いですが、TypeScriptとJavaScriptのファイルで違いがよくわかると思います。\n\n### npm scripts登録\n\n変換も簡単に使えるようにしておきましょう。package.jsonのscriptsに以下を追加しておきます。\n\n```json\n\"scripts\": {\n  \"tsc\": \"./node_modules/.bin/tsc --rootDir src\"\n}\n```\n\n`npm run tsc`でTypeScriptからJavaScriptに変換が可能です。出力先はoutDirで指定したdistディレクトリになります。\n\n## PUG\n\nejsでも良いのですが、SASSっぽいしSASSはPUGっぽいので合わせようと思います。Expressとかでも使えるらしいので無駄にはならない...かな。\n\n### 設定\n\n```sh\n$ npm install -D pug-cli\n```\n\n特にconfigは不要です。\n\n### 動作確認\n\nsrc直下にindex.pugを作成して以下を記述します。\n\n```pug\ndoctype html\nhtml(lang=\"ja\")\n  head\n    meta(charset=\"utf-8\")\n    title PUG Sample\n  body\n    h1 h1 title!\n    main.main-class#main-id\n      h2 h2 title :-)\n```\n\n./src/ts直下にindex.pugを作成して以下を記述します。\n\n```pug\ndoctype html\nhtml(lang=\"ja\")\n  head\n    meta(charset=\"utf-8\")\n    title tsディレクトリ\n  body\n    p tsディレクトリ内のindex.pug\n```\n\nファイルの作成が終わったら以下のコマンドを実行しましょう。\n\n```sh\n$ ./node_modules/.bin/pug ./src --out ./dist\n```\n\ndist直下とdist/ts直下にそれぞれindex.htmlができたかと思います。HTMLが見づらい！という場合は`--pretty`オプションを付与して実行すると見易い形で出力されます。PUGは慣れないと少し書きづらいですが、慣れてくると非常に書きやすいので頑張って慣れましょう（気合）。\n\n### npm scripts登録\n\n例のごとくnpmで実行できるようにしておきましょう。\n\n```json\n\"scripts\": {\n  \"pug\": \"./node_modules/.bin/pug ./src --out ./dist\"\n}\n```\n\n## SASS\n\n### 設定\n\n毎度の通り以下のコマンド。\n\n```sh\n$ npm install -D node-sass\n```\n\n### 動作確認\n\nsrc直下にstyleディレクトリを作成し、その中にsample.sassを作成し以下を記述。\n\n```sass\nbody\n  background-color: lightgray\n  margin: 0 auto\n  h1\n    font-weight: bold\n  .main-class\n    h2\n      color: red\n```\n\nsrc直下のindex.pugのtitleの上に以下の一行を追加し（インデックスは合わせてください）、htmlを作成しておきます。\n\n```pug\nlink(rel=\"stylesheet\" type=\"text/css\" href=\"/style/sample.css\")\n```\n\n追加してhtmlを出力したらsassをcssにして出力しましょう。\n\n```sh\n$ ./node_modules/.bin/node-sass ./src -o ./dist -r\n```\n\ndist配下にstyleディレクトリができてその中にsample.cssができていればOKです！PHPビルトインサーバとかでdist直下のindex.htmlを見るとCSSが適用されているのがわかります（ブラウザでファイルを開いても確認できます）。\n\n### npm scripts登録\n\nnpmの登録は圧縮された状態で出力するようにしておきましょう。\n\n```json\n\"scripts\": {\n  \"sass\": \"./node_modules/.bin/node-sass ./src -o ./dist --output-style compressed -r\"\n}\n```\n\n## Jest\n\n### 設定\n\n```sh\n$ npm install -D jest @types/jest ts-jest\n```\n\npackage.jsonに以下を追加。\n\n```json\n\"jest\": {\n  \"moduleFileExtensions\": [\n    \"ts\",\n    \"tsx\",\n    \"js\"\n  ],\n  \"transform\": {\n    \"^.+\\\\.(ts|tsx)$\": \"ts-jest\"\n  },\n  \"testMatch\": [\n    \"**/test/**/*.ts?(x)\"\n  ]\n}\n```\n\n### 動作確認\n\nsrcと同階層にtestディレクトリを作成し、その中にsample.test.tsを作成して以下を記述。\n\n```ts\nimport User from \"../src/ts/sample\";\n\ndescribe(\"Userクラスのテスト\", () => {\n    const u = new User(\"Hoge\", \"Piyo\", \"1984/4/4\", 0, true);\n    test(\"名前取得\", () => {\n        expect(u.getFullName()).toBe(\"Hoge Piyo\");\n    });\n    test(\"年齢算出\", () => {\n        expect(u.getAge()).toBe(35);\n    });\n    test(\"性別取得\", () => {\n        expect(u.getSex()).toBe(\"男性\");\n    });\n});\n```\n\n以下のコマンドでテスト実行。\n\n```sh\n$ ./node_modules/.bin/jest\n```\n\nこんな感じでテスト結果が表示されたらOKです！\n\n```sh\nPASS  test/sample.test.ts\n Userクラスのテスト\n   ✓ 名前取得 (3ms)\n   ✓ 年齢算出 (1ms)\n   ✓ 性別取得\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        1.327s\nRan all test suites.\n```\n\n### npm scripts登録\n\nいつも通りですね。カバレッジを出力するようにしておきます。\n\n```json\n\"scripts\": {\n  \"jest\": \"./node_modules/.bin/jest --coverage\"\n}\n\n\n```\n\n## 環境構築で作成したnpm scriptsのまとめ\n\n### npm run tslint\n\nTypeScriptの静的コードチェックを行います。\n\n### npm run tsc\n\nTypeScriptをJavaScriptに変換します。\n\n### npm run pug\n\n.pugを.htmlに変換します。\n\n### npm run sass\n\n.sassを.cssに変換します。\n\n### npm run jest\n\nTypeScriptのテスト（testディレクトリ配下のテストコード）を実行します。\n\n# ディレクトリ構成の整理\n\n開発環境がある程度整ったので、ディレクトリ構成を整理しておこうと思います。\n\n```txt\nroot\n ├ coverage: テストカバレッジ出力用ディレクトリ\n ├ dist: ビルドコード出力用ディレクトリ\n ├ src: ビルド前のソースコード用ディレクトリ\n │  ├ style: sass書く用のディレクトリ\n │  └ script: ts書く用のディレクトリ\n ├ test: テストコード用ディレクトリ\n ├ node_modules: Node.jsパッケージ用ディレクトリ\n ├ package-lock.json: パッケージの依存関係情報とか（たしか\n ├ package.json: 必要なパッケージやnpm scripts等々\n ├ tsconfig.json: TypeScript設定\n └ tslint.json: TSLint設定\n```\n\nディレクトリ構成はお好きに変えて問題ありませんが、この記事の内容を加味するとこんな感じになります。\n\n# 最後に\n\nとりあえず勢いだけで構築しました。sample.tsの名前が中身と合ってないなぁと思いつつ。色々と無知を晒していると思いますが、「ここはこうやった方がいい」とか「これはアンチパターンやぞ」とかありましたらご教授頂けると嬉しいです。\nTestCafeを使っての結合テストやGrunt（Gulp）とかWebPack、git云々もやろうと思いましたが力尽き（飽き）ました...。\n","created_at":"2019-04-14T06:50:38+09:00","id":"a9cffdb8118d65d59eb7","tags":[{"name":"Node.js","versions":[]},{"name":"Sass","versions":[]},{"name":"TypeScript","versions":[]},{"name":"jest","versions":[]},{"name":"pug","versions":[]}],"url":"https://qiita.com/s-yoshida/items/a9cffdb8118d65d59eb7"},{"title":"Expoでのreact-nativeでthree.jsを使う(expo-three導入)","body":"expo-threeというライブラリを導入しようと思ったのですが、日本語文献が少なく時間が掛かってしまった為、自分で見直す意図も込めて簡単にまとめさせていただきます。\nreact-native,expo等の導入については今回は省略させて頂きます。\n\n#かいていく\n##three,expo-threeのinstall\n`npm install three --save`\n`npm install expo-three --save`\n\n##import\n```react:App.js\nimport { GLView } from 'expo';\nimport React from 'react';\nimport { View } from 'react-native';\nimport * as THREE from \"three\";\nimport ExpoTHREE from 'expo-three';\n```\n`import { GLView } from 'expo';`\nを\n`import Expo from 'expo';`\nにして、次に出てくる`<GLView>`を`<Expo.GLView>`って書いてもいいはず。\n\n##render()\n\n```react:App.js\nexport default class App extends React.Component {\n  render() {\n    return (\n      <GLView\n        style={{ flex: 1 }}\n        onContextCreate={this._onGLContextCreate}\n      />\n    )\n  }\n  _onGLContextCreate = async (gl) => {\n  // atode\n  };\n}\n```\n今回は超シンプルにGLViewだけ書きます。\n##Renderer\n```react:App.js\n_onGLContextCreate = async (gl) => {\n  const renderer = new ExpoTHREE.Renderer({ gl });\n  or\n  const renderer = ExpoTHREE.createRenderer({ gl });\n  renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n};\n```\n二種類Renderer作る書き方があるみたいです。\n後者が拡張rendererの従来のエイリアスらしいです。僕はまだ良く分かりません。:thinking:\n\n##たくさんの警告！！\n\n![S__7512094.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278006/41aedba2-7fc6-cb9b-6e04-47d3bc895cc4.jpeg)\n\n沢山警告が出ますが動作には関係ない見たいです。\nこの警告を無視していいと知らず解決策を必死に調べてたのが一番時間をロスした箇所です:pensive:\n\n##警告の非表示\n表示が気になるので消していきたいと思います。\nコードの上の方に\n`console.disableYellowBox = true;`\nと書けば大丈夫です。\n\nこれで、後はthree.jsで書いたコードを追加していけばいいみたいです。\n##three.js部分の追加\n```react:App.js\n_onGLContextCreate = async (gl) => {\n  const renderer = new ExpoTHREE.Renderer({gl});\n  renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(\n    75, gl.drawingBufferWidth / gl.drawingBufferHeight, 0.1, 1000\n  );\n  const geometry = new THREE.BoxGeometry(1, 1, 1);\n  const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n  const cube = new THREE.Mesh( geometry, material );\n  scene.add(cube);\n\n  camera.position.z = 5;\n\n  const animate = () => {\n    requestAnimationFrame(animate);\n    cube.rotation.x += 0.07;\n    cube.rotation.y += 0.04;\n    renderer.render(scene, camera);\n    gl.endFrameEXP();\n  }\n  animate();\n};\n```\n\n![S__7512095.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278006/c9f4275d-827a-ba3e-8bb1-69d77a714471.jpeg)\n\n表示されました:v_tone1:\nこれにて今回の導入は終了とさせて頂きます。\n\n#まとめ\n```react:App.js\nimport { GLView } from 'expo';\nimport React from 'react';\nimport { View } from 'react-native';\nimport * as THREE from \"three\";\nimport ExpoTHREE from 'expo-three';\n\nconsole.disableYellowBox = true;\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <GLView\n        style={{ flex: 1 }}\n        onContextCreate={this._onGLContextCreate}\n      />\n    )\n  }\n\n  _onGLContextCreate = async (gl) => {\n    const renderer = ExpoTHREE.createRenderer({ gl });\n    renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75, gl.drawingBufferWidth / gl.drawingBufferHeight, 0.1, 1000\n    );\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    const cube = new THREE.Mesh( geometry, material );\n    scene.add(cube);\n\n    camera.position.z = 5;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.07;\n      cube.rotation.y += 0.04;\n      renderer.render(scene, camera);\n      gl.endFrameEXP();\n    }\n    animate();\n  };\n\n}\n\n```\n読み返してみれば凄い短いコードで実装できるんだなと感じました。\n細かい所の文の意味がまだ自分の中で曖昧なのでしっかり理解していけたらなと思います。\n\n#参考文献\n・https://github.com/expo/expo-three\n・https://reactsharing.com/introducing-expo-ar-three-js-on-arkit.html\n・https://medium.com/@yoobi55/creating-3d-sphere-component-with-react-native-and-three-c5fb46dadbd\n","created_at":"2019-04-14T05:31:08+09:00","id":"ccea50572140956298cf","tags":[{"name":"three.js","versions":[]},{"name":"react-native","versions":[]},{"name":"expo","versions":[]}],"url":"https://qiita.com/ajunajunajun/items/ccea50572140956298cf"},{"title":"@NotBlank、@NotEmpty、@NotNullの挙動の違いをSpring Boot + Thymeleafで整理する","body":"## やりたいこと\nJSR-303 Bean Validationの挙動がよく分からず、現場で混乱を招いたので整理してみます。具体的には以下のアノテーションです。\n・javax.validation.constraints.NotBlank (@NotBlank)\n・javax.validation.constraints.NotEmpty (@NotEmpty)\n・javax.validation.constraints.NotNull  (@NotNull)\n\n\n## 結論\n![wwwww.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/23101/c0afb70d-25bd-3f77-6938-718662caeced.png)\n※タブ以外のエスケープシーケンスは検証していませんが多分タブと同じ挙動になると思っています（多分）\n\n全て全角スペースの場合は、チェックに引っかからないので注意が必要です。\n\n## 検証\n\n以下のような簡易画面で検証してみました。\n\n```HelloController.java\npackage com.example.demo.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport com.example.demo.form.HelloForm;\n\n@Controller\n@RequestMapping(value = \"/\")\npublic class HelloController {\n\t\n\tprivate static final String SAMPLE_URL = \"sample/Hello\";\n\n\t@GetMapping\n\tpublic String index(@ModelAttribute HelloForm helloForm) {\n\t\treturn SAMPLE_URL;\n\t}\n\n\t@PostMapping\n\tpublic String register(@Validated HelloForm helloForm, BindingResult result) {\n\t\treturn SAMPLE_URL;\n\t}\n}\n```\n\n```HelloForm.java\npackage com.example.demo.form;\n\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\n\npublic class HelloForm {\n\t\n\t@NotBlank\n\tString notBlankField;\n\t\n\t@NotEmpty\n\tString notEmptyField;\n\t\n\t@NotNull\n\tString notNullField;\n\t\n\tpublic String getNotBlankField() {\n\t\treturn notBlankField;\n\t}\n\n\tpublic void setNotBlankField(String notBlankField) {\n\t\tthis.notBlankField = notBlankField;\n\t}\n\n\tpublic String getNotEmptyField() {\n\t\treturn notEmptyField;\n\t}\n\n\tpublic void setNotEmptyField(String notEmptyField) {\n\t\tthis.notEmptyField = notEmptyField;\n\t}\n\n\tpublic String getNotNullField() {\n\t\treturn notNullField;\n\t}\n\n\tpublic void setNotNullField(String notNullField) {\n\t\tthis.notNullField = notNullField;\n\t}\n}\n```\n\n```Hello.html\n<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<title>Hello</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n</head>\n<body>\n\t<form method=\"post\" action=\"/\" th:object=\"${helloForm}\">\n\t\t<span th:if=\"${#fields.hasErrors('notBlankField')}\" th:errors=\"*{notBlankField}\" style=\"color: red\"></span><br /> \n\t\tNotBlankField：<input type=\"text\" name=\"notBlankField\" th:field=\"*{notBlankField}\" /><br /> \n\t\t<span th:if=\"${#fields.hasErrors('notEmptyField')}\" th:errors=\"*{notEmptyField}\" style=\"color: red\"></span><br /> \n\t\tNotEmptyField：<input type=\"text\" name=\"notEmptyField\" th:field=\"*{notEmptyField}\" /><br /> \n\t\t<span th:if=\"${#fields.hasErrors('notNullField')}\" th:errors=\"*{notNullField}\" style=\"color: red\"></span><br /> \n\t\tNotNullField：<input type=\"text\" name=\"notNullField\" th:field=\"*{notNullField}\" /><br /><br />\n\t\t<input type=\"submit\" value=\"Submit\" />\n\t</form>\n</body>\n</html>\n```\n### 空文字\nNotBlank、NotEmptyのみチェックに引っかかる\n![空文字.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/23101/485fdf33-777d-5953-ebaf-0eb7cb0feab3.png)\n### 全て半角スペース\n※NotBlankのみチェックに引っかかる\n![全て半角スペース.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/23101/7994ac26-240b-98cb-6783-84a3d380a2fc.png)\n### 全て全角スペース\n※NotBlank、NotEmpty、NotNull全てチェックに引っかからない\n![全て全角スペース.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/23101/af209a18-f17d-201c-2d4e-f7e026941adc.png)\nソースは以下です。\nhttps://github.com/kenichi-nagaoka/spring-boot-form-validation-sample\n\n以上です。\n","created_at":"2019-04-14T05:11:01+09:00","id":"67a63c91a7db8717fc7d","tags":[{"name":"Java","versions":[]},{"name":"spring","versions":[]},{"name":"javax.validation","versions":[]},{"name":"Thymeleaf","versions":[]},{"name":"spring-boot","versions":[]}],"url":"https://qiita.com/NagaokaKenichi/items/67a63c91a7db8717fc7d"},{"title":"初心者がAtCoder過去問精選１０問をC++で解いた","body":"# はじめに\n最近競技プログラミングに興味を持ち，AtCoderのABC123に参加してみました．しかし，思うように解けなかったため，[AtCoder に登録したら次にやること ～ これだけ解けば十分闘える！過去問精選 10 問 ～](https://qiita.com/drken/items/fd4e5e3630d0f5859067)で紹介されてる問題をC++で解いてみました.\n上記記事で紹介された問題の概要とそのプログラムを掲載いたします．プログラムの説明などは不要かと思ったので書きませんでしたが，わかりづらいなと思ったら逐次追記します．\nとはいえ，競技プログラミングを初めてまだ１週間しか経っていない(2019/4/14現在)上，プログラミング歴も短いので，変な書き方をしているところも多いと思います．なにかあればコメント欄で教えていただけたらなと思います．\nプログラムの作成はMacBookProでvimを用いています．\n\n# 第1問: [ABC 086 A - Product](https://beta.atcoder.jp/contests/abc086/tasks/abc086_a)\n\n二つの入力の積が偶数か奇数かを答える問題．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int a, b;\n  cin >> a >> b;\n  if(a%2==0){\n    cout << \"Even\" << endl;\n  }else{\n    if(b%2==0){\n      cout << \"Even\" << endl;\n    }else{\n      cout << \"Odd\" << endl;\n    }\n  }\n  return 0;\n}\n```\n乗算してから偶奇を求めるより，場合分けした方が良い気がする．\n\n# 第2問: [ABC 081 A - Placing Marbles](https://beta.atcoder.jp/contests/abc081/tasks/abc081_a)\n\n入力文字列に'1'が何個含まれているかを答える問題．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  string str;\n  cin >> str;\n  int count;\n  for(int i=0; i<str.length(); i++){\n    if(str[i] == '1'){\n      count ++;\n    }\n  }\n  cout << count << endl;\n  return 0;\n}\n```\nstring型の要素数と各要素を確認するだけだった．\n\n# 第3問: [ABC 081 B - Shift Only](https://beta.atcoder.jp/contests/abc081/tasks/abc081_b)\n\n複数の入力整数すべてを割り切れる２の乗数を求める問題．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int n;\n  int i;\n  cin >> n;\n  vector<int> a(n);\n  for(i=0; i<n; i++){\n    cin >> a[i];\n  }\n  sort(a.begin(), a.end());\n  int counter = 0;\n  int temp = a[0];\n  while(temp%2 == 0){\n    temp = temp >> 1;\n    counter++;\n  }\n  if(counter == 0){\n    cout << 0 << endl;\n    return 0;\n  }\n  int division = 1 << counter;\n  while(1){\n    for(i=0; i<a.size(); i++){\n      if(a[i]%division != 0){\n        break;\n      }\n      if(i == a.size()-1){\n        cout << counter << endl;\n        return 0;\n      }\n    }\n    division = division >> 1;\n    counter--;\n  }\n}\n```\n全てを割り切れる数ということは少なくとも公倍数であるため，ソートして一番小さいものを割り切れる２の乗数から計算を開始した．\n２の指数を増減する際には*や/ではなくシフト演算子を用いた．\n\n# 第4問: [ABC 087 B - Coins](https://beta.atcoder.jp/contests/abc087/tasks/abc087_b)\n\n500円玉A枚，100円玉B枚，50円玉C枚を好きな枚数選び出した1組み合わせのうち，値段がX円になるものの数を答える問題．\nただし，同じ種類の硬貨を区別しないものとする．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int a, b, c, x;\n  cin >> a >> b >> c >> x;\n  int pat = 0;\n  int aStt = ( x - 100*b - 50*c ) / 500;\n  if(aStt<0){\n    aStt = 0;\n  }\n  for(int aIdx=aStt; aIdx<a+1; aIdx++){\n    int aTemp = 500*aIdx;\n    if(aTemp > x){\n      break;\n    }\n    int bStt = ( x - 500*aIdx - 50*c ) / 100;\n    if(bStt < 0){\n      bStt = 0;\n    }\n    for(int bIdx=bStt; bIdx<b+1; bIdx++){\n      int bTemp = aTemp + 100*bIdx;\n      if(bTemp > x){\n        break;\n      }\n      if((x-bTemp)<=50*c){\n        pat++;\n      }\n    }\n  }\n  cout << pat << endl;\n  return 0;\n}\n```\n総当たり的なプログラムになってしまった．\n\n# 第5問: [ABC 083 B - Some Sums](https://beta.atcoder.jp/contests/abc083/tasks/abc083_b)\n\n1以上N以下の整数のうち，１０進法での各桁の和Sが$A\\leqq S\\leqq B$となる整数の個数を求める問題．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int n, a, b;\n  cin >> n >> a >> b;\n  int count = 0;\n  int sum = 0;\n  for(int i=1; i<=n; i++){\n    int temp = i;\n    int sumTemp = 0;\n    while(temp!=0){\n      sumTemp += temp % 10;\n      temp /= 10;\n    }\n    if(a <= sumTemp && sumTemp <= b){\n      sum += i;\n    }\n  }\n  cout << sum << endl;\n  return 0;\n}\n```\n各桁を取り出す計算をした．\n\n# 第6問: [ABC 088 B - Card Game for Two](https://beta.atcoder.jp/contests/abc088/tasks/abc088_b)\n\n$i$番目のカードに数値$a_i$の書かれたN枚のカードを交互にとっていくゲームで，お互いが最高点を取れるよう努める際に，両者の点数差は何点になるかを求める問題．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int n;\n  vector<int> a(n);\n  cin >> n;\n  for(int i=0; i<n; i++){\n    cin >> a[i];\n  }\n  sort(a.begin(), a.end(), greater<int>());\n  int alice = 0;\n  int bob = 0;\n  for(int i=0; i<n; i+=2){\n    alice += a[i];\n    bob += a[i+1];\n  }\n  cout << alice - bob << endl;\n  return 0;\n}\n```\nソートしてAliceとBobに交互に加算していき，その差を出力した．\n\n# 第7問: [ABC 085 B - Kagami Mochi](https://beta.atcoder.jp/contests/abc085/tasks/abc085_b)\n\n大きさをd[i]として与えられたN個餅を積み重ねてできる鏡餅を最大何段積めるか求める問題．\nただし，鏡餅は下の段より小さい鏡餅しか置けないものとされている．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >> n;\n  vector<int> d(n);\n  for(int i=0; i<n; i++){\n    cin >> d[i];\n  }\n  sort(d.begin(), d.end());\n  int count = 1;\n  for(int i=1; i<n; i++){\n    if(d[i] != d[i-1]){\n      count ++;\n    }\n  }\n  cout << count << endl;\n  return 0;\n}\n```\nソートして，配列の要素の前後が等しいかそうでないかを確認し，等しくないものの個数を計算して出力した．\n\n# 第8問: [ABC 085 C - Otoshidama](https://beta.atcoder.jp/contests/abc085/tasks/abc085_c)\n\n10000円，5000円，1000円札に対して，値段Yと枚数Nの組み合わせが現実的にあり得るか求める問題．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int n, y;\n  cin >> n >> y;\n  int aEnd = y / 10000;\n  for(int a=0; a<=aEnd; a++){\n    int aTemp = y - 10000*a;\n    int bEnd = aTemp / 5000;\n    for(int b=0; b<=bEnd; b++){\n      int c = (aTemp - 5000*b)/1000;\n      if(a + b + c == n){\n        cout << a << \" \" << b << \" \" << c << endl;\n        return 0;\n      }\n    }\n  }\n  cout << \"-1 -1 -1\" << endl;\n  return 0;\n}\n```\nY円になるa,b,cの組み合わせを求めて，a+b+c＝nであれば各値を出力．そうなる組み合わせが存在しなければ-1 -1 -1を出力．\n\n# 第9問: [ABC 049 C - Daydream](https://beta.atcoder.jp/contests/abc049/tasks/arc065_a)\n\n与えられた文字列Sが，４つの単語（\"dream\",\"dreamer\",\"erase\",\"eraser\"）を連ねることで表すことができるか答える問題．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nstring str[4] = {\"maerd\", \"remaerd\", \"esare\", \"resare\"};\n\nint main(){\n  string s;\n  cin >> s;\n  reverse(s.begin(), s.end());\n  for(int i=0; i< s.size();){\n    for(int j=0; j<4; j++){\n      if(s.substr(i,str[j].size()) == str[j]){\n        i += str[j].size();\n        break;\n      }\n      if(j == 3){\n        cout << \"NO\" << endl;\n        return 0;\n      }\n    }\n  }\n  cout << \"YES\" << endl;\n  return 0;\n}\n```\n実は，解説をチラッとみてしまった．\nこの問題は，組み合わせる各文字列が合体してしまう．これらの文字列およびSを反転することで合体を防ぎ，組み合わせが存在するかを調べることができる．\n\n# 第10問: [ABC 086 C - Traveling](https://beta.atcoder.jp/contests/abc086/tasks/arc089_a)\n\n停止することができない旅行者が，与えられた時刻tと位置(x,y)に存在することができるか答える問題．\nここで，時刻tでの位置が(x,y)である時にt+1での位置は(x+1,y),(x-1,y),(x,y+1),(x,y-1)のどれかであるものとする．\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int n, i;\n  cin >> n;\n  int pastEO = 0;\n  int currEO = 0;\n  int timeEO = 0;\n  int necessaryMove = 0;\n  vector<int> t(n), x(n), y(n);\n  t[0] = x[0] = y[0] = 0;\n  for(i=1; i<n+1; i++){\n    cin >> t[i] >> x[i] >> y[i];\n  }\n  for(i=1; i<n+1; i++){\n    necessaryMove = abs(x[i]-x[i-1]) + abs(y[i]-y[i-1]);\n    if(necessaryMove > t[i] - t[i-1]){\n      cout << \"No\" << endl;\n      return 0;\n    }\n    timeEO = (t[i]-t[i-1])%2;\n    currEO = (x[i]+y[i])%2;\n    if(pastEO == currEO){\n      if(timeEO != 0){\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }else{\n      if(timeEO == 0){\n        cout << \"No\" << endl;\n        return 0;\n      }\n    }\n    pastEO = currEO;\n  }\n  cout << \"Yes\" << endl;\n  return 0;\n}\n```\n図に偶数回でいける位置，奇数回でいける位置を色分けして書いたらわかりやすかった．\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/282145/382fdbaf-676a-9c23-32da-75f756c80ae9.png)\n\nエクセルでかっこよく書いたのだが，実際に解く時に書いたのは紙に手書きで黒丸白丸をかいただけのお粗末なグラフである．\n","created_at":"2019-04-14T05:07:05+09:00","id":"8b29025d748fa1e9e88d","tags":[{"name":"C++","versions":[]},{"name":"AtCoder","versions":[]},{"name":"競技プログラミング","versions":[]}],"url":"https://qiita.com/ysuzuki19/items/8b29025d748fa1e9e88d"},{"title":"【令和】Microsoft の元号対応が迷走している件","body":"# はじめに\n\n私は Delphi 使いです。なので、新元号対応は Win32 API に依存していることになります。\nDelphi の FormatDateTime() / DateTimeToString() はレジストリをいじれば新元号に対応できる...はずでした。\n\n - [Era Handling for the Japanese Calendar (Microsoft)](https://docs.microsoft.com/ja-jp/windows/desktop/Intl/era-handling-for-the-japanese-calendar)\n - [元号が改正された場合の西暦と和暦の相互変換について \\[JAPAN\\] (Embarcadero)](https://community.idera.com/developer-tools/b/blog/posts/japan)\n - [Delphi／C++Builder 10.2.3 Tokyoの新元号対応について (Embarcadero)](https://community.idera.com/developer-tools/b/blog/posts/delphi-c-builder-10-2-3-tokyo)\n\n\n# 事の始まり\n\n4/10 の井之上@エンバカデロさんのツイートが発端でした。\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Windows 10 1809 向けに今日付け(2019/04/10) でリリースされたアップデートのうち、KB4493509 がインストールされていると、元号の処理がおかしくなる気がする。</p>&mdash; 井之上@エンバカデロ (@kaz_inoue) <a href=\"https://twitter.com/kaz_inoue/status/1115956891849375744?ref_src=twsrc%5Etfw\">2019年4月10日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n## 試してみる\n\n4/10 よりも前では、次のコードはレジストリで令和を追加している場合に `令和01年05月01日` を表示していました。\n\n```pascal\nprogram EraTest;\n\n{$APPTYPE CONSOLE}\n\nuses\n  System.SysUtils;\n\nvar\n  s: string;\nbegin\n  DateTimeToString(s, 'ggee年mm月dd日', Encodedate(2019, 05, 01));\n  Writeln(s);\n  Readln;\nend.\n```\n\nところが...\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">ぎゃあああああああぁぁぁぁぁぁぁぁ！ <a href=\"https://t.co/TWVpHkx8Ad\">pic.twitter.com/TWVpHkx8Ad</a></p>&mdash; DEKO (@ht_deko) <a href=\"https://twitter.com/ht_deko/status/1115964931533201409?ref_src=twsrc%5Etfw\">2019年4月10日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nシステム日付を 2019/05/01 以降に変更すれば新元号が使えるようになります。つまり、2019/05/01 になるまで新元号が使えない事になります。\n\n**これはバグなんですかね？仕様なんですかね？**\n\nいずれにせよ一度リリースされてしまった以上、何らかの対策をするしかありません。\n\n## .NET は？\n\n.NET は未来の日付の和暦を扱えます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/e72930b6-fc1f-e6f6-df46-5e7310106516.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/823d295a-158b-e983-0f07-6e1ad475f6fe.png)\n\nVB6 の互換関数は**元年問題**が出そうですが...\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/ae2cb927-c3d7-5e00-5f56-cc30a95a4360.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/102e9089-ec49-9ec3-4a55-97eec5629532.png)\n\n※ VB6.Format() 関数は `[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Calendars\\Japanese]` にある InitialEraYear の値で元年 / 1年表記が切り替わります。\n\n - [.NET Framework 用の日本の新元号対応更新プログラムの概要 (Microsoft)](https://support.microsoft.com/ja-jp/help/4477957/new-japanese-era-updates-for-net-framework)\n\n## Office は？\n\nOffice は未来の日付の和暦を扱えます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/382ab301-8c6a-cea4-e69f-5c8f97c7b3ce.png)\n\n...でもちょっと待ってくださいよ。少なくとも 4/11 の時点ではこうアナウンスしてましたよね？\n\n**ちょっと前:**\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/fe901cda-6ab0-29c1-e42a-540768b7e6cd.png)\n\n> Windows 上で実行されている Office 製品は 2019 年 5 月 1 日に新元号が開始されるまで、新元号を表示しませんのでご注意ください。\n\nどうして今は変わってるのです？\n\n**現状:**\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/a6c7f9a5-5585-77fd-479a-0dfbec0b2224.png)\n\n> 元号開始時に、お客様に可能な限り最適なエクスペリエンスをご体験いただけるよう、 5 月 1 日に新元号が開始される前に、一部の Office 製品で新元号が表示されるようになります。\n\n - [日本の新元号に関する Office の更新プログラム (Microsoft)](https://support.microsoft.com/ja-jp/help/4478844/office-updates-for-new-japanese-era)\n\n## 元年\n\n元年の件でも Microsoft は文言の修正を行っています。\n\n**ちょっと前:**\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/8737f9bd-6346-67b4-ee3a-b8c90204fd9f.png)\n\n> 元年表記をデフォルトに変更 (1 年表記にも変更可能)\n\n**現状:**\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/21785/c4079f34-0fe6-eed2-752c-1e93081c6e58.png)\n\n> 元年表記も選択できるよう変更\n\n - [新元号への対応について (Microsoft)](https://www.microsoft.com/ja-jp/mscorp/newera/default.aspx)\n - [日本マイクロソフト、新元号対応に関連する情報を集約したWebページを公開 (窓の杜)](https://forest.watch.impress.co.jp/docs/news/1173020.html)\n\nそれと、元年のレジストリは Windows 10 Insider Preview で元年デフォルト、それ以外の Windows 10 では 1年デフォルトになっているようです。\n\n - [Windows 用の日本の新元号対応更新プログラムについて - KB4469068 (Microsoft)](https://support.microsoft.com/ja-jp/help/4469068/summary-of-new-japanese-era-updates-kb4469068)\n\n# おわりに\n\nつまり現時点 (2019/04/14) ではこういう事になります。\n\n|   | Office | .NET | Win32 API |\n|:-:|:-:|:-:|:-:|\n| レジストリ  | 参照 | 参照  | 参照  |\n| 未来の和暦  | 〇 | 〇 | × |\n\nWin32 API で、未来の和暦 (新元号) を使うのなら、次のアップデータを適用しないようにするしかありません。\n\n| OS | KB |\n|:--:|:--:|\n| Windows 10 | [KB4493509](https://support.microsoft.com/ja-jp/help/4493509/windows-10-update-kb4493509) |\n| Windows 8.1 | [KB4493446](https://support.microsoft.com/ja-jp/help/4493446/windows-8-1-update-kb4493446) |\n| Windows 7 | [KB4493472](https://support.microsoft.com/ja-jp/help/4493472/windows-7-update-kb4493472) |\n\nまたは Win32 API を使わずに独自実装するかです。\n\n - [Delphi での新元号対応 (Qiita)](https://qiita.com/ht_deko/items/72d245b0fc64a7ece7c5)\n\n2019/05/01 を迎えれば殆どの問題は解決すると思われますが、検証するにも日本では GW 真っ只中なんですよね...。\n","created_at":"2019-04-14T04:10:41+09:00","id":"249db60e1c99ba440969","tags":[{"name":"Microsoft","versions":[]},{"name":"Delphi","versions":[]},{"name":"Win32API","versions":[]},{"name":"新元号","versions":[]}],"url":"https://qiita.com/ht_deko/items/249db60e1c99ba440969"},{"title":"TensorFlow ProbabilityへJupyter Notebookをコミットする前に知ってたら楽だったこと","body":"#1. はじめに\n年末からColaboratoryで遊んでいたDirichlet Process Mixture Model関係の内容をJupyter NotebookにまとめてTensorFlow ProbabilityのexampleへPRしました。\n[Fitting Dirichlet Process Mixture Model Using Preconditioned Stochastic Gradient Langevin Dynamics](https://github.com/tensorflow/probability/blob/master/tensorflow_probability/examples/jupyter_notebooks/Fitting_DPMM_Using_pSGLD.ipynb)\nマージされるまでいくつかハマった点があったので、問題、解決策と反省点を共有しようと思います。\n\n#2. PRがGoogle CLAに承認されない問題\n##2.1. 原因\nGitHubアカウントの主アドレスにGmailのエイリアス(hoge.hoge+**fuga**@gmail.com)を使っていることが原因でした。\n\n前提として、TensorFlow ProbabilityへのPRはGoogle CLAへの登録が必要です。PR後、GitHubアカウントがGoogle CLAへ登録していない場合、下記のように登録を促されます。\n<img width=\"792\" alt=\"スクリーンショット 2019-04-14 0.55.09.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/333592/1ac530de-a7b3-bad0-b0c7-b0b23d05503f.png\">\n\n今回はある理由から新設したGitHubアカウント（新アカウント）からPRしました。新設アカウントの主アドレスは以前から使用しているアカウント（旧アカウント）の主アドレス（hoge.hoge@gmail.com）のエイリアス（hoge.hoge+fuga@gmail.com）を設定していました。旧アカウントはGoogle CLAに登録済みでした。\n![github説明2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/333592/2ac80d97-2b6b-80a6-646d-29e6dc5a6c4e.png)\n\nPR後、Google CLAへ新アカウントの主アドレスを登録しようとしたところ、CLAではGoogleアカウントでログインできるGmailアドレスでしか登録できない＝エイリアスを使った主アドレスにしたGitHubアカウントはGoogle CLAに登録できないことが分かりました。\n下の画像はエイリアスでログインを試みた場合です。エイリアスではGoogleアカウントへログインできないため、そのままではCLAへ登録できませんでした。\n<img width=\"628\" alt=\"スクリーンショット 2019-04-09 1.19.08のコピー.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/333592/20cd4da3-ffb7-981d-bd3a-b7675cd9ba88.png\">\n\n##2.2. 解決策\n###2.2.1. 主アドレスの変更\nまず、PRしたGitHubの設定ページから主アドレスをエイリアスを使わないものに変更しました。しかし、PR後プッシュした全てのコミットのアドレスを過去に遡って書き換える必要が分かりました。\n下の画像は主アドレスを変更した時のものです。これまでPushしたコミットのアドレスはエイリアスを使っているので、複数人がコミットしていると勘違いされています。\n<img width=\"795\" alt=\"スクリーンショット 2019-04-14 1.41.49.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/333592/ac70e141-e883-66d7-d8ca-83adb2d26a1e.png\">\n\n###2.2.2. 過去コミットのアドレスの書き換え\nまず、ローカルで過去のコミットに遡ってアドレスをエイリアスを使わないものに書き換えました。方法は[Stack overflowのこのページ](https://stackoverflow.com/questions/2919878/git-rewrite-previous-commit-usernames-and-emails)を参考にしました。\n下記コマンドを実行すると、過去コミットのアドレスが遡って書き換えられます。\n\n```\ngit config alias.change-commits '!'\"f() { VAR=\\$1; OLD=\\$2; NEW=\\$3; shift 3; git filter-branch --env-filter \\\"if [[ \\\\\\\"\\$\\`echo \\$VAR\\`\\\\\\\" = '\\$OLD' ]]; then export \\$VAR='\\$NEW'; fi\\\" \\$@; }; f \"\ngit change-commits GIT_AUTHOR_EMAIL \"hoge.hoge+fuga@gmail.com\" \"fuga.fuga@gmail.com\"\n```\n\nリモートのコミットも書き換えるため、最後はアドレスを変更したコミットをforce pushしました。\n正直この方法が最善だったかは分からないですが、なんとかGoogle CLAが認証してくれました。\n<img width=\"790\" alt=\"スクリーンショット 2019-04-14 2.22.16.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/333592/1733cc00-6ded-6163-5e9a-2aa15c01b17e.png\">\n\n##2.3. 反省\nOSSへコミットする可能性のあるGitHubアカウントではGmailのエイリアスを使うのは辞めた方が良さそうです。\n今回のPRはコミットするのが私だけ、且つこのPRより後のコミットを書き換えるだけだったので最後はforce pushで逃げ切りましたが、他のケースでは今回のような手段は取れない場合が多いことを念頭に置いておきたいものです。\n\n#3. GitHub上でJupyter NotebookのTEXが崩れる問題\nプッシュした後にGitHub上で確認すると下のように表示崩れているTEXがありました。Colaboratoryで編集している時は何度もチェックしたのに、何故だ・・・。\n<img width=\"834\" alt=\"スクリーンショット 2019-04-14 2.57.23.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/333592/3ddfa8ba-560d-bd2d-2a5f-6174a4505408.png\">\n\n##3.1. 原因\nColaboratoryでは動くTEXのマクロがGitHubのJupyter Notebookでは動かないことが原因でした。\nGitHubのJupyter Notebookで動かなかったTEXは以下の通りです。\n\n```\n\\DeclareMathOperator*{\\argmax}{arg\\,max} %argmax \n\\argmax_{z_i}\n```\n\\DeclareMathOperatorというマクロでargmaxの下付き文字を表現しようとしているのですが、GitHub上では正しく表示されませんでした。\n上記のTEXをColaboratoryで表示させた結果が以下です。\n<img width=\"1027\" alt=\"スクリーンショット 2019-04-14 3.12.16.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/333592/4f01e4e2-d54e-7fdb-57a1-820d6f6279ef.png\">\nちゃんと表示されていることが分かります。\n\n##3.2. 解決策\n今回はGitHub上で動作しないマクロの使用をやめ、同じように下付き文字を表せる\\undersetを使うことで上記の問題を回避しました。\\undersetを使ったTEXは以下の通りです。\n\n```\n\\underset{z_i}{\\arg\\max}\n```\n実際にColaboratoryとGitHub上でマクロを使った場合と使わない場合でどのように表示されるか比較しました。\nまずはColaboratoryです。\n<img width=\"1231\" alt=\"スクリーンショット 2019-04-14 2.54.09.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/333592/8a738a66-3fd0-9737-727f-2ef19330912b.png\">\n上が\\DeclareMathOperatorマクロを使った場合、下が\\undersetを使った場合です。どちらも正しく表示できています。\n次にGitHub上で同じTEXを表示させた場合です。\n<img width=\"1003\" alt=\"スクリーンショット 2019-04-14 2.54.56.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/333592/0c50b0d9-8f07-168c-9f48-4d00c35d0647.png\">\nマクロを使ったTEXは崩れていますが、\\undersetを使った方がGitHub上でもちゃんと表示できています。\n\n## 3.3. 反省\nColaboratoryとGitHubではサポートしているTEXの機能に違いがあることを認識し、Colaboratoryで編集した結果をgist等に一回保存して表示のチェックを行えば良かったなと思っています。\n\n# 4. まとめ\n自分がTensorFlow ProbabilityにJupyter NotebookをPRした際にハマった点、その解決策と反省を書きました。\nOSSへコミットするGitHubのアカウントはエイリアスを使ったアドレスは使わない、Colaboratoryの表示とGitHubのJupyter notebookのtex表示は一緒じゃないことを意識して、PRする前に一回gistとかでチェックした方が良さそうです。\n","created_at":"2019-04-14T03:45:21+09:00","id":"7cc5f79693efda8b68c6","tags":[{"name":"GitHub","versions":[]},{"name":"OSS","versions":[]},{"name":"Jupyter","versions":[]},{"name":"TensorFlow","versions":[]},{"name":"bayesian","versions":[]}],"url":"https://qiita.com/ykkawana/items/7cc5f79693efda8b68c6"},{"title":"論文まとめ：SPIGAN: PRIVILEGED ADVERSARIAL LEARNING FROM SIMULATION","body":"# はじめに  \nICLR 2019 に accept された以下の論文\n[1] K. Lee, et. al. \"SPIGAN: PRIVILEGED ADVERSARIAL LEARNING FROM SIMULATION\"\nのまとめ。\n\narXivのリンク \nhttps://arxiv.org/abs/1810.03756 \n\nコードは現時点（2019/4/13)では公開されていないみたい。\n\n# 概要  \n1. simulatorで作成した画像を realな画像に変換する、domain adaptation 分野の論文\n2. real な画像に対するアノーテーション無しで目的タスクの推論値を求められる\n3. simulatorからの画像はGANでrealにするが、その際に simulator ならではの情報（例えばdepth情報）を利用するのが特徴的\n\n以下の図が１例。\n\n<img width=\"834\" alt=\"SPIGAN_img01.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/116706/0b5d11b7-d019-2e5d-9b6f-705030d670d4.png\">\n\n[1]のFigure 1より\n\n左から simulator で生成した画像、それを realにしたもの、depth情報の推論値、セグメンテーションの推論値。\n\n\n# 背景\nsemantic segmentation などはアノテーションの労力が多大にあり、それが学習のボトルネックになっている。アノテーション無しで学習することが出来れば楽だろう。\n\n# モデルの概要    \nモデルの概要は以下の図。\n\n<img width=\"830\" alt=\"SPIGAN_img02.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/116706/2e3acc79-174f-fd32-f63b-3c1578276f59.png\">\n\n[1]Figure2 より\n\n最上段部分に注目すると、左から画像 $x_s$ 入れて generator で $x_f$ に変換する。\n\nその $x_f$ と実際の画像 $x_r$ を discriminator に入れて real か fake かを判別する。\n\nこの部分だけ見ると、ありがちな画像変関係の GAN。\n\nこれに中央左寄り、認識タスク（この場合 semantic segmentation）を推論する task predictor $T$ を加えた。これも先行研究で既にある。\n\n本モデルの特徴は中央右寄り Previlege Infomation （この場合depth情報）を推論する Previleged Network $P$ 。\n\n# 目的関数と学習方法  \n### 目的関数全体 \n全体は以下。\n\n```math\n\\min_{\\theta_G, \\theta_T, \\theta_P} \\max_{\\theta_D} \\alpha \\mathcal{L}_{GAN} + \\beta \\mathcal{L}_T + \\gamma \\mathcal{L}_{P} + \\delta \\mathcal{L}_{perc}\n```\n\n１項目から adversarial loss、task prediction loss、PI regularization、perceptual regularization。\n\n各項の $\\alpha, \\beta, \\gamma, \\delta$ は重みづけ。\n\n### adversarial loss \nadversarial loss は 最小二乗損失で安定化させる。\n\n```math\n\\mathcal{L}_{GAN}(D, G) = \\mathbb{E}_{x_r \\sim P_r}[(D(x_r;\\theta_{D}) - 1)^2] + \\mathbb{E}_{x_s \\sim P_s}[D(G(x_s;\\theta_{G});\\theta_D)^2] \n```\n\n$x_r$ ：realな画像\n$p_r$ ：realな画像が従うデータ生成分布\n$x_s$ ：simulatorで作成した画像\n$p_s$ ：simulatorで作成した画像がデータ生成従う分布\n$\\theta_G$ ：generatorのパラメータ\n$\\theta_D$ ：discriminatorのパラメータ\n\n### task prediction loss  \ntask predictor $T$ に 合成画像 $x_s$ と それをreal化した画像 $G(x_s, \\theta_G)$ を入力し、ラベルとの loss を計算することで、両者のラベル情報を保持することを狙う。\n\nsemantic segmentation タスクの場合、ピクセルレベルでの交差エントロピーを計算する。\n\n```math\n\\begin{eqnarray}\n\\mathcal{L}_T (T, G) &=&\\mathcal{L}_{CE} (x_s, y_s) + \\mathcal{L}_{CE} (G(x_s, \\theta_G), y_s)\\\\\n \\mathcal{L}_{CE}(x,y) &=& \\frac{-1}{WH}\\sum_{u,v}^{W,H} \\sum_{c=1}^{C} \\mathbb{1}_{[c=y_{u,v}] } \\log(T(x;\\theta_T )_{u,v})\\  \n\\end{eqnarray}\n```\n\n$W$ ：画像の幅\n$H$ ：画像の高さ\n$u$ ：画像の横ピクセル\n$v$ ：画像の縦ピクセル\n$C$ ：物体のクラス\n$\\theta_T$ ：task predictor のパラメータ\n$mathbb{1}$ ：indicator 関数\n$y_s$ ：セグメンテーションのラベル\n\n### PI regularization\nタスク特有の情報(previlege infomation)で制約をかける。depth情報の場合は、previleged network $P$ に合成画像 $x_s$ と それをreal化した画像 $G(x_s, \\theta_G)$ を入力し、depth ラベルとの loss を計算する\n\nこれにより合成画像 $x_s$ と それをreal化した画像 $G(x_s, \\theta_G)$ のdepth 情報が維持されることを狙う。\n\n推論値とラベルとの差のL1ノルムでlossを求める。\n\n```math\n\\mathcal{L}_P (P,G) = \\| P(x_s;\\theta_P) - z_s \\|_1 + \\| P(G(x_s, \\theta_G);\\theta_P) - z_s \\|_1\n```\n\n### perceptual regularization  \n合成画像 $x_s$ と それをreal化した画像 $G(x_s, \\theta_G)$ を意味的に近くするため、さらに perceptual loss を用いる。\n\n```math\n\\mathcal{L}_{perc}(G) = \\| \\phi (x_s) - \\phi (G(x_s;\\theta_G)) \\|_1\n```\n\n$\\phi(x)$ ：VGG19などの学習済みモデルの中間層からの出力\n\n### 学習方法  \n以下の２ステップで学習する\n1. $\\theta_G, \\theta_T, \\theta_P$ を固定し、$\\theta_D$ を学習する\n2. $\\theta_D$ を固定し、$\\theta_G, \\theta_T, \\theta_P$ を学習する\n\n# 実験と結果\n### データセット  \n1. synthetic domain に用いた dataset：SYNTHIAのSYNTHIA-RAND-CITYSCAPES（Cityscapesに似た合成画像）  \n2. target domain に用いた dataset：Cityscapes と Mapillary Vistas datasets  \n3. target domain の dataset は training と test に分ける\n4. 学習中はtarget domain のラベル情報を使わない\n\n\n### メトリクス及びablation studyの設定  \n5. メトリクスはカテゴリーごとの IoU 及び mean IoU\n6. ablation studyは PI (previlege information)なしで効果を検証する\n\n### アーキテクチャ  \ngenerator：2 down-samplingのconv＋9 residual block＋2 deconv\ndiscriminator：PatchGANのような3層\ntask predictor：標準的なFCN8s\nprivileged network：標準的なFCN8s\n\nperceptual loss 計算時の $\\phi$ ：学習済みVGG19のconv1_2, conv2_2, conv3_2, conv4_2, conv5_2 からの出力\n\n### ハイパーパラメータの設定\nloss の各項重み：\nadversarial loss, task loss, privileged loss, perceptual loss ぞれぞれ $\\alpha = 1, \\beta = 0.5 \\gamma = 0.1, \\delta = 0.33$\n\n### data augmentation \nrandom crop\n\n### 最適化  \nAdam\n\n### 比較モデル \n1. FCNs ([2])\n2. CDA ([3])\n3. LSD ([4])\n4. CBST ([5])\n\n### 結果（１）\nSYNTHIAデータセットで学習してCityscapesで評価したものは以下。\n\n<img width=\"839\" alt=\"SPIGAN_img04.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/116706/e12d25aa-08c4-7f72-9461-17cd8232543a.png\">\n\n[1]Table1より\n\n上側がcrop前の解像度320x640、下側が512x1024の場合。\n\n各行はそれぞれのモデル、各列はカテゴリーで、最右がmean IoU。\n\nまず mean IoUでみた場合、pribileged networkを含めたSPIGANが最も良い。\n\nまたSPIGAN-no-PI と SPIGAN（PI含む）を比較した場合、数％のmIoU改善に寄与している。\n\n### 結果（２）\nSYNTHIAデータセットで学習してCityscapes, 及びVitasで評価したものは以下。\n\n<img width=\"839\" alt=\"SPIGAN_img05.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/116706/f3ac1990-3d35-dace-89f8-38d362137ab9.png\">\n[1]Table2より\n\nこちらはFCNsのみとの比較になるが、いずれのカテゴリーにおいてもFCNsを上回っている。\n\nまた同様に、SPIGAN-no-PI と SPIGAN（PI含む）を比較した場合、mIoU改善に寄与している。\n\n### 出力例 \n<img width=\"836\" alt=\"SPIGAN_img07.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/116706/cef4463e-5592-7d72-fd31-208b1eeb4170.png\">\n[1]Figure6より\n\n上段からsimulatorからの画像、privileged netowrk を入れない場合のadapted 画像、privileged netowrk を入れない場合のadapted 画像。\n\n一番右側の例では、simulatorの画像に影が入っているため、privileged networkがない場合はこの部分を影がある道路と認識できず、混乱した画像となっている。\n\n一方、privileged networkがある場合は、深さ情報から道路だとわかるためか、影のある道路をうまく表現できている。\n\n\n# reference  \n[2] Judy Hoffman, Dequan Wang, Fisher Yu, and Trevor Darrell. Fcns in the wild: Pixel-level adversar- ial and constraint-based adaptation. arXiv preprint arXiv:1612.02649, 2016b.\n\n[3] Yang Zhang, Philip David, and Boqing Gong. Curriculum domain adaptation for semantic segmen- tation of urban scenes. In International Conference on Computer Vision, 2017.\n\n[4] Swami Sankaranarayanan, Yogesh Balaji, Arpit Jain, Ser Nam Lim, and Rama Chellappa. Learning from synthetic data: Addressing domain shift for semantic segmentation. In Computer Vision and Pattern Recognition, 2018.\n\n[5] Yang Zou, Zhiding Yu, BVK Vijaya Kumar, and Jinsong Wang. Unsupervised domain adaptation for semantic segmentation via class-balanced self-training. In European Conference on Computer Vision, 2018.\n","created_at":"2019-04-14T03:32:52+09:00","id":"9cd984214f181fe8b90d","tags":[{"name":"MachineLearning","versions":[]},{"name":"DeepLearning","versions":[]},{"name":"GANs","versions":[]},{"name":"Domain-Adaptation","versions":[]}],"url":"https://qiita.com/masataka46/items/9cd984214f181fe8b90d"},{"title":"WebRTCとは - P2Pでの動画・音声のリアルタイム通信","body":"WebRTC（Web Real-Time-Communication）は、ブラウザやアプリ間での動画や音声などのリアルタイム通信を実現するオープンソースのプロジェクトです。\nブラウザ間、アプリ間で直接ピア・ツー・ピア（P2P）で通信します。開発者はプラグインを入れたりすることなく、ビデオチャットやファイル共有を作ることができます。\n\n主要なブラウザに実装されているので、開発者はすぐにJavaScriptでWebRTCの機能を利用できます。iOS/Androidアプリではライブラリを導入することで使えます。\n\nなお、P2Pとはいっても、いきなり通信相手を探すのは難しいので、最初にお互いが接続するサーバが必要です。（シグナリングサーバ）\nまた、相手がプライベートIPアドレスしか持っていないなど送り先を指定する術がない場合は、通信を中継するサーバも必要になります。（TURNサーバ）\nこのあたりは後述します。\n\nWebRTCは主要な3つの機能を持っています。\n\n1. カメラやマイクで、動画・音声をストリーミング式に取得する（MediaStream）\n2. P2Pで動画・音声をやりとりする（RTCPeerConnection）\n3. P2Pで任意のデータを双方向でやりとりする（RTCDataChannel）\n\n# 1. MediaStream - 動画・音声の取得\n\n以下のHTMLファイルをブラウザで開いてみてください。\nカメラが起動し、カメラが受け取った映像がページ上で表示されると思います。\n\n```index.html:\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <video autoplay playsinline></video>\n    <script>\n      navigator.mediaDevices.getUserMedia({ video: true })\n        .then(stream => {\n          document.querySelector('video').srcObject = stream \n        })\n    </script>\n  </body>\n</html>\n```\n\n書かれているJavaScriptは、getUserMedia()を呼び出し、取得したstreamをvideoタグにセットしています。\nこのstreamが、次々に流れてくる動画・音声データを表すMediaStreamオブジェクトです。\n\n# 2. RTCPeerConnection - P2Pで動画・音声をやりとりする\n\nRTCPeerConnectionは、P2Pの通信を確立するまでの手続き（シグナリング）を含め、お互いにメディアをストリーミング再生するまでのあらゆる機能を提供します。\n\n## シグナリングサーバ - P2Pといってもサーバは必要\n\nP2Pといっても、いきなり通信相手を探すのは難しいので、最初はサーバに接続します。\nサーバに接続されたコンピューターの中から通信相手を探し、その後でP2Pの直接通信に切り替えます。\n\nこのサーバをシグナリングサーバと呼び、後述する通信経路の情報や、利用可能なメディアの形式などを、SDPという書式のテキストで交換します。\n\nWebRTCは、シグナリングを行うまでに必要な機能（SDPの生成など）は提供しますが、実際にシグナリングを行う方法については関与しません。\nシグナリングは、開発者がサーバやそのプロトコルについて決める必要があります。\n\n## P2Pにおいて、通信をどのように相手に到達させるか\n\n通常のグローバルIPアドレスを持ったサーバへのリクエストと違い、P2Pでは自分も相手もグローバルIPアドレスを持っていないことが多く、直接到達させることができません。\nこれを解決するためにICEというプロトコルが定められ、プライベートネットワークにいる相手にも到達させる仕組みを規定しています。RTCPeerConnectionがこのICEをサポートしています。\nICEでは、STUNとTURNという2つのサーバが登場します。\n\n### STUN - インターネット側から見た時の自身のIPアドレスを知るためのサーバ\n\n別のネットワークにいる相手があなたのプライベートIPアドレスを指定したところで、その通信はあなたに届きません。グローバルIPアドレスが必要です。\nしかし、あなたの端末は自身のプライベートIPアドレスしか知りません。\n\nそこで、インターネット上のサーバにリクエストを送り、その通信時にルーターによって交換されたグローバルIPアドレスを反射的にそのサーバに返してもらいます。\nこのサーバをSTUNサーバといい、インターネット側から見た時の自身のIPアドレスを知るために使います。\n\nここで知ったグローバルIPアドレスは、シグナリングサーバに送って相手と交換します。\n相手はこのグローバルIPアドレスを指定するだけで自身に通信を到達できるケースがあります。\n例えば、グローバルIPアドレス宛ての通信を自身に転送してくれるタイプのルーターを使っているケースです。（Full cone NAT）\nこれならSTUNだけでP2P通信が確立します。\n\nしかし、外部から来た通信が自身に届かないルーターも多く使われています。（Symmetric NAT）\nそのようなルーターでは、自身からのリクエストに対するレスポンスしか、自身に到達できません。\nその時はTURNの出番です。\n\n### TURN - STUNで到達できない場合に、通信をリレーするサーバ\n\n外部の端末がスタートした通信が自身に届かないネットワーク環境の場合は、STUNサーバだけでは解決しないので、TURNサーバを使って通信を確立します。\nTURNサーバは、自身も相手も通信できるインターネット上にいて、通信を中継してくれるサーバです。\n\nWebRTCはICEをサポートしており、RTCPeerConnectionを生成する際に、ICEで使うSTUNサーバやTURNサーバのアドレスを設定できます。\nあとは、通信経路が収集されたというイベントが発生するたびに、通信経路情報を相手と交換するためにシグナリングサーバに送るといった処理を書くことになるでしょう。\n\nちなみに、STUNで解決できないケースもあるなら最初からTURNを使えばいいじゃないかと思うかもしれません。\nしかし、TURNは全ての通信をリレーするので、接続元が増えればそれだけリソースを消費します。\nよってICEは、TURNはSTUNが使えない場合の手段としています。\n\n# 3. RTCDataChannel - P2Pで任意のデータを双方向でやりとりする\n\nRTCDataChannelを使うと、前述したような動画や音声などのメディアのストリーミングとは別に、アプリケーションで作った任意のデータをP2Pでやりとりできます。\n\nプログラム的には、RTCDataChannelはWebSocketとよく似たインターフェースで提供されています。\nsend()メソッドでデータを送ったり、データを受け取った時にmessageイベントが発火するなどです。\n\nWebSocketもリアルタイムでデータをやりとりしますが、こちらはサーバを経由しないブラウザ間・アプリ間のP2Pなので、接続元が増えてもサーバの負荷への影響が少なく、通信もあまり遅延しないといった利点があります。\n\nRTCDataChannelはバイナリもやりとりできるので、例えばリアルタイムのファイル共有が実装できます。\n\n# 参考\n[WebRTC公式](https://webrtc.org/)\n[Google Codelabs - WebRTC](https://codelabs.developers.google.com/codelabs/webrtc-web/index.html?index=..%2F..index#0)\n[ネットワークアドレス交換 - Wikipedia](https://ja.wikipedia.org/wiki/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E5%A4%89%E6%8F%9B)\n[TURN - Wikipedia](https://ja.wikipedia.org/wiki/TURN)\n[WebRTCのICEについて知る](https://www.slideshare.net/iwashi86/webrtcice)\n[WebSocket / WebRTCの技術紹介](https://www.slideshare.net/mawarimichi/websocketwebrtc)\n","created_at":"2019-04-14T03:09:50+09:00","id":"30ae0e92fd377dc41dbc","tags":[{"name":"WebRTC","versions":[]}],"url":"https://qiita.com/teruya_kusumoto/items/30ae0e92fd377dc41dbc"},{"title":"投稿された住所をマップに反映させるRailsアプリを作る","body":"Railsで、ユーザが投稿した住所をマップ上に表示させるアプリを作りました。\nごくごく簡単なものになりますのでササッと。\n\n# アプリケーションの動き\n1. ユーザーがフォームから住所を投稿\n2. 住所を緯度経度に変換\n3. 変換した移動軽度から、画面上のマップにマーカーを反映させる。\n\nな感じです。\n\n# 準備\n駆け足で書いていくため、最初の手順は省きます。\n取り敢えず、\n``` rails new ``` がされている状態から始めます。\n\n# Gemfileに追記\nGemfileに以下を加え、bundle installを実行します。\n\n```ruby:Gemfile\n# map表示を簡易化する\ngem 'leaflet-rails'\n# map上のマーカー周りをゴニョゴニョする\ngem 'leaflet-markercluster-rails'\n# 住所を緯度経度に変換する\ngem 'geocoder'\n```\n\n# scaffoldでササッと投稿アプリを制作\nRailsの魔法ことScaffoldで、簡単にユーザー投稿アプリを作ります。\n\n```shell\nrails g scaffold maps name address comment:text lonlat\n```\n\nそれぞれ\n\n- name:住所を投稿したユーザの名前(なくていい)\n- address:投稿された住所\n- comment:なにかしらのコメント\n- lonlat:投稿された住所を(内部的に)緯度経度変換し保存する\n\nです。\n\n緯度経度(lonlat)はユーザーに入力させたくないので、_form.html.erbから該当箇所を削除しておきます。\n\n最後に```rails db:migrate```も実行。\n\n# leafletでマップを表示する\n今回は『Open Street Map』を使用します。\n\n## leafletを使うための準備\nまずleafletを使用するため、application.jsとapplication.cssに以下を追加します。\n\n```javascript:application.js\n//= require leaflet\n//= require leaflet.markercluster\n```\n\n```css:application.css\n *= require leaflet\n *= require leaflet.markercluster\n *= require leaflet.markercluster.default\n */\n```\n\n## 適当なマーカー用画像を用意\n今回は、取り敢えず\"marker.png\"という画像を/Publicに追加したということで進めます。\n\n## leafletを使ってマップを表示\nmaps/indexに以下のコードを追記します。\n\n```erb:index.html.erb\n（省略）\n<div id=\"map\" style=\"height: 500px; width: 500px;\"></div>\n\n<%=\n  map(:center => {\n      :latlng => [36, 140],\n      :zoom => 4,\n  })\n%>\n\n<script>\n  // rubyから渡された住所配列をjsの変数に格納\n  var maps = <%= @maps.to_json.html_safe %>;\n\n  for(var hash_count = 0; hash_count < maps.length; hash_count++){\n    // 緯度経度とコメントを取り出しマーカー化\n    L.marker(maps[hash_count].lonlat.split(','), {icon: L.icon({iconUrl: \"/marker.png\"})},)\n      .bindPopup(maps[hash_count].comment)\n      .addTo(map);\n  }\n</script>\n```\n\n# 投稿された住所を緯度経度に変換する\nユーザーが住所を入力し保存(あるいは更新)する際に、住所を緯度経度に変換しlonlatカラムに保存するための仕組みを作ります。\n\n```ruby:app/models/map.rb\nclass Map < ApplicationRecord\n    before_save :update_lonlat\n\n    def update_lonlat\n        lonlat = address_to_lonlat(read_attribute(:address))\n        write_attribute(:lonlat, lonlat)\n    end\n\n    # 住所を保存用経緯度に変換\n    def address_to_lonlat(address)\n      result = Geocoder.search(address)\n      lonlat = result.first.coordinates\n      return lonlat.join(',')\n    end\nend\n```\n\nこれだけで、住所(address)カラムを保存、更新した際に緯度経度(lonlat)カラムも更新してくれます。\n\n# 完成\n上記の手順でおそらく完成するはずです。\n![FireShot Capture 023 - MapTest - mrbicycle-map-test.herokuapp.com.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/165044/c68f2e75-a2ce-dad8-4210-26b0adbdcf02.png)\n\n寝る前にササッと書いているのでかなり駆け足でしたが、お読み頂きありがとうございました。\n\n","created_at":"2019-04-14T03:06:20+09:00","id":"a715a0f8287077007683","tags":[{"name":"Ruby","versions":[]},{"name":"HTML","versions":[]},{"name":"Rails","versions":[]},{"name":"OpenStreetMap","versions":[]},{"name":"leaflet","versions":[]}],"url":"https://qiita.com/artistan/items/a715a0f8287077007683"},{"title":"Javaにあるクラスの使い方とは？","body":"[未来電子テクノロジー](https://www.miraidenshi-tech.jp/intern-content/program/)でインターンをしている@yuka_ponです。\n\nJavaを学んでいると、たくさんのクラスが登場しますよね？\nそこで今回は、Javaに登場するクラスについて学んだことをまとめてみました。\n\n#クラスについて\n##クラスとは？\nそもそも、**クラス**とは一体何でしょうか？\n\nクラスとは、プログラムを実行するための処理をまとめたものです。\nその処理を実行するためには、オブジェクトを作る必要があります。\n\nそのクラスは、次のように表示することで作れます。\n\n```Java\nclass クラス名 {\n  実行処理\n}\n\n```\n\n##クラス継承について\nクラスには、**クラス継承**というものもあります。\nこれは、クラスが保持している実行処理を他のクラスにも同様に処理させるものです。\n継承元のクラスを**スーパークラス**や**親クラス**と呼ぶのに対して、継承したクラスを**サブクラス**や**子クラス**と呼びます。\n\nクラスの継承は、次のように表します。\n\n```Java\nclass 親クラス名 {\n 実行処理\n} \n\nclass 子クラス名 extends 親クラス名 {\n　実行処理\n}\n```\n\n#クラスの種類\n##内部クラス\n**内部クラス**とは、クラス内に新たなクラスを作成することです。\n\nその時は、次のように表します。\n\n```Java\nclass クラス名1 {\n class クラス名2 {\n  実行処理\n }\n}\n```\n\n##ラッパークラス\n**ラッパークラス**とは、int型のような基本データを利用するために使うクラスです。\n\n\nこの他にも、クラスはたくさんあります。\n詳しくは、[コチラ](https://www.sejuku.net/blog/24931)。\n","created_at":"2019-04-14T02:54:13+09:00","id":"b9ef08166b60b06a2d9c","tags":[{"name":"Java","versions":[]},{"name":"クラス","versions":[]},{"name":"未来電子","versions":[]}],"url":"https://qiita.com/yuka_pon/items/b9ef08166b60b06a2d9c"},{"title":"Installing and Configuring FTP server On Windows IIS 7","body":"In this article, I show you to install and configure an FTP server (IIS 7.5) in Windows 7. In your local office, there is an easy way to share files with home computer users. You can set up an FTP server using IIS in Windows types. You can run the website using FTP. IIS is a good choice for this website.\nThe IIS versions are as follows:\n\n1) IIS 5.0 – Windows 2000\n2) IIS 5.1 – Windows XP\n3) IIS 6 – Windows Server 2003 and Windows XP Professional 64 bit\n4) IIS 7 IIS – Windows Server 2008 and Windows Vista\n5) IIS 7.5 – Windows 7 and Windows 8.1\n\nRead More - https://www.itsmarttricks.com/installing-configuring-ftp-server-iis-7/\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/320298/83206a10-c658-1db3-f016-97c463cf42ff.png)\n","created_at":"2019-04-14T02:47:43+09:00","id":"7b8dc572c704ef9190a9","tags":[{"name":"Windows","versions":[]},{"name":"ftp","versions":[]},{"name":"IIS","versions":[]},{"name":"7","versions":[]},{"name":"serve","versions":[]}],"url":"https://qiita.com/itsmarttricks/items/7b8dc572c704ef9190a9"},{"title":"【Spring】Model, ModelAndView, ModelMapの違い","body":"\n■やりたいこと\n  ModelAndView, Model, ModelMapの違いについて知りたい。\n  \n■各オブジェクトについて\nModelMap\n・LinkedHashMap<String, Object>である。\n\nModelAndView\n・ViewとModelを両方追加できる。\n・addObjectをすると内部で保持するModelMapに追加される。\n・addAttribute\n\nExtendedModelMap (Model)\n・Modelインターフェースを実現している。\n・ModelMapを継承している。\n・ハンドラの引数はこれをさらに継承した「BindingAwareModelMap」である。\n\n■構造\n　　BindingAwareModelMap\n　　　┗　ExtendedModelMap\n　　　　┗ModelMap, Mode\n\n　　ModelAndView\n　　　┗ModelMap\n\n---\n①インプット情報(Form)が「model」にセットされるのか。\n②チェック結果情報(BindingResult)が「model」にセットされるのか。\n\n```java:Test.java\n\n\t@PostMapping(\"entry1\")\n\tpublic String entry1(Model model, @Validated TestForm form, BindingResult result) {\n\t\treturn \"output\";\n\t}\n\n\t@PostMapping(\"entry2\")\n\tpublic String entry2(ModelMap model, @Validated TestForm form, BindingResult result) {\n\t\treturn \"output\";\n\t}\n\n\t@PostMapping(\"entry3\")\n\tpublic String entry3(ModelAndView model, @Validated TestForm form, BindingResult result) {\n\t\treturn \"output\";\n\t}\n```\n①，②の結果\n Model    : される。 \n ModelMap : される。\n ModelAndView : されない(ModelMapがNull)。\n\n---\n③@ModelAttributeのオブジェクトは「model」にセットされるのか。\n\n```java:Test.java\n\n\t@ModelAttribute\n\tpublic EchoForm getForm() {\n\t\treturn new EchoForm();\n\t}\n\t@GetMapping(\"show1\")\n\tpublic String show1(Model model) {\n\t\treturn \"input\";\n\t}\n\t@GetMapping(\"show2\")\n\tpublic String show2(ModelMap model) {\n\t\treturn \"input\";\n\t}\n\t@GetMapping(\"show3\")\n\tpublic String show3(ModelAndView model) {\n\t\treturn \"input\";\n\t}\n```\n\n③の結果\n Model    : される。 \n ModelMap : される。\n ModelAndView : されない。(ModelMapがNULL)\n\n---\n④セッション情報はModelにセットされるのか。\n (SessionBeanをDIした場合)\n\nこれについては勘違いしていた。\n@ModelAttributeを使用する場合はModelにセッション情報をセットする必要があったが、\n@SessionScopeの場合、それは必要なく、直接\nコントローラクラスのフィールドにDIされたオブジェクトを操作すればよいのだ。\nよってセッションBeanはModelには設定されない。\n\n---\n■まとめ\n・ModelAndView - Modelのデータを保持する。\n・Model        - Modelのふるまいを定義する。\n・ModelMap     - Modelのデータ自身である。\n　⇒ 細かいことを抜きにすれば、いずれもデータは「ModelMap」型で保持している。\n\n\n\n\n\n\n\n\n\n","created_at":"2019-04-14T02:40:57+09:00","id":"4d4214fc4ded78f40517","tags":[{"name":"spring","versions":[]},{"name":"model","versions":[]}],"url":"https://qiita.com/yakumo3390/items/4d4214fc4ded78f40517"},{"title":"Rails勉強ネタ　destroyアクションもPOSTメソッドを送信してるのか","body":"前回updateアクションの時、送信されているhtmlリクエストが`POST`だったのを確認したので、\ndestroyアクションではどうなのか確認してみた。\n\n#実際に確認\nNoticeというモデルがあるとする。\nindexページから\n①`button_to`で削除する場合と\n②`link_to`で削除する\nパターンを見たいので以下のような見た目になった\n↓（左が削除ボタン、右が削除リンク）\n<img width=\"973\" alt=\"スクリーンショット 2019-04-14 1.31.48.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/251648/c2b90b07-8cc2-1c7c-e4c0-bb554b19904d.png\">\n\n\n###view テンプレート\n```index.html.erb\n・\n・\n<% @notices.each do |notice| %>\n  <tr>\n　　〜〜〜略〜〜〜\n    <td><%= button_to \"削除\", notice_path(notice),\n                                           class: 'btn',\n                                           method: :delete %>\n    </td>\n    <td>\n      <%= link_to \"削除\", notice_path(notice), method: :delete %>\n    </td>\n  </tr>\n<% end %>\n・\n・\n```\n\n###HTML\n`右クリック→ページのソースを表示`で見てみると。\n\n\n```\n①削除ボタン\n<td><form class=\"button_to\" method=\"post\" action=\"/notices/14\">\n  <input type=\"hidden\" name=\"_method\" value=\"delete\" /><input class=\"btn\" type=\"submit\" value=\"削除\" /><input type=\"hidden\" name=\"authenticity_token\" value=\"bvoKobmo3Zvj6jysAJAmuxv49+WX+EqiG+bBSqWibDm9+lc44shUlU3mAau9H6WGR5z7rucUmICmobTOplLT0w==\" /></form>\n</td>\n```\n\n```\n②削除リンク\n<td>\n  <a rel=\"nofollow\" data-method=\"delete\" href=\"/notices/14\">削除</a>\n</td>\n```\n\n①削除ボタンは[update](https://qiita.com/yusaku_/items/54479e5744cd7af31f89)の時と同様、**`mothod=\"post\"`**であるが、`_method`パラメータで**delete**を指定している。\n\n\n②削除リンクは `data-method=\"delete\"`という属性だけ付与されている。\n\n#Wiresharkでキャプチャー\nリアルなhttpパケットを見てみます。\n\n###①削除ボタン\n<img width=\"1341\" alt=\"スクリーンショット 2019-04-14 1.58.58.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/251648/d00935f8-085e-1585-b417-7d4ffd659388.png\">\n\nこちらも[update](https://qiita.com/yusaku_/items/54479e5744cd7af31f89)の時と同様、実際に送信しているhttpリクエストは**`POST`**メソッドだが、`Form item: \"_method\" = \"delete\"`となっている。\n\n###②削除リンク\n\n<img width=\"1345\" alt=\"スクリーンショット 2019-04-14 2.06.12.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/251648/eba785c0-1b07-3b98-ca45-56a9473e7c5d.png\">\n\nこちらも①のパターンと全く同じように見える。\nつまり**`data-method=\"delete\"`**属性だけで`_method`パラメーターが使えるようである。\n\n#疑問に思ったこと\n最終的なhttpリクエストの振る舞いが同じになるのであれば、①も`data-method=\"delete\"`属性だけにすれば良いのではないのか？\n\n","created_at":"2019-04-14T02:23:01+09:00","id":"b4b81e54e9dc566056e3","tags":[{"name":"Ruby","versions":[]},{"name":"Rails","versions":[]}],"url":"https://qiita.com/yusaku_/items/b4b81e54e9dc566056e3"},{"title":"FM RADIO — RADIOLY [CURRENT VERSION 2.6]","body":"RadioLY — Live FM Radio brings you the best of the World Live Broadcast FM & AM stations\n\nRadioLy is an excellent and hassle free way to listen to the online fm radio, AM radio and perhaps free internt radio stations.\n\n\nWe have a pool of over 35,000+ live fm radio stations which you can sit back and listen at the comfort of your home and office. RadioLy is one of the free radio app that give you the benefit to listen to fm radio stations from any given geographic location of the world.\n\nIt is quite easy to find any fm radio station through RadioLy App. It is quite easy to search through the genre such as news radio, sports radio, rock radio stations, pop radio stations to name a few. You can also search it by the country of your choice. Our aim is to simplify the radio listening experience to our users on the different mobile and web devices.\n\n★★Why Install RadioLY — LIVE FM Radio ★★\n\n★Clean User Interface\n\nRadioLy offers a very clean and easy to navigate user interface and thus help you out in tuning FM radio and local radio. There is a lot of am & fm radio app that are too complex to operate while playing a radio station. With RadioLy, it will help you out to sort out all the above problems.\n\n★No Interruptions or Buffering\n\nRadioLy is serving more than 1 million listeners in a month. Our app helps you to offer great level of reliability and stability which helps us to stand out from the rest of the crowd. That is why we are trying to improve my radio listening quality as much as we can through our app.\n\n★One Tap Access to Your Favorite Channel\n\nWith our application, you can easily navigate to the favorite channel of your choice in a quite fast and hassle free way. We are improving our app on a regular basis such that you can have a very smooth experience while you are using our radio station at home, office or in your car.\n\n★★ Our App Features ★★\n\n1. Classic design to display the stations listing\n2. Add to Favorites\n3. Featured list\n4. Countries list (Select country and listen the Radio Station)\n5. Search your favorite radio station or genre.\n6. Share what you are listening to on Facebook, Twitter, G+ and Tumbler.\n\nMore features coming soon.\n\nSo, if you are having any kind of questions, then do get in touch with as at support@radioLy.app and one of the our representatives will reach out to you in a span of 24 hours.\n\nIf any one want to remove copyright radio station send mail at copyright@radioLy.app.\n\nIf any radio broadcaster want to add radio station at RadioLy — Live FM Radio app mail us support@radioLy.app\n\nThanks\n\n★ RADIOLY — Live FM Radio ★\n\nWHAT’S NEW\nAdd Sleep Timer Feature\nAdd Volume Feature In Full Player\nFix Bugs\nKeep Listening Live Fm Radio — Radioly\n\nADDITIONAL INFORMATION\nUpdated — April 12, 2019\n\nSize — 6.4M\n\nInstalls — 5,000+\n\nCurrent Version — 2.4\n\nRequires Android — 4.1 and up\n\nContent Rating — Rated for 3+\n\nOffered By — RadioLy\n\nDeveloper — Visit website\n\nsupport@radioly.app\n\nPrivacy Policy\n\nVisit Here TO Download RadioLY App — https://play.google.com/store/apps/details?id=com.onlineradio.radiofm&hl=en_US\n","created_at":"2019-04-14T02:18:30+09:00","id":"48cb56d4d631402ec9eb","tags":[{"name":"radio","versions":[]},{"name":"FM","versions":[]}],"url":"https://qiita.com/radioly/items/48cb56d4d631402ec9eb"},{"title":"python仮装環境でbatファイル作るとき","body":"## python仮装環境でbatファイル\nWindows上にて、python仮装環境を利用してdjangoを構築した時、普通にactivateしようとしたところ、上手くいきませんでした。\n\n```\nScripts\\activate\n```\n\n## 解決策\nこの場合、callコマンドを前につける。\n\n```\ncall Scripts\\activate\n```\n\nよく気づいてなかったですが、activateコマンド自体もbatファイルとして用意されている様でして、\nbatファイルからbatファイルを呼ぶということになり、そのいった時はcallコマンドが必要となるみたいです。\n\n## django起動するbat\n\n```\ncd c:\\python\\env1\n\ncall Scripts\\activate.bat\n\ncd django_sample\n\npython manage.py runserver\n\npause\n\n```\n\nこの内容のbatファイルをスタートアップフォルダに置けば、windows再起動時、\nよしなにしてくれます。\n![スクリーンショット 2019-04-14 2.08.06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/168441/1b84de42-a381-7c7c-e659-222e221c1bd0.png)\n\nちなみに、windows serverなどスタートアップフォルダ分かりづらい時は、\n以下のコマンドで、\n\n```\nshell:Common Startup\n```\n![スクリーンショット 2019-04-14 2.13.13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/168441/9d1c4c79-7072-d1c2-57f3-3c21680512f5.png)\n\n![スクリーンショット 2019-04-14 2.13.34.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/168441/e99e86ba-c413-7006-0077-9782b2613526.png)\n\n\n\n\n","created_at":"2019-04-14T02:16:52+09:00","id":"377deee1f06c1addd445","tags":[{"name":"Python","versions":[]},{"name":"Django","versions":[]},{"name":"Windows","versions":[]},{"name":"bat","versions":[]},{"name":"virtualenv","versions":[]}],"url":"https://qiita.com/biz-nakashima001/items/377deee1f06c1addd445"},{"title":"UTF-8のコードポイントはどうやってもっと高速に数えるか","body":"（この記事は私の blog の http://umezawa.dyndns.info/wordpress/?p=7236 の転載です）\n\n<a href=\"https://qiita.com/saka1_p/items/ff49d981cfd56f3588cc\">UTF-8のコードポイントはどうやって高速に数えるか</a>という記事がありました。コードを眺めながらもっと速くなるんじゃないのと思ったので、やってみようと思います。\n\n元のコードはこうなっています。\n\n```C++\ninline int32_t avx2_horizontal_sum_epi8(__m256i x)\n{\n    __m256i sumhi = _mm256_unpackhi_epi8(x, _mm256_setzero_si256());\n    __m256i sumlo = _mm256_unpacklo_epi8(x, _mm256_setzero_si256());\n    __m256i sum16x16 = _mm256_add_epi16(sumhi, sumlo);\n    __m256i sum16x8 = _mm256_add_epi16(sum16x16, _mm256_permute2x128_si256(sum16x16, sum16x16, 1));\n    __m256i sum16x4 = _mm256_add_epi16(sum16x8, _mm256_shuffle_epi32(sum16x8, _MM_SHUFFLE(0, 0, 2, 3)));\n    uint64_t tmp = _mm256_extract_epi64(sum16x4, 0);\n    int32_t result = 0;\n    result += (tmp >> 0 ) & 0xffff;\n    result += (tmp >> 16) & 0xffff;\n    result += (tmp >> 32) & 0xffff;\n    result += (tmp >> 48) & 0xffff;\n    return result;\n}\n\nint64_t avx_count_utf8_codepoint(const char *p,  const char *e)\n{\n    // `p` must be 32B-aligned pointer\n    p = static_cast<const char *>(__builtin_assume_aligned(p, 32));\n    const size_t size = e - p;\n    int64_t result = 0;\n    for (size_t i = 0; i + 31 < size;) {\n        __m256i sum = _mm256_setzero_si256();\n        size_t j = 0;\n        for (; j < 255 * 32 && (i + 31) + j < size; j += 32) {\n            const __m256i table = _mm256_setr_epi8(\n                    1, 1, 1, 1, 1, 1, 1, 1, //     .. 0x7\n                    0, 0, 0, 0,             // 0x8 .. 0xB\n                    1, 1, 1, 1,             // 0xC .. 0xF\n                    1, 1, 1, 1, 1, 1, 1, 1, //     .. 0x7\n                    0, 0, 0, 0,             // 0x8 .. 0xB\n                    1, 1, 1, 1              // 0xC .. 0xF\n                    );\n            __m256i s = _mm256_load_si256(reinterpret_cast<const __m256i *>(p + i + j));\n            s = _mm256_and_si256(_mm256_srli_epi16(s, 4), _mm256_set1_epi8(0x0F));\n            s = _mm256_shuffle_epi8(table, s);\n            sum = _mm256_add_epi8(sum, s);\n        }\n        i += j;\n        result += avx2_horizontal_sum_epi8(sum);\n    }\n    return result;\n}\n```\n\nなお、高速化する前に、引数や返り値をちょこっとだけ変えてあります。関数の頭で計算していた値を引数で渡したり int64_t が size_t になったりしてるだけなので、速度には影響はありません。\n\n```C++\nsize_t avx_count_utf8_codepoint(const char *p, size_t sz)\n{\n\tsize_t result = 0;\n\tfor (size_t i = 0; i + 31 < sz;) {\n\t\t__m256i sum = _mm256_setzero_si256();\n\t\tsize_t j = 0;\n\t\tfor (; j < 255 * 32 && (i + 31) + j < sz; j += 32) {\n\t\t\tconst __m256i table = _mm256_setr_epi8(\n\t\t\t\t1, 1, 1, 1, 1, 1, 1, 1, //     .. 0x7\n\t\t\t\t0, 0, 0, 0,             // 0x8 .. 0xB\n\t\t\t\t1, 1, 1, 1,             // 0xC .. 0xF\n\t\t\t\t1, 1, 1, 1, 1, 1, 1, 1, //     .. 0x7\n\t\t\t\t0, 0, 0, 0,             // 0x8 .. 0xB\n\t\t\t\t1, 1, 1, 1              // 0xC .. 0xF\n\t\t\t);\n\t\t\t__m256i s = _mm256_load_si256(reinterpret_cast<const __m256i *>(p + i + j));\n\t\t\ts = _mm256_and_si256(_mm256_srli_epi16(s, 4), _mm256_set1_epi8(0x0F));\n\t\t\ts = _mm256_shuffle_epi8(table, s);\n\t\t\tsum = _mm256_add_epi8(sum, s);\n\t\t}\n\t\ti += j;\n\t\tresult += avx2_horizontal_sum_epi8(sum);\n\t}\n\treturn result;\n}\n```\n\n### ループ内の処理\n\nこのアルゴリズムでは 0x00～0x7f または 0xc0～0xff であるバイトを数えるわけですが、これは signed byte として見ると -0x40～0x7f となります。なので、 VPSHUFB でテーブルを引かなくても VPCMPGTB 命令一発で判定できます（たぶん元の記事の前の記事にある UTF-8 バリデーションのコードを改造したからこうなってるんだと思う）。この場合判定を通ったバイトは 1 ではなく 0xff (=-1) になりますが、集計する際に VPADDB ではなく VPSUBB にすれば問題ありません。\n\n```C++\nsize_t opt_innermost_content(const char *p, size_t sz)\n{\n\tsize_t result = 0;\n\tfor (size_t i = 0; i + 31 < sz;) {\n\t\t__m256i sum = _mm256_setzero_si256();\n\t\tsize_t j = 0;\n\t\tfor (; j < 255 * 32 && (i + 31) + j < sz; j += 32) {\n\t\t\t__m256i s = _mm256_load_si256(reinterpret_cast<const __m256i *>(p + i + j));\n\t\t\tsum = _mm256_sub_epi8(sum, _mm256_cmpgt_epi8(s, _mm256_set1_epi8(-0x41)));\n\t\t}\n\t\ti += j;\n\t\tresult += avx2_horizontal_sum_epi8(sum);\n\t}\n\treturn result;\n}\n```\n\nこうするとロード、判定、集計がそれぞれ1命令 (1uOP) になります。さすがにこれ以上命令数は減らないでしょう。また、Haswell の場合 VPCMPGTB と VPADDB は両方とも port1/5 で発行できてスループットが 0.5 です。このコードは sum に VPADDB するところにループ間の依存関係がありますが、横で VPCMPGTB していてループ間の依存関係を改善しても実行ユニットが足りなくて速くならないので、ループ内のコードに関しては理論上は最速になります。<a href=\"https://dic.nicovideo.jp/a/%E5%A4%9A%E5%88%86%E3%81%93%E3%82%8C%E3%81%8C%E4%B8%80%E7%95%AA%E6%97%A9%E3%81%84%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99\">多分これが一番速いと思います。</a>\n\nいきなり最速になってしまったので、ここからは UTF-8 は関係なく条件を満たすバイトをどう高速に数えるかという話に移ります。\n\n### ループ終了条件\n\n内側のループの終了条件が and になっていていかにも判定が遅そうです。判定はシンプルにしましょう。ちなみに 31 を足して判定している部分がありますが、この関数は32バイト単位でしか処理しないのでやらなくても同じです。\n\n```C++\nsize_t opt_innermost_content_loopend(const char *p, size_t sz)\n{\n\tsize_t result = 0;\n\tfor (size_t i = 0; i < sz;) {\n\t\t__m256i sum = _mm256_setzero_si256();\n\t\tsize_t j = 0;\n\t\tsize_t limit = std::min<size_t>(255 * 32, sz - i);\n\t\tfor (; j < limit; j += 32) {\n\t\t\t__m256i s = _mm256_load_si256(reinterpret_cast<const __m256i *>(p + i + j));\n\t\t\tsum = _mm256_sub_epi8(sum, _mm256_cmpgt_epi8(s, _mm256_set1_epi8(-0x41)));\n\t\t}\n\t\ti += j;\n\t\tresult += avx2_horizontal_sum_epi8(sum);\n\t}\n\treturn result;\n}\n```\n\nこの記事には書きませんが元のコードに適用したものも実装しておきます。\n\n### とりあえず計測\n\n計測条件は以下の通りです。\n\n<ul>\n<li>CPU: Core i7-4770 @3.4GHz (Haswell) TB/EIST off</li>\n<li>RAM: DDR3-1600 (PC3-12800) CL9 dual channel</li>\n<li>カウント対象は 16K, 224K, 6M, 128M 。これはそれぞれ L1 (32K), L2 (256K), L3 (8M) に収まるサイズと、収まらずにメインメモリから読む状態を計測することになります。</li>\n<li>コンパイラは Clang 8.0.0 の Visual Studio 2017 integration (clang-cl)\n<ul>\n<li>オプションは /Arch:AVX2 /O2 （-mavx2 -O2 相当）</li>\n<li>なんでこんな珍しい環境なのかというと上記マシンは Windows だからです。一応比較として opt_innermost_content_loopend を MS のコンパイラでコンパイルした時の結果も載せておきます。</li>\n</ul>\n</li>\n</ul>\n\nで、結果です。上段が処理速度、下段が32バイト処理するのにかかったクロック数です。\n\n<table border=\"border\">\n<tr><td>実装＼サイズ</td><td>16KiB</td><td>224KiB</td><td>6MiB</td><td>128MiB</td></tr>\n<tr><td>avx_count_utf8_codepoint</td>        <td> 34.7GB/s<br>3.13</td><td>33.9GB/s<br>3.21</td><td>29.7GB/s<br>3.66</td><td>15.5GB/s<br>7.03</td></tr>\n<tr><td>avx_count_utf8_codepoint_loopend</td><td> 61.3GB/s<br>1.77</td><td>52.5GB/s<br>2.07</td><td>35.9GB/s<br>3.03</td><td>15.8GB/s<br>6.86</td></tr>\n<tr><td>opt_innermost_content</td>           <td> 43.6GB/s<br>2.49</td><td>41.1GB/s<br>2.65</td><td>33.3GB/s<br>3.27</td><td>16.0GB/s<br>6.80</td></tr>\n<tr><td>opt_innermost_content_loopend</td>   <td>100.2GB/s<br>1.09</td><td>77.7GB/s<br>1.40</td><td>38.4GB/s<br>2.83</td><td>16.8GB/s<br>6.49</td></tr>\n<tr><td>opt_innermost_content_loopend (cl.exe)</td>   <td>72.4GB/s<br>1.49</td><td>64.4GB/s<br>1.69</td><td>37.3GB/s<br>2.90</td><td>16.7GB/s<br>6.52</td></tr>\n</table>\n\n下限である32バイトあたり1クロックに近い速度が出ています。また、メインメモリにアクセスする場合でも1割弱速くなっています。memtest86+ によればメインメモリは 20GB/s 出るらしいのですが、そこまでは到達できませんでした。\n\nちなみに元コードの128MBが元記事より速くなっていますが、メインメモリの違いによる現象だと思っています（同じ DDR3-1600 でもアクセスタイミングが違う）。\n\n### さらに速くなるかどうか\n\nopt_innermost_content_loopend に対して Clang が吐いたバイナリを見ると8倍にループアンローリングしています。アンローリングすると分岐の割合が下がりますが、これ以上の改善はループ終了条件の効率化によるしかないので、最適化余地はかなり小さくなっているはずです。大きなデータを相手にする場合はさらにアンローリングすることも考えられますが、大きなデータは L1 キャッシュに載らずメモリ側のスループットが下がるので、やっても意味がなくなります。\n\nというか十分速くなっちゃったし下限が32バイトあたり1クロックであることは分かっているので、あんまりやる気が出ないというのが実際のところです。速くしてもこれじゃ計測誤差に埋もれちゃうし…。（実際にはやったけど速くならなかった）\n\n### まとめ\n\n<ul>\n<li>UTF-8 のコードポイント数をカウントするコードを最適化しました。非常に大きなデータの場合はメインメモリで律速するためそれほど効果はありませんが、コアに近いキャッシュに収まるサイズであるほど効果が大きく出ます。</li>\n<li>実際のところ人間が頑張る部分はそれほどありませんでした。 Clang すごいっすね。</li>\n</ul>\n\n### Appendix\n\n<a href=\"https://gist.github.com/umezawatakeshi/407b1607b880c5c6a6257d80e61d8353\">ソースコード（Windows + Visual Studio 2017 + LLVM integration 向けなので Unix 向けには多少修正する必要があります）</a>\n","created_at":"2019-04-14T02:16:15+09:00","id":"ed23935788756c800b86","tags":[{"name":"最適化","versions":[]},{"name":"x86","versions":[]},{"name":"AVX","versions":[]},{"name":"AVX2","versions":[]}],"url":"https://qiita.com/umezawatakeshi/items/ed23935788756c800b86"},{"title":"Raspberry Pi Zero W で Google Homeに喋らせる","body":"普段はGHKitを使ってGoogle Homeへのプッシュを行っているのですが、先日、Raspberry Pi Zero Wを手に入れたので、以下の記事を参考に自前で作ってみようと思い立ちました。\n\nが、結構躓いたので、自分への覚書としてまとめておきます。\n\n- Google Homeを手軽に喋らせる仕組み(google-home-voicetext)を作った（Dockerにも対応）<br />https://qiita.com/sikkim/items/f03df7e2db13ea7f5a2b\n\n# 使ったもの\n\n- Raspberry Pi Zero W \n- raspbian strech 2018-11-13\n\n# 躓いたこと\n\n## api-server.jsが起動後、リクエストを受けると落ちる\n\nいろいろ試していたので詳細はもう覚えてませんが、リクエストを受けると、ライブラリが見つからない、というエラーで落ちてしまいました。そのライブラリがインストールされているにもかかわらず、です。\n\n原因がわからなかったのですが、nodeとnpmはraspbianのパッケージは使わずに、nodebrewで、node-8.11.4＆npm-5.6.0をインストールしてそっちでnpm installしなおしました。\n\n## docker-composeがビルドできない\n\n以下を参考に試してみたのですが、docker buildでコケる。いろいろ試してみたのだけど、どうしても解決できず。環境依存な感じもするし、本来の目的とは違うのでここに時間もかけてられない、ということで、諦めて手動で構築しました。\n\n- Raspberry Pi用docker-composeの構築<br />https://qiita.com/tkyonezu/items/ceaaf41924df39254058\n\n## firestore.jsが起動しない\n\nilligal instructionとなって起動しませんでした。以下を参考にgrpcをnpm rebuildすることで解決しました。\n\n- Raspberry Pi Zero Wのセットアップ<br />https://qiita.com/Satoshi_Takahama/items/02ae9b0eb9bc25f7f11e\n\n# 感想\n\nRaspberry Pi Zero W って、Raspberry Pi 3が単に小さくなっただけのものでしょ？ぐらいに思っていたので、こんなに躓くとは思ってませんでした。環境的にそもそも違うってことですね（当たり前）。まあとりあえず動いたので良しとします、VoiceTextの声も自然でいい感じです。\n","created_at":"2019-04-14T02:15:24+09:00","id":"4cd595307118c00d3a60","tags":[{"name":"RaspberryPi","versions":[]},{"name":"GoogleHome","versions":[]},{"name":"google-home-notifier","versions":[]}],"url":"https://qiita.com/kun432/items/4cd595307118c00d3a60"},{"title":"最適化計算","body":"##はじめに\n量子コンピュータを行なっていると最適化計算がとても大事になっています。量子コンピュータだけではなく、最適化計算はどこにでもあるので、常に必要なものであると思いますので、それをまとめた上で場合に応じて様々な最適化計算が使いこなせるように頑張りたいと思います。\n\n##最適化とは？\n数理最適化 - 最適化問題のうち、解が連続的なもの。数学において、ある条件に関して最もよい元を利用可能な集合から選択すること。\n組合せ最適化 - 最適化問題のうち、解が離散的なもの。\nhttps://ja.wikipedia.org/wiki/%E6%9C%80%E9%81%A9%E5%8C%96\n\n数理最適化や組合せ最適化のように値が連続値もしくは離散値のものを最適化するのが主のようです。そのようなものを扱ってみたいと思います。\n\n##ツールを見てみるscipy\nSciPy は、プログラミング数学、科学、工学のための数値解析ソフトウェアである。無料かつオープンソースで、Windows・Linux・Mac を含むオペレーティングシステムで動作する。\n\nhttps://ja.wikipedia.org/wiki/SciPy\n\nよく使うのはscipyのoptimizeで、各種最適化問題が格納されている。最適化したい関数や目的に応じて最適化のツールを使い分けるのが普通。\n\n##最適化はどのようなところにつかえるのか？\n最適化は身の回りの様々な事象を数式の形に落とし込み、それらを最小化最大化することで組合せ最適化や各種数理最適化に落とし込み問題を解くことができます。\n\n実際には数式が最小化された時に答えに到達するように数式が設計されており、その数式で最小値などを探すことで最適化を行います。\n\n実際の身の回りでは例えば、時間や距離を最小化することで最適化でき、\n・ルート、経路最適化\n・シフト、工程最適化\n・機械学習のサブルーチンとしての最適化\nなど各種最適化を使いこなすことで、様々な問題に適用ができます。\n\n最近では例えば配送などは最適化を行うほどに、配送時間などが効率化され、時間の有効活用やコストダウンに繋がります。最終的に同じ結果をもたらすにしても途中経過を最適化で効率化することで利益を得ることができます。\n\n##最適化を解く例題\n数値最適化を実際のpythonツールを使って行なってみます。実際にはこの数式を作るところからスタートするのですが、今回はまず最適化のステップを確認します。\n\n####1、scipyをインストール\n普段はpip経由でscipyをインストールします。\n\n```\npip3 install scipy\n```\n\n####２、scipyをimport\npythonやipython,jupyterなどを立ち上げてscipyを読み込みます。\n\n```python\nfrom scipy import optimize\n```\n\n####３、最小化する関数を準備\n今回は通常の二次関数を用意してみます。\n\n```python\ndef f(x):\n    return x**2\n```\n\n####４、最適化を行う\n早速最適化を行います。関数を準備してスタート地点のxの値を準備します。\n\n```python\noptimize.fmin(f,5)\n```\n\n####５、答えを得る\n\n```python\nOptimization terminated successfully.\n         Current function value: 0.000000\n         Iterations: 20\n         Function evaluations: 40\n\narray([0.])\n```\n\nf(x)の値が0、xの値が0となりました。二次関数で上記の形の場合には、x=0でy=0が最小になるというのがわかります。\n\n##シミュレーテッドアニーリング\n離散最適化などにはSAなどが利用されます。これも少しみてみます。ここでは、離散値1から9までの値から３つを選んで、合計が8になるように最適化を行なってみます。\n\n####１、立式をする\n３つ選んで８になるとは、選ばれた３つの数値の合計から8を引いたものの２乗が0になれば大丈夫です。\n\n```math\n(A+B+C-8)^2 = 0\n```\n\nとなれば最小になります。\n\n####２、制約条件と初期値を設定\n制約条件は３つの数値を選ぶというものです。また、求めるコスト関数は上記の数式になります。まず、離散値1から9までの配列を作ります。\n\n```python\narr = [1,2,3,4,5,6,7,8,9]\n```\n\nそして、制約を満たす３つの数値を最初はランダムで選びます。\n\n```python\nABC = [2,6,8]\narr = [1,3,4,5,7,9]\n```\n\nABCが選ばれた数で、合計値が８になるように数式を準備しましたこれを解くと自然と答えに到達します。\n\n####３、シミュレーテッドアニーリングを回す。\n今回はABCを配列から随時入れ替えながら数値評価を行う2-optを使ってみます。たとえば、現在のABCは、\n\n```python\nABC = [2,6,8]\n```\n\nで、コスト関数を計算すると、コストは、\n\n```math\n(2+6+8-8)^2 = 64\n````\n\nとなります。たとえば、ここで、ABC = [2,6,8]から8と5を入れ替えると、\n\n```math\n(2+6+5-8)^2 = 25\n```\n\nのようにコストが下がります。コストが下がる場合には無条件に採用し、コストが上がる場合にはメトロポリス法などによって評価を行い、反転確率に応じて操作を行います。このような操作を続けていくことでコスト関数は最小に到達します。\n\nこの場合には、1,2,5や1,3,4など複数の最小値があります。このような離散値と制約条件で成り立った数式の最適解を計算によって求めます。\n\n##まとめ\n最適化問題には終わりがなさそうです。求めたい答えに到達しようとするほど計算量が増大しますので、その計算量の増大を調整してあげることでそこそこの局所解で満足するのか、それともより効率的に最適解に近く方法があるのか、それらはかなり注力と工夫をすることで、問題ごとの特性に応じて設計と実装をする必要があります。\n\n##参考\n「Pythonで最適化問題入門」\nhttps://qiita.com/y-tksk/items/816ff2aabb42aa97730e\n","created_at":"2019-04-14T02:03:23+09:00","id":"497dd2c7f4c7001758ca","tags":[{"name":"最適化","versions":[]}],"url":"https://qiita.com/YuichiroMinato/items/497dd2c7f4c7001758ca"},{"title":"東大理IIIは本当に男子の合格率が高いのか？","body":"# TL;DR\n\n- 東大の理科3類の男子と女子の合格率の間に統計的に有意（p<0.05）な差はない。\n- 鳥取大，島根大医学部の男女の合格率の間にも統計的に有意な差はない。\n\n# 背景\nhttps://www.u-tokyo.ac.jp/ja/about/president/b_message31_03.html\n\n最近，上野千鶴子氏の東大での式辞が話題になっていて，その中に，以下のような一節があった。\n\n> 文科省が全国81の医科大・医学部の全数調査を実施したところ、女子学生の入りにくさ、すなわち女子学生の合格率に対する男子学生の合格率は平均1.2倍と出ました。問題の東医大は1.29、最高が順天堂大の1.67、上位には昭和大、日本大、慶応大などの私学が並んでいます。1.0よりも低い、すなわち女子学生の方が入りやすい大学には鳥取大、島根大、徳島大、弘前大などの地方国立大医学部が並んでいます。ちなみに東京大学理科3類は1.03、平均よりは低いですが1.0よりは高い、この数字をどう読み解けばよいでしょうか。統計は大事です、それをもとに考察が成り立つのですから。\n\n合格率の比が1.03というのは，東大理IIIは定員が少ないことを考えると，誤差の範囲内じゃないか？と直感的に疑念を持ったのがきっかけで，具体的に調べてみた。\n\n# データ\n\n文部科学省が2018年にまとめた以下のデータ（2013〜2018年度分）を使用。\nhttp://www.gender.go.jp/kaigi/senmon/jyuuten_houshin/sidai/pdf/jyu17-15.pdf\n\nコピペしてCSVに書き出した（以下のファイル）。\nhttps://gist.github.com/nebuta/4a8a9968adc10be3700dbb723c5bf027\n\n# 統計的検定の方法\n2013年度〜2018年度までの６年分を大学ごとに合算して，以下の値を求めた。\n\n- 男女それぞれの合格率の信頼区間\n- 男女の合格率の差の95%信頼区間\n    - 差の信頼区間が0をまたいでいれば有意差なし，いなければ有意差あり。\n- カイ二乗検定（帰無仮説：「男女の合格率が等しい」）のp値\n    - カイ二乗検定でp<0.05であれば，「偶然のせいで男女の合格率が等しくならなかった確率は0.05未満」ということになり，男女の合格率に有意差あり。\n\n計算にはSciPyの`stats.chi2_contingency`, `stats.binom.interval`および以下のコードを利用した。 https://stackoverflow.com/questions/39239087/\n\n全体のソースコードは以下の通り（殴り書きのため読むづらいです...）\nhttps://gist.github.com/nebuta/fed447861b2e40ee8fcb122ff88b313a\n\n# 結果\n男女の合格率の差を大学ごとに表示した結果が以下のグラフである。\n\n- 真ん中の丸が差の推定値で，バーが95%信頼区間。\n- バーが0の完全に右にある場合（青で表示）は，男子の合格率が女子よりも有意に高い（p<0.05）\n- バーが0の完全に左にある場合（赤で表示）は，女子の合格率が男子よりも有意に高い（p<0.05）\n- それ以外の場合は，有意差なし。\n\n![all_difference.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/16716/b4f7df73-1f44-ebaf-c507-70644715b0e1.png)\n\n東京大学（理科III類）に関しては，p値0.789で，95%信頼区間が(-0.040, 0.053)である。つまり，**男女の合格率に統計的有意差があるとは言えない**。\n\n- 鳥取大 p値0.992，95%信頼区間が(-0.023, 0.023)\n- 島根大 p値0.658，95%信頼区間が(-0.033, 0.021)\n\nこれら２つも**男女の合格率に統計的有意差があるとは言えない**\n\n# 注意\n\n- 有意差がないというのは「差があるとはっきりとは言えない」であって「差が無いとはっきり言える」ではない。\n- 「入試で男女の合格率に差がない」としても，「入試で男女差別がない」とは言い切れない。\n   - もし女子のほうが全体として二次試験の点数が良いのであれば，「合格率が同じ」は「同じ点数ならば女子が不利」を意味するため。\n   - ただ，男女の入試本番における素点に関する客観的データは存在しないと思われるので，これは検証しようがない。\n\n# 個人的感想\n式辞の後半の内容は至極納得感があるだけに，導入部の誤った統計の使い方は研究者としては正確さand/or誠実さに欠けると感じ，残念。\n","created_at":"2019-04-14T02:02:31+09:00","id":"ef214efc7d92df47887d","tags":[{"name":"Python","versions":[]},{"name":"statistics","versions":[]}],"url":"https://qiita.com/nebutalab/items/ef214efc7d92df47887d"},{"title":"Ruby 変数 ハッシュ","body":"##変数\n変数とは、、、オブジェクトに名前をつける役割があります。\n箱に入れるようなイメージです。\n\n```\nfruit = 　\"りんご\"\n```\n\n```\nage = 10\n```\n\n##ハッシュへ代入\nハッシュとは、、、一つの変数で複数のデータを持つことができるオブジェクトです。\nハッシュオブジェクトの中には、KeyとValueのデータを所持することができます。\nまた、文法は3つあることだけ覚えておいたほうが良いでしょう。\n\n```\nhash1 = {\"name\" => \"けんじ\"}\nhash2 = {:name => \"こうたろう\"}\nhash3 = {name: \"しげる\"}\n```\nただし、hash3の文法は「バージョン1.9.3」以降しか使えないので注意。\n\n##ハッシュへ複数代入する\n\n```\npeople = {name: \"tarou\", age: 29, gender: \"男\"}\n```\n\n","created_at":"2019-04-14T02:00:16+09:00","id":"dd1005f066307ce98565","tags":[{"name":"Ruby","versions":[]},{"name":"Rails","versions":[]},{"name":"初心者","versions":[]},{"name":"変数","versions":[]},{"name":"初学者","versions":[]}],"url":"https://qiita.com/4npei/items/dd1005f066307ce98565"},{"title":"Google Cloud Platform から「ご対応ください:  重大な問題」のメールが来た","body":"#Google Cloud Platformから以下のメールが来ました。\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/0aa6e8ce-38a3-4f82-14bc-89f2a5fe19b2.png)\n\n構築したGCE(Google Compute Engine)環境を送信元とし、\nリモートポートに対するポート スキャニングが検出されたとのこと。\n\nこの問題は、\nプロジェクトからサードパーティに送信されるトラフィックが意図したものであり、\nプロジェクトが不正使用されていないことを確認することで解決できるとあります。\n\n対応をしないと72時間後にインスタンスを停止するとあります！！\n\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/d165c8ff-004b-6699-f732-050939c0b930.png)\n\n「異議を申し立てる」ボタンがあるので、押してみる\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/6ee5c8c6-2ef1-65a9-e67d-02e9edf5fce5.png)\n\nGoogle Cloud Platformコンソール画面に飛ばされる\n（警告を受けたことが表示され、[異議を申し立てる]ボタンを押してみる\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/601ff6c9-8020-d058-9b02-a63a40b10b70.png)\n\n異議を申し立てる画面では、対応してから対応内容を送信する内容となっている\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/60952ef7-accc-6db2-ab8c-2c65ea8d2877.png)\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/510e041e-af93-739e-969d-8463d094191b.png)\n\n\n本投稿は上記のメールが来ての対応した内容を纏めた内容となります。\n（2019年4月時点の情報となります）\n\nWordPrassをGoogle Compute Engineで構築している方がいて\n同様のメールが来ている方がいると思いますので参考にしてください。\n\n\n\n#Google Cloud Platformから警告を受けた環境\n\nGoogle Compute Engine(GCE)にWordpressを構築している環境があります。\n\n■環境構築した内容は以下の記事を参照ください  \n　[紙ベースで実施されていた運用をシステム化してみた](https://qiita.com/kngsym2018/items/514bf738ce1c6a1c81ba)\n  \n上記記事の環境のソフトウェアバージョン\n　＝＝＝＝＝\n　　WordPress : 5.0.4\n　　PHP : 5.4.16\n　　Apache: 2.4.6\n　　MySQL:15.1\n　＝＝＝＝＝\n\n\n\n#警告を受けた原因\n  \n  警告メールからサードパーティのソフトウェアとあるので調べてみたところ\n  以下の記事がありました。\n  \n  [WordPressに脆弱性、アップデートを](https://news.mynavi.jp/article/20190315-789506/)\n\n  WordPressの環境は「 5.0.4」だったので、まずはアップデートをする必要がある！\n  \n\n#対応\n  \n  以下の対応を行いました\n  １．作成した環境をバックアップ\n  ２．WordPressのアップデート\n  ３．Cloud Web Security Scannerで脆弱性をスキャン\n  \n  \n  \n##１．作成した環境をバックアップ\n\n簡単にエクスポート、別環境にインポートできるとのことで \nプラグイン「All-in-One WP Migration」を使用しました。\n（仮にインスタンスを停止になった場合、別環境でインポートできるプラグインを検討）\n\n■参考までにプラグイン追加方法\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/d7fbd92d-9430-47f6-3c22-53fef3edb90e.png)\n\n■エクスポート方法\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/c67e1667-f6f1-f311-f2f2-96056ad82e16.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/062defa2-0b00-65d7-dd59-0f72859c5dc6.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/67bef365-d28b-db6a-e0a1-7563b06cd423.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/361a4ec9-a9d7-fcf8-67d3-52ab71f1840c.png)\n\n\n##２．WordPressのアップデート\n\n画面キャプチャでは、すでに最新版に更新された後になってますが、\n最新バージョンでない場合、最新版にインスールするボタンが押せる状態だったと思います。\n※WordPressのバージョンアップ  5.0.4 ==> 5.1.1\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/3446d3f6-4b6c-0287-15ab-cf22d7bba43c.png)\n\n##３．Cloud Web Security Scannerで脆弱性をスキャン\n\nWordPressを最新バージョンにしたので、Cloud Web Security Scannerで脆弱性をスキャン\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/23bea0fb-f975-ca9e-5d2a-7800ec16570e.png)\n\nスキャン開始するジョブを作成します\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/03dff87e-8ef5-66c6-45e1-a79ee18f233d.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/65395714-7d25-9e1e-0d7b-315aa78488f2.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/b090928f-9698-b8a0-8767-b5c4f99d59e7.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/ef5ed8c3-b3e3-f80a-202a-e4de1d38adcc.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/988fe2ff-058b-c587-5ab4-e7257f646185.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/cbf31c99-0f25-b3a3-c234-8deb790de17f.png)\n\n##WordPressのアップデートだけでは脆弱性は解消されず\n\nWordPressのダッシュボード画面にPHPが古いというメッセージがあったので\nPHPのバージョンアップを実施\n\n```\nsudo yum install epel-release\nsudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\nsudo yum remove php-*\n\nsudo yum install --disablerepo=* --enablerepo=epel,remi,remi-php73 php\nsudo yum install --disablerepo=* --enablerepo=remi,remi-php73 php-mysqlnd php-mysql php-mbstring php-intl\n\n```\n\nPHPのバージョンを\n5.4.16 ==> 7.3.4　に更新。\n\nで、再度、Cloud Web Security Scannerで脆弱性をスキャン\n今度はJquery 1.12.4 がだめらしい。。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/e9aae250-fb15-327e-5f22-6d75fb6bee9e.png)\n\nWordPressでJqueryの使用バージョンを3.00に変更\n変更はfunctions.php　に以下の記載をします。\n\n```php:functions.php\n\nfunction change_jquery() {\n    if( !is_admin() ){\n        wp_deregister_script('jquery');\n        wp_enqueue_script('jquery', '//cdn.jsdelivr.net/jquery/jquery-3.0.0.min.js', array(), null , true);\n    }\n}\nadd_action('init', 'change_jquery');\n\n```\n\nそして、再度、Cloud Web Security Scannerで脆弱性をスキャンしたら\n脆弱性は「０」になりました。\n\n#Google Cloud Platformに異議を申し立てる\n脆弱性に対する対応が完了したので異議を申し立てる画面を入力。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/100899b0-f8c3-9cc2-5715-6fd1fb2a6486.png)\n対応した内容とCloud Web Security Scannerを実施して問題ないことを書きました。\n\nすると、Googleからメールが送信される。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/a1b05b2e-0c50-9ffb-bd36-2bb794493bb8.png)\n\n※２営業日以内に返事があるとのこと\n\n#結果\n今回対応した内容で申請が通りました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/261475/b14cd24e-ca49-d9d7-2323-a6ec6c5a9494.png)\n\n#関連リンク\n[紙ベースで実施されていた運用をシステム化してみた](https://qiita.com/kngsym2018/items/514bf738ce1c6a1c81ba)\n※Google Compute Engine(GCE)、WordPress、PHP、MySQLを使用した記事です\n","created_at":"2019-04-14T01:58:40+09:00","id":"ed822ffc13cf8889f736","tags":[{"name":"PHP","versions":[]},{"name":"WordPress","versions":[]},{"name":"jQuery","versions":[]},{"name":"GoogleCloudPlatform","versions":[]}],"url":"https://qiita.com/kngsym2018/items/ed822ffc13cf8889f736"},{"title":"React Release v16.8.4","body":"https://github.com/facebook/react/releases/tag/v16.8.4\n\n## v16.8.4\n### React DOM and other renderers\n- `useContext`hookを利用したコンポーネントで、DevToolsがランタイムエラーを起こすバグを修正\n\n","created_at":"2019-04-14T12:04:51+09:00","id":"e6c0aa1177e8626cde95","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/e6c0aa1177e8626cde95"},{"title":"React Release v16.8.3","body":"https://github.com/facebook/react/releases/tag/v16.8.3\n\n## v16.8.3\n### React DOM\n- UMDビルド時に入力フォームが正しく動作しなバグを修正\n- renderフェーズの更新が破棄されるバグを修正\n\n### React DOM Server\n- renderが完了する前にストリームが破棄された場合、context stackを巻き戻すように修正\n  - その後のrenderで誤った値が渡されるのを防ぐため\n\n\n### ESLint Plugin for React Hooks\n- recommendedルールに`exhaustive-deps`を追加\n  - useEffectの依存関係周り\n    - https://www.npmjs.com/package/eslint-plugin-react-hooks\n    - https://github.com/facebook/react/issues/14920\n","created_at":"2019-04-14T12:04:30+09:00","id":"7f6568f7b6a18f2fdc5d","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/7f6568f7b6a18f2fdc5d"},{"title":"React Release v16.8.2","body":"https://github.com/facebook/react/releases/tag/v16.8.2\n\n## v16.8.2\n### React DOM\n- `useEffect`内で`ReactDOM.render`が動作しない問題を修正\n- 空のPortalsをマウントした際にクラッシュする問題を修正\n- dependenciesが指定されなかった際に`useImperativeHandle`が正しく動くように修正\n  - `useImperativeHandle`の第3引数\n- `crossOrigin`属性がSVG要素で動くように修正\n- HooksでSuspenseを使用した際の誤検知を修正\n\n### React Test Utils and React Test Renderer\n- コンポーネントスタックを`act()`に含めるように\n","created_at":"2019-04-14T12:03:42+09:00","id":"11b75529241e24429a86","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/11b75529241e24429a86"},{"title":"React Release v16.8.0, v16.8.1","body":"https://github.com/facebook/react/releases/tag/v16.8.0\nhttps://github.com/facebook/react/releases/tag/v16.8.1\n\n## v16.8.0\n### React\n- Hooksの追加\n- Hooksの`useReducer`のlazy initialization APIを改善\n\n### React DOM\n- `useState`/`useReducer`で同一値の再レンダリングを回避\n- `useState`/`useReducer`の値の比較に`Object.is`を利用\n- `useEffect`/`useMemo`/`useCallback`で最初に渡された引数を比較しない\n- `React.lazy()`にsynchronous thenablesをサポート\n- strict-modeのHooksでコンポーネントを2回レンダリングするように\n- 開発モードでHooksの順序に対して警告を出すように\n- cleanup関数はundefinedを必ず返すように(その他の値やnullは禁止)\n\n### React Test Renderer and Test Utils\n- shallowレンダリングでHooksをサポート\n- shallowレンダリング時に`getDerivedStateFromProps`があるときの`shouldComponentUpdate`内の誤った状態を修正\n- テストが実際の動作とより厳密に一致するよう、バッチ処理のための`ReactTestRenderer.act()`および`ReactTestUtils.act()`を追加\n\n### ESLint Plugin: React Hooks\n- 初回リリース\n- ループが発生した際のレポート機能を追加\n- throwingをルール違反とみなさないように\n\n## v16.8.1\n### React DOM and React Test Renderer\n- 古いバージョンのReactと同時に利用した際にクラッシュする問題を修正\n\n### React Test Utils\n- Node環境でクラッシュする問題を修正\n","created_at":"2019-04-14T12:03:07+09:00","id":"eebde3bb04424e3bafb0","tags":[{"name":"React","versions":[]}],"url":"https://qiita.com/clngn/items/eebde3bb04424e3bafb0"},{"title":"AtCoder Beginner Contest 124 D 解説動画（尺取法、累積和）をPythonでやってみる","body":"# 概要\n\n2度目のAtCoder Beginner Contestで、今回もD問題が解けず悔しい思いをしました。\n今回は解説PDFで実装が省略されていたこともあり、C++での解説動画をPythonでやってみることを通じ、アルゴリズムを理解しようということでやってみました。。\n尚、解説動画は生配信で色々とアクシデントがあり面白いので、この記事は見なくても、解説動画を見て、いいねボタンを押しましょう。\n\n[AtCoder Beginner Contest 124 D - Handstand](https://atcoder.jp/contests/abc124/tasks/abc124_d)\n[AtCoder Beginner Contest 124 解説配信](https://youtu.be/FRzpDCx17vw)\n[AtCoder Beginner Contest 124 解説PDF](https://img.atcoder.jp/abc124/editorial.pdf)\n\n# TLE (Time Limit Exceeded)になるやり方\n\n直大さん(@chokudai)くらいのスーパープログラマーがキレイにコードを書くと通ってしまうことがありますが、普通は通らない実装方法です。\n\n``` python\nN, K = map(int, input().split())\nS = input()\nNums = []\nnow = 1 # 今見ている数\ncnt = 0 # nowがいくつ並んでいるか\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        Nums.append(cnt)\n        now = 1 - now   # 0と1を切り替えるときの計算 now ^= 1\n        cnt = 1\nif cnt != 0:\n    Nums.append(cnt)\n# 1-0-1-0-1-0-1 って感じの配列が欲しい\n# 1-0-1-0-1-0 みたいに0で終わっていたら適当に1つ足す\nif len(Nums) % 2 == 0:\n    Nums.append(0)\n\nAdd = 2 * K + 1\nans = 0\n# 1-0-1... の1から始めるので、偶数番目だけ見る\nfor i in range(0, len(Nums), 2):\n    tmp = 0\n    left = i\n    right = min(i + Add, len(Nums))\n    for j in range(left, right):\n        tmp += Nums[j]\n    ans = max(tmp, ans)\n\nprint(ans)\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/271789/94195b1f-41c9-426d-326b-16a8b1d37ce9.png)\n\nfor文が2重になっていることから計算回数が$O(N^2)$になるため、PythonではしっかりTLEになりました。\n個人的には now = 1 とすることで、0から始まる時にNums[0]に0を入れられるところ、now = 1 - now で0と1を交互にできるところ、偶数番目だけを見るなどで、なるほど！となってしまいました。\nだいたい末端処理の実装でやらかして、デバックで疲弊してしまうので、こういうテクニックを自然に使えるようになりたいです。\n\n# 尺取法\n\n``` python\nN, K = map(int, input().split())\nS = input()\nNums = []\nnow = 1 # 今見ている数\ncnt = 0 # nowがいくつ並んでいるか\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        Nums.append(cnt)\n        now = 1 - now   # 0と1を切り替えるときの計算 now ^= 1\n        cnt = 1\nif cnt != 0:\n    Nums.append(cnt)\n# 1-0-1-0-1-0-1 って感じの配列が欲しい\n# 1-0-1-0-1-0 みたいに0で終わっていたら適当に1つ足す\nif len(Nums) % 2 == 0:\n    Nums.append(0)\n\nAdd = 2 * K + 1\nans = 0\n# 尺取り法 forループの外側にleft, rightを持つ\nleft = 0\nright = 0\ntmp = 0 # [left, right)のsum\n# 1-0-1... の1から始めるので、偶数番目だけ見る\nfor i in range(0, len(Nums), 2):\n    # 次のleft, rightを計算する\n    Nextleft = i\n    Nextright = min(i + Add, len(Nums))\n    # 左端を移動する\n    while Nextleft > left:\n        tmp -= Nums[left]\n        left += 1\n    # 右端を移動する\n    while Nextright > right:\n        tmp += Nums[right]\n        right += 1\n    ans = max(tmp, ans)\n\nprint(ans)\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/271789/77f11527-f399-73b2-b00d-5fe970408a81.png)\n\n尺取法というのは実は解説動画で初めて聞いたのですが、右側と左側の動きが尺取虫のように動くということでしょうね。\n計算回数が$O(N)$になるので、Pythonでも余裕をもって通ります。C++では5msということで、差は大きいですね\n理論は分かっても実装となると苦労しそうなのですが、left, right, Nextleft, Nextrightという使い方が分かりやすく、メンテナンス性も高いコードで、こういうコードを書きたいですね。\n\n# 累積和\n\n``` python\nN, K = map(int, input().split())\nS = input()\nNums = []\nnow = 1 # 今見ている数\ncnt = 0 # nowがいくつ並んでいるか\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        Nums.append(cnt)\n        now = 1 - now   # 0と1を切り替えるときの計算 now ^= 1\n        cnt = 1\nif cnt != 0:\n    Nums.append(cnt)\n# 1-0-1-0-1-0-1 って感じの配列が欲しい\n# 1-0-1-0-1-0 みたいに0で終わっていたら適当に1つ足す\nif len(Nums) % 2 == 0:\n    Nums.append(0)\n\nAdd = 2 * K + 1\n# 累積和を作る\n# 0 1 2 3 4 5 6\n#  0 1 2 3 4 5\nsum = [0] * (len(Nums) + 1)\nfor i in range(len(Nums)):\n    sum[i + 1] = sum[i] + Nums[i]\nans = 0\n# 1-0-1... の1から始めるので、偶数番目だけ見る\nfor i in range(0, len(Nums), 2):\n    # 次のleft, rightを計算する [left, right)\n    left = i\n    right = min(i + Add, len(Nums))\n    tmp = sum[right] - sum[left]\n    ans = max(tmp, ans)\n\nprint(ans)\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/271789/16ea1b77-42aa-3387-435b-b8e509299d45.png)\n\n累積和という言葉は聞いたことはありましたが、実装はしたことが無いと思います。\n計算回数が$O(N)$になり尺取法と同程度ということですが、実行時間が少しだけ尺取法より早くなりました。c++では同じ5msでしたね。\n実装は非常に分かりやすいコードで、直大さんも累積和を推奨しますと言っていたので、次に累積和を使う問題が出たらスムーズな実装を目指したいと思います。\n","created_at":"2019-04-14T12:02:16+09:00","id":"55e751ecf72bb7894a46","tags":[{"name":"Python","versions":[]},{"name":"AtCoder","versions":[]},{"name":"競技プログラミング","versions":[]},{"name":"累積和","versions":[]}],"url":"https://qiita.com/hironobukawaguchi3/items/55e751ecf72bb7894a46"},{"title":"gin gormでテーブル操作","body":"[前回](https://qiita.com/ogurasousui/items/c0324dbb8dfdb9e0ac1b)DB接続まで\n今回も雑にテーブルの基本操作\n\n## DB接続\n\n接続をメソッドに。本来は環境やDBを設定ファイルなどで切り替えれるようにするのが良いか\n\n```db/db.go\npackage db\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nfunc Connection() *gorm.DB {\n\tdb, err := gorm.Open(\"mysql\", \"root:@tcp(db:3306)/gin_app?charset=utf8&parseTime=True&loc=Local\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdb.LogMode(true)\n\treturn db\n}\n```\n\n## マイグレーション\n\nこちらもメソッドに。任意で実行できるように変更 \n\n```migrate/migrate.go\npackage main\n\nimport (\n\t\"app/db\"\n\t\"app/model\"\n\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nfunc main() {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tdb.AutoMigrate(&model.User{})\n\tdb.AutoMigrate(&model.UserName{})\n}\n```\n\nマイグレーション実行は\n\n```\ndocker exec -it gin_app go run /go/src/app/migrate/migrate.go\n```\n\n## モデル\n各テーブルをモデルとして定義\n今回はリレーションも使って見たかったので `user` `user_name` を作成\n\nテーブルは↓こんなかんじ\n\n```\n$ docker exec -it gin_db mysql -u root -e \"use gin_app; show tables;\"\n+-------------------+\n| Tables_in_gin_app |\n+-------------------+\n| user_names        |\n| users             |\n+-------------------+\n```\n\n```model/user.go\npackage model\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\ntype User struct {\n\tgorm.Model\n\tUserName UserName\n}\n```\n\n```model/user_name.go\npackage model\n\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\ntype UserName struct {\n\tgorm.Model\n\tUserID uint\n\tName   string\n}\n```\n\n## コントローラ\n名前はserviceでもなんでもいいかもしれない\nとりあえず動けばいいのでバリデーションなどは入れていません\n\n```controller/user.go\npackage controller\n\nimport (\n\t\"app/db\"\n\t\"app/model\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype User struct{}\n\nfunc NewUser() *User {\n\treturn &User{}\n}\n\nfunc (t *User) Get(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar user model.User\n\tresult := db.First(&user, c.Param(\"id\")).Related(&user.UserName)\n\tc.JSON(200, result.Value)\n}\n\nfunc (t *User) List(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar users []model.User\n\tresult := db.Preload(\"UserName\").Find(&users)\n\tc.JSON(200, result.Value)\n}\n\nfunc (t *User) Create(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar user model.User\n\tdb.Create(&user)\n\n\tvar userName model.UserName\n\tc.BindJSON(&userName)\n\tuserName.UserID = user.ID\n\tdb.Create(&userName)\n}\n\nfunc (t *User) Update(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar user model.User\n\tdb.First(&user, c.Param(\"id\")).Related(&user.UserName)\n\tif user.UserName.ID > 0 {\n\t\tc.BindJSON(&user.UserName)\n\t\tdb.Save(&user.UserName)\n\t}\n}\n\nfunc (t *User) Delete(c *gin.Context) {\n\tdb := db.Connection()\n\tdefer db.Close()\n\n\tvar user model.User\n\tdb.First(&user, c.Param(\"id\")).Related(&user.UserName)\n\tif user.ID > 0 {\n\t\tdb.Delete(&user)\n\t}\n\tif user.UserName.ID > 0 {\n\t\tdb.Delete(&user.UserName)\n\t}\n\n\t// こっちの消し方でも良い\n\t// db.Where(\"id = ?\", c.Param(\"id\")).Delete(&model.User{})\n\t// db.Where(\"user_id = ?\", c.Param(\"id\")).Delete(&model.UserName{})\n}\n```\n## main\n\n各操作をルーターに追加\n\n```main.go\npackage main\n\nimport (\n\t\"app/controller\"\n\n\t\"github.com/gin-gonic/gin\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/users\", controller.NewUser().List)\n\tr.GET(\"/users/:id\", controller.NewUser().Get)\n\tr.POST(\"/users\", controller.NewUser().Create)\n\tr.PUT(\"/users/:id\", controller.NewUser().Update)\n\tr.DELETE(\"/users/:id\", controller.NewUser().Delete)\n\n\tr.Run()\n}\n```\n\n## 実行\n\n### 作成\n```\ncurl -X POST http://localhost:3001/users -d '{\"name\": \"hoge\"}'\n```\n\n### 1件取得\n```\ncurl http://localhost:3001/users/1\n```\n\n### 全件取得\n```\ncurl http://localhost:3001/users/\n```\n\n### 更新\n```\ncurl -X PUT http://localhost:3001/users/1 -d '{\"name\": \"huga\"}'\n```\n\n### 削除\n```\ncurl -X DELETE http://localhost:3001/users/1\n```\n\nおわり\n\n\n\n\n","created_at":"2019-04-14T12:01:57+09:00","id":"dcd84fd96d2e8797a5e8","tags":[{"name":"Go","versions":[]},{"name":"GORM","versions":[]},{"name":"gin","versions":[]}],"url":"https://qiita.com/ogurasousui/items/dcd84fd96d2e8797a5e8"},{"title":"Script名をオブジェクト名に設定するエディター拡張","body":"#動機\nUnityではゲームオブジェクトの名前を任意に設定できるが、管理クラスなど大きな役割を果たすものはスクリプト名をそのまま設定したいこともある。\nそういった場合でのタイプミスを減らすためにもエディター拡張を作ってみた。\n\n#動作環境\n- Windows 10\n- Untiy2018.3.12f1\n\n#スクリプト\n```C#\nusing UnityEngine;\nusing UnityEditor;\npublic static class SetScriptNameToGameObject\n{\n    // 1.コンテキストメニューから処理を呼び出せるように属性を付加\n    [MenuItem(\"CONTEXT/MonoBehaviour/Set ScriptName To GameObject\")]\n    private static void Excute(MenuCommand command)\n    {\n        // 2.選択したスクリプト名を取得\n        var name = command.context.GetType().ToString();\n        // 3.スクリプト名の名前空間を取り除く\n        while (name.Contains(\".\"))\n        {\n            var index = name.IndexOf('.');\n            name = name.Remove(0, index + 1);\n        }\n\n        // 4.選択したコンテキストの先頭文字は現在のオブジェクト名になる\n        var target = command.context.ToString().Split(' ')[0];\n        // シーン内にあるオブジェクトを取得してスクリプト名を設定\n        GameObject.Find(target).name = name;\n    }\n}\n```\n\n##使ってみた\n![SetScriptNameToGameObject.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/96676/2f63e260-77f4-cc72-6038-6b02dfd96aac.gif)\nMonoBehaviourを継承したスクリプトのコンテキストメニューから**SetScriptNameToGameObject**を選択することでゲームオブジェクトの名前がスクリプト名になるようになった。\nこれでタイプミスが減るし、そもそも手入力する必要がなくなる。\n","created_at":"2019-04-14T11:59:28+09:00","id":"3d87d88e0a9b92c3d506","tags":[{"name":"C#","versions":[]},{"name":"Unity","versions":[]},{"name":"Unity拡張","versions":[]}],"url":"https://qiita.com/ogawa4283/items/3d87d88e0a9b92c3d506"},{"title":"Java + AJD4JP で和暦の情報 (元号・祝日・旧暦・干支・六曜・九星) を表示する","body":"## 概要\n\n- Java 用のライブラリ AJD4JP を用いて和暦の情報 (元号・旧暦・干支・六曜・九星) を表示する\n- AJD4JP はバージョン 1\\.4\\.5\\.2019 から新元号「令和」に対応している\n\n## AJD4JP (Astronomical Julian Day for Japan) について\n\n[AJD4JP について \\[AJD4JP 日本専用カレンダー処理 Javaクラスライブラリ\\]](http://ajd4jp.osdn.jp/doku.php)\n\n> Java用の、日本向け万年暦カレンダー処理を行うための開発ライブラリです。\n> 令和などの元号や、過去(明治時代)から現在にかけての祝日(山の日、振替休日や春分の日、ハッピーマンデー含む)の取得が可能です。\n> また、旧暦や六曜(または六輝)、干支(年・月・日・時)や九星(年・月・日・時)の取得も可能です。\n> ユリウス通日(ユリウス日)を使用するため、物理的に表現可能な日時範囲が大きい事も特徴です。\n> 漢数字での表現など、日時の書式化機能や文字列の全角半角変換・判定機能も持ちます。\n\n[Release ajd4jp 1\\.4\\.6\\.2019 \\- AJD4JP 日本専用カレンダー処理 Javaクラスライブラリ \\- OSDN](https://osdn.net/projects/ajd4jp/releases/70961)\n\n> 元号法。\n> 2019年5月1日以降、元号判定結果が「令和」となります。\n> \n> 皇室典範特例法。\n> 2019年5月1日以降「天皇誕生日」が12月23日から2月23日となります。\n> \n> 国民の祝日に関する法律の一部を改正する法律（平成30年法律第57号）。\n> 2020年以降「体育の日」の名称が「スポーツの日」となります。\n> \n> 「国民の祝日に関する法律」の特例(2020年東京オリンピック・パラリンピック競技大会)。\n> 2020年に限り「海の日」は7月23日となります。\n> 2020年に限り「スポーツの日」は7月24日となります。\n> 2020年に限り「山の日」は8月10日となります。\n> \n> 本リリースはjava6環境で実行可能ですが、次回リリースよりjava8以降でビルドする予定です。\n\n## 今回の環境\n\n- macOS 10.14 Mojave\n- OpenJDK 12\n- AJD4JP 1.4.6.2019\n\n```\n$ java -version\nopenjdk version \"12\" 2019-03-19\nOpenJDK Runtime Environment (build 12+33)\nOpenJDK 64-Bit Server VM (build 12+33, mixed mode, sharing)\n\n$ sw_vers\nProductName:\tMac OS X\nProductVersion:\t10.14.4\nBuildVersion:\t18E226\n```\n\n## ソースコード\n\n```java\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\n\nimport ajd4jp.AJD;\nimport ajd4jp.Era;\nimport ajd4jp.Holiday;\nimport ajd4jp.SexagenaryCycle;\nimport ajd4jp.LunisolarYear;\nimport ajd4jp.LSCD;\nimport ajd4jp.STCD;\nimport ajd4jp.format.Formats;\nimport ajd4jp.format.JapaneseYearF;\nimport ajd4jp.format.MonthF;\nimport ajd4jp.format.DayF;\nimport ajd4jp.format.WeekF;\nimport ajd4jp.format.Two;\nimport ajd4jp.format.TwoJapan;\nimport ajd4jp.format.C;\n\n// 和暦情報を出力するクラス\npublic class JapaneseDate {\n\n    public static void main(String[] argv) {\n\n        JapaneseDate jd = new JapaneseDate();\n\n        // GregorianCalendar の第2引数 Month 値は0から始まるので1を引く(1月の場合は0を指定)\n\n        // 昭和 最後の日\n        jd.print(new GregorianCalendar(1989, 1 - 1, 7));\n\n        // 平成 最初の日\n        jd.print(new GregorianCalendar(1989, 1 - 1, 8));\n\n        // 平成 最後の日\n        jd.print(new GregorianCalendar(2019, 4 - 1, 30));\n\n        // 令和 最初の日\n        jd.print(new GregorianCalendar(2019, 5 - 1, 1));\n\n        // 令和の天皇誕生日\n        jd.print(new GregorianCalendar(2020, 2 - 1, 23));\n\n        // 令和2年から「体育の日」は「スポーツの日」に名称変更\n        jd.print(new GregorianCalendar(2020, 7 - 1, 24));\n    }\n\n    /**\n     * 指定した Calendar オブジェクトに対応する和暦情報を出力します。\n     * @param cal 和暦情報を出力したい日付の Calendar オブジェクト\n     */\n    public void print(Calendar cal) {\n\n        AJD ajd = new AJD(cal);\n\n        // 西暦の年、月、日、曜日\n        SimpleDateFormat sdf = new SimpleDateFormat(\"Y年M月d日(E曜日)\", new Locale(\"ja\", \"JP\"));\n        String seireki = sdf.format(cal.getTime());\n        System.out.println(\"西暦: \" + seireki);\n\n        // 和暦の元号、年、月、日、曜日\n        Era.Year era = ajd.getEra();\n        String wareki =\n            era.getEra().getName() + era.getYear() + \"年\" +\n            ajd.getMonth() + \"月\" + ajd.getDay() + \"日(\" + ajd.getWeek().getJpName() + \"曜日)\";\n        System.out.println(\"和暦: \" + wareki);\n\n        // 和暦の漢数字\n        System.out.println(\"和暦(漢数字): \" + format.toString(ajd));\n\n        // 祝日\n        Holiday h = Holiday.getHoliday(ajd);\n        if (h != null) {\n            String shukujitsu = h.getName(ajd);\n            System.out.println(\"祝日: \" + shukujitsu);\n        }\n\n        // 干支 (十干と十二支)\n        SexagenaryCycle sc = SexagenaryCycle.getDay(ajd);\n        String jikkan = sc.getHeavenlyStem().getName();\n        String junishi = sc.getEarthlyBranch().getName();\n        System.out.println(\"干支(十干): \" + jikkan);\n        System.out.println(\"干支(十二支): \" + junishi);\n\n        // 旧暦\n        LunisolarYear year = LunisolarYear.getLunisolarYear(ajd);\n        LSCD lscd = year.getLSCD(ajd);\n\n        // 旧暦の年、月、日\n        String kyureki = lscd.getYear() + \"年\" + lscd.getMonth() + \"月\" + lscd.getDay() + \"日\";\n        System.out.println(\"旧暦: \" + kyureki);\n\n        // 旧暦の和風月名\n        String getsumei = lscd.getMonthName();\n        System.out.println(\"旧暦の和風月名: \" + getsumei);\n\n        // 六曜\n        String rokuyo = lscd.getRokuyo().getName();\n        System.out.println(\"六曜: \" + rokuyo);\n\n        // 九星\n        String kyusei = STCD.Kyusei.getDay(ajd).getName();\n        System.out.println(\"九星: \" + kyusei);\n\n        System.out.println();\n    }\n\n    // 和暦の漢数字表記用フォーマットクラス\n    private static Formats format = new Formats(\n        new JapaneseYearF(\n            new TwoJapan(\n                Two.Rule.FIRST, // 1を元と表記する。\n                Two.Rule.TRIPLE // 21以上の場合、三文字で表記する。\n            )\n        ),\n        new C(\"年\"),\n        new MonthF(new TwoJapan()),\n        new C(\"月\"),\n        new DayF(\n            new TwoJapan(\n                Two.Rule.TENS // 10～19の場合、1ではなく十で表記する。\n            )\n        ),\n        new C(\"日 \"),\n        new WeekF(),\n        new C(\"曜日  \")\n    );\n}\n```\n\n## コンパイル\n\n```\n$ ls\nJapaneseDate.java\tajd4jp-1.4.6.2019.jar\n\n$ javac -classpath ajd4jp-1.4.6.2019.jar JapaneseDate.java\n```\n\n## 実行結果\n\n```\n$ java -classpath ajd4jp-1.4.6.2019.jar:. JapaneseDate\n西暦: 1989年1月7日(土曜日)\n和暦: 昭和64年1月7日(土曜日)\n和暦(漢数字): 昭和六十四年一月七日 土曜日  \n干支(十干): 丁\n干支(十二支): 卯\n旧暦: 1988年11月30日\n旧暦の和風月名: 霜月\n六曜: 仏滅\n九星: 四緑木星\n\n西暦: 1989年1月8日(日曜日)\n和暦: 平成1年1月8日(日曜日)\n和暦(漢数字): 平成元年一月八日 日曜日  \n干支(十干): 戊\n干支(十二支): 辰\n旧暦: 1988年12月1日\n旧暦の和風月名: 師走\n六曜: 赤口\n九星: 五黄土星\n\n西暦: 2019年4月30日(火曜日)\n和暦: 平成31年4月30日(火曜日)\n和暦(漢数字): 平成三十一年四月三〇日 火曜日  \n祝日: 国民の休日\n干支(十干): 丁\n干支(十二支): 酉\n旧暦: 2019年3月26日\n旧暦の和風月名: 弥生\n六曜: 仏滅\n九星: 一白水星\n\n西暦: 2019年5月1日(水曜日)\n和暦: 令和1年5月1日(水曜日)\n和暦(漢数字): 令和元年五月一日 水曜日  \n祝日: 天皇の即位の日\n干支(十干): 戊\n干支(十二支): 戌\n旧暦: 2019年3月27日\n旧暦の和風月名: 弥生\n六曜: 大安\n九星: 二黒土星\n\n西暦: 2020年2月23日(日曜日)\n和暦: 令和2年2月23日(日曜日)\n和暦(漢数字): 令和二年二月二三日 日曜日  \n祝日: 天皇誕生日\n干支(十干): 丙\n干支(十二支): 申\n旧暦: 2020年1月30日\n旧暦の和風月名: 睦月\n六曜: 赤口\n九星: 八白土星\n\n西暦: 2020年7月24日(金曜日)\n和暦: 令和2年7月24日(金曜日)\n和暦(漢数字): 令和二年七月二四日 金曜日  \n祝日: スポーツの日\n干支(十干): 戊\n干支(十二支): 辰\n旧暦: 2020年6月4日\n旧暦の和風月名: 水無月\n六曜: 先負\n九星: 七赤金星\n```\n\n## 参考資料\n\n- [AJD4JP について \\[AJD4JP 日本専用カレンダー処理 Javaクラスライブラリ\\]](http://ajd4jp.osdn.jp/doku.php)\n- [Release ajd4jp 1\\.4\\.6\\.2019 \\- AJD4JP 日本専用カレンダー処理 Javaクラスライブラリ \\- OSDN](https://osdn.net/projects/ajd4jp/releases/70961)\n- [AJD4JP 1\\.4\\.6\\.2019 API 仕様](http://ajd4jp.osdn.jp/api/)\n- [GregorianCalendar \\(Java SE 12 & JDK 12 \\)](https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/GregorianCalendar.html)\n\n","created_at":"2019-04-14T11:59:18+09:00","id":"10a9a62affdb8b733507","tags":[{"name":"Java","versions":[]},{"name":"和暦","versions":[]},{"name":"元号","versions":[]},{"name":"令和","versions":[]}],"url":"https://qiita.com/niwasawa/items/10a9a62affdb8b733507"},{"title":"AmazonSNSをCLIからササっと使ってみる（メール+SMS）","body":"# IAMユーザーを作成\nAmazonSNSFullAccessを持たせてIAMユーザーを作成する。\nKey IDとSecret Access Keyをメモっておく。\n\n# AWSのCLIをインストール\n\n```bash\n# pipがない人はpipを入れる\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"\nsudo python get-pip.py\n\n# pip経由でCLIをインストール\nsudo pip install awscli\n\naws configure\n# 以下のように設定\n# AWS Access Key ID [None]: 先ほど作成したIAMのKey ID\n# AWS Secret Access Key [None]: 先ほど作成したIAMのSecret Access Key\n# Default region name [None]: ap-northeast-1\n# Default output format [None]: json\n```\n\n# トピックを作成\nAmazonSNSではトピックを購読するという形でメッセージを送ります。\n試しにトピックを作ります。\n\n```bash\naws sns create-topic --name my_topic\n```\n以下のように出力されれば成功です。\n\n```json\n{\n    \"TopicArn\": \"arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic\"\n}\n```\n\n# メールを送ってみる\nまずはメールを送ってみます。\n\n```bash\naws sns subscribe \\\n--topic-arn arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic \\\n--protocol email \\\n--notification-endpoint wktq@dev.jp\n```\n\nこれで購読確認のメールが送信されます。承認すると、管理画面に購読者が追加されます。\n![スクリーンショット 2019-04-14 11.24.51.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/114895/9998dd9e-e6c6-d980-53c9-173e2ef1dc6c.png)\n\n試しにメールを送ってみます。\n\n```bash\naws sns publish \\\n--topic-arn arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic \\\n--subject \"Test mail\" \\\n--message \"Hello World\"\n```\n\n無事に届きました。\n![スクリーンショット 2019-04-14 11.27.42.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/114895/e01b0748-12f0-510d-3012-327b57e1c4bd.png)\n\n# SMSを送ってみる\n\n```bash\naws sns subscribe \\\n--topic-arn arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic \\\n--protocol sms \\\n--notification-endpoint +818012345678\n```\n\n```json\n{\n    \"SubscriptionArn\": \"arn:aws:sns:ap-northeast-1:[AWSアカウントID]:my_topic:[ユニークARN]\"\n}\n```\n\nSMSの場合は2段階確認が不要です。おそらく自動的に有効な電話番号かチェックしています。\n--target-arnには直接電話番号を入れてもokのようです。\n\nちゃんと届きました。\n\n```bash\naws sns publish \\\n--target-arn \"+818091246940\" \\\n--subject \"Test mail\" \\\n--message \"Hello World\"\n```\n\n<img width=\"375\" alt=\"IMG_757065D71941-1.jpeg\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/114895/259a72a6-8d1e-7fd9-b25d-a5bdcde2eadf.jpeg\">\n\n宝箱は早速アンロックします。\n\n# 料金\n[https://aws.amazon.com/jp/sns/sms-pricing/](https://aws.amazon.com/jp/sns/sms-pricing/)\n料金は上記より確認できます。（Japanを検索）\n\nキャリア以外にもHNIとかあってよくわかりませんが、$0.06278~0.09268（7.03円〜10.38円のようです）\n","created_at":"2019-04-14T11:59:02+09:00","id":"ea57e5eeba35139f3f8e","tags":[{"name":"AWS","versions":[]},{"name":"cli","versions":[]},{"name":"SMS","versions":[]},{"name":"AmazonSNS","versions":[]}],"url":"https://qiita.com/wktq/items/ea57e5eeba35139f3f8e"},{"title":"【Laravel】リレーション先のリレーションをEager Loading","body":"## 前提となるリレーション例\n* Comment\n\n```php\n    public function person()\n    {\n        return $this->belongsTo(Person::class, 'person_id');\n    }\n```\n  \n* Person\n\n ```php\n    public function posts()\n    {\n        return $this->hasMany(Post::class, 'person_id', 'id');\n    }\n```\n\n* Post\n    * 定義なし\n\n\n## Eager Loading例\n\n```php\n\n    Comment::with(['person', 'person.posts'])->get();\n```\n","created_at":"2019-04-14T11:50:58+09:00","id":"f61eac2890dd7f706cc5","tags":[{"name":"laravel","versions":[]}],"url":"https://qiita.com/fuubit/items/f61eac2890dd7f706cc5"},{"title":"ubuntu 18.04にvscodeをインストールする","body":"# 環境\n\n- ubuntu 18.04\n- vscode 1.33.1\n\n# リポジトリを登録する\n\naptのレポジトリで使用するマイクロソフトのキーをダウンロードしてきます。\n\n```\n~$ curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\n```\n\nダウンロードしてきたキーをaptに登録します。\n\n```\n~$ sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/\n```\n\naptのリポジトリを登録します\n\n```\n~$ sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list'\n```\n\n# インストール\n\naptでhttpsアクセスできるように**apt-transport-https**をインストールします。\n\n```\n~$ sudo apt install apt-transport-https\n```\n\nvscodeをインストールします。\n\n```\n~$ sudo apt update\n~$ sudo apt install code\n```\n\n起動は**code**です。\n\n```\n~$ code\n```\n","created_at":"2019-04-14T11:50:52+09:00","id":"e4db676e846897f8d554","tags":[{"name":"VSCode","versions":[]}],"url":"https://qiita.com/yoshiyasu1111/items/e4db676e846897f8d554"},{"title":"botkitとnodejsでslackbotを作成した際の参考リンク集","body":"#はじめに\n最近botkitを使ってslackbotを作成しました。\nその時に参考にしたページをまとめます。\n完全に備忘録です。\n\n#参考リンク\n一番ベースにしたもの(slackbot管理ページへのリンクもある)\nhttps://qiita.com/batch_/items/f141c595a6e587cd4588\n\nWindowsでの環境構築\nhttps://qiita.com/NagaokaKenichi/items/e0715b6bdde8459a705c\n\ncontroller.hears(どんなメッセージが来た時にどんなメッセージを返すか)の設定について詳しく書いてある\nhttps://clickan.click/slack-botkit/\n\nHerokuにデプロイする\nhttps://qiita.com/biga816/items/148a1156cd8b1a964b91\n\n### まだ試してない\n外部APIを叩く方法について書かれている\nhttps://qiita.com/potato4d/items/81e9e8aef6cd57c234af\n\nSlash Command(/inviteみたいなやつ)のつくりかた\n(たぶん上のリンクたちとは違うサービスを使ってる？)\nhttps://qiita.com/hiconyan/items/b506b0631265268a850b\n\n\n\n","created_at":"2019-04-14T11:46:42+09:00","id":"cda807ddaa07b748019b","tags":[{"name":"Windows","versions":[]},{"name":"Node.js","versions":[]},{"name":"Heroku","versions":[]},{"name":"slackbot","versions":[]},{"name":"Botkit","versions":[]}],"url":"https://qiita.com/gatosyocora/items/cda807ddaa07b748019b"},{"title":"USBについてのメモ#2","body":"USBについて雑多なメモ。その2\n\n#USBのソフトウェア\n##ソフトウェアの階層\nざっくりとわけるとホスト/デバイスにそれぞれ3つにわけられる。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/294245/baa41180-86fc-a602-b5de-71959ff11ed8.png\" width=50%>\n\n###ホスト\n- ホストコントローラドライバ\n    - 一番HWに近い層で、以下の仕事を担っている。\n        - レジスタの初期化や制御データの初期化\n        - USBホスト・ポート制御(ルートハブ制御、デバイス接続/切断制御、サスペンド/レジューム制御)\n        - 転送制御(コントトール転送、バルク転送、インタラプト転送、アイソクロナス転送)\n        - 割り込み/イベント処理\n        - 上記機能に関するUSBバス・ドライバ、OS機能、PCI Expressバスドライバへのインターフェースの提供\n    - USB3.0で提供されることとなったxHCは単一のコントローラでLow/Full/High/Super Speedをサポートすることができる。\n        - USB2.0対応のEHCIではHighスピード通信専用\n        - そのため、コンパチ対応のため、OHCI/UHCIコントローラーを搭載する必要があった。\n- バスドライバ\n    - 特定のコントローラ/デバイスに依存しない層で、すべてのコントローラ/デバイスに対して拡張性を意識した設計をする必要がある。\n    - コントローラドライバ、クラスドライバを管理するそうである。\n    - USBデバイスの管理をし、クラスドライバ/コントローラドライバにインターフェースを提供している。\n        - USBデバイス管理\n            - デバイスエニュメレーション管理(アドレス割り当て、各種ディスクリプタ情報取得/保持)\n            - デバイスツリー構成、デバイスアドレス管理\n            - USBハブポート制御/管理\n            - バスステート、リソース管理\n            - パワーマネジメント管理\n        - クラスドライバインターフェース\n            - デフォルトパイプ(標準リクエスト)リクエストの生成/発行\n            - バルク、インタラプト、アイソクロナス/コントロールパイプによるリクエストの生成/発行\n            - デバイススロットの有効化/無効化\n            - バルクストリーム転送\n            - デバイス情報提供、アクセス、制御(標準ディスクリプタ取得/設定など)\n            - パイプステート制御\n            - コンフィグレーション/インターフェース設定、オルタネートセッティング\n            - クラスリクエスト、ベンダリクエスト\n        - コントローラドライバインターフェース\n            - 接続/切断、サスペンドレジューム検出\n            - エニュメレーションに関する標準リクエストコール \n- クラスドライバ\n    - 特定のデバイスのターゲット機能を実現する階層\n    - マスストレージクラスやオーディオクラス用の標準デバイスクラスもあれば、ベンダ用のクラスドライバもある。\n\n###デバイス\n- ディスクリプタ情報を生成してホストに渡すことが重要な機能の1つで、その情報をもとにUSBホストは同じUSB接続でも通信相手によって必要な通信を行うことができる。\n- デバイスソフトウェアにも以下の階層が存在する。\n- コントローラドライバ\n    - HWに一番近い層で、以下の仕事を担っている\n        - USBデバイス接続/切断\n            - VBUS制御\n        - パワーマネジメント\n            - サスペンドレジューム制御\n        - 転送制御\n            - コントロール転送/バルク転送/インタラプト転送/アイソクロナス転送\n        - DMAコントローラ・ハードウェア制御\n            - USB EPCバッファ-メモリ間DMA転送\n            - USB EPCバッファ-他デバイス間DMA転送\n        - 割り込み制御\n            - 転送割り込み/DMA終了割り込み\n            - 切断/接続、サスペンド/レジューム割り込み\n- バスドライバ\n    - クラスドライバ/コントローラドライバの管理を行っている層で以下の仕事を担っている\n        - ディスクリプタ管理\n        - リクエスト処理\n        - USBデバイス管理\n            - 接続・切断、イベント発生\n        - コントローラドライバインターフェース\n        - クラスドライバインターフェース\n- クラスドライバ\n    - USB製品に合わせてユーザーから見た機能を実現する層\n    - USB2.0 3.0による違いに関してはバスドライバ、コントローラドライバで吸収されているため、基本的な通信においての差分はあまり気にしなくてもいい。(5.0Gbpsを実現するにはケアが必要。)\n    - 以下の仕事を担っている\n        - クラス固有ディスクリプタ管理\n        - デバイスクラス転送制御\n        - クラスリクエスト機能\n        - アプリケーションへのAPIの提供\n        - ブリッジI/F機能\n","created_at":"2019-04-14T11:39:33+09:00","id":"6ee032d01ead72e1df2a","tags":[{"name":"USB","versions":[]},{"name":"組み込み","versions":[]},{"name":"組み込みLinux","versions":[]}],"url":"https://qiita.com/kento_study/items/6ee032d01ead72e1df2a"},{"title":"Docker ComposeでRailsプロジェクトを立ち上げる","body":"## 概要\n[公式](https://docs.docker.com/compose/rails/)のやることだけ書いたやつです。\n\n## 手順\n\n```shell\n$ cd ~/projects\n$ mkdir project && cd $_\n$ vim Dockerfile\n```\n\n```dockerfile:Dockerfile\nFROM ruby:2.5\nRUN apt-get update -qq && apt-get install -y nodejs postgresql-client\nRUN mkdir /myapp\nWORKDIR /myapp\nCOPY Gemfile /myapp/Gemfile\nCOPY Gemfile.lock /myapp/Gemfile.lock\nRUN bundle install\nCOPY . /myapp\n\n# Add a script to be executed every time the container starts.\nCOPY entrypoint.sh /usr/bin/\nRUN chmod +x /usr/bin/entrypoint.sh\nENTRYPOINT [\"entrypoint.sh\"]\nEXPOSE 3000\n\n# Start the main process.\nCMD [\"rails\", \"server\", \"-b\", \"0.0.0.0\"]\n```\n\n```shell\n$ vim Gemfile\n```\n\n```ruby:Gemfile\nsource 'https://rubygems.org'\ngem 'rails', '~>5'\n```\n\n```shell\n$ touch Gemfile.lock\n$ vim entrypoint.sh\n```\n\n```shell:entrypoint.sh\n#!/bin/bash\nset -e\n\n# Remove a potentially pre-existing server.pid for Rails.\nrm -f /myapp/tmp/pids/server.pid\n\n# Then exec the container's main process (what's set as CMD in the Dockerfile).\nexec \"$@\"\n```\n\n```\n$ vim docker-compose.yml\n```\n\n```yml:docker-compose.yml\nversion: '3'\nservices:\n  db:\n    image: postgres\n    volumes:\n      - ./tmp/db:/var/lib/postgresql/data\n  web:\n    build: .\n    command: bash -c \"rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'\"\n    volumes:\n      - .:/myapp\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n```\n\n```shell\n$ docker-compose run web rails new . --force --no-deps --database=postgresql\n$ ls -l\ntotal 80\n-rw-r--r--   1 hondy12345  staff   453  4 14 11:08 Dockerfile\n-rw-r--r--   1 hondy12345  staff  2214  4 14 11:27 Gemfile\n-rw-r--r--   1 hondy12345  staff  5355  4 14 11:28 Gemfile.lock\n-rw-r--r--   1 hondy12345  staff   374  4 14 11:27 README.md\n-rw-r--r--   1 hondy12345  staff   227  4 14 11:27 Rakefile\ndrwxr-xr-x  10 hondy12345  staff   320  4 14 11:27 app\ndrwxr-xr-x   9 hondy12345  staff   288  4 14 11:28 bin\ndrwxr-xr-x  16 hondy12345  staff   512  4 14 11:27 config\n-rw-r--r--   1 hondy12345  staff   130  4 14 11:27 config.ru\ndrwxr-xr-x   3 hondy12345  staff    96  4 14 11:27 db\n-rw-r--r--   1 hondy12345  staff   305  4 14 11:27 docker-compose.yml\n-rw-r--r--   1 hondy12345  staff   202  4 14 11:27 entrypoint.sh\ndrwxr-xr-x   4 hondy12345  staff   128  4 14 11:27 lib\ndrwxr-xr-x   3 hondy12345  staff    96  4 14 11:27 log\n-rw-r--r--   1 hondy12345  staff    63  4 14 11:27 package.json\ndrwxr-xr-x   9 hondy12345  staff   288  4 14 11:27 public\ndrwxr-xr-x   3 hondy12345  staff    96  4 14 11:27 storage\ndrwxr-xr-x  11 hondy12345  staff   352  4 14 11:27 test\ndrwxr-xr-x   6 hondy12345  staff   192  4 14 11:27 tmp\ndrwxr-xr-x   3 hondy12345  staff    96  4 14 11:27 vendor\n$ sudo chown -R $USER .\n$ docker-compose build\n```\n\n```shell\n$ vim config/database.yml\n```\n\n```yml:config/database.yml\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  host: db\n  username: postgres\n  password:\n  pool: 5\n\ndevelopment:\n  <<: *default\n  database: project_development\n\n\ntest:\n  <<: *default\n  database: project_test\n```\n\n```shell\n$ docker-compose up\n$ docker-compose run web rake db:create\n```\n\n## 完了\nhttp://localhost:3000/\n![FireShot Capture 008 - Ruby on Rails - localhost.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/42587/a820325c-c078-c622-bf91-205503eaa344.png)\n","created_at":"2019-04-14T11:38:15+09:00","id":"1b3e84124bba1eda6c01","tags":[{"name":"Rails","versions":[]},{"name":"docker","versions":[]},{"name":"docker-compose","versions":[]}],"url":"https://qiita.com/hondy12345/items/1b3e84124bba1eda6c01"},{"title":"C++での画像処理向けにcv::Mat_<T>を拡張して便利に使う　その１","body":"# tl;dr\nOpenCVのcv::Matやcv::Mat_は便利だけど、画像処理に使うには、もう少し機能がほしい。そこで、cv::Mat_を派生して、(1)Offset値参照によるアドレス計算の省略機能 (2)画面外の画素の参照機能 (3)実数座標値による補完画素値の取得機能を追加してみた。ターゲットはC++17。Visual Studio 2017 15.9.3,OpenCV4.0で動作確認。最初は、ノウハウを備忘録も兼ねて公開するつもりだったが、割と凝ってしまったので、ちゃんと整備して正式に公開しようかな。\n\n# サンプルコード\n```c++\n#include <iostream>\n#include <opencv2/opencv.hpp>\n#include <opencv2/highgui/highgui.hpp>\n\n\nstruct Offset\n{\n\tOffset(size_t _offset) : offset(_offset) {}\n\tvoid operator++() { ++offset; }\n\tvoid operator++(int) { offset++; }\n\tsize_t offset;\n};\n\ntemplate<class T>\nclass Mtx_ : public cv::Mat_<T>\n{\npublic:\n\tusing cv::Mat_<T>::Mat_;\n\tusing cv::Mat_<T>::operator();\n\n\tOffset calcOffset(int y, int x) const\n\t{\n\t\treturn Offset(this->stepT(0) * y + x);\n\t}\n\n\tT& operator()(const Offset& offset)\n\t{\n\t\treturn dataT()[offset.offset];\n\t}\n\n\tconst T& operator()(const Offset& offset) const\n\t{\n\t\treturn dataT()[offset.offset];\n\t}\n\n\tconst T& operator()(int y, int x) const\n\t{\n\t\treturn dataT()[y*this->stepT(0) + x];\n\t}\n\n\tT& operator()(int y, int x)\n\t{\n\t\treturn dataT()[y*this->stepT(0) + x];\n\t}\n\n\tT operator()(float y, float x)\n\t{\n\t\tfloat fx0 = std::floor(x);\n\t\tfloat fy0 = std::floor(y);\n\t\tfloat fx1 = fx0 + 1.f;\n\t\tfloat fy1 = fy0 + 1.f;\n\n\t\tint hb = horzBorder();\n\t\tint vb = vertBorder();\n\n\t\tint x0 = static_cast<int>(fx0);\n\t\tif (x0 < -hb) x0 = -hb;\n\t\tif (x0 > this->cols + hb-2) x0 = this->cols + hb - 2;\n\n\t\tint y0 = static_cast<int>(fy0);\n\t\tif (y0 < -vb) y0 = -vb;\n\t\tif (y0 > this->rows + vb - 2) y0 = this->rows + vb - 2;\n\n\t\tint x1 = x0 + 1;\n\t\tint y1 = y0 + 1;\n\n\t\tT* p = (*this)[y0] + x0;\n\t\tT v00 = p[0];\n\t\tT v10 = p[this->stepT()];\n\t\tT v01 = p[1];\n\t\tT v11 = p[this->stepT()+1];\n\n\t\tfloat v0 = v00 * (fx1 - x) + v01 * (x - fx0);\n\t\tfloat v1 = v10 * (fx1 - x) + v11 * (x - fx0);\n\t\treturn v0 * (fy1 - y) + v1 * (y - fy0);\n\t}\n\n\tT operator()(cv::Point2f pt)\n\t{\n\t\treturn (*this)(pt.y, pt.x);\n\t}\n\n\n\tstatic Mtx_<T> createWithBorder(int _rows, int _cols, int vborder, int hborder = vborder)\n\t{\n\t\tcv::Mat_<T> mat(_rows + vborder * 2, _cols + hborder * 2);\n\t\tMtx_<T> mtx2 = mat(cv::Rect(hborder, vborder, _cols, _rows));\n\t\treturn \tmtx2;\n\t}\n\n\tstatic Mtx_<T> createWithBorder(cv::Size sz, int vborder, int hborder = vborder)\n\t{\n\t\treturn createWithBorder(sz.height, sz.width, vborder, hborder);\n\t}\n\tint horzBorder() const {\n\t\tcv::Size sz;\n\t\tcv::Point pt;\n\t\tthis->locateROI(sz, pt);\n\t\treturn pt.x;\n\t};\n\tint vertBorder() const {\n\t\tcv::Size sz;\n\t\tcv::Point pt;\n\t\tthis->locateROI(sz, pt);\n\t\treturn pt.y;\n\t};\n\n\tvoid extrapolate()\n\t{\n\t\tconst auto vborder = vertBorder();\n\t\tconst auto hborder = horzBorder();\n\t\t//Left\n\t\tfor (int y = 0; y < this->rows; y++) {\n\t\t\tauto pix = (*this)(y, 0);\n\t\t\tauto offset = calcOffset(y, -hborder);\n\t\t\tfor (int dx = 0; dx < hborder; dx++) {\n\t\t\t\t(*this)(offset) = pix;\n\t\t\t\toffset++;\n\t\t\t}\n\t\t}\n\t\t//Right\n\t\tfor (int y = 0; y < this->rows; y++) {\n\t\t\tauto pix = (*this)(y, this->cols - 1);\n\t\t\tauto offset = calcOffset(y, this->cols);\n\t\t\tfor (int dx = 0; dx < hborder; dx++) {\n\t\t\t\t(*this)(offset) = pix;\n\t\t\t\toffset++;\n\t\t\t}\n\t\t}\n\t\t//Top\n\t\tfor (int y = 0; y < vborder; y++) {\n\t\t\tauto offset_s = calcOffset(0, -hborder);\n\t\t\tauto offset_d = calcOffset(-y - 1, -hborder);\n\t\t\tfor (int dx = 0; dx < this->cols + hborder * 2; dx++) {\n\t\t\t\t(*this)(offset_d) = (*this)(offset_s);\n\t\t\t\toffset_d++;\n\t\t\t\toffset_s++;\n\t\t\t}\n\t\t}\n\t\t//Bottom\n\t\tfor (int y = 0; y < vborder; y++) {\n\t\t\tauto offset_s = calcOffset(this->rows - 1, -hborder);\n\t\t\tauto offset_d = calcOffset(this->rows, -hborder);\n\t\t\tfor (int dx = 0; dx < this->cols + hborder * 2; dx++) {\n\t\t\t\t(*this)(offset_d) = (*this)(offset_s);\n\t\t\t\toffset_d++;\n\t\t\t\toffset_s++;\n\t\t\t}\n\t\t}\n\t}\nprivate:\n\tconst T* dataT() const { return reinterpret_cast<const T*>(this->data); }\n\tT* dataT() { return reinterpret_cast<T*>(this->data); }\n};\n\nusing Mtx1b = Mtx_<uchar>;\nusing Mtx3b = Mtx_<cv::Vec3b>;\nusing Mtx4b = Mtx_<cv::Vec4b>;\nusing Mtx1i = Mtx_<int>;\nusing Mtx1w = Mtx_<unsigned short>;\nusing Mtx1f = Mtx_<float>;\nusing Mtx3f = Mtx_<cv::Vec4f>;\nusing Mtx4f = Mtx_<cv::Vec4f>;\n\ntemplate<class T>\nvoid print(const Mtx_<T>& m)\n{\n\tint vborder = m.vertBorder();\n\tint hborder = m.horzBorder();\n\n\tfor (int y = -vborder; y < m.rows+vborder; y++) {\n\t\tfor (int x = -hborder; x < m.cols+hborder; x++) {\n\t\t\tstd::cout << m(y, x) << \" \";\n\t\t}\n\t\tstd::cout << std::endl;\n\t}\n}\n\n\ntemplate<class MAT>\nvoid fill_value(MAT& m)\n{\n\tint i = 0;\n\tfor (int y = 0; y < m.rows; y++) {\n\t\tfor (int x = 0; x < m.cols; x++) {\n\t\t\tm(y, x) = i;\n\t\t\ti++;\n\t\t}\n\t}\n}\n\n\n//使い方\nint main()\n{\n\tusing namespace std;\n\n\t//入力用データ生成\n\tMtx1w mtx(10, 10);\n\tfill_value(mtx);\n\n\t//(1)(1)Offset値参照によるアドレス再計算の省略機能\n\tcout << \"(1)Offset値参照によるアドレス再計算の省略機能\" << endl;\n\tMtx1f mtxf(mtx.size());\n\tassert(mtxf.stepT() == mtx.stepT());\n\tfor (int y = 0; y < mtx.rows; y++) {\n\t\tfor (int x = 0; x < mtx.cols; x++) {\n\t\t\tauto os = mtx.calcOffset(y, x);\n\t\t\tmtxf(os) = mtx(os);\n\t\t}\n\t}\n\tcout << \"mtx(1,1)=\" << mtx(1, 1) << endl;\n\tcout << \"mtxf(1,1)=\" << mtxf(1, 1) << endl;\n\tcout << endl;\n\n\t//(2)画面外の画素値の参照\n\tcout << \"(2)画面外の画素値の参照\" << endl;\n\tauto mtx_ext = Mtx1i::createWithBorder(10, 10, 1, 2);\n\tfill_value(mtx_ext);\n\tmtx_ext.extrapolate();\n\tprint(mtx_ext);\n\n\tcv::Mat_<int> mat = mtx_ext;\n\tcout << \"mtx_ext(0,0)=\" << mtx_ext(0, 0) << endl;\n\tcout << \"mat(0,0)=\" << mat(0, 0) << endl;\n\tcout << endl;\n\n\t//(3)実数座標値による補完画素値の取得\n\tcout << \"(3)実数座標値による補完画素値の取得\" << endl;\n\tcout << \"mtxf(0,0)=\" << mtxf(0, 0) << endl;\n\tcout << \"mtxf(0,1)=\" << mtxf(0, 1) << endl;\n\tcout << \"mtxf(1,0)=\" << mtxf(1, 0) << endl;\n\tcout << \"mtxf(1,1)=\" << mtxf(1, 1) << endl;\n\tcout << \"mtxf(0.5,0.5)=\" << mtxf(0.5f, 0.5f) << endl;\n\tcout << \"mtxf(0.9,0.4)=\" << mtxf(0.9f, 0.4f) << endl;\n\tcout << \"mtx(0.9,0.4)=\" << mtx(0.9f, 0.4f) << endl;\n}\n```\n# 結果\n```console\n(1)Offset値参照によるアドレス計算の省略機能\nmtx(1,1)=11\nmtxf(1,1)=11\n\n(2)画面外の画素値の参照\n0 0 0 1 2 3 4 5 6 7 8 9 9 9\n0 0 0 1 2 3 4 5 6 7 8 9 9 9\n10 10 10 11 12 13 14 15 16 17 18 19 19 19\n20 20 20 21 22 23 24 25 26 27 28 29 29 29\n30 30 30 31 32 33 34 35 36 37 38 39 39 39\n40 40 40 41 42 43 44 45 46 47 48 49 49 49\n50 50 50 51 52 53 54 55 56 57 58 59 59 59\n60 60 60 61 62 63 64 65 66 67 68 69 69 69\n70 70 70 71 72 73 74 75 76 77 78 79 79 79\n80 80 80 81 82 83 84 85 86 87 88 89 89 89\n90 90 90 91 92 93 94 95 96 97 98 99 99 99\n90 90 90 91 92 93 94 95 96 97 98 99 99 99\nmtx_ext(0,0)=0\nmat(0,0)=0\n\n(3)実数座標値による補完画素値の取得\nmtxf(0,0)=0\nmtxf(0,1)=1\nmtxf(1,0)=10\nmtxf(1,1)=11\nmtxf(0.5,0.5)=5.5\nmtxf(0.9,0.4)=9.4\nmtx(0.9,0.4)=9\n```\n\n# 解説\n## (1)Offset値参照によるアドレス再計算の省略機能\nOffset値を計算するメソッドとOffset値を引数として画素値を返すオペレータを定義することによって、**２つ以上のMtx_型オブジェクトで、同一座標の画素値を参照するときに、y*step+xといったアドレッシングのための再計算を省略**できる。画素値型が異なったMtx_型オブジェクトでも同じOffset値を使えるので型変換にも使える。ただし、Mat_<T>::stepT()で参照されるメモリ確保された行の大きさが異なる場合は、当然使えないので、使う場合には注意が必要。\n\n## (2)画面外の画素値の参照\nカスタムなN×Nカーネルによるフィルタ処理を書く場合、擬似的に画面外(座標値が負、もしくは、幅、高さ以上で、コード上はborderと表現)を参照したい場合がある。画面外を参照できないと座標値をクリップする必要があり、参照ごとにクリップすると処理が重くなる。**ROI機能を使って、borderを設定したMtx_型のオブジェクトを作成し、低いコストで画面外を参照可能**とした。画面外もoperatorを使って参照できる。extrapolationで、borderをcopyモードで埋めることができる。なお、上記のコードではMatやMat_では実装されているデバッグモード時の座標値範囲チェックを実装していない。\n　\n## (3)実数座標値による補完画素値の取得 \n**座標値をfloatで受け取り線形補間による画素値を返すことを可能**とした。現段階では、値の取得だけで、書き込みには未対応。set関数を作ってもいいけど、せっかくだからoperatorで書きたい。線形補間コードの記述も含めて、次回、記事を書きたい。\n\n# 補足\nソースは無保証でソースを使用したことによって発生した損害に対して、責任を負いません。\n","created_at":"2019-04-14T11:36:46+09:00","id":"bc2fc2667cfb22fcf075","tags":[{"name":"C++","versions":[]},{"name":"OpenCV","versions":[]}],"url":"https://qiita.com/luftfararen/items/bc2fc2667cfb22fcf075"},{"title":"Raspberry Pi 3 B+に シャットダウンスイッチを付ける","body":"\n## シャットダウンスイッチをつけた理由\nカムプログラムロボットに組み込んだRaspberry Piでプログラムするとき、ChromeBookのLinuxターミナルや、VNCクライアントで接続して作業するので、作業終了後は shutdownコマンドやGUIのShutdownボタンで、OSをシャットダウンして Raspberry Piを終了させます。\nでも、ChromeBookを終了した後に、Raspberry Piのシャットダウンを忘れていた事に気づくことが度々あり、その都度 ChromeBookを起動させるのが面倒でした。\n\n**↓こんなの作っています。**\n![P_20190313_024111_vHDR_Auto - Edited (1).jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/57306/2f11d5a2-de3f-d5f4-49fa-cac840adfb4c.jpeg)\n[Qiita: Raspberry Pi 3 Mobel B+とカムプログラムロボットでロボット作成\n](https://qiita.com/K-Ponta/items/507b1a655a3489663bc8)\n\nあと、（どのくら先になるか分かりませんが）自立起動させた場合、シャットダウンボタンがあったほうが都合がいいかなと思い、シャットダウンボタンを追加してみました。\n\n\n### シャットダウンボタンの設置イメージ\nブレッドボード上に設置したタクトスイッチの端子を、GPIO.7(BCM 4)と、GND に接続します。\n![P_20190414_101104_vHDR_Auto - Edited.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/57306/4ef86e97-75b2-8be2-97c8-8d39fbac73c1.jpeg)\n\n## OS環境\nRaspberry Piの OSはRaspbian 9.8になります。\n\n```bash\npi@raspberrypi:~ $ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Raspbian\nDescription:    Raspbian GNU/Linux 9.8 (stretch)\nRelease:        9.8\nCodename:       stretch\n```\n\nOSの各パッケージはまめに **apt-get update** しているので最新だと思います。\n\n## シャットダウンプログラム\n\nプログラムは piユーザのホームディレクトリに binディレクトを作成してそこに保存することにしました。\n\n```bash\npi@raspberrypi:~ $ mkdir bin/\npi@raspberrypi:~ $ vi ./bin/shutdown_button.py\n```\n\nプログラムはpythonで記述し、python2,python3の両方で動作することを確認済みです。\nプログラムは、このページを参考にシャットダウンボタンを作成しました。\n[クラゲのIoT: RaspberryPiにshutdownボタンを付けよう](http://jellyware.jp/kurage/raspi/shutdown_button.html)\n\n```python:shutdown_button.py\n#!/usr/bin/python\n\nimport time\nimport RPi.GPIO as GPIO\nimport os\n\nGPIO.setmode(GPIO.BCM)\n\nGPIO.setup(4,GPIO.IN, pull_up_down=GPIO.PUD_UP)\n\ntry:\n    while True:\n        GPIO.wait_for_edge(4, GPIO.FALLING)\n        sw_counter = 0\n\n        while True:\n            sw_status = GPIO.input(4)\n\n            if sw_status == 0:\n                sw_counter = sw_counter + 1\n                if sw_counter >= 200:\n                    os.system(\"sudo shutdown -h now\")\n                    break\n            else:\n                break\n\n            time.sleep(0.01)\n\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    GPIO.cleanup()\n```\n\n2秒以上、押し続けた場合、shutdown コマンドを実行するようにしています。\n\n## OS起動時に自動実行するようにする\n\n動作確認後、etcの下にあるrc.local ファイルを編集して、起動時にプログラムを実行するようにしています。\n\n```bash\npi@raspberrypi:~ $ sudo vi /etc/rc.local \n```\n\nexit 0 の前の1行が追加したコードになります。\n\n```bash:/etc/rc.local\n/home/pi/bin/shutdown_button.py\nexit 0\n```\n\n追加後、Rsapberry Piを再起動すると設定が反映されます。\n再起動後、タクトスイッチを長押してシャットダウンが実行されることを確認します。\n\n## 最後に\nシャットダウンスイッチを作っていて、Raspberry Piのハードウェアとソフトウェアの両方を比較的簡単に連動させながら扱えるの魅力を再実感しました。\nコンピュータのプログラムを学ぶときに、手で触れられる部分とプログラムを連動させられると**実感**として判りやすいので、大切ですね。\n\n願わくは、20年度からの小学校でのプログラム教育義務化にもこの感覚は反映させてほしいです。小学校の子がいる、おっさんプログラマからのお願いです。\n\nでも、できる環境があるのと、それを教えることができる環境があるかは、別物ですよね。。。。、難しいです。\n","created_at":"2019-04-14T11:35:43+09:00","id":"12127d7077d69a82693c","tags":[{"name":"Python","versions":[]},{"name":"電子工作","versions":[]},{"name":"RaspberryPi","versions":[]}],"url":"https://qiita.com/K-Ponta/items/12127d7077d69a82693c"},{"title":"Sambaでリモート接続","body":"### Windows → Vagrant → VB → CentOSにSambaをインストールしてファイル共有\n\nユーザー作成\n\n```\nsudo useradd user-name\npasswd user-password\n```\n\nsambaをインスト―ル\n\n```\nsudo yum -y install samba\n#Sambaにユーザーを登録\nsudo pdbedit -a user-name\n```\n\nsamba設定ファイルを編集\n\n```\nsudo vi /etc/samba/smb.conf\n\n以下　変更追加\n[global]\n        workgroup = MY-WORK-GRP\n        security = user\n        passdb backend = tdbsam\n        printing = bsd\n        wide links = yes\n        unix extensions = no\n\n[public]\n        comment = Vagrant local my-project\n        path = /home/my-project\n        public = yes\n        browseable = yes\n        writable = yes\n        read only = No\n        inherit acls = Yes\n        force user = user-name\n        force group = user-name\n        guest ok = yes\n        guest only = yes\n        map archive = no\n        valid users = vagrant,user-name\n        create mode = 0775\n        directory mode = 0775\n        hosts allow = ALL\n        vfs objects = streams_xattr\n\n[homes]\n        comment = Home Directories\n        valid users = %S, %D%w%S\n        browseable = No\n        read only = No\n        inherit acls = Yes\n\n[printers]\n        comment = All Printers\n        path = /var/tmp\n        printable = Yes\n        create mask = 0600\n        browseable = No\n```\n\n\n\nSamba起動\n\n```\nsudo systemctl start smb\nsudo systemctl enable smb\n```\n\nselinuxの設定を無効にする\n\n```\nvim /etc/selinux/config\nSELINUX=disabled\n```\n\n\nシンボリックリンク\n\n```\nmkdir /home/vagrant/my-project\nmkdir /home/my-project\nchmod 0755 /home/vagrant\nchmod 0775 /home/vagrant/my-project\nln -s /home/vagrant/my-project /home/my-project/my-project\n```\n\n\n共有設定（Windows)\n仮想マシンのIP：192.168.33.100\n\n```\n\\\\192.168.33.100\\public\\my-project\n```\n\n\nその他(sshのパスワード認証を許可)\n\n```\nsudo vi /etc/ssh/sshd_config\n# 下記コメントアウトを解除設定\n#PasswordAuthentication yes\nsystemctl restart sshd\n```\n","created_at":"2019-04-14T11:34:49+09:00","id":"649cfb13c0dba244df06","tags":[{"name":"vagrant","versions":[]},{"name":"Win10","versions":[]},{"name":"samba,centos7","versions":[]}],"url":"https://qiita.com/minarai/items/649cfb13c0dba244df06"},{"title":"VirtualBox のバグで Guest Addition がインストールできない","body":"注: この記事は2019年3月28日に書いた．\n\nVirtualBox を，WindowsホストでUbuntu16.04ゲストというパターンで動かしている．数日前から急にshared folderがマウントできなくなってしまった．正確には以下のコマンドで手動マウントはできるのだが，自動マウントをしてくれない．\n\n```\n# mount -t vboxsf (マウントポイント名) /media/sf_(マウントポイント名)\n```\n\nその他にも妙な挙動がいくつか．どうも，Guest Addition のビルドに失敗している模様．\n\n```\n# cd /media/(ユーザ名)/VBox_GAs_....\n# ./VBoxLinuxAdditions.run\n```\nを実行すると失敗して，`/var/log/vboxadd-setup.log` を見ると，\n\n```\n/tmp/vbox.0/r0drv/linux/memobj-r0drv-linux.c:1113:18: error: too many arguments to function ‘get_user_pages’\n             rc = get_user_pages(pTask,                  /* Task for fault accounting. */^M\n                  ^\n```\n\nてなのが出ている．\n\n\n[解決法](https://qiita.com/nk0130/items/0899b523ec7444b20135)を書いてくれている人がいた．直っているけれどリリースには入っていないのだそうで[テストビルド](https://www.virtualbox.org/wiki/Testbuilds)を持ってくるのだと．\n\nなんでも\nThe Windows test build packages are working precisely like a usual VirtualBox installer packages, with one difference: they will not work (the error message will point to unsigned drivers) if you install them on Windows 10 if your system has UEFI secure boot enabled. To make these test build work you need to disable UEFI secure boot in the system's UEFI config.\nだそうなので，UEFIセキュアブートを無効にしなくてはいけない．\n\nうまくいった．\n\n","created_at":"2019-04-14T11:28:20+09:00","id":"3897d498a85ea471fd05","tags":[{"name":"VirtualBox","versions":[]},{"name":"共有フォルダ","versions":[]},{"name":"VirtualBoxGuestAdditions","versions":[]}],"url":"https://qiita.com/tanabe13f/items/3897d498a85ea471fd05"},{"title":"Sigfox Sequence Number（シーケンス番号）管理","body":"シーケンス番号は、Sigfoxプロトコルのオーバーヘッドの一部であり、メッセージが送信されるたびにデバイス自体によってインクリメントされます。Sigfoxクラウドは、シーケンス番号をデバイスメッセージの一貫性の観点で確認し、メッセージを受信しますが、このシーケンス番号に連続していない場合、警告・エラーが発生します。\n\n###Warningイベント\n**\"break in message sequence\"**イベントが発生します。このイベントは警告イベントであり、メッセージ受信には影響を及ぼしません。\n###Errorイベント\n**\"out of message sequence\"**イベントが発生します。このイベントが発生すると、Sigfoxクラウドは該当デバイスからのメッセージを受信しなくなるため、その状態を復帰させるためには、**disengage sequence number**をする必要があります。\n###シーケンスライフサイクル\nシーケンス番号は、4096メッセージで、ゼロリセットされます。\n\n#イベントの発生トリガ\nWarningイベント、Errorイベントは下記定義により発生します。\n\n- days x 300\n- contract x (days + 2)\n\ndays: 2つのメッセージ間の経過日。同一日（24時間内）の場合は\"1\"\ncontract: 契約上の上り回数制限\n上記2つの計算値の**min**値、**max**値を用い、シーケンスの飛びが\n\n1. min値以下の場合は**warning**イベント発生\n2. max値より大の場合は**error**イベント発生\n3. min値とmax値の間の場合は、イベントは発生しない\nとなります。\n\n例えば、\n\n- 2つのメッセージ間の経過: 40時間\n- 契約上の上り回数: 50回\nの場合、days=2、contract=50となり、\n\n- days x 300 = 2 x 300 = **600**\n- contract x (days + 2) = 50 x (2 + 2) = **200**\n\nとなり、min=200、max=600となります。\nつまり、2つのメッセージ間のシーケンス番号飛びが\n\n1. 200以下の場合は、Warningイベント発生\n2. 600より大の場合は、Errorイベント発生\n3. 200～600の場合は、イベントは発生せず、次のメッセージ受信時の判断\n\nとなります。\n\n[Sigfox Japan KCCS](https://qiita.com/organizations/sigfox)\n\n","created_at":"2019-04-14T11:26:10+09:00","id":"36127777480ed107405a","tags":[{"name":"管理","versions":[]},{"name":"SigFox","versions":[]},{"name":"seqNumber","versions":[]}],"url":"https://qiita.com/ghibi/items/36127777480ed107405a"},{"title":"ある数列の発散について","body":"今回は以下のような問題を解いてみたいと思います。必要な知識は合同式だけですので、\n高校生でも十分に理解できる内容です。\n\n\n## 問題\n\n```math:\n\n正の整数 m と x に対し m^x の各桁の和を\nF_m(x) と表すことにする。\\\\\nこのときmが10の冪でなければ、xが増大するにしたがいF_m(x)は発散することを証明せよ。\n```\n\n例えば m = 3 とすると\n\n```math:\nF_3(1)=3,~~F_3(2)=9,~~F_3(3)=2+7=9,~~F_3(4)=8+1=9,~~F_3(5)=2+4+3=9, \\cdots\n```\n\nというような値となります。\n#### オイラーの定理\nこの問題を解くにあたって鍵となるのは、オイラーの定理と言われる次の定理です。\n\n```math:\naとnが互いに素な整数であるとき、次が成り立つ。\\\\\n　　　　　    a^{\\varphi(n)} \\equiv 1 \\pmod n \\\\\nここで\\varphi(n)~は~n~以下の~n~と互いに素な正の整数の個数を表す。\n```\nこの定理は、n が素数の時は次の有名なフェルマーの小定理となります。\n\n```math:\npが素数で、a~が~p~と互いに素な正の整数であるとき、次が成り立つ。\\\\\n　　　　　a^{p-1} \\equiv 1 \\pmod p \\\\\n```\n\n\n##証明\n４つの場合に分けて考えていきます。\n#### Case 1　整数mが5でも2でも割り切れないとき\n```math:\nF_m(x)が発散しないならば任意の整数~x~に対しF_m(x) \\leq F_m(x_0) を満たすx_0 \\in {\\mathbb N}が存在する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nm^{x_0}の桁数を~l~とすると~10^l>m^{x_0}~である。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nまたオイラーの定理より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n　m^{\\varphi(10^l)} \\equiv 1 \\pmod {10^l}\\\\\n\nしたがって~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nm^{\\varphi(10^l)+x_0} \\equiv m^{x_0} \\pmod {10^l}\\\\\nm^{\\varphi(10^l)+x_0}は下~l~桁が~m^{x_0}~と等しく最上位の数が~0~でないことから~F_m(\\varphi(10^l)+x_0)>F_m(x_0)~となるが、~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nこれは~x_0の定義に反する。よってF_m(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n\n```\n\n\n#### Case 2　整数mが5の倍数で、かつ2の倍数ではないとき\n\n[補題]\n\n```math:\nlを任意の自然数として、関数g_l:{\\mathbb N} \\rightarrow {\\mathbb　N} を次のように定める。\\\\\ng_l(x)=\\{5^{l \\varphi (10^x)}を十進法表示したときの下x桁の和 \\}\\\\\n\nこのときg_l(x)は発散する。\n```\n[補題の証明]\n\n```math:\n\ng_l(x)が発散しないならば任意の整数~x~に対しg_l(x) \\leq g_l(x_1) を満たすx_1 \\in {\\mathbb N}が存在する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nまた\\varphi(10^n)=4 \\cdot 10^{n-1}であるから任意の自然数k~に対し~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n5^{l \\varphi (10^{x_1+k})}-5^{l \\varphi (10^{x_1})}\n=5^{l \\cdot 4 \\cdot 10^{x_1-1}} (5^{l \\cdot 4 \\cdot 10^{x_1+k-1}-{l \\cdot 4 \\cdot 10 ^{x_1 -1}}}-1)\\\\\n\n=5^{l \\cdot 4 \\cdot 10^{x_1-1}} (5^{l \\cdot 4 \\cdot 10^{x_1-1}(10^k-1)}-1)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\cdots(1)\\\\\n\n\n\nさらに\\varphi(2^n)=2^{n-1}で、5^lと2^nは互いに\n素な整数だからオイラーの定理より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n(5^l)^{\\varphi(2^n)} \\equiv 5^{l 2^{n-1}} \\equiv 1 \\pmod {2^n}\\\\\n従って\n5^{l \\cdot 4 \\cdot 10^{x_1-1}(10^k-1)}-1 \\equiv (5^{l \\cdot 2^{x_1-1}})^{ 4 \\cdot 5^{x_1-1}(10^k-1)}-1 \\equiv 0 \\pmod {2^{x_1}}~~~~~~~~~\\cdots(2)~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n\n一方10^{x_1-1} \\geq x_1 より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n5^{l \\cdot 4 \\cdot 10^{x_1-1}} \\equiv 0 \\pmod {5^{x_1}} ~~~~~~~~~\\cdots(3)\\\\\n\n(1)(2)(3)より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n5^{l{\\varphi(10^{x_1+k})}} - 5^{l \\varphi(10^{x_1})} \\equiv 0 \\pmod {10^{x_1}}\\\\\n\nすなわち5^{l{\\varphi(10^{x_1+k})}}の下x_1桁は全て5^{l \\varphi(10^{x_1})}に等しい。\\\\\n\ng_l(x_1)の最大性から5^{l{\\varphi(10^{x_1+k})}}の下x_1+1桁目からx_1+k桁目は全て0である。\\\\\nよって5^{l{\\varphi(10^{x_1})}}  \\equiv A \\pmod {10^{x_1}}~~~~(1 \\leq A \\leq 10^{x_1}-1)とおくと~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n5^{l{\\varphi(10^{x_1+k})}} - A \\equiv 0 \\pmod {10^{x_1+k}}\\\\\n従って\n5^{l{\\varphi(10^{x_1+k})}} - A \\equiv 0 \\pmod {5^{x_1+k}}\\\\\n一方\\varphi(10^{x_1+k})=4 \\cdot 10^{x_1+k-1}>x_1+kより5^{l{\\varphi(10^{x_1+k})}} \\equiv 0 \\pmod {5^{x_1+k}}\\\\\nよって\nA \\equiv 0 \\pmod {5^{x_1+k}}\\\\\n\n\nしかしこれはk~が十分大きいとき成り立たない。よってg_l(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n\n```\n\n[Case 2の証明]\n\n```math:\nm=5^{l'}p~~(p~は10と互いに素な整数）とおくと、任意の自然数~y~に対し\nオイラーの定理より~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\np^{\\varphi(10^y)} \\equiv 1 \\pmod {10^y} であるから~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nm^{\\varphi(10^y)} = p^{\\varphi(10^y)}5^{l'\\varphi(10^y)} \\equiv  5^{l'\\varphi(10^y)} \\pmod {10^y}\\\\\n\n補題より5^{l'\\varphi(10^y)}の下~y~桁の和はいくらでも大きな数をとりうるので、F_m(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\n\n#### Case 3　整数mが2の倍数で、かつ5の倍数ではないとき\n\n[補題Ⅱ]\n\n```math:\naを任意の自然数として、関数h_a:{\\mathbb N} \\rightarrow {\\mathbb　N} を次のように定める。\\\\\nh_a(x)=\\{2^{a \\varphi (10^x)}を十進法表示したときの下x桁の和 \\}~~(x \\in {\\mathbb N} )\\\\\n\nこのときh_a(x)は発散する。\n```\n[補題Ⅱの証明]\n\n```math:\n\nh_a(x)が発散しないならば任意の整数~x~に対しh_a(x) \\leq h_a(x_2) を満たすx_2 \\in {\\mathbb N}が存在する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n任意の自然数~b~に対し~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n2^{a \\varphi (10^{x_2+b})}-2^{a \\varphi (10^{x_2})}\\\\\n=2^{a \\cdot 4 \\cdot 10^{x_2-1}} (2^{a \\cdot 4 \\cdot 10^{x_2-1}(10^b-1)}-1)   \\equiv 0 \\pmod {10^{x_2}}\\\\\n\nよって~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n2^{a{\\varphi(10^{x_2})}}  \\equiv B \\pmod {10^{x_2}}~~~~(1 \\leq B \\leq 10^{x_2}-1)とおくと\\\\\n2^{a{\\varphi(10^{x_2+b})}} - B \\equiv 0 \\pmod {10^{x_2+b}}\\\\\n従って\n2^{a{\\varphi(10^{x_2+b})}} - B \\equiv 0 \\pmod {2^{x_2+b}}\\\\\nよって\nB \\equiv 0 \\pmod {2^{x_2+b}}\\\\\n\n\nしかしこれは~b~が十分大きいとき成り立たない。よってh_a(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\n\n\n```\n\n\n\n\n\n\n\n[Case 3の証明]\n\n```math:\nm=2^{l''}q~~(q~は10と互いに素な整数）とおくと、任意の自然数z~に対し~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nオイラーの定理よりq^{\\varphi(10^z)} \\equiv 1 \\pmod {10^z} であるから~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\\nm^{\\varphi(10^z)} = q^{\\varphi(10^z)}2^{l''\\varphi(10^z)} \\equiv  2^{l''\\varphi(10^z)} \\pmod {10^z}\\\\\n\n補題Ⅱより2^{l''\\varphi(10^z)}の下z~桁の和はいくらでも大きな数をとりうるので、F_m(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n```\n\n\n#### Case 4　整数mが10の倍数のとき\n```math:\nm=10^cd~~~~~~(c,d \\in {\\mathbb N}, \\frac{d}{10} \\notin {\\mathbb N})\\\\\nとおけば(m^xの各桁の和)=(d^xの各桁の和）であり、\n{\\rm Case 1 ～3}よりd^xの各桁の和は発散するので\nF_m(x)は発散する。~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\n証明終。\n","created_at":"2019-04-14T11:22:05+09:00","id":"5490a1099dee8ad7065e","tags":[{"name":"数学","versions":[]},{"name":"数列","versions":[]}],"url":"https://qiita.com/yakinoki/items/5490a1099dee8ad7065e"},{"title":"SIerに入って８年ぐらい経ったのでいろいろ棚卸しをしてみる。【vol.003 MyBatis】","body":"## 出会い\n[vol.002](https://qiita.com/TsJazz27Sumin/items/44d5e09fe4cf4ee98bfb)に書いた通り、自分にとっては初のコーディングPJで出会った。\n自分が出会った当時は、iBATISと呼ばれていて後に後継としてMyBatisになっている。\n\n## MyBatisとは\n>MyBatis(マイバティス)とは、iBATIS(アイバティス)の後継プロジェクトで、マッピングファイルにSQL文を直接記述し「オブジェクトとSQL実行結果との間」でマッピングを行うという特徴を持つ、Javaおよび.NET Frameworkを対象とするORマッピングライブラリです。[オープンソースのフレームワーク／MyBatisとは](https://www.ossnews.jp/oss_info/MyBatis)\n\n- JDBCだとSQLをJavaのクラスに書くことになるため、その点、密結合な状態だった。\n- また、ResultSetから取得結果を取り出して、クラスにマッピングする分、手間があった。\n- MyBatisだとSQLを外部xmlファイルに記述することで、クラスとSQLを疎結合な状態にできる。\n- また、クラスへのマッピングはルールに基づいて記述すれば、自動マッピングしてくれる。\n- つまり、JDBCに比べるとMyBatisはちょっと気の利くやつである。\n\n## 振り返ってみて\n２０１２年頃の経験に基づくが、SQLを外部xmlファイルに記述しているメリットもあったが、デメリットもあったように思う。\n\n【メリット】\n使用するSQLが特定のxmlにまとまっているため、SQLのみを一括修正したりするときに楽だった。\n当時の現場では、機能単位ごとにxmlを分割していたので、調査・修正の際にSQLにたどり着くのは早かった気がする。\n\n【デメリット】\n動的にSQLを生成しないので検索パターンごとにSelectのクエリーを用意することになっていた。\n検索条件のパターンが多いものほど不毛さを感じた。※[現在、MyBatisでは動的SQLをサポートしている。](http://www.mybatis.org/mybatis-3/ja/dynamic-sql.html)\n当時のPJの先輩が「設計書から自動でSQLの外部ファイル生成」するExcelマクロを用意していたのを思い出した。\n\n静的にSQLをxmlに定義しておいて、それを利用するのがMyBatisの良い使い方だと思う。\n「動的にSQLを生成する」ことと「静的にSQLを定義しておく」ことを天秤にかけて、機能要件次第で採用判断になるのかなと思う。\n\n経験上、Webアプリの検索機能でよっぽどシンプルな検索条件でもない限り、多数の検索クエリーに対応することになる。パターンごとにSQLを静的に用意しておくと、SQLが爆裂するのでどうしても動的にSQLを生成することを検討せざるをえない。\n\n個人的には、SQLが外部ファイル化されているメリットってそんなに感じないので、動的SQLに対応していたとしてもMyBatisは使わない気がする。ただ、よっぽど大きなPJで「SQLだけ書くDB寄りのチーム」と「Javaでコーディングするチーム」で分けた方が生産性が高くなるなら採用するのかもしれない。\n\n## サンプルで実装してみる。\n以下をを参考にさせていただきました。\n\n - [公式ドキュメント](http://www.mybatis.org/mybatis-3/ja/getting-started.html)\n - [MyBatis 使い方メモ](https://qiita.com/opengl-8080/items/a9b5d4038f19d4813ee6)\n - [絶対分かるMyBatis！MyBatisで覚えるべきチェックルール25（前半）](https://qiita.com/5zm/items/e1faac61a1d00998fb1f)\n\n```java\npackage sample.mybatis.java.dao;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport sample.mybatis.java.dao.mapper.WorkerMapper;\nimport sample.mybatis.java.model.Worker;\n\npublic class SampleDao {\n\n\tpublic static SampleDao instance = new SampleDao();\n\n\tprivate SampleDao () {\n\n\t}\n\n\tpublic List<Worker> select() throws SQLException, IOException {\n\n\t\tList<Worker> workerList = null;\n\n\t\ttry (var in = Resources.getResourceAsStream(\"mybatis-config.xml\")) {\n            var factory = new SqlSessionFactoryBuilder().build(in);\n\n            try (var session = factory.openSession()) {\n            \tvar mapper = session.getMapper(WorkerMapper.class);\n                workerList = mapper.selectAll();\n            }\n        }\n\n        return workerList;\n\t}\n\n\tpublic void insert() throws SQLException, IOException {\n\n\t\ttry (var in = Resources.getResourceAsStream(\"mybatis-config.xml\")) {\n            var factory = new SqlSessionFactoryBuilder().build(in);\n\n            try (var session = factory.openSession()) {\n            \tvar mapper = session.getMapper(WorkerMapper.class);\n            \tvar worker = new Worker(\"0001\", \"k.jarrett\", 73, \"music\");\n            \tmapper.insert(worker);\n            \tsession.commit();\n            }\n        }\n\t}\n\n\tpublic void update() throws SQLException, IOException {\n\n\t\ttry (var in = Resources.getResourceAsStream(\"mybatis-config.xml\")) {\n            var factory = new SqlSessionFactoryBuilder().build(in);\n\n            try (var session = factory.openSession()) {\n            \tvar mapper = session.getMapper(WorkerMapper.class);\n            \tvar worker = new Worker(\"0001\", \"k.jarrett\", 74, \"music\");\n            \tmapper.update(worker);\n            \tsession.commit();\n            }\n        }\n\t}\n\n\tpublic void delete() throws SQLException, IOException {\n\n\t\ttry (var in = Resources.getResourceAsStream(\"mybatis-config.xml\")) {\n            var factory = new SqlSessionFactoryBuilder().build(in);\n\n            try (var session = factory.openSession()) {\n            \tvar mapper = session.getMapper(WorkerMapper.class);\n            \tvar worker = new Worker(\"0001\", \"k.jarrett\", 74, \"music\");\n            \tmapper.delete(worker);\n            \tsession.commit();\n            }\n        }\n\t}\n}\n\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE mapper PUBLIC\n  \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"sample.mybatis.java.dao.mapper.WorkerMapper\">\n  <resultMap id=\"workerResultMap\" type=\"sample.mybatis.java.model.Worker\">\n  \t<result property=\"id\" column=\"id\" />\n  \t<result property=\"name\" column=\"name\" />\n \t<result property=\"age\" column=\"age\" />\n \t<result property=\"department\" column=\"department\" />\n  </resultMap>\n  <select id=\"selectAll\" resultMap=\"workerResultMap\">\n    select * from worker\n  </select>\n  <insert id=\"insert\" parameterType=\"sample.mybatis.java.model.Worker\">\n    insert into worker\n    values (\n      #{id},\n      #{name},\n      #{age},\n      #{department}\n    )\n  </insert>\n  <update id=\"update\" parameterType=\"sample.mybatis.java.model.Worker\">\n    update worker\n    set name = #{name},\n        age = #{age},\n        department = #{department}\n    where id =  #{id}\n  </update>\n  <delete id=\"delete\" parameterType=\"sample.mybatis.java.model.Worker\">\n    delete from worker\n    where id = #{id}\n  </delete>\n</mapper>\n```\n\n```java\npackage sample.mybatis.java.dao.mapper;\n\nimport java.util.List;\n\nimport sample.mybatis.java.model.Worker;\n\npublic interface WorkerMapper {\n\n\tList<Worker> selectAll();\n\tvoid insert(Worker worker);\n\tvoid update(Worker worker);\n\tvoid delete(Worker worker);\n}\n```\n\nサンプルプロジェクトごとGitHubにプッシュしています。\nhttps://github.com/TsJazz27Sumin/mybatisSample/tree/master/src\n\n## サンプルで実装してみて感想。\n\n - Javaのクラスとxmlを行ったり来たりするのがめんどくさい。\n - 一度、設定すれば変更の手間はそんなにかからないのだろうけど、やっぱり設定多い。\n - だいぶアノテーションを使って楽にできるように進化しているみたいだけど、これならJPAで良い気がする。（※[MyBatis Mapper アノテーションの使い方](https://qiita.com/d-yosh/items/a2bec9718bccfe15a6ae)）\n - リフレクションのエラー：`java.lang.reflect.InaccessibleObjectException: Unable to make ~`にハマッた。\n  - `module-info.java`に`exports xxx;`を追加すればいいだけだけど、すぐ分からなかった。。\n","created_at":"2019-04-14T14:31:13+09:00","id":"199c15ea928f3d891000","tags":[{"name":"MyBatis","versions":[]},{"name":"SIer","versions":[]}],"url":"https://qiita.com/TsJazz27Sumin/items/199c15ea928f3d891000"},{"title":"今年の言語はRust その１２","body":"\n# 今年の言語はRust その１２\n\nRustを学びます\n\n\nRustの日本語ドキュメント 2nd Edition\nhttps://doc.rust-jp.rs/book/second-edition/\n\nオリジナル(英語)\nhttps://doc.rust-lang.org/book/\n\n\n\n## 7. モジュール\n\n### 7.1 modをファイルシステム\n\n```sh\n$ cargo new communicator --lib\n```\n\n最初の以下のモジュールを考える\n\nlib.rs\n\n```rust\n\nmod client {\n    fn connect(){\n        \n    }\n}\n\nmod network {\n    fn connect(){\n        \n    }\n    \n    mod server {\n        fn connect(){\n            \n        }\n    }\n}\n\n```\n\n\nさて、networkとclientモジュールを整理しよう\n\nファイル構成はまずいかのようになり\n\n```rust\n.\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   ├── client.rs\n│   └── network.rs\n\n```\n\n\n\nsrc/client.rs\n\n```rust\n\nfn connect(){\n    \n}\n```\n\n\nsrc/network.rs\n\n```rust\n\nfn connect(){\n}\n\nmod server {\n    fn connect(){\n        \n    }\n}\n```\n\n## モジュール用ディレクトリを作る\n\nnetworkディレクトリを作りその下に\nmod.rsというファイルを作る\n\n```rust\n.\n├── client.rs\n└── network\n    ├── mod.rs\n    └── server.rc\n```\n\n- client\n- network\n- network::server\n\nの三つのモジュールを定義できた\n\n\n\n\nおそらくほぼ理解した！\n以降の例題で体で覚える！\n深く考えてもしかたない\n\n\n次回！\n\n\nイエス！\n\n\n\n\n\n\n","created_at":"2019-04-14T14:29:52+09:00","id":"df65394af454a9005b43","tags":[{"name":"Rust","versions":[]}],"url":"https://qiita.com/peace098beat/items/df65394af454a9005b43"},{"title":"Elixir ~演算子の基本~","body":"#ここまでのあらまし\n\n[こちら](https://dev.to/gumi/elixir-03--33im) のページを参照しながらElixirの基本について備忘録的にドキュメントをしたためています。今回は演算子を扱います\n\n\n#本題\n\n四則演算については前回暑かったので割愛します。\n\n文字列をつなぐ演算子は<>\n\n```elixir\niex > name =\"kento\"\n\"kento\"\niex > \"my name is \"<> name\n\"my name is kento\"\n```\n\nアトムを加える場合は#{}で囲んで。\n\n```elixir\niex> \"hello #{:world}\"\n\"hello world\"\n```\n\n論理和演算子||と論理積演算子&&について。\n\n```elixir\niex> -1 || true\n-1\niex> false || 2\n2 \niex > nil && 3\nnil\niex > true && 4\n4\n```\n\n左オペランドを評価し、||はtrueなら左オペランドを、falseなら右オペランドを返す。\n&&はその逆。\n\n比較演算子について、だいたい覚えてるからいいかな...と思いましたが異なる型のデータでも大小比較ができるようです。\n\nデータの大小について、\n\n```\nnumber < atom < reference < function < port < pid < tuple < map < list < bitstring\n```\n\nという決まりがあるようです。\n\n＃編集後記\n\n突っ走って本日3本目のドキュメント更新です。\n基本的には自分のために書いていますがどなたかのご理解の一助のきっかけになったら幸いです。\nうまずたゆまず、頑張ります。\nKento Mizuno\n\n\n\n","created_at":"2019-04-14T14:29:21+09:00","id":"e6f8ae7981479478b029","tags":[{"name":"Elixir","versions":[]},{"name":"fukuoka.ex","versions":[]}],"url":"https://qiita.com/kmizuno0211/items/e6f8ae7981479478b029"},{"title":"ブラウザバックでページ表示された時にだけ処理を実行する方法","body":"みんな大嫌いブラウザバックに関連した処理のお話し。\n\n# 実現したいこと\nブラウザバックにより表示された場合にだけ、通常のページ表示とは違う処理を実行したい。\nたとえば、ページ表示直後に何らかの演出が表示されるが、当該ページから離脱後にブラウザバックで戻ってきた時には（冗長なので）その演出を見せたくない場合があったりする。\n\n## やりたいのは以下ではない\n- 当該ページでブラウザバックされたのを検出する（popstate）\n- 通常のページ表示では実行される処理が、ブラウザバック時に実行されない事態を回避する（ = 通常表示時もブラウザバック表示時も同じにしたい）\n\n# 実現方法\nページ離脱時に、history.stateに任意の値を指定して履歴を書き換えておく。\nそして、ページ表示時にhistory.stateを確認して、ブラウザバックか否かを確認する。\n\n```Javascript\nwindow.onunload = function () {\n  if (history && history.replaceState){\n    // ページ離脱時に、Stateオブジェクトに任意の文字列を指定して履歴を書き換える\n    history.replaceState('unloaded',null, null);\n  }\n}\n\nwindow.onpageshow = function () {\n  if(history && history.state === 'unloaded'){\n    // ブラウザバック時にのみ実行する処理を記述する\n  }\n}\n```\n\n### 注意\nonpageshowイベントのpersistedは使えない。\nキャッシュからページ表示された場合にtrueになるのだが、表示環境が十分に早いなどしてブラウザがキャッシュを使わない場合には、falseになる。ゆえに、ブラウザバックか否かを判定する場合には使えない。\n","created_at":"2019-04-14T14:23:17+09:00","id":"e591452811add8f4fb56","tags":[{"name":"JavaScript","versions":[]}],"url":"https://qiita.com/HieroglypH/items/e591452811add8f4fb56"},{"title":"プログラム初心者のためのC#入門 #5 ループ処理","body":"# #5 ループ処理\nループ処理は同じような処理を繰り返して実行する際に用いられます．\n\n## for文\n    for(初期化式; 条件式; 更新式)\n    {\n        ※ 繰り返したい処理\n    }\n初期化式のところには初めに一度だけ実行する式で，大抵は繰り返し変数という変数を定義・初期化するために用いられます．条件式は※の処理を実行する前に毎回判定され，条件式がtrueの間※の処理が繰り返されます．更新式は※の処理の後に毎回実行される処理です．\n次に具体例を見てみましょう．\n\n```LoopSample.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace LoopSample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            for(int i = 0; i < 5; i++)\n            {\n                Console.WriteLine(i + \". Hello, world!\");\n            }\n        }\n    }\n}\n\n```\n```:出力結果\n0. Hello, world!\n1. Hello, world!\n2. Hello, world!\n3. Hello, world!\n4. Hello, world!\n```\n##while文\n    while(条件式)\n    {\n        ※ 繰り返したい処理\n    }\nwhile文は条件式がtrueの間※の処理を繰り返すものです．for文とは違い，初期化式をwhile文の前に，更新式をwhile文の中に書く必要があります．\n\n```LoopSample.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace LoopSample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int i = 0;\n            while(i < 5)\n            {\n                Console.WriteLine(i + \". Hello, world!\");\n                i++;\n            }\n        }\n    }\n}\n\n```\n```:出力結果\n0. Hello, world!\n1. Hello, world!\n2. Hello, world!\n3. Hello, world!\n4. Hello, world!\n```\n##do-while文\n    do\n    {\n        ※ 繰り返したい処理\n    } while(条件式);\nfor文，while文は初めから条件式が`false`なら1度も※の処理を実行しませんが，do-while文は初めから条件式が`false`でも1度は※の処理を実行してくれるというものです．\n\n```LoopSample.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace LoopSample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int i = 5;\n            do\n            {\n                Console.WriteLine(i + \". Hello, world!\");\n                i++;\n            } while(i < 5);\n        }\n    }\n}\n\n```\n```:出力結果\n5. Hello, world!\n```\n##break文\nbreak文は一番内側のループ処理を強制的に抜ける文です．\n\n```csharp\nfor(int i = 0; true; i++)\n{\n    if (i == 5) break;\n    Console.WriteLine(i + \". Hello, world!\");\n}\n```\n```:出力結果\n0. Hello, world!\n1. Hello, world!\n2. Hello, world!\n3. Hello, world!\n4. Hello, world!\n```\nこのfor文は条件式に`true`が入っているので，ずっと`Hello, world!`と出力し続ける無限ループのコードになってしまいます．しかし，if文によってもし`i`が`5`のときはbreak文を実行するようになっているので，6回目の`Hello, world!`は出力されずに処理が終わります．\n##continue文\ncontinue文はループ処理のcontinue文以降の処理をスキップするものです．\n\n```csharp\nfor(int i = 0; i < 5; i++)\n{\n    if (i == 2) continue;\n    Console.WriteLine(i + \". Hello, world!\");\n}\n```\n```:出力結果\n0. Hello, world!\n1. Hello, world!\n3. Hello, world!\n4. Hello, world!\n```\nこのfor文は5回だけ`Hello, world!`と出力されるものになります．しかし，またしてもif文によってもし`i`が`2`のときはcontinue文を実行するようになっているので，3回目の`Hello, world!`は出力されずに処理が中断されますが，4回目の処理から再開されます．\n\n次回は配列について説明します．\n\n##練習問題\nwhile文の条件式が`true`の100から1までカウントダウンして画面に出力するコードを書いてください．ただし，6の倍数はカウントせずに飛ばしてください．\n","created_at":"2019-04-14T14:23:07+09:00","id":"506c065e6fc16345604b","tags":[{"name":"C#","versions":[]},{"name":"入門","versions":[]}],"url":"https://qiita.com/17t7037t/items/506c065e6fc16345604b"},{"title":"英国留学挂科怎么办，挂科还能拿到学位吗 ","body":"英国留学挂科怎么办，挂科还能拿到学位吗 +Q：575121832\n英国伦敦是座很迷人的城市，在这里可以感受到国际大都市的繁华与热闹，也可以感受到一座历史文化城市的艺术积淀。来了英国留学才知道中国的有钱人真的很多，厉害的留学生也很多，想要在有限的留学期里拓宽自己的交友圈，就必须参加很多的社交活动，除此之外学习也不能落下，所以社交和赶作业几乎组成了留学生在这边生活的全部。而留学注定是一个艰难的过程。最艰（ku）难（bi）的是，你在努力适应新环境，也许你可能还听不懂课的时候，就已经要面临强大的学业压力——各种小测验、论文和考试扑面而来。面对各种学业压力，因此挂科就成了留学生常见的问题。那英国留学生挂科了怎么办?该如何补救?\n1、Undergraduate 本科阶段\n不同院校要求不同，有的完全不予以补考或重修的机会，有些可以参加补考的课程数量有限。通常重修补考的要求会相应提高，如果补考重修后仍然没有通过，此时学生会受到学校的劝退信。\n作为学生党，学习与考试自然是常伴左右，如果因为一次学习的松懈或失误，导致自己的本科课程没有考好，成绩不理想，那简直是场噩梦！有些幸运点的学生或许会有机会通过补考或者重修就可以，但不幸的同学或许会面临被留校观察、开除、劝退等处罚/咨询Q：（575121832/米工程提供挂科修改/提高加权平均分/修改论文挂科/消除开除劝退等服务）\n2、Graduate 研究生\n英国硕士一般只有一年，所以不存在劝退的说法。留学生会在毕业时拿到自己的成绩。有些专业要求所有科目中不能同时挂科两门，一般挂科一两门有机会申请重考，最后获得的学分决定了最后的证书。\n\n一般英国获得180学分即授予Master Degree;120学分授予Postgraduate Diploma;60分则授予Postgraduate Certificate。\n\n如果硕士挂科了，第一个硕士课程没有获得学位，可以再申请第二个，但是第一个课程失败也会影响第二次的申请。咨询Q：（575121832）米工程/提供挂科修改\n\n出国留学最好要对自己有个大概的规划，在国外读大学，事情还是挺多的。时间规划听起来简单，其实还真没那么容易。不管是努力学习、参加课外活动、搞搞社交或者校外打工，所有的时间安排都要自己来决定。一个不小心很容易无法平衡好学习和其他活动。尤其是期末的时候，考试和一大堆论文都挤在一起，规划好时间就更重要了。在海外留学，一定要对自己负责！\n","created_at":"2019-04-14T14:21:16+09:00","id":"fb14af7ee6c67438b9c5","tags":[{"name":"英国留学挂科怎么办，挂科还能拿到学位吗","versions":[]}],"url":"https://qiita.com/xixili/items/fb14af7ee6c67438b9c5"},{"title":"ディープラーニングを実装から学ぶ～ （まとめ5）MNIST NNのみで99.5%(データ拡張)","body":"前回は、CNNを用いてMNISTのテストデータの正解率を99%まで向上させることができました。\n今回は、CNNを使わずに通常のニューラルネットワークのみで99%を目指します。\n(最終的に、99.5%までテストデータの正解率を向上させることができました。)\n\n# プログラム見直し\n「ディープラーニングを実装から学ぶ～ (まとめ１）実装は、実は簡単」のプログラムを利用しますが、「ディープラーニングを実装から学ぶ～ （まとめ４）MNISTで99%も簡単！」での変更の対応を事前に行います。\n変更点は以下です。\n\n* 学習データのエポックごとの正解率を学習時の結果を利用します。\n* エポックごとの正解率表示を関数とします。また、テストデータの予測をバッチサイズごとに行います。\n* 学習時にデータをソートするかどうかをフラグにします。\n\nプログラムは、最後のプログラム全体に記載しますので、そちらを参考にしてください。\n\nまず、MNISTのデータを読み込みます。MNISTのデータファイルは、あらかじめdataフォルダに格納しておくこととします。\n\n```python\n# MNISTデータ読み込み\nx_train, t_train, x_test, t_test = load_mnist('data/')\n\n# 入力データの正規化(0～1)\nnx_train = x_train/255\nnx_test  = x_test/255\n```\n\n# データ拡張\nMNISTは、手書き数字です。大きく書く人や小さく書く人、傾けて書く人など癖があります。データのバリエーションを増やしてみましょう。\n\n## 平行移動\n上下、左右に平行移動した図形を考えます。$(x,y)$を横方向に、$ d_x $、縦方向に、$ d_y $移動した場合、以下の式で表せます。\n\n```math\nx_{shift} = x + d_x\\\\\ny_{shift} = y + d_y\n```\n\n移動するプログラムを考えます。平行移動のみであれば簡単ですが、今後の拡大・縮小や回転にも対応できる方法とします。\n\nMNISTは、28$\\times$28の画像です。以下のように、画像の中心を原点として考えます。\n![5_rei.png](https://qiita-image-store.s3.amazonaws.com/0/212365/45ce2704-3c7e-4313-52e9-c73608a4bd4c.png)\n\nそれぞれのピクセルの中央の座標がどこに移動するかを考えます。\nここでは、横方向に1($ d_x = 1 $)、縦方向に1($ d_y = 1 $)平行移動する場合を考えます。\n中央の座標が以下のようになります。\n(0.5, 0.5) → (0.5+1, 0.5+1) = (1.5, 1.5)\nよって、以下のように移動します。\n(0, 0) → (1, 1)\n![shift.png](https://qiita-image-store.s3.amazonaws.com/0/212365/f6db5358-9ca1-edfb-296a-95b5ca6269cb.png)\n\n平行移動するプログラムを考えます。\n画像のサイズをw,hとすると中心を以下のように計算します。\n\n```python\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n```\n\n各ピクセルの中心がどこに入るかを計算します。\n画像の中心からの位置を計算するためmw,mhを引いて、各ピクセルの中心を求めるため0.5を足します。それに、移動量x_shift_range、y_shift_rangeを加えます。最後に、位置を戻すため、mw,mhを加えます。\n\n```python\n            x_gen = int(np.floor((x - mw + 0.5) + x_shift_range + mw))\n            y_gen = int(np.floor((y - mh + 0.5) + y_shift_range + mh))\n```\n\n移動先の位置に元データのピクセル値を代入します。\n気を付けるべきは、移動後にもとの画像サイズをはみ出す場合があることです。そのため、はみ出した部分は無視します。\n\n```python\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n```\n\nMNISTのデータを1次元のデータとして読み込んでいました。画像として処理するため2次元にreshapeします。reshapeするための型をパラメータで渡します。\nプログラム全体です。\n\n```python\ndef shift(img, shape=None, x_shift_range=0, y_shift_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 平行移動\n            x_gen = int(np.floor((x - mw + 0.5) + x_shift_range + mw))\n            y_gen = int(np.floor((y - mh + 0.5) + y_shift_range + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n上下、左右に１ピクセル移動します。\n\n```python\n# 上下、左右に１ピクセル移動\nnx_train_u1 = shift(nx_train, shape=(28,28), x_shift_range= 0, y_shift_range=-1) # 上\nnx_train_d1 = shift(nx_train, shape=(28,28), x_shift_range= 0, y_shift_range= 1) # 下\nnx_train_l1 = shift(nx_train, shape=(28,28), x_shift_range=-1, y_shift_range= 0) # 左\nnx_train_r1 = shift(nx_train, shape=(28,28), x_shift_range= 1, y_shift_range= 0) # 右\n```\n\n１番目のデータを表示してみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 6))\nplt.subplot(1, 5, 1)\nplt.imshow(nx_train[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 2)\nplt.imshow(nx_train_u1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 3)\nplt.imshow(nx_train_d1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 4)\nplt.imshow(nx_train_l1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 5)\nplt.imshow(nx_train_r1[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n左から、元データ、上、下、左、右に１ピクセル移動したデータです。\n![shift_5_1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/3fea4b69-2926-33d0-e616-eadec76fa3eb.png)\n\n元の画像と生成した画像を結合し学習してみます。\n\n```python\n# 上下、左右に１ピクセル移動データを結合\nnx_train_s = np.concatenate([nx_train,\n                             nx_train_u1, nx_train_d1, nx_train_l1, nx_train_r1])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\nパラメータは、基本的に、「ディープラーニングを実装から学ぶ～ (まとめ１）実装は、実は簡単」と同じですが、以下の２点を変更しています。\n\n* 学習率を0.25に変更\n* エポックごとにデータをソート\n\n```python\n# ノード数設定\nd0 = nx_train_s.shape[1]\nd1 = 100 # 1層目のノード数\nd2 = 50  # 2層目のノード数\nd3 = 10\n# 重みの初期化(-0.1～0.1の乱数)\nnp.random.seed(8)\nW1 = np.random.rand(d0, d1) * 0.2 - 0.1\nW2 = np.random.rand(d1, d2) * 0.2 - 0.1\nW3 = np.random.rand(d2, d3) * 0.2 - 0.1\n# バイアスの初期化(0)\nb1 = np.zeros(d1)\nb2 = np.zeros(d2)\nb3 = np.zeros(d3)\n\n# 学習率\nlr = 0.25\n# バッチサイズ\nbatch_size = 100\n# 学習回数\nepoch = 50\n# シャッフルフラグ\nshuffle = True\n\n# 誤差、正解率表示\nprint_metrics(0, nx_train_s, t_train_s, None, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n\nfor i in range(epoch):\n    # データシャッフル\n    idx = np.arange(nx_train_s.shape[0])\n    if shuffle:\n        np.random.shuffle(idx)\n    \n    # 学習\n    y_train_s = np.zeros_like(t_train_s)\n    for j in range(0, nx_train_s.shape[0], batch_size):\n         y_train_s[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3 = learn(nx_train_s[idx[j:j+batch_size]], t_train_s[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3, lr)\n\n    # 誤差、正解率表示\n    print_metrics(i+1, nx_train_s, t_train_s, y_train_s, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n```\n\n```\n  0 train_rate= 12.43% test_rate= 12.18% train_err= 2.30582 test_err= 2.30601\n  1 train_rate= 93.50% test_rate= 97.73% train_err= 0.20986 test_err= 0.07357\n  2 train_rate= 97.61% test_rate= 97.94% train_err= 0.07629 test_err= 0.06255\n  3 train_rate= 98.21% test_rate= 98.36% train_err= 0.05618 test_err= 0.04926\n  4 train_rate= 98.55% test_rate= 98.38% train_err= 0.04516 test_err= 0.04923\n  5 train_rate= 98.78% test_rate= 98.42% train_err= 0.03767 test_err= 0.04756\n  6 train_rate= 98.92% test_rate= 98.38% train_err= 0.03251 test_err= 0.05573\n  7 train_rate= 99.08% test_rate= 98.44% train_err= 0.02855 test_err= 0.04835\n  8 train_rate= 99.18% test_rate= 98.65% train_err= 0.02500 test_err= 0.04671\n  9 train_rate= 99.24% test_rate= 98.74% train_err= 0.02253 test_err= 0.04717\n 10 train_rate= 99.33% test_rate= 98.60% train_err= 0.01991 test_err= 0.05191\n 11 train_rate= 99.41% test_rate= 98.55% train_err= 0.01792 test_err= 0.05125\n 12 train_rate= 99.46% test_rate= 98.49% train_err= 0.01618 test_err= 0.05278\n 13 train_rate= 99.50% test_rate= 98.55% train_err= 0.01480 test_err= 0.05487\n 14 train_rate= 99.56% test_rate= 98.71% train_err= 0.01353 test_err= 0.05082\n 15 train_rate= 99.56% test_rate= 98.36% train_err= 0.01292 test_err= 0.06426\n 16 train_rate= 99.57% test_rate= 98.52% train_err= 0.01242 test_err= 0.06116\n 17 train_rate= 99.61% test_rate= 98.64% train_err= 0.01126 test_err= 0.05805\n 18 train_rate= 99.66% test_rate= 98.46% train_err= 0.01006 test_err= 0.06139\n 19 train_rate= 99.70% test_rate= 98.54% train_err= 0.00899 test_err= 0.06503\n 20 train_rate= 99.70% test_rate= 98.51% train_err= 0.00862 test_err= 0.06596\n 21 train_rate= 99.75% test_rate= 98.61% train_err= 0.00729 test_err= 0.06831\n 22 train_rate= 99.73% test_rate= 98.47% train_err= 0.00786 test_err= 0.07145\n 23 train_rate= 99.74% test_rate= 98.55% train_err= 0.00779 test_err= 0.07440\n 24 train_rate= 99.69% test_rate= 98.42% train_err= 0.00895 test_err= 0.07046\n 25 train_rate= 99.77% test_rate= 98.51% train_err= 0.00657 test_err= 0.07177\n 26 train_rate= 99.80% test_rate= 98.57% train_err= 0.00575 test_err= 0.07639\n 27 train_rate= 99.80% test_rate= 98.39% train_err= 0.00568 test_err= 0.08375\n 28 train_rate= 99.76% test_rate= 98.70% train_err= 0.00671 test_err= 0.06803\n 29 train_rate= 99.81% test_rate= 98.59% train_err= 0.00543 test_err= 0.07394\n 30 train_rate= 99.84% test_rate= 98.47% train_err= 0.00455 test_err= 0.07835\n 31 train_rate= 99.82% test_rate= 98.53% train_err= 0.00540 test_err= 0.07455\n 32 train_rate= 99.85% test_rate= 98.42% train_err= 0.00443 test_err= 0.07507\n 33 train_rate= 99.72% test_rate= 98.55% train_err= 0.00794 test_err= 0.07823\n 34 train_rate= 99.82% test_rate= 98.25% train_err= 0.00493 test_err= 0.09489\n 35 train_rate= 99.77% test_rate= 98.47% train_err= 0.00720 test_err= 0.08478\n 36 train_rate= 99.81% test_rate= 98.43% train_err= 0.00564 test_err= 0.09077\n 37 train_rate= 99.86% test_rate= 98.56% train_err= 0.00418 test_err= 0.07885\n 38 train_rate= 99.90% test_rate= 98.71% train_err= 0.00289 test_err= 0.07677\n 39 train_rate= 99.93% test_rate= 98.59% train_err= 0.00222 test_err= 0.08077\n 40 train_rate= 99.98% test_rate= 98.71% train_err= 0.00076 test_err= 0.07616\n 41 train_rate= 99.99% test_rate= 98.73% train_err= 0.00037 test_err= 0.07609\n 42 train_rate=100.00% test_rate= 98.79% train_err= 0.00016 test_err= 0.07562\n 43 train_rate=100.00% test_rate= 98.79% train_err= 0.00011 test_err= 0.07662\n 44 train_rate=100.00% test_rate= 98.80% train_err= 0.00009 test_err= 0.07654\n 45 train_rate=100.00% test_rate= 98.77% train_err= 0.00008 test_err= 0.07676\n 46 train_rate=100.00% test_rate= 98.79% train_err= 0.00008 test_err= 0.07738\n 47 train_rate=100.00% test_rate= 98.79% train_err= 0.00007 test_err= 0.07778\n 48 train_rate=100.00% test_rate= 98.80% train_err= 0.00007 test_err= 0.07768\n 49 train_rate=100.00% test_rate= 98.81% train_err= 0.00006 test_err= 0.07820\n 50 train_rate=100.00% test_rate= 98.79% train_err= 0.00006 test_err= 0.07786\n```\n\n50エポック後のテストデータの正解率は、98.79%となりました。最高では、98.8%を超えました。元は、98.2%程度でしたので、大幅な精度向上です。びっくりです。\n\n今度は、斜め方向に１ピクセル移動します。\n\n```python\n# 斜め方向に１ピクセル移動\nnx_train_ul1 = shift(nx_train, shape=(28,28), x_shift_range=-1, y_shift_range=-1)\nnx_train_dl1 = shift(nx_train, shape=(28,28), x_shift_range=-1, y_shift_range= 1)\nnx_train_ur1 = shift(nx_train, shape=(28,28), x_shift_range= 1, y_shift_range=-1)\nnx_train_dr1 = shift(nx_train, shape=(28,28), x_shift_range= 1, y_shift_range= 1)\n```\n\n左から、元データ、左上、左下、右上、右下に１ピクセル移動したデータです。\n![shift_5_2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/9f2e50a6-372a-488b-ba74-af7fe80fc67a.png)\n\n元データと結合します。\n\n```python\n# 斜め方向に１ピクセル移動\nnx_train_s = np.concatenate([nx_train,\n                             nx_train_ul1, nx_train_dl1, nx_train_ur1, nx_train_dr1])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\n学習してみます。学習プログラムは同じです。\n結果の一部です。\n\n```\n  0 train_rate= 12.96% test_rate= 12.18% train_err= 2.30540 test_err= 2.30601\n  1 train_rate= 92.78% test_rate= 97.61% train_err= 0.23281 test_err= 0.07629\n  2 train_rate= 97.36% test_rate= 98.22% train_err= 0.08645 test_err= 0.05615\n  3 train_rate= 97.95% test_rate= 98.43% train_err= 0.06618 test_err= 0.05400\n・・・\n 38 train_rate= 99.75% test_rate= 98.68% train_err= 0.00726 test_err= 0.08336\n・・・\n 50 train_rate= 99.77% test_rate= 98.57% train_err= 0.00695 test_err= 0.09346\n```\n\n先ほどより精度が悪いですが、それでも元と比べるとかなり良くなっています。\n\n## 拡大・縮小\n次に、拡大縮小を試してみます\n$(x,y)$を横方向に$ f_x $倍、縦方向に$ f_y $倍した場合、以下の式で表せます。\n\n```math\nx_{scaling} = x \\times f_x\\\\\ny_{scaling} = y \\times f_y\n```\n\n拡大・縮小時ピクセルの中央の座標がどこに移動するかを考えます。\nまずは拡大の場合です。横方向、縦方向とも1.5倍($f_x=1.5$,$f_y=1.5$)します。中央の座標は以下のようになります。\n(1.5, 1.5) → (1.5*1.5, 1.5*1.5) = (2.25, 2.25)\nよって、以下のように移動します。\n(1, 1) → (2, 2)\n次に縮小の場合です。横方向、縦方向とも0.5倍($f_x=0.5$,$f_y=0.5$)します。中央の座標は以下のようになります。\n(1.5, 1.5) → (1.5*0.5, 1.5*0.5) = (0.75, 0.75)\nよって、以下のように移動します。\n(1, 1) → (0, 0)\n![scaling.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/a37e9881-4458-e2a7-d49a-1692ebc7ee0d.png)\n\n拡大・縮小するプログラムを考えます。\nデータを生成する部分を拡大・縮小に変更します。\n\n```python\n            x_gen = int(np.floor((x - mw + 0.5) * x_scaling_range + mw))\n            y_gen = int(np.floor((y - mh + 0.5) * y_scaling_range + mh))\n```\n\n拡大・縮小関数全体です。\n\n```python\ndef scaling(img, shape=None, x_scaling_range=0, y_scaling_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 拡大・縮小\n            x_gen = int(np.floor((x - mw + 0.5) * x_scaling_range + mw))\n            y_gen = int(np.floor((y - mh + 0.5) * y_scaling_range + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n1.1倍に拡大、0.9倍に縮小、1.2倍に拡大、0.8倍に縮小します。\n\n```python\n# 拡大・縮小\nnx_train_su1  = scaling(nx_train, shape=(28,28), x_scaling_range=1.1, y_scaling_range=1.1)\nnx_train_sd1  = scaling(nx_train, shape=(28,28), x_scaling_range=0.9, y_scaling_range=0.9)\nnx_train_su2  = scaling(nx_train, shape=(28,28), x_scaling_range=1.2, y_scaling_range=1.2)\nnx_train_sd2  = scaling(nx_train, shape=(28,28), x_scaling_range=0.8, y_scaling_range=0.8)\n```\n\n学習データの0番目のデータを表示してみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 6))\nplt.subplot(1, 5, 1)\nplt.imshow(nx_train[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 2)\nplt.imshow(nx_train_su1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 3)\nplt.imshow(nx_train_sd1[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 4)\nplt.imshow(nx_train_su2[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 5)\nplt.imshow(nx_train_sd2[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n左から、元データ、1.1倍、0.9倍、1.2倍、0.8倍の画像です。\n![scaling_5.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/8dbd6e87-1703-4f7f-52c0-b6c36f822794.png)\n\n拡大した場合、途中に抜けがあります。正確に拡大・縮小を行う場合はもっと対処が必要ですが、ここではこれでよしとします。\n\n画像を結合し学習を実行します。\n\n```python\n# 拡大・縮小\nnx_train_s = np.concatenate([nx_train,\n                             nx_train_su1, nx_train_sd1, nx_train_su2, nx_train_sd2])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\n結果です。\n\n\n```\n  0 train_rate= 11.21% test_rate= 12.18% train_err= 2.30609 test_err= 2.30601\n  1 train_rate= 93.06% test_rate= 97.46% train_err= 0.22408 test_err= 0.08599\n  2 train_rate= 97.36% test_rate= 97.46% train_err= 0.08397 test_err= 0.08080\n  3 train_rate= 98.09% test_rate= 97.92% train_err= 0.06037 test_err= 0.06721\n・・・\n 45 train_rate=100.00% test_rate= 98.58% train_err= 0.00006 test_err= 0.11247\n・・・\n 50 train_rate=100.00% test_rate= 98.55% train_err= 0.00005 test_err= 0.11379\n```\n\nやはり、精度が向上しました。\n\n## 回転\n次に回転を行います。\n$(x,y)$を$ \\theta $回転した場合、以下の式で表せます。\n\n```math\nx_{rotation} = x \\cos\\theta - y \\sin\\theta\\\\\ny_{rotation} = x \\sin\\theta + y \\cos\\theta\n```\n\n回転時ピクセルの中央の座標がどこに移動するかを考えます。\n30度左回転します。中央の座標は以下のようになります。\n(1.5, 1.5) → ($1.5 \\times \\cos30$ - $1.5 \\times \\sin30$, $1.5 \\times \\sin30$ + $1.5 \\times \\cos30$) = (2.05, 0.55)\nよって、以下のように移動します。\n(1, 1) → (2, 0)\n![rotation.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/45fa3170-7ff6-23ae-0253-c95849c9422a.png)\n\n回転するプログラムを考えます。\n\nパラメータは、度で渡しましたが、sin,cosの計算はラジアンで行うため事前に変換します。\n\n```python\n    # 度→ラジアン\n    rd_rotation_range = np.radians(rotation_range)\n```\n\n回転部分を変更します。\n\n```python\n            x_gen = int(np.floor((x - mw + 0.5) * np.cos(rd_rotation_range) - (y - mh + 0.5) * np.sin(rd_rotation_range) + mw))\n            y_gen = int(np.floor((x - mh + 0.5) * np.sin(rd_rotation_range) + (y - mh + 0.5) * np.cos(rd_rotation_range) + mh))\n```\n\n回転関数全体です。\n\n```python\ndef rotation(img, shape=None, rotation_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n    # 度→ラジアン\n    rd_rotation_range = np.radians(rotation_range)\n\n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 回転\n            x_gen = int(np.floor((x - mw + 0.5) * np.cos(rd_rotation_range) - (y - mh + 0.5) * np.sin(rd_rotation_range) + mw))\n            y_gen = int(np.floor((x - mh + 0.5) * np.sin(rd_rotation_range) + (y - mh + 0.5) * np.cos(rd_rotation_range) + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n右に10度、左に10度、右に20度、左に20度回転します。\n\n```python\n# 回転\nnx_train_rr10 = rotation(nx_train, shape=(28,28), rotation_range= 10)\nnx_train_rl10 = rotation(nx_train, shape=(28,28), rotation_range=-10)\nnx_train_rr20 = rotation(nx_train, shape=(28,28), rotation_range= 20)\nnx_train_rl20 = rotation(nx_train, shape=(28,28), rotation_range=-20)\n```\n\n学習データの0番目のデータを表示してみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 6))\nplt.subplot(1, 5, 1)\nplt.imshow(nx_train[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 2)\nplt.imshow(nx_train_rr10[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 3)\nplt.imshow(nx_train_rl10[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 4)\nplt.imshow(nx_train_rr20[0].reshape(28,28), 'gray')\nplt.subplot(1, 5, 5)\nplt.imshow(nx_train_rl20[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n左から、元データ、右10度、左10度、右20度、左20度回転の画像です。\n![rotation_5.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/2e6633ae-32f9-adbd-6776-7b3d9a3cffe8.png)\n\n画像を結合し学習を実行します。\n\n```python\n# 拡大・縮小\nnx_train_s = np.concatenate([nx_train,\n                             nx_train_rr10, nx_train_rl10, nx_train_rr20, nx_train_rl20])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\n結果です。\n\n```\n  0 train_rate= 12.57% test_rate= 12.18% train_err= 2.30448 test_err= 2.30601\n  1 train_rate= 92.76% test_rate= 97.42% train_err= 0.23071 test_err= 0.08477\n  2 train_rate= 97.20% test_rate= 97.55% train_err= 0.08909 test_err= 0.08142\n  3 train_rate= 97.91% test_rate= 97.98% train_err= 0.06625 test_err= 0.06674\n・・・\n 47 train_rate=100.00% test_rate= 98.58% train_err= 0.00007 test_err= 0.09674\n・・・\n 50 train_rate=100.00% test_rate= 98.57% train_err= 0.00006 test_err= 0.09705\n```\n\n回転でも精度が向上しました。\n\n## 参考\n他にも反転が考えられますが、数字のため反転には対応できません。\n元データを５つ分結合した場合の結果も確認してみます。\n\n```python\nnx_train_s = np.concatenate([nx_train,\n                             nx_train, nx_train, nx_train, nx_train])\nt_train_s  = np.concatenate([t_train,\n                             t_train, t_train, t_train, t_train])\n```\n\n学習結果です。\n\n```\n  0 train_rate= 11.67% test_rate= 12.18% train_err= 2.30623 test_err= 2.30601\n  1 train_rate= 94.99% test_rate= 97.33% train_err= 0.16258 test_err= 0.09243\n  2 train_rate= 98.79% test_rate= 97.78% train_err= 0.03947 test_err= 0.08247\n  3 train_rate= 99.49% test_rate= 97.95% train_err= 0.01714 test_err= 0.07971\n・・・\n 32 train_rate=100.00% test_rate= 98.04% train_err= 0.00005 test_err= 0.11965\n・・・\n 50 train_rate=100.00% test_rate= 98.02% train_err= 0.00003 test_err= 0.12452\n```\n\n単にデータを結合するだけでは、精度は改善しませんでした。\n\nこれまでの結果を表にします。50エポック実行後のテストデータの正解率と最大の正解率です。\n\n|データ拡張方法|テスト正解率|テスト最大|\n|:---------------------------|------:|------:|\n|上下左右に１ピクセル移動      | 98.79 | 98.81 |\n|斜め方向に１ピクセル移動      | 98.57 | 98.68 |\n|1.1,0.9,1.2,0.8倍に拡大・縮小| 98.55 | 98.58 |\n|10度、20度、右左回転         | 98.57 | 98.58 |\n|参考(データ5倍)              | 98.02 |98.04 |\n\n# データ生成\n## 乱数によるデータ生成\n今までのようにデータを増やしもよいのですが、学習に必要なリソースが増えること、時間がかかるため別の方法を考えます。\n乱数によりデータを変換することを考えます。\n今まで、平行移動、拡大・縮小、回転を別々に行いました。合わせて行うことを考えます。\nデータの変換は、以下の式で表せます。\n\n```math\nx_{gen} = (x\\cos\\theta - y\\sin\\theta) * f_x + d_x\\\\\ny_{gen} = (x\\sin\\theta + y\\cos\\theta) * f_y + d_y\n```\n\n$d_x$ : 横方向の移動\n$d_y$ : 縦方向の移動\n$f_x$ : 横方向の拡大・縮小\n$f_y$ : 縦方向の拡大・縮小\n$\\theta$ : 回転角度\n\n乱数で指定した範囲内で移動、拡大・縮小、回転を決めます。\n例えば、移動距離に1を指定した場合、-1～1の範囲で乱数で決定します。同様に、拡大・縮小率を0.1とした場合、0.9～1.1倍の範囲、回転角度を10度とした場合、-10～10度の間で決めます。\n\n```python\n    # 乱数\n    x_shift = np.random.rand() * x_shift_range*2 - x_shift_range           # 左右の移動距離\n    y_shift = np.random.rand() * y_shift_range*2 - y_shift_range           # 上下の移動距離\n    x_scaling = 1 + np.random.rand() * x_scaling_range*2 - x_scaling_range # 左右の拡大縮小率\n    y_scaling = 1 + np.random.rand() * y_scaling_range*2 - y_scaling_range # 上下の拡大縮小率\n    rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n```\n\nデータの変換部分です。\n\n```python\n            x_gen = int(np.floor(((x - mw + 0.5) * np.cos(rd_rotation) - (y - mh + 0.5) * np.sin(rd_rotation)) * x_scaling + x_shift + mw))\n            y_gen = int(np.floor(((x - mh + 0.5) * np.sin(rd_rotation) + (y - mh + 0.5) * np.cos(rd_rotation)) * y_scaling + y_shift + mh))\n```\n\n関数全体です。\n\n```python\ndef generator(img, shape=None, x_shift_range=0, y_shift_range=0, x_scaling_range=0, y_scaling_range=0, rotation_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # 乱数\n    x_shift = np.random.rand() * x_shift_range*2 - x_shift_range           # 左右の移動距離\n    y_shift = np.random.rand() * y_shift_range*2 - y_shift_range           # 上下の移動距離\n    x_scaling = 1 + np.random.rand() * x_scaling_range*2 - x_scaling_range # 左右の拡大縮小率\n    y_scaling = 1 + np.random.rand() * y_scaling_range*2 - y_scaling_range # 上下の拡大縮小率\n    rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    # 度→ラジアン\n    rd_rotation = np.radians(rotation)\n   \n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 位置計算\n            x_gen = int(np.floor(((x - mw + 0.5) * np.cos(rd_rotation) - (y - mh + 0.5) * np.sin(rd_rotation)) * x_scaling + x_shift + mw))\n            y_gen = int(np.floor(((x - mh + 0.5) * np.sin(rd_rotation) + (y - mh + 0.5) * np.cos(rd_rotation)) * y_scaling + y_shift + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n先頭のデータを10個生成し表示してみます。\n移動距離を1、倍率を0.1、回転を10度とします。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,6))\nnp.random.seed(8)\n\nfor i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(generator(nx_train[0:1], shape=(28,28), \n                         x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10\n                        )[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n![generator_5_11.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/97e87dbf-9ec1-9e13-4de6-ac99b20182ab.png)\nどうですか？なかなかバリエーションのあるデータが生成できました。\n\n次に、移動距離を2、倍率を0.2、回転を20度としてみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,6))\nnp.random.seed(8)\n\nfor i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(generator(nx_train[0:1], shape=(28,28), \n                         x_shift_range=2, y_shift_range=2, x_scaling_range=0.2, y_scaling_range=0.2, rotation_range=20\n                        )[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n![generator_5_12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/34880825-c6b2-d7c5-844a-00378c241b00.png)\n\nこれは、これでよいのですが、もう少し工夫してみます。\n回転の部分を別々に乱数で生成します。\n\n```math\nx_{gen} = (x\\cos\\theta_{xx} - y\\sin\\theta_{yx}) * f_x + d_x\\\\\ny_{gen} = (x\\sin\\theta_{xy} + y\\cos\\theta_{yy}) * f_y + d_y\n```\n\n注意点があります。回転角度を大きくするとまともな画像となりません。MINISTは数字のため大きく回転しないことを前提としています。\n\n変更した関数です。\n\n```python\ndef generator(img, shape=None, x_shift_range=0, y_shift_range=0, x_scaling_range=0, y_scaling_range=0, rotation_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # 乱数\n    x_shift = np.random.rand() * x_shift_range*2 - x_shift_range           # 左右の移動距離\n    y_shift = np.random.rand() * y_shift_range*2 - y_shift_range           # 上下の移動距離\n    x_scaling = 1 + np.random.rand() * x_scaling_range*2 - x_scaling_range # 左右の拡大縮小率\n    y_scaling = 1 + np.random.rand() * y_scaling_range*2 - y_scaling_range # 上下の拡大縮小率\n    xx_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    yx_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    xy_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    yy_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    # 度→ラジアン\n    rd_xx_rotation = np.radians(xx_rotation)\n    rd_yx_rotation = np.radians(yx_rotation)\n    rd_xy_rotation = np.radians(xy_rotation)\n    rd_yy_rotation = np.radians(yy_rotation)\n   \n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            # 位置計算\n            x_gen = int(np.floor(((x - mw + 0.5) * np.cos(rd_xx_rotation) - (y - mh + 0.5) * np.sin(rd_yx_rotation)) * x_scaling + x_shift + mw))\n            y_gen = int(np.floor(((x - mh + 0.5) * np.sin(rd_xy_rotation) + (y - mh + 0.5) * np.cos(rd_yy_rotation)) * y_scaling + y_shift + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n先頭のデータを10個生成し表示してみます。\n移動距離を1、倍率を0.1、回転を10度とします。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,6))\nnp.random.seed(8)\n\nfor i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(generator(nx_train[0:1], shape=(28,28), \n                         x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10\n                        )[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n![generator_5_21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/46a6df06-40ca-ffca-f70a-ca3089a9e89e.png)\n\n次に、移動距離を2、倍率を0.2、回転を20度としてみます。\n\n```python\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,6))\nnp.random.seed(8)\n\nfor i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(generator(nx_train[0:1], shape=(28,28), \n                         x_shift_range=2, y_shift_range=2, x_scaling_range=0.2, y_scaling_range=0.2, rotation_range=20\n                        )[0].reshape(28,28), 'gray')\nplt.show()\n```\n\n![generator_5_22.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/212b0052-8691-4d4f-d878-50e6271a67d4.png)\n先ほどの画像より、バリエーション豊かになりました。\n\n## 学習の実行\n乱数により生成した画像を利用し学習します。\n生成は、ミニバッチごとに行います。\nプログラムの変更部分です。generatorでデータを生成し、learnに渡し学習します。\n\n```python\n        # データ生成\n        nx_train_g = generator(nx_train[idx[j:j+batch_size]], shape=(28,28), \n                               x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10)\n        y_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3 = learn(nx_train_g, t_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3, lr)\n```\n\n移動距離を1、倍率を0.1、回転を10度とし、学習します。学習がゆっくり進むため100エポック実行しました。また、あとで、学習状況をグラフ化するため、エポックごとの正解率、誤差を保存しておくように変更しました。\n\n```python\n# ノード数設定\nd0 = nx_train.shape[1]\nd1 = 100 # 1層目のノード数\nd2 = 50  # 2層目のノード数\nd3 = 10\n# 重みの初期化(-0.1～0.1の乱数)\nnp.random.seed(8)\nW1 = np.random.rand(d0, d1) * 0.2 - 0.1\nW2 = np.random.rand(d1, d2) * 0.2 - 0.1\nW3 = np.random.rand(d2, d3) * 0.2 - 0.1\n# バイアスの初期化(0)\nb1 = np.zeros(d1)\nb2 = np.zeros(d2)\nb3 = np.zeros(d3)\n\n# 学習率\nlr = 0.25\n# バッチサイズ\nbatch_size = 100\n# 学習回数\nepoch = 100\n# シャッフルフラグ\nshuffle = True\n\n# エポックごとの誤差、正解率格納エリア\ntrain_rate, test_rate, train_err, test_err = np.zeros(epoch+1), np.zeros(epoch+1), np.zeros(epoch+1), np.zeros(epoch+1)\n\n# 誤差、正解率表示\ntrain_rate[0], test_rate[0], train_err[0], test_err[0] = print_metrics(0, nx_train, t_train, None, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n\nfor i in range(epoch):\n    # データシャッフル\n    idx = np.arange(nx_train.shape[0])\n    if shuffle:\n        np.random.shuffle(idx)\n    \n    # 学習\n    y_train = np.zeros_like(t_train)\n    for j in range(0, nx_train.shape[0], batch_size):\n        # データ生成\n        nx_train_g = generator(nx_train[idx[j:j+batch_size]], shape=(28,28), \n                               x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10)\n        y_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3 = learn(nx_train_g, t_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3, lr)\n\n    # 誤差、正解率表示\n    train_rate[i+1], test_rate[i+1], train_err[i+1], test_err[i+1] = print_metrics(i+1, nx_train, t_train, y_train, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n```\n\n```\n  0 train_rate= 11.67% test_rate= 12.18% train_err= 2.30623 test_err= 2.30601\n  1 train_rate= 79.13% test_rate= 94.99% train_err= 0.65019 test_err= 0.15849\n  2 train_rate= 92.45% test_rate= 96.97% train_err= 0.24373 test_err= 0.09587\n  3 train_rate= 94.31% test_rate= 97.21% train_err= 0.18487 test_err= 0.08591\n  4 train_rate= 95.09% test_rate= 97.08% train_err= 0.15908 test_err= 0.09091\n  5 train_rate= 95.61% test_rate= 97.73% train_err= 0.14125 test_err= 0.06821\n  6 train_rate= 95.86% test_rate= 98.07% train_err= 0.13036 test_err= 0.05904\n  7 train_rate= 96.20% test_rate= 97.93% train_err= 0.11967 test_err= 0.06332\n  8 train_rate= 96.35% test_rate= 98.32% train_err= 0.11669 test_err= 0.05715\n  9 train_rate= 96.52% test_rate= 98.21% train_err= 0.11030 test_err= 0.05385\n 10 train_rate= 96.73% test_rate= 98.32% train_err= 0.10482 test_err= 0.04903\n 11 train_rate= 96.86% test_rate= 98.40% train_err= 0.10024 test_err= 0.04888\n 12 train_rate= 97.03% test_rate= 98.32% train_err= 0.09619 test_err= 0.05135\n 13 train_rate= 97.04% test_rate= 98.55% train_err= 0.09392 test_err= 0.04338\n 14 train_rate= 97.15% test_rate= 98.63% train_err= 0.08904 test_err= 0.04456\n 15 train_rate= 97.23% test_rate= 98.62% train_err= 0.09057 test_err= 0.04170\n 16 train_rate= 97.23% test_rate= 98.27% train_err= 0.08701 test_err= 0.04814\n 17 train_rate= 97.27% test_rate= 98.50% train_err= 0.08554 test_err= 0.04303\n 18 train_rate= 97.42% test_rate= 98.65% train_err= 0.08260 test_err= 0.04230\n 19 train_rate= 97.42% test_rate= 98.64% train_err= 0.08210 test_err= 0.04139\n 20 train_rate= 97.46% test_rate= 98.67% train_err= 0.07877 test_err= 0.04056\n 21 train_rate= 97.55% test_rate= 98.61% train_err= 0.07706 test_err= 0.03883\n 22 train_rate= 97.62% test_rate= 98.54% train_err= 0.07435 test_err= 0.04402\n 23 train_rate= 97.62% test_rate= 98.68% train_err= 0.07470 test_err= 0.03836\n 24 train_rate= 97.62% test_rate= 98.64% train_err= 0.07463 test_err= 0.03885\n 25 train_rate= 97.61% test_rate= 98.66% train_err= 0.07349 test_err= 0.03983\n 26 train_rate= 97.62% test_rate= 98.88% train_err= 0.07332 test_err= 0.03545\n 27 train_rate= 97.74% test_rate= 98.63% train_err= 0.07052 test_err= 0.03997\n 28 train_rate= 97.89% test_rate= 98.83% train_err= 0.06760 test_err= 0.03548\n 29 train_rate= 97.84% test_rate= 98.69% train_err= 0.06700 test_err= 0.04063\n 30 train_rate= 97.80% test_rate= 98.80% train_err= 0.06816 test_err= 0.03841\n 31 train_rate= 97.81% test_rate= 98.82% train_err= 0.06609 test_err= 0.03569\n 32 train_rate= 97.88% test_rate= 98.82% train_err= 0.06584 test_err= 0.03456\n 33 train_rate= 97.91% test_rate= 98.74% train_err= 0.06455 test_err= 0.03728\n 34 train_rate= 97.97% test_rate= 98.69% train_err= 0.06152 test_err= 0.03758\n 35 train_rate= 97.92% test_rate= 98.74% train_err= 0.06313 test_err= 0.04017\n 36 train_rate= 97.95% test_rate= 98.82% train_err= 0.06388 test_err= 0.03284\n 37 train_rate= 98.09% test_rate= 98.85% train_err= 0.06058 test_err= 0.03359\n 38 train_rate= 97.97% test_rate= 98.84% train_err= 0.06248 test_err= 0.03492\n 39 train_rate= 98.05% test_rate= 98.78% train_err= 0.06179 test_err= 0.03609\n 40 train_rate= 98.22% test_rate= 98.78% train_err= 0.05814 test_err= 0.03644\n 41 train_rate= 98.12% test_rate= 98.75% train_err= 0.05877 test_err= 0.03562\n 42 train_rate= 98.02% test_rate= 98.72% train_err= 0.06121 test_err= 0.03767\n 43 train_rate= 98.19% test_rate= 98.93% train_err= 0.05625 test_err= 0.03221\n 44 train_rate= 98.05% test_rate= 98.87% train_err= 0.06061 test_err= 0.03491\n 45 train_rate= 98.07% test_rate= 98.97% train_err= 0.05905 test_err= 0.03221\n 46 train_rate= 98.23% test_rate= 98.76% train_err= 0.05659 test_err= 0.03652\n 47 train_rate= 98.04% test_rate= 98.81% train_err= 0.06010 test_err= 0.03354\n 48 train_rate= 98.16% test_rate= 98.97% train_err= 0.05656 test_err= 0.03342\n 49 train_rate= 98.18% test_rate= 99.02% train_err= 0.05648 test_err= 0.03204\n 50 train_rate= 98.25% test_rate= 98.88% train_err= 0.05377 test_err= 0.03622\n 51 train_rate= 98.21% test_rate= 98.91% train_err= 0.05343 test_err= 0.03233\n 52 train_rate= 98.28% test_rate= 99.00% train_err= 0.05306 test_err= 0.03106\n 53 train_rate= 98.18% test_rate= 98.93% train_err= 0.05518 test_err= 0.03298\n 54 train_rate= 98.23% test_rate= 98.97% train_err= 0.05546 test_err= 0.03106\n 55 train_rate= 98.33% test_rate= 98.94% train_err= 0.05412 test_err= 0.03291\n 56 train_rate= 98.25% test_rate= 98.88% train_err= 0.05351 test_err= 0.03427\n 57 train_rate= 98.29% test_rate= 99.01% train_err= 0.05356 test_err= 0.03286\n 58 train_rate= 98.21% test_rate= 98.90% train_err= 0.05334 test_err= 0.03514\n 59 train_rate= 98.28% test_rate= 99.04% train_err= 0.05227 test_err= 0.03087\n 60 train_rate= 98.39% test_rate= 98.93% train_err= 0.04971 test_err= 0.03371\n 61 train_rate= 98.30% test_rate= 99.03% train_err= 0.05447 test_err= 0.02983\n 62 train_rate= 98.38% test_rate= 98.95% train_err= 0.05134 test_err= 0.03340\n 63 train_rate= 98.38% test_rate= 99.01% train_err= 0.04958 test_err= 0.03134\n 64 train_rate= 98.40% test_rate= 98.88% train_err= 0.04865 test_err= 0.03243\n 65 train_rate= 98.29% test_rate= 98.94% train_err= 0.05254 test_err= 0.03251\n 66 train_rate= 98.34% test_rate= 99.03% train_err= 0.05115 test_err= 0.03043\n 67 train_rate= 98.28% test_rate= 98.94% train_err= 0.05372 test_err= 0.03187\n 68 train_rate= 98.37% test_rate= 99.05% train_err= 0.05070 test_err= 0.02888\n 69 train_rate= 98.33% test_rate= 98.97% train_err= 0.04955 test_err= 0.03076\n 70 train_rate= 98.37% test_rate= 98.96% train_err= 0.04920 test_err= 0.03240\n 71 train_rate= 98.45% test_rate= 98.99% train_err= 0.04855 test_err= 0.03185\n 72 train_rate= 98.46% test_rate= 99.01% train_err= 0.04952 test_err= 0.03194\n 73 train_rate= 98.41% test_rate= 99.06% train_err= 0.04954 test_err= 0.03022\n 74 train_rate= 98.43% test_rate= 98.99% train_err= 0.04806 test_err= 0.03400\n 75 train_rate= 98.38% test_rate= 98.98% train_err= 0.05002 test_err= 0.03233\n 76 train_rate= 98.36% test_rate= 98.96% train_err= 0.04998 test_err= 0.03140\n 77 train_rate= 98.42% test_rate= 99.00% train_err= 0.04942 test_err= 0.02916\n 78 train_rate= 98.37% test_rate= 98.88% train_err= 0.05003 test_err= 0.03231\n 79 train_rate= 98.49% test_rate= 98.99% train_err= 0.04612 test_err= 0.02966\n 80 train_rate= 98.39% test_rate= 99.06% train_err= 0.04789 test_err= 0.02866\n 81 train_rate= 98.48% test_rate= 98.96% train_err= 0.04811 test_err= 0.03142\n 82 train_rate= 98.52% test_rate= 98.99% train_err= 0.04682 test_err= 0.03299\n 83 train_rate= 98.51% test_rate= 99.03% train_err= 0.04593 test_err= 0.02829\n 84 train_rate= 98.43% test_rate= 98.96% train_err= 0.04755 test_err= 0.03072\n 85 train_rate= 98.57% test_rate= 99.04% train_err= 0.04492 test_err= 0.03182\n 86 train_rate= 98.66% test_rate= 98.95% train_err= 0.04286 test_err= 0.03492\n 87 train_rate= 98.47% test_rate= 98.98% train_err= 0.04568 test_err= 0.03389\n 88 train_rate= 98.45% test_rate= 98.95% train_err= 0.04651 test_err= 0.03171\n 89 train_rate= 98.56% test_rate= 99.17% train_err= 0.04383 test_err= 0.02712\n 90 train_rate= 98.46% test_rate= 98.72% train_err= 0.04630 test_err= 0.03920\n 91 train_rate= 98.57% test_rate= 98.90% train_err= 0.04532 test_err= 0.03080\n 92 train_rate= 98.50% test_rate= 98.92% train_err= 0.04543 test_err= 0.03459\n 93 train_rate= 98.54% test_rate= 98.93% train_err= 0.04574 test_err= 0.03267\n 94 train_rate= 98.55% test_rate= 99.13% train_err= 0.04535 test_err= 0.03075\n 95 train_rate= 98.53% test_rate= 99.08% train_err= 0.04549 test_err= 0.02960\n 96 train_rate= 98.53% test_rate= 98.87% train_err= 0.04578 test_err= 0.03491\n 97 train_rate= 98.59% test_rate= 99.03% train_err= 0.04344 test_err= 0.02963\n 98 train_rate= 98.61% test_rate= 98.85% train_err= 0.04338 test_err= 0.03283\n 99 train_rate= 98.60% test_rate= 99.01% train_err= 0.04426 test_err= 0.02978\n100 train_rate= 98.51% test_rate= 99.02% train_err= 0.04425 test_err= 0.03243\n```\n\nなんと、テストデータの正解率が、99%を超えました。49エポック目で99.02%、最大は、99.17%です。すごいですね。\n\n正解率の変化をグラフ化します。破線が学習データに対する正解率、実線がテストデータです。\n\n```python\nimport matplotlib.pyplot as plt\n\ntimes = np.arange(0, epoch+1)\nplt.figure(figsize=(10,5))\nplt.plot(times, test_rate, label=\"Test Data\", color=\"blue\")\nplt.plot(times, train_rate, label=\"Train Data\", color=\"blue\", linestyle=\"dashed\")\nplt.title(\"Accuracy rate\")\nplt.xlabel(\"epoch\")\nplt.ylabel(\"rate\")\nplt.ylim(0.942,0.998)\nplt.legend()\nplt.grid()\nplt.show()\n```\n\n![generator_graph1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/212365/41bf03fd-58df-5b31-6a5c-ee99c5779816.png)\n\n\n次に、移動距離を2、倍率を0.2、回転を20度として学習してみます。\nデータの生成部分です。\n\n```python\n        # データ生成\n        nx_train_g = generator(nx_train[idx[j:j+batch_size]], shape=(28,28), \n                               x_shift_range=2, y_shift_range=2, x_scaling_range=0.2, y_scaling_range=0.2, rotation_range=20)\n```\n\n学習結果です。\n\n```\n  0 train_rate= 11.67% test_rate= 12.18% train_err= 2.30623 test_err= 2.30601\n  1 train_rate= 63.55% test_rate= 93.91% train_err= 1.08837 test_err= 0.19900\n  2 train_rate= 85.21% test_rate= 95.31% train_err= 0.46272 test_err= 0.14554\n  3 train_rate= 89.46% test_rate= 96.62% train_err= 0.33836 test_err= 0.11102\n・・・\n 93 train_rate= 96.89% test_rate= 98.90% train_err= 0.09795 test_err= 0.03482\n・・・\n100 train_rate= 96.94% test_rate= 98.82% train_err= 0.09778 test_err= 0.03610\n```\n\n## ノード数の変更\nテストデータの正解率が99%を超えました。\nせっかくなので、中間層のノード数を増やして試してみます。\n100エポック後の結果です。\n\n* 移動距離-1、倍率-0.1、回転-10度\n\n```python\nx_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10\n```\n\n|１層ノード数|２層ノード数|学習正解率|テスト正解率|テスト最高|\n|----------:|----------:|--------:|----------:|--------:|\n|  100      |   50      |  98.51  |  99.02    |  99.17  |\n|  200      |  100      |  99.08  |  99.12    |  99.25  |\n|  500      |  250      |  99.38  |  99.19    |  99.31  |\n| 1000      |  500      |  99.47  |  99.21    |  99.28  |\n\n* 移動距離-2、倍率-0.2、回転-20度\n\n```python\nx_shift_range=2, y_shift_range=2, x_scaling_range=0.2, y_scaling_range=0.2, rotation_range=20\n```\n\n|１層ノード数|２層ノード数|学習正解率|テスト正解率|テスト最高|\n|----------:|----------:|--------:|----------:|--------:|\n|  100      |   50      |  96.94  |  98.82    |  98.90  |\n|  200      |  100      |  97.86  |  99.15    |  99.29  |\n|  500      |  250      |  98.36  |  99.35    |  99.36  |\n| 1000      |  500      |  98.56  |  99.34    |  99.47  |\n\nノード数を1000-500まで増やすと最高99.47%になりました。\n折角なので200エポックまで実行してみます。\n\n```\n  0 train_rate=  9.17% test_rate=  9.27% train_err= 2.57723 test_err= 2.57840\n  1 train_rate= 76.72% test_rate= 96.07% train_err= 0.72965 test_err= 0.13537\n  2 train_rate= 89.81% test_rate= 97.06% train_err= 0.32831 test_err= 0.08837\n  3 train_rate= 92.27% test_rate= 97.66% train_err= 0.24845 test_err= 0.07026\n・・・\n 98 train_rate= 98.43% test_rate= 99.47% train_err= 0.04820 test_err= 0.01825\n 99 train_rate= 98.52% test_rate= 99.38% train_err= 0.04612 test_err= 0.02042\n100 train_rate= 98.56% test_rate= 99.34% train_err= 0.04318 test_err= 0.02212\n101 train_rate= 98.58% test_rate= 99.46% train_err= 0.04478 test_err= 0.01981\n・・・\n111 train_rate= 98.58% test_rate= 99.52% train_err= 0.04438 test_err= 0.01741\n・・・\n198 train_rate= 98.93% test_rate= 99.47% train_err= 0.03181 test_err= 0.01622\n199 train_rate= 98.88% test_rate= 99.44% train_err= 0.03284 test_err= 0.01885\n200 train_rate= 98.88% test_rate= 99.45% train_err= 0.03405 test_err= 0.01855\n```\n\nなんと、111エポック目で99.5%を超えました。\n\nMNISTでCNNを使わず、ニューラルネットワークのみでテストデータの正解率が99.5%を超えました。データ拡張は、強力ですね。\n\n# プログラム全体\n\n```python\nimport numpy as np\n# affine変換\ndef affine(z, W, b):\n    return np.dot(z, W) + b\n# affine変換勾配\ndef affine_back(du, z, W, b):\n    dz = np.dot(du, W.T)\n    dW = np.dot(z.T, du)\n    db = np.dot(np.ones(z.shape[0]).T, du)\n    return dz, dW, db\n# 活性化関数(ReLU)\ndef relu(u):\n    return np.maximum(0, u)\n# 活性化関数(ReLU)勾配\ndef relu_back(dz, u):\n    return dz * np.where(u > 0, 1, 0)\n# 活性化関数(softmax)\ndef softmax(u):\n    max_u = np.max(u, axis=1, keepdims=True)\n    exp_u = np.exp(u-max_u)\n    return exp_u/np.sum(exp_u, axis=1, keepdims=True)\n# 誤差(交差エントロピー）\ndef cross_entropy_error(y, t):\n    return -np.sum(t * np.log(np.maximum(y,1e-7)))/y.shape[0]\n# 誤差(交差エントロピー）＋活性化関数(softmax)勾配\ndef softmax_cross_entropy_error_back(y, t):\n    return (y - t)/y.shape[0]\n```\n\n```python\ndef learn(x, t, W1, b1, W2, b2, W3, b3, lr):\n    # 順伝播\n    u1 = affine(x, W1, b1)\n    z1 = relu(u1)\n    u2 = affine(z1, W2, b2)\n    z2 = relu(u2)\n    u3 = affine(z2, W3, b3)\n    y  = softmax(u3)\n    # 逆伝播\n    dy = softmax_cross_entropy_error_back(y, t)\n    dz2, dW3, db3 = affine_back(dy, z2, W3, b3)\n    du2 = relu_back(dz2, u2)\n    dz1, dW2, db2 = affine_back(du2, z1, W2, b2)\n    du1 = relu_back(dz1, u1)\n    dx, dW1, db1 = affine_back(du1, x, W1, b1)\n    # 重み、バイアスの更新\n    W1 = W1 - lr * dW1\n    b1 = b1 - lr * db1\n    W2 = W2 - lr * dW2\n    b2 = b2 - lr * db2\n    W3 = W3 - lr * dW3\n    b3 = b3 - lr * db3\n\n    return y, W1, b1, W2, b2, W3, b3\n```\n\n```python\ndef predict(x, W1, b1, W2, b2, W3, b3):\n    # 順伝播\n    u1 = affine(x, W1, b1)\n    z1 = relu(u1)\n    u2 = affine(z1, W2, b2)\n    z2 = relu(u2)\n    u3 = affine(z2, W3, b3)\n    y  = softmax(u3)\n    return y\n```\n\n```python\nimport gzip\nimport numpy as np\n# MNIST読み込み\ndef load_mnist( mnist_path ) :\n    return _load_image(mnist_path + 'train-images-idx3-ubyte.gz'), \\\n           _load_label(mnist_path + 'train-labels-idx1-ubyte.gz'), \\\n           _load_image(mnist_path + 't10k-images-idx3-ubyte.gz'), \\\n           _load_label(mnist_path + 't10k-labels-idx1-ubyte.gz')\ndef _load_image( image_path ) :\n    # 画像データの読み込み\n    with gzip.open(image_path, 'rb') as f:\n        buffer = f.read()\n    size = np.frombuffer(buffer, np.dtype('>i4'), 1, offset=4)\n    rows = np.frombuffer(buffer, np.dtype('>i4'), 1, offset=8)\n    columns = np.frombuffer(buffer, np.dtype('>i4'), 1, offset=12)\n    data = np.frombuffer(buffer, np.uint8, offset=16)\n    image = np.reshape(data, (size[0], rows[0]*columns[0]))\n    image = image.astype(np.float32)\n    return image\ndef _load_label( label_path ) :\n    # 正解データ読み込み\n    with gzip.open(label_path, 'rb') as f:\n        buffer = f.read()\n    size = np.frombuffer(buffer, np.dtype('>i4'), 1, offset=4)\n    data = np.frombuffer(buffer, np.uint8, offset=8)\n    label = np.zeros((size[0], 10))\n    for i in range(size[0]):\n        label[i, data[i]] = 1\n    return label\n\n# 正解率\ndef accuracy_rate(y, t):\n    max_y = np.argmax(y, axis=1)\n    max_t = np.argmax(t, axis=1)\n    return np.sum(max_y == max_t)/y.shape[0]\n```\n\n```python\ndef print_metrics(epoche, x_train, t_train, y_train, x_test, t_test, y_test, W1, b1, W2, b2, W3, b3):\n    # 予測（学習データ）\n    if y_train is None:\n        y_train = np.zeros_like(t_train)\n        for j in range(0, x_train.shape[0], batch_size):\n            y_train[j:j+batch_size] = predict(x_train[j:j+batch_size], W1, b1, W2, b2, W3, b3)\n    # 予測（テストデータ）\n    if y_test is None:\n        y_test = np.zeros_like(t_test)\n        for j in range(0, x_test.shape[0], batch_size):\n            y_test[j:j+batch_size] = predict(x_test[j:j+batch_size], W1, b1, W2, b2, W3, b3)\n    # 正解率、誤差表示\n    train_rate, train_err = accuracy_rate(y_train, t_train), cross_entropy_error(y_train, t_train)\n    test_rate, test_err = accuracy_rate(y_test, t_test), cross_entropy_error(y_test, t_test)\n    print(\"{0:3d} train_rate={1:6.2f}% test_rate={2:6.2f}% train_err={3:8.5f} test_err={4:8.5f}\".format(epoche, train_rate*100, test_rate*100, train_err, test_err))\n    \n    return train_rate, test_rate, train_err, test_err\n```\n\n```python\ndef generator(img, shape=None, x_shift_range=0, y_shift_range=0, x_scaling_range=0, y_scaling_range=0, rotation_range=0):\n    img_shape = img.shape\n    img_r = img\n    if shape is not None:\n        img_r = img.reshape((img.shape[0],) + shape)\n    d, h, w = img_r.shape\n    mw = int(w/2) # 横方向の中心\n    mh = int(h/2) # 縦方向の中心\n\n    # 乱数\n    x_shift = np.random.rand() * x_shift_range*2 - x_shift_range           # 左右の移動距離\n    y_shift = np.random.rand() * y_shift_range*2 - y_shift_range           # 上下の移動距離\n    x_scaling = 1 + np.random.rand() * x_scaling_range*2 - x_scaling_range # 左右の拡大縮小率\n    y_scaling = 1 + np.random.rand() * y_scaling_range*2 - y_scaling_range # 上下の拡大縮小率\n    xx_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    yx_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    xy_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    yy_rotation = np.random.rand() * rotation_range*2 - rotation_range        # 回転角度\n    # 度→ラジアン\n    rd_xx_rotation = np.radians(xx_rotation)\n    rd_yx_rotation = np.radians(yx_rotation)\n    rd_xy_rotation = np.radians(xy_rotation)\n    rd_yy_rotation = np.radians(yy_rotation)\n   \n    # データ生成\n    img_gen = np.zeros_like(img_r)\n    for y in range(h):\n        for x in range(w):\n            x_gen = int(np.floor(((x - mw + 0.5) * np.cos(rd_xx_rotation) - (y - mh + 0.5) * np.sin(rd_yx_rotation)) * x_scaling + x_shift + mw))\n            y_gen = int(np.floor(((x - mh + 0.5) * np.sin(rd_xy_rotation) + (y - mh + 0.5) * np.cos(rd_yy_rotation)) * y_scaling + y_shift + mh))\n            # はみ出した部分は無視\n            if y_gen < h and x_gen < w and y_gen >= 0 and x_gen >= 0:\n                img_gen[:, y_gen, x_gen] = img_r[:, y, x]\n\n    return img_gen.reshape(img_shape)\n```\n\n```python\n# MNISTデータ読み込み\nx_train, t_train, x_test, t_test = load_mnist('data/')\n\n# 入力データの正規化(0～1)\nnx_train = x_train/255\nnx_test  = x_test/255\n```\n\n```python\n# ノード数設定\nd0 = nx_train.shape[1]\nd1 = 100 # 1層目のノード数\nd2 = 50  # 2層目のノード数\nd3 = 10\n# 重みの初期化(-0.1～0.1の乱数)\nnp.random.seed(8)\nW1 = np.random.rand(d0, d1) * 0.2 - 0.1\nW2 = np.random.rand(d1, d2) * 0.2 - 0.1\nW3 = np.random.rand(d2, d3) * 0.2 - 0.1\n# バイアスの初期化(0)\nb1 = np.zeros(d1)\nb2 = np.zeros(d2)\nb3 = np.zeros(d3)\n\n# 学習率\nlr = 0.25\n# バッチサイズ\nbatch_size = 100\n# 学習回数\nepoch = 100\n# シャッフルフラグ\nshuffle = True\n\n# エポックごとの誤差、正解率格納エリア\ntrain_rate, test_rate, train_err, test_err = np.zeros(epoch+1), np.zeros(epoch+1), np.zeros(epoch+1), np.zeros(epoch+1)\n\n# 誤差、正解率表示\ntrain_rate[0], test_rate[0], train_err[0], test_err[0] = print_metrics(0, nx_train, t_train, None, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n\nfor i in range(epoch):\n    # データシャッフル\n    idx = np.arange(nx_train.shape[0])\n    if shuffle:\n        np.random.shuffle(idx)\n    \n    # 学習\n    y_train = np.zeros_like(t_train)\n    for j in range(0, nx_train.shape[0], batch_size):\n        # データ生成\n        nx_train_g = generator(nx_train[idx[j:j+batch_size]], shape=(28,28), \n                               x_shift_range=1, y_shift_range=1, x_scaling_range=0.1, y_scaling_range=0.1, rotation_range=10)\n        y_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3 = learn(nx_train_g, t_train[idx[j:j+batch_size]], W1, b1, W2, b2, W3, b3, lr)\n\n    # 誤差、正解率表示\n    train_rate[i+1], test_rate[i+1], train_err[i+1], test_err[i+1] = print_metrics(i+1, nx_train, t_train, y_train, nx_test, t_test, None, W1, b1, W2, b2, W3, b3)\n```\n","created_at":"2019-04-14T14:20:26+09:00","id":"21ba5e6c43aea4eb8ad7","tags":[{"name":"機械学習","versions":[]},{"name":"DeepLearning","versions":[]},{"name":"ディープラーニング","versions":[]},{"name":"ニューラルネットワーク","versions":[]},{"name":"深層学習","versions":[]}],"url":"https://qiita.com/Nezura/items/21ba5e6c43aea4eb8ad7"},{"title":"[golang]改行コードを維持して、1行単位にファイルを読み書きする","body":"# はじめに\n数GB単位の様々なテキストファイルをちょっとだけ置換したファイルを作る必要があり、最近勉強をはじめたGo言語で実装しようと思ったところ、色々混乱してしまったので、備忘録がてらここに記載します。\n\n# ソース\n```go:main\npackage main\n\nimport (\n\t\"bufio\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\t// 入力ファイルの指定\n\tsrcFile, err := os.Open(\"./file1.txt\")\n\tif err != nil { log.Fatal(err) }\n\tdefer srcFile.Close()\n\n\t// 出力ファイルの指定\n\tdstFile, err := os.Create(\".file2.txt\")\n\tif err != nil { log.Fatal(err) }\n\tdefer dstFile.Close()\n\n\tr := bufio.NewReader(srcFile)\n\tw := bufio.NewWriter(dstFile)\n\n\tfor {\n\t\trow, err := r.ReadString('\\n') // LF(\\n)まで読み込み。結果、CRLF(\\r\\n)でも問題なし\n\t\tif err != nil && err != io.EOF { log.Fatal(err) }\n\t\tif err == io.EOF && len(row) == 0 { break } // 最終行に改行が無い場合を考慮し、len(row) == 0を入れる\n\n\t\t// ここに加工処理を書く\n    \t// row = strings.Replace(row, \"hogehoge1\", \"hogehoge2\", -1) など\n\n\t\t// 出力ファイルに書き込み\n\t\t_, err = w.WriteString(row)\n\t\tif err != nil { log.Fatal(err) }\n\t}\n\terr = w.Flush()\n\tif err != nil { log.Fatal(err) }\n}\n```\n\n# 解説\nGo言語におけるファイルや標準入出力にはbufioパッケージが良いとのこと。\nbufioには、bufio.readline()や、bufio.Scan()など、一行単位に読み込みするためのメソッドがあるのですが、これらは改行コードがトリムされるので私の目的には合致せず。\nbufio.ReadString('\\n')を使うとLF('\\n')が登場するまで読み込みを行うため、CRLF('\\r\\n')でもLF('\\n')でも想定通りの挙動をします。CR('\\r')だけのファイルを扱うことはないので無視・・。\n\n# 最後に\n普段はPython書いてます。Go言語は始めたばかりで分からないことばかりですが、不備や改善点などあればご指摘ください。\n\n# 参考\n[Go でファイルを1行ずつ読み込む（csv ファイルも）](https://qiita.com/ikawaha/items/28186d965780fab5533d)\n","created_at":"2019-04-14T14:12:47+09:00","id":"eaaa03569cfda8aaeb61","tags":[{"name":"Go","versions":[]},{"name":"入門","versions":[]}],"url":"https://qiita.com/y-moriyama/items/eaaa03569cfda8aaeb61"},{"title":"kafka-nodeのテスト","body":"##### はじめに\nマイクロサービスにおけるサービス間連携でnodejs × kafkaの利用シーンは増えています。\nというわけでnodejs × kafkaの概念実証（PoC）メモ。\nあくまでPoCなんで超簡易的です。\n\n##### ディレクトリ構成\nkafka/\n　├ docker-compose.yml\n　├ node_modules\n　├ mackage.json\n　└ test\n　│　└ kafka-test.js\n\n#### セッティング\n- docker-compose.yml\n\n```\nversion: \"2\"\n\nservices:\n  zookeeper:\n    image: wurstmeister/zookeeper\n    ports:\n      - \"2181:2181\"\n  kafka:\n    image: wurstmeister/kafka\n    ports:\n      - \"9092:9092\"\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    links:\n      - zookeeper\n```\n\n- kafkaトピック作成\n\n```\n$ docker-compose exec kafka /opt/kafka/bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic test\n$ docker-compose exec kafka /opt/kafka/bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic test1\n$ docker-compose exec kafka /opt/kafka/bin/kafka-topics.sh --list --zookeeper zookeeper:2181\n```\n\n- package.json\n\n```\n{\n  \"name\": \"kafka\",\n  \"version\": \"1.0.0\",\n  \"description\": \"kafka-node\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"ava\": \"^1.4.1\",\n    \"chai\": \"^4.2.0\",\n    \"kafka-node\": \"^4.1.0\"\n  },\n  \"devDependencies\": {},\n  \"scripts\": {\n    \"test\": \"ava -v -u\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n- test/kafka-test.js\n\n```\nimport test from \"ava\";\nimport chai from \"chai\";\nimport kafka from \"kafka-node\";\n\n// producerテスト\ntest.serial.cb(\"producer test\", t => {\n    const Producer = kafka.Producer;\n    const client = new kafka.KafkaClient({\n        kafkaHost: \"127.0.0.1:9092\"\n    });\n    const producer = new Producer(client, {\n        partitionerType: 1\n    });\n\n    producer.on(\"ready\", () => {\n        const payloads = [\n            {\n                topic: \"test1\",\n                messages: JSON.stringify({name: \"神崎・H・アリア\", age: 16})\n            }\n            ,{\n                topic: \"test\",\n                messages: [\n                    JSON.stringify({name: \"間宮あかり\", age: 15}),\n                   JSON.stringify({name: \"佐々木志乃\", age: 15})\n               ]\n            }\n        ];\n\n        producer.send(payloads, (err, data) => {\n            t.end();\n        });\n    });\n});\n\n// consumerテスト\ntest.serial.cb(\"consumer test\", t => {\n    const Consumer = kafka.Consumer;\n    const client = new kafka.KafkaClient({\n        kafkaHost: \"127.0.0.1:9092\"\n    });\n    const consumer = new Consumer(\n        client,\n        [{topic: \"test1\", partision:0}],\n        {\n            groupId: \"simple-consumer1\",\n            autoCommit: true,\n            fromOffset: true\n        }\n    );\n\n    consumer.on(\"message\", (message, err) => {\n        const json = JSON.stringify(message.value);\n            chai.assert.isString(json.name);\n            chai.assert.isNumber(json.age);\n            if (json.age === 16) {\n               chai.assert.propertyVal(json.attr,'name','神崎・H・アリア');\n            }\n    });\n    t.end();\n});\n\n```\n\n#### kafka-nodeテスト\n\n```\n$ npm test\n\n> kafka@1.0.0 test /home/vagrant/kafka\n> ava -v -u\n\n\n  ✔ producer test (291ms)\n  ✔ consumer test\n\n  2 tests passed\n```\n\n#### 参考\n[apache kafka quickstart(kafkaの基本的な使い方）](https://kafka.apache.org/quickstart)\n[kafka-node](https://www.npmjs.com/package/kafka-node#producer)\n\n","created_at":"2019-04-14T14:12:29+09:00","id":"f571db36a19806aee491","tags":[{"name":"Node.js","versions":[]},{"name":"docker","versions":[]},{"name":"Kafka","versions":[]}],"url":"https://qiita.com/minarai/items/f571db36a19806aee491"},{"title":"ActiveDirectoryにPowerShellでユーザを一括登録","body":"ユーザアカウント情報を記載したCSVファイルを準備し、これを**Active Directory**に一括登録するスクリプトを作成する。\n**dsadd**コマンドによるものが有名だが、ここでは**Power Shell**で作成してみよう。\n\n# 仕様\n\n- １行目をヘッダーとした次のようなCSVファイルを入力可能で、任意に列を追加できるものとする。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/236222/62b668e1-71ea-05b9-2e14-2bc669ace6cc.png)\n- 姓・名・表示名は、CSVファイルのスタッフコード、スタッフ名から設定する。\n- 所属するグループを `:`区切りで複数指定できる。\n- ユーザごとに個別の初期パスワードを指定できる。\n- ログオン可能時間を指定した場合、そのまま`net user /times`に渡される。\n- アカウントの有効期限を`yyyy/MM/dd`形式で指定できる。\n\n# スクリプト\n\nCSVファイル名を`users.csv`とし、スクリプトと同じフォルダに置く。\n\n```powershell:一括登録スクリプト\nipcsv users.csv -Encoding Default | %{\n  $staffCode = $_.'スタッフコード'\n  # ユーザ定義用の連想配列を作成\n  $users = @{\n    SamAccountName = $staffCode  # ログオン名\n    Name = $_.'スタッフ名'\n    Surname = $staffCode  # 姓\n    GivenName = $_.'スタッフ名'  # 名\n    DisplayName = $staffCode + ' ' + $_.'スタッフ名'  # 表示名\n    Path = 'OU=XXXXX,OU=Users,OU=XXX,DC=xxx,DC=ne,DC=jp'  # OUは固定\n    Description = $_.'AD説明'  # 説明欄\n    UserPrincipalName = $staffCode + '@xxx.xxx.ne.jp'  # ユーザプリンシパル名\n    AccountPassword = (ConvertTo-SecureString -AsPlainText $_.'AD初期パスワード' -force)  # 暗号化したパスワード\n    ChangePasswordAtLogon = $True  # 次回ログオン時にパスワード変更が必要\n    AccountExpirationDate = $_.'AD有効期限'  # アカウントの有効期限\n    Enabled = $True  # ユーザを有効にする\n  }\n  New-ADUser @users  # アカウント追加\n\n  # ログオン可能時間帯\n  if($_.'ADログオン可能時間' -ne '') {\n    $cmdstr = '/c net user ' + $staffCode + ' /DOMAIN /TIMES:' + $_.'ADログオン可能時間'\n    cmd $cmdstr\n  }\n\n  # 所属させるグループ\n  $groups = $_.'AD所属グループ' -split ':'\n  foreach($group in $groups) {\n    Add-ADGroupMember -Identity $group -Members $staffCode\n  }\n}\n```\n\n# 実行結果\nスクリプト内に定義した**OU**の下を確認する。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/236222/0af36cde-715f-5470-4d43-de16a843ee59.png)\n\n# 補足\n\nアカウント有効期限を、例えば作成日の90日後とするなら、次のように修正すると良いだろう。\n\n```powershell\nAccountExpirationDate = (Get-Date).AddDays(90).ToString(\"yyyy/MM/dd\")\n```\n\nログオン可能時間は属性名`logonHours`でも指定できるが、PowerShellだけで行うにはbyte型の配列（1時間1ビット、24x7=168ビット=21byte）を与えなければならず、お勧めできない。\n`net user /times`なら、例えば平日9時〜22時までログインを認める場合に`M-F,09:00-22:00`のように書ける。（カンマが含まれるのでダブルクォーテーションで囲むこと）\n\n繁忙期に派遣社員やバイトを大量に雇用する会社では有用だろう。\n","created_at":"2019-04-14T14:06:30+09:00","id":"6c4324604bec234f050c","tags":[{"name":"PowerShell","versions":[]},{"name":"ActiveDirectory","versions":[]},{"name":"社内SE","versions":[]}],"url":"https://qiita.com/mindwood/items/6c4324604bec234f050c"},{"title":"Elixir ~基本概要つづき~","body":"#ここまでのあらまし\n\n[こちらのサイト](https://dev.to/gumi/elixir-02--30n1) を参照しながらひさびさにQiitaドキュメントをしたためました。\n\n続きをいってみようと思います。\n\n#本題\n無名関数から。\n\n```elixir\niex > sum = fn(a, b) -> a + b end\n#Function<12.128620087/2 in :erl_eval.expr/5>\n```\n\n呼び出し\n\n```elixir\niex > sum.(1, 2) \n3\n```\n\n変数に関数が収められているかを調べるのがis_function/1、アリティの数を調べるのがis_function/2\n\n```elixir\niex > is_function(sum)\ntrue\niex > is_function(sum,2)\ntrue\n```\n\n以前わたしのドキュメントで扱った&記法。\n\n```elixir\niex > sum = &(&1 + &2)\n&:erlang.+/2\niex > sum.(3,4)\n7\n```\n\nここからはリストについて。\n\n```elixir\niex > list = [3.14, :pie, true, \"Apple\"]\n[3.14, :pie, true, \"Apple\"]\niex > length(list)\n4\n```\n\n++や--といった演算子でリストに要素を加えたり差し引いたりすることもできる模様です。\n\n```elixir\niex > list ++[\"Kento\"]\n[3.14, :pie, true, \"Apple\", \"Kento\"]\niex > [\"Π\"]++\n... > [\"Π\"]++ list\n[\"Π\", \"Π\", 3.14, :pie, true, \"Apple\"]\niex > list --[\"Π\",\"Kento\"]\n[3.14, :pie, true, \"Apple\"]\n```\n\nこの際注意しなければならないのはリスト演算子がリストの中身を書き換えるのではないということで、返ってくるのは新しいリストだということです。\nこれがイミュータブル(immutable、公式ドキュメントでしばしば出てくる単語で)ということ、データの書き換えではなくデータの変換が行われている。\nこれは地味なようで非常に重要なポイントだと思われます。\n\nシングルクオーテーションとダブルクオーテーションで囲ったものの違い。\n\n```elixir\niex > i(\"hello\")\nTerm\n  \"hello\"\nData type\n  BitString\nByte size\n  5\nDescription\n  This is a string: a UTF-8 encoded binary. It's printed surrounded by\n  \"double quotes\" because all UTF-8 encoded codepoints in it are printable.\nRaw representation\n  <<104, 101, 108, 108, 111>>\nReference modules\n  String, :binary\nImplemented protocols\n  Collectable, IEx.Info, Inspect, List.Chars, String.Chars\n```\n\n```elixir\niex > i('Hello')\nTerm\n  'Hello'\nData type\n  List\nDescription\n  This is a list of integers that is printed as a sequence of characters\n  delimited by single quotes because all the integers in it represent valid\n  ASCII characters. Conventionally, such lists of integers are referred to\n  as \"charlists\" (more precisely, a charlist is a list of Unicode codepoints,\n  and ASCII is a subset of Unicode).\nRaw representation\n  [72, 101, 108, 108, 111]\nReference modules\n  List\nImplemented protocols\n  Collectable, Enumerable, IEx.Info, Inspect, List.Chars, String.Chars\n```\n\n詳しいことを出てきたinfoの英文で追いかけるのは今回は割愛しますが、ふたつは違う。興味深いです。\n\nタプルへと行きます。\n要素を中括弧で囲い、カンマ区切りにしたもの。\n要素の数を測るには、tuple_size/1。\n\n```elixir\niex > tuple = {3.14, :pie, true, \"Apple\"}\n{3.14, :pie, true, \"Apple\"}\niex > tuple_size(tuple)\n4\n```\n\nelem/2関数で指定した要素の取り出し、put_elem/3で、指定した要素の置き換え。\n\n```elixir\niex > elem(tuple,3)           \n\"Apple\"\niex > put_elem(tuple,3,\"Orange\")\n{3.14, :pie, true, \"Orange\"}\n```\n\n#編集後記\n\nElixirの型の基本について、２回に渡ってさらってゆくことができました。\n参照させていただいているページがElixirの基礎について参考書のような構造になっているので、引き続き備忘録をしたためながらやってゆこうと思います。\n\nうまずたゆまず、頑張ります。\nKento Mizuno\n\n\n\n\n\n\n\n","created_at":"2019-04-14T14:04:13+09:00","id":"a0b57f5290f52583b002","tags":[{"name":"Elixir","versions":[]},{"name":"fukuoka.ex","versions":[]}],"url":"https://qiita.com/kmizuno0211/items/a0b57f5290f52583b002"},{"title":"TypeScriptで \"Object is possibly null\" と怒られたときにすること","body":"メモ書きです。TypeScriptに慣れるためのベアプログラミング的な意味を込めて記事にします。\n[ベアプログラミングについて(引用)](!https://qiita.com/sta/items/6661cfcb57cfefa9a36a)\n\nhttps://github.com/Microsoft/TypeScript/issues/14889\n参考にしたIssue\n\n例えば、画像をアップするところをやっていて、次のようなコンポーネントを扱っているとします。\n(適当にそれっぽい雰囲気にしています)\n\n```jsx\nimport * as React from 'react'\nimport { compose, pure } from 'recompose'\nimport Icon, { IconType } from '../../atoms/Icon/Icon'\nimport * as styles from './ImageUploader.css'\n\ninterface ImageUploaderProps {\n  onChangeImage: (data: any) => void\n}\n\nconst ImageUploader: React.FunctionComponent<ImageUploaderProps> = ({ onChangeImage }) => {\n  return (\n    <div className={styles.container}>\n      <label className={styles.buttonLabel}>\n        <span>\n          <Icon iconType={IconType.IMAGE_UPLOAD_ICON} />\n          アップロード\n        </span>\n        <input\n          hidden\n          id={'file_image'}\n          type=\"file\"\n          accept=\"image/png,image/jpg,image/bmp\"\n          onChange={e =>\n            onChangeImage(targetImage: e.target.files[0])\n          }\n        />\n      </label>\n    </div>\n  )\n}\n\nexport default compose<ImageUploaderProps, ImageUploaderProps>(pure)(ImageUploader)\n```\n\ninputに画像をアップする際、そこからFileオブジェクトを抜き出すときは `files` に配列で格納されているのでこれをindex指定で取り出す必要があります。\n\nしかし、上のコードはこのままだとエラーが出ます。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/109201/4c38b347-cbf0-4894-9152-edfda84c81c0.png)\n\nnullかもしれないオブジェクトに対する操作は認められない、という感じですね。では、nullじゃないことを保証すればよいわけです。ここでは2つ変更します。\n\n## interface変更\nまずinterfaceが雑に `any` を使ってしまっているのでこれを直しましょう。\n\n### 変更前\n```typescript\ninterface ImageUploaderProps {\n  onChangeImage: (data: any) => void\n}\n```\n\n### 変更後\n```typescript\ninterface ImageUploaderProps {\n  onChangeImage: (object: { targetImage: File | null }) => void\n}\n```\n\n## onChange内で、nullの場合に関する切り分けをする\n配列にアクセスする際に、nullでないことを保証します。\n\n### 変更前\n```jsx\n\n<input\n  hidden\n  id={'file_image'}\n  type=\"file\"\n  accept=\"image/png,image/jpg,image/bmp\"\n  onChange={e =>\n    onChangeImage(targetImage: e.target.files[0])\n  }\n/>\n```\n\n### 変更後\n```jsx\n<input\n  hidden\n  id={'file_image'}\n  type=\"file\"\n  accept=\"image/png,image/jpg,image/bmp\"\n  onChange={e =>\n    onChangeImage(targetImage: e.target.files !== null ? e.target.files[0] : null)\n  }\n/>\n```\n\n参考にしたIssueでは、guard文で早めに抜けていました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/109201/533e0059-7118-385c-7178-9fa694847adf.png)\nhttps://github.com/Microsoft/TypeScript/issues/14889#issuecomment-289613908\n\nしかし、onChangeの関数内で同様に抜けようとするよりも、三項演算子でnullを回避するほうが見やすいかと思ってこのように書いています。\nnullが裏のsagaなどに行ってしまうので、そこでの制御はどちらにせよ必要ですね...\n\n## まとめ\n最終的には以下のようになります。\n\n```jsx\n\nimport * as React from 'react'\nimport { compose, pure } from 'recompose'\nimport Icon, { IconType } from '../../atoms/Icon/Icon'\nimport * as styles from './ImageUploader.css'\n\ninterface ImageUploaderProps {\n  onChangeImage: (object: { targetImage: File | null }) => void\n}\n\nconst ImageUploader: React.FunctionComponent<ImageUploaderProps> = ({ onChangeImage }) => {\n  return (\n    <div className={styles.container}>\n      <label className={styles.buttonLabel}>\n        <span>\n          <Icon iconType={IconType.IMAGE_UPLOAD_ICON} />\n          アップロード\n        </span>\n        <input\n          hidden\n          id={'file_image'}\n          type=\"file\"\n          accept=\"image/png,image/jpg,image/bmp\"\n          onChange={e =>\n            onChangeImage(targetImage: e.target.files !== null ? e.target.files[0] : null )\n          }\n        />\n      </label>\n    </div>\n  )\n}\n\nexport default compose<ImageUploaderProps, ImageUploaderProps>(pure)(ImageUploader)\n```\n","created_at":"2019-04-14T14:01:54+09:00","id":"5d4a2f2272b8f1a4a16f","tags":[{"name":"メモ","versions":[]},{"name":"TypeScript","versions":[]},{"name":"React","versions":[]}],"url":"https://qiita.com/fufufukakaka/items/5d4a2f2272b8f1a4a16f"},{"title":"なぜActive Recordからデータを取得するときにorderをつける必要があるのか","body":"勉強会に参加していたとき、orderは必ずつけたほうが良いという話をよく聞いていました。\nつけなくても良いケースもあるのではないか？と個人的に思っていたのですが、プロジェクトが育ってきた時に不具合の元になるかもしれないので、たしかにつけたほうが良さそうだと感じるケースを見つけましたので記事に残そうと思います。\n\n# ケース1（default_scopeにorderがある場合）\n\n例えば、下記のようにdefault_scopeにorderがある場合、`Article.last`の結果が変わってしまいます。\n\n```ruby\ndefault_scope { order(id: :desc) }\n```\n\n# ケース2（has_manyにorderがある場合）\n\n例えば、下記のようにhas_manyにorderがある場合、`Article.find(1).comments.last`の結果が変わってしまいます。\n\n```ruby\nhas_many :comments, -> { order(id: :desc) }\n```\n\n# まとめ\n\n`Article.last`のようにシンプルな取得だから、orderつけなくてもいいや〜って思っていると、何処かのタイミングで思わぬバグが発生する可能性があるなと思うので、できる限りつけていきたいと感じました。\n","created_at":"2019-04-14T13:56:30+09:00","id":"ed2bfe28e12193f891b6","tags":[{"name":"Ruby","versions":[]},{"name":"Rails","versions":[]},{"name":"ActiveRecord","versions":[]}],"url":"https://qiita.com/ruby_kumagoro/items/ed2bfe28e12193f891b6"},{"title":"人の気持を考えてPythonコードを書こう","body":">PythonからSwiftに移行した人の9割は死ぬ\n\nこんなお告げを聞いたことがあります。\nなぜなら、動的な言語ばかり書いているとだんだん<b>人の気持ちが考えられなくなってくる</b>からです。\nそれだけではありません。機械の気持ちすらも考えられなくなります。だから動的言語は罠なのです。\n\nしかし、Pythonerのみなさん。そしてPythonistのみなさん。Pythonにも人と機械の気持ちを考えられる機能があります。\nそれが`Type Annotation`です。\n\n# Type Annotationとは\n\n`Type Annotation`とは、和訳すると「型注釈」です。\n要は変数の型をカッチリ決めておこうということです。\n\n例えば、なんの変哲もないPythonコードがあったとしましょう。\n\n```Python\na = [1, 2, 3]\n```\n\nこいつの型は？と聞かれて、みなさんは右辺の`[1, 2, 3]`という形を見てようやく`list`型だ〜！と理解できます。\n次に、またまた何の変哲もないコード\n\n```Python\na: list = [1, 2, 3]\n```\n\nここでSwift勢が全員歓喜します。そう、`Type Annotation`です。これなら、変数の中身を見なくても`a`が`list`型だとひと目でわかります。\n\nPythonで大規模開発をしたいと考えている人、<b>可読性</b>のためにも今すぐ`Type Annotation`を使いましょう。\n`Type Annotation`を肌で感じたいという人はSwiftを触ってみればいいと思います。\n\nPythonでの詳しい使い方は[こちら](https://docs.python.org/ja/3/library/typing.html)。実は`Generics`型なんかも使えるんですね。すごい。\n\n\n# 型と値の違い\n\n俺が`Type Annotation`を推すのにはもう一つ理由があります。\nそれは、<b>思考の整理のため</b>です。\n\nたとえば、以下の関数があります。\n\n```Python\nimport numpy as np\n\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```\n\nはい。Python使いならお馴染みの何の変哲もないシグモイド関数$\\sigma$です。\n\nこれだけを見て、xが`list`型なのか`np.ndarray`型なのか、はたまた`int`型なのかすぐに見分けがつきませんよね。\nではこれならどうでしょう。\n\n```Python\nimport numpy as np\n\n\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    return 1 / (1 + np.exp(-x))\n```\n\nここで再びSwift勢が歓喜。\n\nこうして、引数と返り値の型をアノテートしてやることで自らの思考の整理になります。\n\n特に初心者が躓きがちなのは**型がごちゃごちゃになる**という問題です。\nこのように、慎重に一つ一つの変数やメソッドの型に気をつける癖を付けることがプログラマへの第一歩と言えるでしょう。<br>\n\n\n\n# 変数の乱用はやめましょう\n\nさあ、これでようやくみんなも`Type Annotation`の重要性がわかってきたと思います。\n\nそれでいざ`Type Annotation`を使ってみると、だんだんこういうのが気持ち悪くなってきませんか？\n\n```Python\na = 1\na = \"hello\"\n```\n\nSwift勢なら大激怒ですね。\n\n変数への異なる型の再代入はまじでキモいので止めたほうが良いことに気づきます。\nいくら動的といえど、型を変えられると再代入を機械に任せることになります。\n\nまた、テスト時に参照を追えなくなるのでつらいです。\nそれなら新しい変数を宣言するほうが100億倍マシです。動的言語に頼るのは止めましょう。\n\n# 機械にも人間にもやさしいプログラマになろう\n\n`Type Annotation`は宣言したところでランタイム時にチェックされないので、もし型をミスっててもエラーを出してはくれません。(出すようにすることもできますが)\n\nしかし、`Type Annotation`を使うことでコードを書く自分も、読む他人も、反映する機械も幸せになれるのです。\nそして、プログラミングのまだ見ぬ可能性に気づくことができるでしょう。これからは積極的に`Type Annotation`を使っていきましょう。\n","created_at":"2019-04-14T13:50:07+09:00","id":"9dd8f040c606df769142","tags":[{"name":"Python","versions":[]},{"name":"型","versions":[]},{"name":"変数","versions":[]},{"name":"可読性","versions":[]}],"url":"https://qiita.com/MasatoTsutsumi/items/9dd8f040c606df769142"},{"title":"AnacondaのPythonをUpdateするときのコンフリクトエラー対策","body":"AnacondaのPythonを3.5系→3.7系にUpdateしようとしたら、\nコンフリクトエラーが起きてインストールできなかったので、\nその時の手順メモ\n\n#経緯\nAnacondaプロンプトで、conda install python=3.7と入力。\nこれで完了かと思いきや、エラーが発生\n\n```console\n>　conda install python=3.7\nFetching package metadata .............\nSolving package specifications: .\n\nUnsatisfiableError: The following specifications were found to be in conflict:\n  - conda-manager -> python 3.5*\n  - python 3.7*\nUse \"conda info <package>\" to see the dependencies for each package.\n```\n\n#解決策\n仮想環境を作成したらインストールできた\nコマンドは以下\nconda create -n 仮想環境名 インストールするパッケージ␣[パッケージ␣...]\n\n途中でProceed ([y]/n)? \nと聞かれるので、yを入力\n\n```console\n> conda create -n py37 python=3.7 anaconda\n.....（略）\n    widgetsnbextension:                 3.4.2-py37_0\n    win_inet_pton:                      1.1.0-py37_0\n    win_unicode_console:                0.5-py37_0\n.....（略）\n\nProceed ([y]/n)? y\n\n.....（略）\nmenuinst-1.4.1 100% |###############################| Time: 0:00:00   4.22 MB/s\nblas-1.0-mkl.t 100% |###############################| Time: 0:00:00   1.24 MB/s\n.....（略）\n\n#\n# To activate this environment, use:\n# > activate py37\n#\n# To deactivate an active environment, use:\n# > deactivate\n#\n# * for power-users using bash, you must source\n#\n```\n最後に表示されるコメント文で、次のように表示された\n\nこの環境をアクティベートするには、以下のように使う：\n\\> activate py37\nアクティベートした環境をデアクティベートするには、\n\\> deactivate\n\n####アクティベートを試す\n現在は3.5系。これを確認してからアクティベートし\nPythonのバージョンがどう変化するかを確認\n\n```console\n[Anaconda3] C:\\Users\\User>python --version\nPython 3.5.4 :: Anaconda 4.0.0 (64-bit)\n\n[Anaconda3] C:\\Users\\User>activate py37\n\n(py37) [Anaconda3] C:\\Users\\User>python --version\nPython 3.7.3\n```\n仮想環境py37では、Pythonのバージョンが3.5系→3.7系になった。\n続いてデアクティベート\n\n####デアクティベート\n\n```console\n(py37) [Anaconda3] C:\\Users\\User>deactivate\n\n[Anaconda3] C:\\Users\\User>\n[Anaconda3] C:\\Users\\User>python --version\nPython 3.5.4 :: Anaconda 4.0.0 (64-bit)\n```\n仮想環境を脱出したら、3.7系→3.5系に戻った\n\n#参考\ncondaのドキュメント\nhttps://docs.conda.io/projects/conda/en/latest/commands/create.html?highlight=create\nhttps://teratail.com/questions/115370\n","created_at":"2019-04-14T13:44:10+09:00","id":"f05a18b94898189113bd","tags":[{"name":"Python","versions":[]},{"name":"Anaconda","versions":[]}],"url":"https://qiita.com/kusanoiskuzuno/items/f05a18b94898189113bd"},{"title":"【STATA】asdocで綺麗な相関係数の表を作成（Wordに出力）","body":"## 目的\n統計ソフトSTATAを用いて、論文に載っているくらいの綺麗な相関係数の表を作りたい。\n\n## 環境\nSTATA13.0\n\n## 手順\n``asdoc``をインストール（すでにインストールされている場合、この手順をスキップ）\n\n```stata\nssc install asdoc \n```\n\n使うファイルを指定。（今回はサンプルデータを利用するため``sysuse...```としてある点に注意。）\n\n```stata\nsysuse auto, clear\n```\n\n``myreg.doc``ファイルに表を出力。\n※``.xls``形式ではうまく出力できなかった。\n\n```stata\nasdoc cor, save(myreg.doc)\n```\n\n下記画像のような結果を得られたら、画像下部の青い``myreg.doc``をクリック。\n![20190414b.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/363036/781b3c27-4287-73a5-b201-bed4de124d56.png)\n\n\n## 結果\n``myreg.doc``ファイルをWordで見ると下記画像のような感じ。\n![20190414a.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/363036/5d54f671-dec6-cd16-59bc-7057496c48ae.png)\n\n## 追記\n変数名の代わりにラベル名を表示したい場合\n\n```stata\nasdoc cor, label\n```\n\n1行目（上記画像の``Variables``の行）にも変数名を表示たい場合\n\n```stata\nasdoc pwcor, nonum\n```\n\n## 参考\n・http://fintechprofessor.com/2018/03/05/export-high-quality-table-correlations-stata-ms-word/\n","created_at":"2019-04-14T13:42:44+09:00","id":"dfc5b000648a72f23043","tags":[{"name":"Word","versions":[]},{"name":"stata","versions":[]},{"name":"asdoc","versions":[]}],"url":"https://qiita.com/c6tower/items/dfc5b000648a72f23043"},{"title":"初学者でもVue/Vuexを[確実に]動かせる記事~はじめてのHelloWorld~","body":"# はじめに\n## 導入\nここ数年のwebの主流(?)となりつつあるSPA(Single Page Application)に興味を持っている方は多いのではないでしょうか?[SPA(Single Page Application)の基本](https://qiita.com/takanorip/items/82f0c70ebc81e9246c7a)\n\n\nこの記事の目標は、「この今風のフロントエンドを実際に動かしてみたい!」と思う初学者の方向けに、VUE.jsを採用してSPAを動かすところまで持って行くことです(筆者も普段はバックエンドをメインに開発していますので大丈夫です。)。\n\nSPAの学習で何が壁かというと、単純なHelloWorld、およびその改良ができるようになるのに、数多くのことを学んでいかなくてはいけません。それに加えてVUEXやVue-Routerなどを初めから同時に学ぼうとすると挫折しやすいです。\nこの記事では初学者目線で、**はじめから丁寧に!**を心がけ、**[確実に]**動かせるように書いていきたいと思います。随時他の記事へのリンクもはりますので、必要があると感じたら目を通して見てください。\n\n## 一連の連載で[確実に]理解すること一覧\n\n- Vue.jsを使ってHelloWorldを出力し、プロジェクト内のファイルの役割や仕組みを理解する **[本記事]**\n\n- コンポーネントとは何かを理解し、HelloWorldを改良してページのQRコードを表示してみる。**[本記事]**\n\n- コンポーネント間の値の受け渡しの基礎を導入し、Vuexの意義を理解した上で導入する\n\n- WebAPIを導入してフロントエンドとバックエンドでデータをやり取りし、実践的なサイトを作り上げる\n\n## 対象\n- プログラミングの経験が(少しでも)ある\n \n- Webプログラミングについて初学者である\n\n- どうせなら動くものを作りたい！\n\n# マシンの環境構築\nこの記事ではVirtualBox/Vagrantを用いた仮想環境をベースに進めていきます。プログラミングについてはやはりLinuxベースの方が進めやすいし、情報量も多いと感じています。WindowsでもVirtualBox/Vagrantは動きますので可能な方はこの際、仮想環境での開発を始めましょう。Virtual Box や Vagrantについての記事は多数あります。\n\n[Vagrant を用いた開発環境での作業\n](https://qiita.com/rerere0101/items/c8846453362fb5393c34)\n\n[Windows10にVirtualBoxとUbuntuをインストール\n](https://qiita.com/pyon_kiti_jp/items/0be8ac17439abf418e48)\n\nこの記事ではOSはUbuntu16.04で進めます。Ubuntu16.04が立ち上がり、コマンドラインが打てる状態になったら次に進みます。\n\n\n# VUE.js でHelloWorldを実行\n## vueの導入\nVueの導入に入ります。まず必須のツールとしてNode.jsとnpm(node package manager)をインストールする必要があります。\n<インストール コマンド>\n\n```インストール\nsudo apt-get update\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n\n<バージョンを安定板に>\n\n\n```バージョンを安定板に\nsudo npm cache clean\nsudo npm install -g n\nsudo n stable\n```\n\n[とりあえず Ubuntu で新しい Node.js, npm をインストール\n](https://qiita.com/kerupani129/items/60ee8c8becc2fe9f0d28)\n\n\nnode.js はPythonやRubyと同様にサーバサイド(webブラウザから見て\"サーバ\"サイド)でJavascriptを用いることのできる実行環境です。文法がJavascriptと同じ新しいプログラミング言語という認識で良いです。npmはパッケージをマネージするものです。Pythonユーザにとってはpipみたいなものとお考えください。\n\n\nパッケージマネージャーが手に入ったので、Vue.jsをインストールします。\n```\nnpm install -g vue-cli\nvue --version\n- 2.9.6\n```\nここまででvueのバージョンが表示できるようになっているはずです。また**npmの他にyarnも導入しましょう。**\n\n`npm install -g yarn`\n\nyarnもパッケージマネージャーですが、より高速に動作します。他にも違いはあるのですが、今回の記事ではyarnを中心に進めます。\n\n## Hello World\n`vue init webpack [フォルダ名]`\nでプロジェクトを作成します。いくつか質問されます。あえて指摘するとすれば\n\n- webpackについては後述\n \n- Vue-routerについてはN\n\n- NpmかYarnについて聞かれるので、知識がある場合はyarnを推奨\n\nです。Vue-RouterについてはSPA環境でのページ遷移を管理するプラグインです。ページ遷移とはつまりアクセスURLについての振り分けや、ページ内のリンクの挿入などを制御している部分です。\n\n後から導入ができるので、必要だと感じた際に導入すればいいです。(Ruby on Railsを学んでいた方はRouter制御の経験があると思います。)\n\n\n\n```\nvagrant@vagrant:~/source_code$ vue init webpack hello\n\n? Project name hello\n? Project description A Vue.js project\n? Author\n? Vue build standalone\n? Install vue-router? No\n? Use ESLint to lint your code? Yes\n? Pick an ESLint preset Standard\n? Set up unit tests Yes\n? Pick a test runner jest\n? Setup e2e tests with Nightwatch? Yes\n? Should we run `npm install` for you after the project has been created? (recommended) yarn\n\n   vue-cli · Generated \"hello\".\n\n\n# Installing project dependencies ...\n# ========================\n\nyarn install v1.15.2\ninfo No lockfile found.\n[1/5] Validating package.json...\n[2/5] Resolving packages...\nwarning autoprefixer > browserslist@2.11.3: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\nwarning css-loader > cssnano > autoprefixer > browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\nwarning css-loader > cssnano > postcss-merge-rules > browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\nwarning css-loader > cssnano > postcss-merge-rules > caniuse-api > browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\nwarning eslint > file-entry-cache > flat-cache > circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor.\nwarning nightwatch > proxy-agent > socks-proxy-agent > socks@1.1.10: If using 2.x branch, please upgrade to at least 2.1.6 to avoid a serious bug with socket data flow and an import issue introduced in 2.1.0\nwarning webpack-bundle-analyzer > bfj-node4@5.3.1: Switch to the `bfj` package for fixes and new features!\n[3/5] Fetching packages...\ninfo fsevents@1.2.7: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.7\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[4/5] Linking dependencies...\n[5/5] Building fresh packages...\nsuccess Saved lockfile.\nDone in 20.92s.\n\n\nRunning eslint --fix to comply with chosen preset rules...\n# ========================\n\nyarn run v1.15.2\n$ eslint --ext .js,.vue src test/unit test/e2e/specs --fix\nDone in 0.94s.\n\n# Project initialization finished!\n# ========================\n\nTo get started:\n\n  cd hello\n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack\n```\n\nTo get started の通り、\n`cd hello`\n`yarn run dev`\n\nを実行して見てください。compile successfully!の文字がでたら成功です。webサーバが起動します。\nなお、vagrantで環境を構築した場合、IPアドレスを指定していることがあります。その際には\n`ifconfig`\nコマンドをコマンドラインにうって表示されたipでwebサーバを起動します。\n例えば\n`yarn run dev --hot --host [IPアドレス]`\nと打ってみてください。ブラウザでアクセスして、以下のような画面が表示されたら成功です。\n<img width=\"1362\" alt=\"スクリーンショット 2019-04-14 11.14.53.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/134021/927c057b-b71c-e486-58a0-55b1a48b490f.png\">\n\n## Hello Worldが出力された仕組み\n変更を加えて行くためにプロジェクト内のファイルがどうなっているのかを見て行くことにします。\n### index.htmlとwebpackについて\nはじめにプロジェクトディレクトリのホームに置いてあるindex.htmlについて\n\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title>hello</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n```\nここで重要なのは<body>内の二行\n\n```\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n```\nです。Javascriptを用いた動的webページでは、このタグ(ここではタグにid='app'がついている)に対して操作をし、描写します。\n*「htmlのコードはたったこれだけなのになんでHelloworldのページはあんな感じになったの?」*　と思った方、このid='app'の部分にjavascriptでweb描写のためのコードを流し込んでいるからです。\n\nまた、javascriptやjQueryを使っていた方は\n*「Javascriptのコードを読み込む記述がどこにもない」*　と思われたかもしれません。ここで思い出してもらいたいのが**webpack**についてです。\n**webpackはCSSやJavascriptファイル、画像ファイル、フォントなど(アセットファイルなんて言い方もします)を一つの実行ファイル、例えばbundle.jsという一つのファイルで吐き出す**ためのプラグインです。C言語などのコンパイル型言語を扱っていた方はイメージがしやすいと思います。例えば、と言ったのには理由があって、このwebpackについての設定は*webpack.config.js*といったファイルに記述することでカスタマイズできます。これ以上の説明については、他のわかりやすい記事に譲ることにします。\n\n[フロントエンドエンジニア必見！JavaScript開発現場で人気の「Webpack」とは？\n](https://ferret-plus.com/6337)\n\n[webpack.config.jsがわからない\n](https://qiita.com/one-kelvin/items/b810aafb6b5ef90789a3)\n\nこの吐き出したファイル(bundle.js)を読み込むための一文がindex.htmlにインサートされます。\nそれが\n`<!-- built files will be auto injected -->`\nの箇所です。まとめると、ブラウザとして読み込んでいるのはindex.htmlで、bundle.jsファイルを読み込んでおり、そのbundle.jsの実態は複数のCSS/JSといったファイルであるということです。\n\n### package.jsonについて\nそれぞれのプロジェクト毎に必要な外部プラグインは異なります。「自分が作成しているwebアプリはこのようなプラグインを使っています」というのを表示しているのがpackage.jsonです。\bnpmやyarnで新しいプラグインをinstall(yarnならadd)するたびにpackage.jsonに追記されていきます。\n`yarn add [ターゲット]`\nで外部からプラグインを読み込む際に**-Dオプション**をつけるとpackage.json内の**\"devDependencies\"**に記述されます。githubなどで配布する際に、package.jsonも一緒に配布することで関連するプラグインで何が必要なのかがわかるようになります。**\"devDependencies\"については開発環境のみで必要で実行環境では必要なし**ということを表します。\n\n\n### srcディレクトリの中身(大事)\nホームにあるsrcディレクトリの中身について、プロジェクトの作成の際に**routerをN**にした方は階層は以下のようになっているはずです。\n\n```\nvagrant@vagrant:~/source_code/hello/src$ tree .\n.\n├── App.vue <-- 単一コンポーネント\n├── assets\n│   └── logo.png\n├── components\n│   └── HelloWorld.vue  <--単一コンポーネント\n└── main.js <--単一コンポーネント達の登録\n\n2 directories, 4 files\n```\n\nまず、App.vueやcomponents/HelloWorld.vueについて、これらはVueの世界で**単一コンポーネント**と呼ばれるものです。\n\n[単一コンポーネントについて](https://qiita.com/tkhr/items/ac22019c891fe8fa5f91)\n\n何が嬉しいかというと*「パーツを構成するために必要な HTML・CSS・JSをひとまとめ に」*できるところです。VueやReactなどは**アプリケーションは部品やパーツの組み合わせでできているという考え方**に基づいています。\nこれらの単一コンポーネントを表す.vueファイルはそのファイル単独でwebページ中の何かの部品を表していると考えればいいです。また文法の大半は従来のHTML/CSS/Javascriptに基づいています。\n\nvueファイルの構成は以下のようになっています。\n\n```\n<template>\n<!-- 構成を記述。HTMLに相当。　-->\n</template>\n\n<script>\n<!-- 操作を記述。Javascriptに相当 -->\n</script>\n\n<style>\n<!-- コンポーネントのスタイリングを記述。CSSに相当 -->\n</style>\n\n```\n\n\n試しにHelloWorld.vueを見ると、構成はtemplate内に書かれていることがわかります。\n\n\n```HelloWorld.vue\n<template>\n  <div class=\"hello\">　<!-- scriptから操作される. コンポーネント内ではdivは一つのみ\n    <h1>{{ msg }}</h1>  <!-- scriptからデータを受け取り表示している箇所\n    <h2>Essential Links</h2>\n    <ul>\n      <li>~省略~</li>\n      <li>~省略~<li/>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld', // コンポーネントには大文字の単語二つ程度の組み合わせで名前付け \n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App' // コンポーネントの保持するデータ\n    }\n  }\n}\n</script>\n```\n\n例えばdata()内部を好きな文字列に変更してみてください。ブラウザを再読み込みすることで、msgの部分で表示される文字列が変わったことがわかると思います。コンポーネントはこのようにして記述していきます。コンポーネントの利点の一つに、一度作ってしまったら使い回しが自由自在ということがあります。今回作ったHelloWorld.vueを使い回しているのがApp.vueです。**App.vueはページ全体をさす単一コンポーネントであり、絵を書く場面で言うとキャンバスのようなもの**とお考えください。\n\n[Vue.js いろいろまとめ\n](https://qiita.com/SatoTakumi/items/36204b04e5743d666a26)\n\n```App.vue\n<template>\n  <div id=\"app\">\n    <img src=\"./assets/logo.png\">\n    <HelloWorld/> <!-- ここで読み込んだコンポーネントを配置\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld' // この部分でコンポーネントファイルを読み込んでいる。\n\nexport default {\n  name: 'App', // このファイル自身もコンポーネントなので名前をつける。\n  components: { // 他のコンポーネントを読み込みますよ、と宣言。\n    HelloWorld\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n```\n\nこれらのコンポーネントの登録および、コンポーネントのnewを扱うのがsrc内のmain.jsです。main.jsのみスコープ的にはグローバルになることに注意しましょう。\n\n```src/main.js\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  components: { App },\n  template: '<App/>'\n})\n```\n\n# Hello Worldを改良してみよう\n今回はHelloWorldにコンポーネントを追加してみましょう。QRコードを生成するコンポーネントとしてqriouslyというものが提供されています。このコンポーネントを外部から読み込んでみましょう!この場合にもyarnを使います。\n\n`yarn add vue-qriously`\n\nまた導入したコンポーネントを配置します。HelloWorld.vueを導入する時には見慣れなかった一文として、src/App.vue内に書いた**Vue.use**があります。外部のvue.js用プラグインを導入する際には記述をします。なおtemplateにも配置をさすための一文が加わっていることに注意してください。\n\n[Vue.use( )を書く場合と書かない場合\n](https://qiita.com/fuqda/items/90073e3cd0987c82553d)\n\n\n```src/App.vue\n<template>\n  <div id=\"app\">\n    <qriously value=\"Hello World!\" :size=\"200\" /> <!-- ここに コンポーネントを配置 -->\n    <HelloWorld/>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport HelloWorld from './components/HelloWorld'\nimport VueQriously from 'vue-qriously' // 外部コンポーネントを読み込み\n\nVue.use(VueQriously) // Vue.use を使って外部のvue.js用コンポーネントを使いますと宣言!\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n    VueQriously //VueQriouslyをコンポーネント\n  }\n}\n</script>\n```\n\n\nこれでページを更新してみます。QRコードが表示されたら成功です。\n<img width=\"837\" alt=\"スクリーンショット 2019-04-14 13.22.35.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/134021/43c0c203-a61d-4220-586e-987403174423.png\">\n\n\n\n# おわりに\n今回の記事ではVUE.jsを使い始める環境の構築、VUE.jsの実行について触れました。また改良を加えるために最低限しておくべき内容をまとめました。細かな部分については本記事だけでカバーしきれないため、他の記事を参照していただきたく思います。次の記事ではコンポーネント間の値の受け渡しについての基礎、Vuexの導入、そしてWEBAPIを導入してフロントエンドとバックエンドの接続について触れたいと思います。\n","created_at":"2019-04-14T13:38:00+09:00","id":"f799a60c4e505ff0e3d3","tags":[{"name":"JavaScript","versions":[]},{"name":"AngularJS","versions":[]},{"name":"vue.js","versions":[]},{"name":"React","versions":[]},{"name":"Vuex","versions":[]}],"url":"https://qiita.com/rerere0101/items/f799a60c4e505ff0e3d3"},{"title":"【Java】axis2のSOAP StubにWS-SecurityのUsername Tokenを設定する実装方法メモ","body":"いろいろ探したけど具体的な実装方法に関するhintがStackOverFlow(しかも英語…)にしかなかったので備忘のためにメモ。\n\nStackOverFlowの出展は以下\nStackOverFlow:https://stackoverflow.com/questions/7910776/adding-user-password-to-soapheader-for-webservice-client-call-with-axis2\n著者:https://stackoverflow.com/users/957076/shiv-gopal\n（この人、自力で解決したらしい（I resolve the issue myself)、、、すげーなー）\n\nほとんどこの人の回答通りだがそのままやるとエラーになったので下記コメント部分の通りの追加修正を施している。\n\n```java\n\nOMFactory omFactory = OMAbstractFactory.getOMFactory();\nOMElement omSecurityElement = omFactory.createOMElement(new QName( \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\", \"Security\", \"wsse\"), null);\n\nOMElement omusertoken = omFactory.createOMElement(new QName(\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\", \"UsernameToken\", \"wsu\"), null);\n// createOMElementの引数QNameの第一引数にWS-SecurityのURIを指定\nOMElement omuserName = omFactory.createOMElement(new QName(\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\", \"Username\", \"wsse\"), null);\nomuserName.setText(\"myusername\");\n// createOMElementの引数QNameの第一引数にWS-SecurityのURIを指定\nOMElement omPassword = omFactory.createOMElement(new QName(\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\", \"Password\", \"wsse\"), null);\nomPassword.addAttribute(\"Type\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\",null );\nomPassword.setText(\"mypassword\");\n\nomusertoken.addChild(omuserName);\nomusertoken.addChild(omPassword);\nomSecurityElement.addChild(omusertoken);\nstub._getServiceClient().addHeader(omSecurityElement);\n```\n\n追記修正点として、StackOverFlowの回答では、QNameオブジェクトつくるときに第一引数に空文字を指定しているが、これだと実行時に「java.lang.IllegalArgumentException: Cannot create a prefixed element with an empty namespace」が発生する。\nなので明示的にWS-SecurityのURIを指定させている。\nだからたぶんコレ回答の誤記じゃないかと思うのだが…なんかやり方あるのかな。\n\nまた、omuserName.setText(\"myusername\");とomPassword.setText(\"mypassword\");に自身のユーザーとパスワードを設定する。\n\nWS-Securityの「仕様」や「概念」に関しては、検索すればそこそこ出てくるのだが、具体的な実装方法があまり見つからず、仮に見つかってもaixsのバージョンが違うみたいで気軽にsetHeaderとかできなかったりして、結構困った。\n<A HREF=\"http://axis.apache.org/axis2/java/core/apidocs/org/apache/axis2/client/Stub.html\" target=\"_blank\">aixs2のStub</A>はServiceClient取り出す以外は全てprotectedになっていて、外からはほとんど何もできなく、<A HREF=\"http://axis.apache.org/axis/java/apiDocs/org/apache/axis/client/Stub.html\" target=\"_blank\">axis1のStub</A>に比べて自由度が非常に制限されている印象である。\n今回のように、headerの設定方法にはなかなか苦労させられた。\n\n","created_at":"2019-04-14T13:33:33+09:00","id":"5f94af070de3012a4a1b","tags":[{"name":"Java","versions":[]},{"name":"SOAP","versions":[]},{"name":"axis","versions":[]}],"url":"https://qiita.com/rmrmrmarmrmrm/items/5f94af070de3012a4a1b"},{"title":"ffmpeg nvenc における GPU ベンチマーク","body":"# 目的\n新しいアーキテクチャってハードウェアエンコする時に有効なの？\nって思ったので\nまとめも兼ねて\n\n# 環境\n |HW List\n:-:|---\nCPU | i7-920 @2.66GHz  \nM/B | P6T Delux v2\nMEM | DDR3-1066 12GB\nSSD | WD 128GB\n\n  |SW List\n:-:|---\nOS  | Ubuntu 18.04\nnvidia driver | 390.116\nffmpeg version | n4.1\n\n# GPU\n何個か持ってるけど nvenc 走れたのは以下\n\n | GTX670 | GTX980\n:-: | :-:| :-:\nArchitecture | Kepler | Maxwell\nTechnology | 28nm | 28nm\nShaders | 1344 | 2048 \nGPU Clock | 915MHz | 1126MHz\nMemory | GDDR5 2GB | GDDR5 4GB\n\n# コマンド\n```\ntime ffmpeg -i ypt.mov -b:v 20M -c:v h264_nvenc ypt.mp4\n```\nh264で入力動画（130秒）を 20Mbps で mov -> mp4 変換する\nなお CPU エンコでは -c:v h264 を代わりに使用する\n\n# リザルト\n結果は3回試行の中央値\n\n使用プロセッサ | エンコード時間 | CPU比\n:-: | :-:| :-:\ni7-920 | 416秒 | x1.0\nGTX670 | 98秒 | x4.2\nGTX980 | 69秒 | x6.0\nGTX980 + GTX670 | 70秒 | x5.9\nGTX670 + GTX980 | 70秒 | x5.9\n\n#結論\n・新しいやつは強い\n","created_at":"2019-04-14T13:31:54+09:00","id":"4549924b56517d452516","tags":[{"name":"ffmpeg","versions":[]},{"name":"NVENC","versions":[]}],"url":"https://qiita.com/Soleiyu/items/4549924b56517d452516"},{"title":"Automotive SPICE 3.0 実践ガイドブック　入門編　読み進め　１章","body":"[Automotive SPICE 3.0 実践ガイドブック入門編](https://www.amazon.co.jp/dp/4822200566/)の読み進めです。\n自分向けのノートとして記録します。\n#1 概要\n##1-1 誕生の経緯と動向\n開発体制の多様化\n⇒✖技術者同士の阿吽の呼吸\n　〇共通言語での根拠の共有\n\nISO26262　システムの故障、誤作動での危険を回避するための要求をまとめている。\n\n\n##1-2 改善活動の基本的考え方\n###改善活動のマネジメントのためのPDCAサイクル\n- PDCAサイクル\n\n改善活動が事業目標と紐づくことが前提⇒でないと経営層と管理層の理解を得られない。\n改善活動のPDCAには⇒運営の責任者による「目標の周知」、「リソース提供」といったインフラの確率が必要。\n\n- 改善活動PDCA\n   - 改善目標設定（定量的）\n      - 現状把握\n      - 分析した弱みに対する改善策（全ての弱みに対処しなくてもよい）\n\n改善策をパイロット実施し、効果を確かめる。\nOKなら組織標準プロセスを定義する。\n\n- 作業タスク\n- 手順\n- 適用技術・ツール\n- 必要スキル・役割\n\n以上を整理する。測定の尺度も定義すること。\n改善策を試行したら、測定データから有効性を検証する。\n\n\n###段階的な目標設定の考え方\n関係者の慣れ・学習を想定して\nグループ ⇒ プロジェクト ⇒ 小組織 ⇒ 大組織　と段階的な目標を設定する。\nまた逆方向で、\n組織の目標を想定して ⇒ 中間目標を立て ⇒ プロジェクトレベルの活動を始める。\n\n###プロジェクトレベルの改善\n目標とリソースのギャップ⇒設計方法の見直し、テストの効率化\n\n###組織レベルの改善\n各プロジェクトの改善内容を展開する。\n【注意】メンバーに改善活動の経験がないと、展開された標準プロセスの意味が理解できない。\nプロセス実績を蓄積する。\n\n###事業レベルの改善\n実績データの分析から。\n\n\n## 車載システム開発における改善活動\n失敗事例を参考として、改善活動の勘所を説明。\n\n### 失敗事例とその要因\n- プロジェクトはSPICEの目標レベルを達成したが、メンバーが意味を感じていない。\n- メンバーがプロセス改善の横展開の必要性を感じていない。\n- 何のための、誰のための改善かの理解がされていない。\n\n### 失敗の共通要因\n■改善目的と手段の入れ替わり「SPICEの能力レベルを達成する！」\n　能力レベルを達成する！ではなく、あくまで「日程遅延を少なくする」、「コストを低減する」といった具体的な目標で改善活動を実施しないとメンバーに達成感がわかない。\n\n■改善活動の範囲がパイロット（改善対象として初めに実施される）プロジェクトに限定されている。\n　プロジェクト限定で言われたことだけをやればいい。⇒横展開ができない。\n\n### 改善に対する期待\n- プロジェクトメンバー層の改善活動への期待\n   - 技術者自身が成長する？\n   - 上手くいった達成感が得られるか？\n   - 納得する評価が得られるか？\n- 管理者層の改善活動への期待\n   - 部門がかかえる課題を意識している？\n   - 個人のノウハウを集合知として共有できている？\n   - 複数のプロジェクトの状況を一元的に管理できている？\n- 経営層の改善活動への期待\n   - 顧客満足度はあがるのか？\n   - 部門間が協調して相乗効果が出るのか？\n   - 経営判断のスピード、競争力が向上するのか？\n\n### 著者が推奨するアプローチ\n切っ掛けの大半は取引先からの要求。⇒組織力強化の機会ととらえる。\n\n■中長期の段階的な目標設定（管理者層の責任）\n\n- ステージ１：開発の基礎力強化\n  - プロセスモデルに基づいた標準プロセスの構築と展開\n  - プロセス改善活動を通して、改善基盤を構築\n     - 「成果」：初めて構築した標準プロセス、改善活動の経験蓄積\n     - 納期の問題もあって、後継プロジェクトには適用しやすいが、横展開にはリスクがある。\n- ステージ２：組織力＆組織運営力強化（事業部）：本書対象外\n  - モノづくりの土台を構築し、組織力を強化\n  - マネジメントサイクルを構築し、継続的製品価値を生み出す組織力を強化\n  - 指標、データ収集、分析の仕組み\n     - 開発対象の製品に必要な人材リソース、アーキテクチャ、手法を体系化する。\n     - 「成果」：ノウハウが自然とたまる、活用できる標準プロセスができる。\n- ステージ３：企業競争力強化（全社）：本書対象外\n  - カイゼンの定着から、企業文化の形成と企業成長を継続させる。\n  - 必要に応じてカイゼンの革新\n\n\n\n　\n\n","created_at":"2019-04-14T13:28:26+09:00","id":"ad80d693e8de74eddc4d","tags":[{"name":"Automotive_SPICE","versions":[]}],"url":"https://qiita.com/kcha4tsubuyaki/items/ad80d693e8de74eddc4d"}]]
